{
    "id": "bitcointranscripts+austin-bitcoin-developers+2018-08-17-richard-bondi-bitcoin-cli-regtest",
    "title": "Bitcoin CLI and Regtest",
    "body_formatted": "{\"type\":\"paragraph\",\"text\":\"Clone this repo to follow along: <https://github.com/austin-bitcoin-developers/regtest-dev-environment>\"}, {\"type\":\"paragraph\",\"text\":\"<https://twitter.com/kanzure/status/1161266116293009408>\"}, {\"type\":\"heading\",\"text\":\"Intro\"}, {\"type\":\"paragraph\",\"text\":\"So the goal here as Justin said is to get the regtest environment set up. The advantages he mentioned, there is also the advantage that you can mine your own coins at will so you don\u2019t have to mess around with testnet faucets. You can generate blocks as well so you don\u2019t have to wait for six confirmations or whatever or even the ten minutes. You get confirmations right away and that\u2019s one of the things we will be going through. Bitcoin Core is what we are going to be using. Does anybody not have it installed yet? We\u2019ll go through and I\u2019ll show everything with my setup I got here. You can follow along. Also there is this repository here, if you can download this repository that would be helpful. Once you\u2019ve got Bitcoin Core set up you run some scripts that will set up three nodes in regtest mode. So you\u2019re going to be running three nodes on your laptop which starts with zero blocks. You\u2019ve got a clean blockchain and if it starts\u2026 you can delete it. You don\u2019t really have to worry about resources. It is one of the advantages of regtest. I guess we can start cloning the repo. Shall I just dive in and start demonstrating?\"}, {\"type\":\"heading\",\"text\":\"Demo\"}, {\"type\":\"paragraph\",\"text\":\"In the repository we\u2019ve got some scripts. First off we want to do the run script which will get us up and running and get all three nodes if we have our configurations set. I\u2019m going to crank it up here. If you guys are ready you can try to crank it up. If you have problems we can stop and try to figure out what they are.\"}, {\"type\":\"paragraph\",\"text\":\"`./run.sh`\"}, {\"type\":\"paragraph\",\"text\":\"We\u2019ll show the scripts as we go through, that\u2019s a good idea.\"}, {\"type\":\"paragraph\",\"text\":\"Q - Is it just like a bash script?\"}, {\"type\":\"paragraph\",\"text\":\"A - Yeah. If you are on Windows you can just change it too .bat. It is just command line. This is assuming you have bitcoind in your PATH. The Bitcoin version number, however you set it up, if you do the default install it is going to be bitcoin, the version number, .bin. If you have that in your PATH you get that up and running.\"}, {\"type\":\"paragraph\",\"text\":\"Q - For those who don\u2019t know what is bitcoind?\"}, {\"type\":\"paragraph\",\"text\":\"A - bitcoind is the Bitcoin daemon which is your node implementation. It is kind of a black box that communicates to the other nodes and sends transactions, receives transactions, it is your full node.\"}, {\"type\":\"paragraph\",\"text\":\"Q - You can think of it basically as the client you would see in Bitcoin Core but without a head? It is just running on the server.\"}, {\"type\":\"paragraph\",\"text\":\"A - Yeah\"}, {\"type\":\"paragraph\",\"text\":\"Q - So what do these commands do?\"}, {\"type\":\"paragraph\",\"text\":\"A - The -regtest is obviously regtest which will mean you don\u2019t connect to mainnet or testnet. You\u2019ve got your own local environment. The -daemon at the end means it is going to run in the background. You see Bitcoin server starting and I still have my command prompt. If you try to use this without the daemon you\u2019d be locked there and your console would be locked up.\"}, {\"type\":\"paragraph\",\"text\":\"Q - What about the datadir?\"}, {\"type\":\"paragraph\",\"text\":\"A - We have Alice and then we have a data directory of Bob. The top one doesn\u2019t have one because it goes to the default. Whenever you install it it should be home/user/.bitcoin/bitcoin.conf That\u2019s why there\u2019s not one there. Alice, we\u2019ll look at her. Really secure passwords, don\u2019t try to steal any money from Alice here. We set up some unique ports for it and we\u2019re adding nodes to it so she can talk to Bob and she can talk to the default regtest node.\"}, {\"type\":\"paragraph\",\"text\":\"Q - So this is just a bitcoind configuration file?\"}, {\"type\":\"paragraph\",\"text\":\"A - It is bitcoin.conf for bitcoind. Or if you run Bitcoin-Qt it will look at the same one.\"}, {\"type\":\"paragraph\",\"text\":\"Q - So how are Alice and Bob are different?\"}, {\"type\":\"paragraph\",\"text\":\"A - They have different ports. These are just random numbers, they just had to be unique. So you can see Bob is 18446, the default port for regtest is 18444, this is 18445. And then the same thing for the RPC ports. There\u2019s a default of 18443, there\u2019s this random thing that Justin made up and then Bob has another random thing that Justin made up.\"}, {\"type\":\"paragraph\",\"text\":\"Q - Ok so when it says `port=` that it is what Alice is running and then the other two are how to connect to these other two peers? It is a way of bootstrapping our little mini network of 3?\"}, {\"type\":\"paragraph\",\"text\":\"A - Right.\"}, {\"type\":\"paragraph\",\"text\":\"So if I go back to my command prompt. I\u2019m up and running.\"}, {\"type\":\"paragraph\",\"text\":\"Q - You only actually really need to add one of them and you will discover the other peers, `addnode` is a luxury?\"}, {\"type\":\"paragraph\",\"text\":\"A - There is no peer discovery in regtest. That is true if you\u2019re on testnet but not on regtest. No peer discovery, that\u2019s one of the limitations. You trade being able to mine coins at will for not having peer discovery. You do have pretty much most of the other features, there may be a few that are missing.\"}, {\"type\":\"paragraph\",\"text\":\"Q - You can also right now confirm that it is working by looking in the Alice and Bob directories? You\u2019ll have chainstate\u2026\"}, {\"type\":\"paragraph\",\"text\":\"A - Sure. I have a regtest directory that started up. I deleted these before I started. But what we really want to do is verify through the CLI or through some of these other tools that we want to look at.\"}, {\"type\":\"paragraph\",\"text\":\"We\u2019ve got aliases.sh, is a convenient script. We don\u2019t have to type port 99 whatever for Alice and port 99 whatever for Bob. We can just create these aliases. Right now I\u2019ve got the default. The -regtest gets us on the network and I want to put in a command.\"}, {\"type\":\"paragraph\",\"text\":\"`bitcoin-cli -regtest getpeerinfo`\"}, {\"type\":\"paragraph\",\"text\":\"You\u2019ve got id 2 and their address.\"}, {\"type\":\"paragraph\",\"text\":\"Q - What command did you do?\"}, {\"type\":\"paragraph\",\"text\":\"A - getpeerinfo. This is a way to see exactly who we\u2019re talking to and some additional information. We\u2019re running the same client so they\u2019ll all have the same version and a lot of the same information. The main thing is we\u2019ve got the address, here\u2019s the port we\u2019re connected on.\"}, {\"type\":\"paragraph\",\"text\":\"Q - That\u2019s the peer?\"}, {\"type\":\"paragraph\",\"text\":\"A - Yeah these are the peers. We actually have our own little network here. Other than verifying that there is something in those folders we can verify that yeah we are communicating.\"}, {\"type\":\"paragraph\",\"text\":\"That was from your default point of view. We also want to have a point of view from Alice and Bob. That\u2019s where the aliases come in. Let me pull that up. The Bitcoin CLI, there\u2019s your port, there\u2019s your data directory. The port in this is your RPC port. Now you can type in `alice-cli` instead of typing `bitcoin-cli -port=9334 -datadir=alice` each time, we have a shortcut.\"}, {\"type\":\"paragraph\",\"text\":\"`source aliases.sh`\"}, {\"type\":\"paragraph\",\"text\":\"Now I can do the same thing.\"}, {\"type\":\"paragraph\",\"text\":\"`alice-cli getpeerinfo`\"}, {\"type\":\"paragraph\",\"text\":\"Now I have Alice\u2019s point of view of the network. Same thing for Bob.\"}, {\"type\":\"paragraph\",\"text\":\"`bob-cli getpeerinfo`\"}, {\"type\":\"paragraph\",\"text\":\"It is really hard to follow in the CLI but we have a solution to that, don\u2019t worry. So let\u2019s see how we\u2019re doing cash wise.\"}, {\"type\":\"paragraph\",\"text\":\"`bitcoin-cli -regtest getbalance`\"}, {\"type\":\"paragraph\",\"text\":\"Ok no money, sad state of affairs. But we don\u2019t have to mess with testnet faucets, we can generate our own. There is a command called generate so we use that and then the number of blocks you want to generate.\"}, {\"type\":\"paragraph\",\"text\":\"`bitcoin-cli -regtest generate 1`\"}, {\"type\":\"paragraph\",\"text\":\"So we generate a block. There\u2019s the hash of the block we generated. Kind of unexciting, nothing but a coinbase in there but that\u2019s the way things work.\"}, {\"type\":\"paragraph\",\"text\":\"Q - If only you could find a way to sneak that into the real chain.\"}, {\"type\":\"paragraph\",\"text\":\"A - No I\u2019ve got something. Hang tight, I\u2019ve got you covered. You don\u2019t need a real chain, that\u2019s the whole point of this. If you could get up and running this fast but the world don\u2019t work that way.\"}, {\"type\":\"paragraph\",\"text\":\"So I generated a block, I want to get my balance again.\"}, {\"type\":\"paragraph\",\"text\":\"`bitcoin-cli -regtest getbalance`\"}, {\"type\":\"paragraph\",\"text\":\"Oh no I\u2019m still broke. What happened? You need 100 blocks before you can claim your mined coins. We\u2019re simulating mining, we\u2019re still simulating the same way. I want to generate another 100.\"}, {\"type\":\"paragraph\",\"text\":\"`bitcoin-cli -regtest generate 100`\"}, {\"type\":\"paragraph\",\"text\":\"Now I\u2019ve got whole bunch of very exciting blocks with just a coinbase transaction but now I have a balance of 50. The very first one matured more than 100 blocks so we\u2019re set. So ready to start spreading out the wealth here. So I\u2019m getting an address for Alice so I can send Alice some coins.\"}, {\"type\":\"paragraph\",\"text\":\"`alice-cli getnewaddress`\"}, {\"type\":\"paragraph\",\"text\":\"Q - Regtest addresses start with a 2?\"}, {\"type\":\"paragraph\",\"text\":\"A - They start with m or n if it is the old legacy address. They start with 2 if it is a SegWit address. If it is a bech32 it starts with btr I think fir regtest mode.\"}, {\"type\":\"paragraph\",\"text\":\"So we\u2019ve got an address for Alice, we want to spend Alice some coins.\"}, {\"type\":\"paragraph\",\"text\":\"Q - What\u2019s her balance?\"}, {\"type\":\"paragraph\",\"text\":\"A - Sure why not. We know it is zero but it is good to confirm.\"}, {\"type\":\"paragraph\",\"text\":\"`alice-cli getbalance`\"}, {\"type\":\"paragraph\",\"text\":\"I need an address and an amount, let\u2019s give her 10.\"}, {\"type\":\"paragraph\",\"text\":\"`bitcoin-cli -regtest sendtoaddress [insert address] 10`\"}, {\"type\":\"paragraph\",\"text\":\"So there\u2019s a transaction hash which returns from that command. Let\u2019s check Alice\u2019s balance.\"}, {\"type\":\"paragraph\",\"text\":\"`alice-cli getbalance`\"}, {\"type\":\"paragraph\",\"text\":\"It is zero. Why? There has been no mining. We can tell that it happened though.\"}, {\"type\":\"paragraph\",\"text\":\"`alice-cli listunspent 0`\"}, {\"type\":\"paragraph\",\"text\":\"The first parameter of that is the minimum number of confirmations. So if we say zero we can verify that Alice did receive that transaction, it is just not available. See the zero confirmations? We see the same transaction ID, we see the same 10 Bitcoins that we sent to her.\"}, {\"type\":\"paragraph\",\"text\":\"Q - What is it querying to figure out what her unspent is with zero confirmations?\"}, {\"type\":\"paragraph\",\"text\":\"A - listunspent was the command. If you do listunspent without any parameters it is not going to include the zero confirmations. So you have several parameters. You\u2019ve got min confirmations, max confirmations, you can filter out by addresses. Where it says safe at the bottom you can include unsafe which it defaults to true I believe anyway. You can pass another object to it to get minimum amount, I want to see all unspent transactions over 2 Bitcoin or I want to see all unspent transactions under 5 Bitcoin or whatever.\"}, {\"type\":\"paragraph\",\"text\":\"Q - What\u2019s the data store where that is stored in? For unspent? Unspent would not be in the blockchain?\"}, {\"type\":\"paragraph\",\"text\":\"A - Everything is the blockchain. From Alice\u2019s perspective the Bitcoin daemon has a wallet built into it and the listunspent is looking at Alice\u2019s wallet.\"}, {\"type\":\"paragraph\",\"text\":\"Q - So she is looking at her local mempool?\"}, {\"type\":\"paragraph\",\"text\":\"A - It would be her local mempool but it would be any addresses in her wallet that have outputs in that mempool. Once it is mined it is not in the mempool, it is part of the blockchain.\"}, {\"type\":\"paragraph\",\"text\":\"So let\u2019s generate 1.\"}, {\"type\":\"paragraph\",\"text\":\"`bitcoin-cli -regtest generate 1`\"}, {\"type\":\"paragraph\",\"text\":\"Now Alice can get her balance.\"}, {\"type\":\"paragraph\",\"text\":\"`alice-cli getbalance`\"}, {\"type\":\"paragraph\",\"text\":\"There\u2019s her 10 coins.\"}, {\"type\":\"paragraph\",\"text\":\"Q - The default should have 100?\"}, {\"type\":\"paragraph\",\"text\":\"A - It had 50 and sent 10. It should have 40 minus a fee so 39.9 something.\"}, {\"type\":\"paragraph\",\"text\":\"Q - But we got a new block mature?\"}, {\"type\":\"paragraph\",\"text\":\"A - That\u2019s true, plus the 50. You\u2019re right.\"}, {\"type\":\"paragraph\",\"text\":\"`bitcoin-cli -regtest getbalance`\"}, {\"type\":\"paragraph\",\"text\":\"The original 50, the recently mined 50 minus the 10 sent to Alice minus a transaction fee.\"}, {\"type\":\"paragraph\",\"text\":\"Q - The fee is autogenerated? Who is coming up with the transaction fee here in this regtest?\"}, {\"type\":\"paragraph\",\"text\":\"A - Everybody has their own wallet. Regtest has a wallet, Alice has a wallet, Bob has a wallet.\"}, {\"type\":\"paragraph\",\"text\":\"Q - It is a default fee setting?\"}, {\"type\":\"paragraph\",\"text\":\"A - Their wallet comes up with the fee, each individual wallet. We\u2019re too early in the game to really be optimizing fees. Once you get a thousand blocks in or whatever, I\u2019m not sure what the exact number is.\"}, {\"type\":\"paragraph\",\"text\":\"Q - Who received the fee?\"}, {\"type\":\"paragraph\",\"text\":\"A - The miner.\"}, {\"type\":\"paragraph\",\"text\":\"Q - Is the miner the default in this case or do you have a fourth party?\"}, {\"type\":\"paragraph\",\"text\":\"A - You\u2019re right. I have to wait 100 blocks to get that back. If we mine 100 blocks we should have an even number.\"}, {\"type\":\"paragraph\",\"text\":\"If we generate 100 blocks.\"}, {\"type\":\"paragraph\",\"text\":\"`bitcoin-cli -regtest generate 100`\"}, {\"type\":\"paragraph\",\"text\":\"Even number, so they got the fee. That\u2019s what we\u2019re looking for. That\u2019s the beauty of regtest, you don\u2019t have to worry about it. Just make more, we\u2019re worse than the Fed here. That\u2019s pretty basic unexciting stuff.\"}, {\"type\":\"paragraph\",\"text\":\"Q - Can you send more coins to Alice, send her like 10 more and run that query with a minimum zero confirmations? Would it add the mempool and the amount on the blockchain? The total would include the 10 coins that haven\u2019t been mined?\"}, {\"type\":\"paragraph\",\"text\":\"A - Yes. Let\u2019s do it.\"}, {\"type\":\"paragraph\",\"text\":\"I need another address from Alice.\"}, {\"type\":\"paragraph\",\"text\":\"`alice-cli getnewaddress`\"}, {\"type\":\"paragraph\",\"text\":\"We\u2019re going to send another 10.\"}, {\"type\":\"paragraph\",\"text\":\"`bitcoin-cli -regtest sendtoaddress  [insert address] 10`\"}, {\"type\":\"paragraph\",\"text\":\"So I\u2019ve got a transaction.\"}, {\"type\":\"paragraph\",\"text\":\"`alice-cli listunspent`\"}, {\"type\":\"paragraph\",\"text\":\"If I do that I\u2019m not going to get the new 10. I\u2019ve only got one transaction with 101 confirmations now. But if I do the minimum with a zero\u2026\"}, {\"type\":\"paragraph\",\"text\":\"`alice-cli listunspent 0`\"}, {\"type\":\"paragraph\",\"text\":\"I\u2019ve got the two transactions.\"}, {\"type\":\"paragraph\",\"text\":\"`nodes-debug`\"}, {\"type\":\"paragraph\",\"text\":\"It came up on this screen, it is so small I can\u2019t see it. What I did was develop a tool that allows you to connect to multiple nodes and it has some convenient features for working with the commands so you don\u2019t have to be clumsy working with the CLI. We can do some of the same things.\"}, {\"type\":\"paragraph\",\"text\":\"Q - We should all be getting the exact same results as you down to the signatures? My transaction IDs don\u2019t match yours. On the command line output, it is deterministic, we should be getting the same results? I think Bitcoin Core uses deterministic k values now so the signatures should be duplicated.\"}, {\"type\":\"paragraph\",\"text\":\"A - We\u2019ve got three different configurations. I wouldn\u2019t expect the same results but you may be right. If you installed on mainnet you\u2019re not going to generate from the same seed.\"}, {\"type\":\"paragraph\",\"text\":\"Q - What does regtest do for mining? Is there any difficulty?\"}, {\"type\":\"paragraph\",\"text\":\"A - No it is instant. If I generate 100 you saw how quickly that came up. It is just simulated, it is not a real thing.\"}, {\"type\":\"paragraph\",\"text\":\"Q - Can you get the proof, the string that is hashed? Even zero difficulty actually has some difficulty. Satoshi made a really weird choice. But it is trivial.\"}, {\"type\":\"paragraph\",\"text\":\"You saw how I was struggling with the commands. I wrote this to get some auto completion and you get some parameter help.\"}, {\"type\":\"paragraph\",\"text\":\"`getbestblockhash`\"}, {\"type\":\"paragraph\",\"text\":\"Q - Can you pull the GitHub repo real quick?\"}, {\"type\":\"paragraph\",\"text\":\"A - It is on the README. https://github.com/rsbondi/nodes-debug.git\"}, {\"type\":\"paragraph\",\"text\":\"I\u2019m going to get that block.\"}, {\"type\":\"paragraph\",\"text\":\"`getblock [insert block hash]`\"}, {\"type\":\"paragraph\",\"text\":\"Q - On the left you execute commands and on the right you get the outputs?\"}, {\"type\":\"paragraph\",\"text\":\"We want to look at the block, we want to look at the difficulty, chainwork. It is really difficult, look at all those zeros. It is fake, it doesn\u2019t mean anything.\"}, {\"type\":\"paragraph\",\"text\":\"Q - Right above that line it shows the difficulty, e^(-10)?\"}, {\"type\":\"paragraph\",\"text\":\"A - That\u2019s really easy then. Why does it have all the zeros? That\u2019s the amount of work, that\u2019s not the hash. It should be pretty easy, they generate instantly.\"}, {\"type\":\"paragraph\",\"text\":\"We\u2019ll do the same thing here. We\u2019ll come back to Alice and list the unspent. I don\u2019t have to type in order, I can just use the shortcut `lisu` it jumps up the `listunspent`. It makes it a little bit easier. What are my parameters? Look at that, the first one is min confirmations, I put a zero there. The next one is max confirmations, 9999. That last one, `query_options`, it doesn\u2019t tell us much about it. But you don\u2019t have to go into the help you just hover over it. Now you get the full help. This is pointed all out in the RPC server. Whatever version you\u2019re on this is going to work. It is optional, use it if you like. I made it because it helped me a tonne, just to not have to go back and forth looking stuff up. Let\u2019s send Bob some money. He\u2019s been left out here. Bob needs to get an address first.\"}, {\"type\":\"paragraph\",\"text\":\"`getnewaddress`\"}, {\"type\":\"paragraph\",\"text\":\"`sendtoaddress \u201c[insert address]\u201d 5`\"}, {\"type\":\"paragraph\",\"text\":\"It is a little different here from the CLI, the strings you don\u2019t need the quotes. Here you do because it is Javascript and I didn\u2019t want to figure out how to parse it. How much do we want to send Bob, we\u2019ll send 5, we\u2019ll keep most of the wealth to ourselves. We\u2019ve got that transaction, we can look at that if we want to. Somebody tell me how do I see that that transaction came through to Bob?\"}, {\"type\":\"paragraph\",\"text\":\"`listunspent 0`\"}, {\"type\":\"paragraph\",\"text\":\"There we go, zero confirmations.\"}, {\"type\":\"paragraph\",\"text\":\"Q - How did you add Alice and Bob? I got an error message when I tried adding them. Was there an easy way to add those?\"}, {\"type\":\"paragraph\",\"text\":\"A - I already had them set up. You have the Add Node button here. You need the config file because that is your user credentials. It pulls that from there.\"}, {\"type\":\"paragraph\",\"text\":\"Q - Could you try deleting one and adding one in real time?\"}, {\"type\":\"paragraph\",\"text\":\"A - Sure why not. Let\u2019s look at Bob\u2019s configuration first. Edit Node and then copy this. I\u2019m going to delete Bob and add him back. Put in the config path. I know we don\u2019t need the host, I don\u2019t think we need the port either. It should get that from the config. There he is, he\u2019s up and talking.\"}, {\"type\":\"paragraph\",\"text\":\"Q - You didn\u2019t have to put in the port?\"}, {\"type\":\"paragraph\",\"text\":\"A - No because that\u2019s in the config. If you have the config and you have that configured in there and you\u2019re not just pulling it up from the command line, bitcoind, it\u2019s already there. You always need the config because that\u2019s where your credentials are.\"}, {\"type\":\"paragraph\",\"text\":\"Ok so what we\u2019ve done is pretty boring, send to address, the address and the amount. Let\u2019s do it by hand. I\u2019ll use the same address. Not good practice but alright. Create raw transaction, what parameters do I need here? I need some unspent outputs. Why doesn\u2019t Alice have any money? We need to mine the block. She sent some money and it sends the whole Bitcoin not part of it. Let\u2019s generate one. Notice I called this Regpool, that\u2019s my mining node.\"}, {\"type\":\"paragraph\",\"text\":\"Regpool - `generate 1`\"}, {\"type\":\"paragraph\",\"text\":\"Alice - `listunspent`\"}, {\"type\":\"paragraph\",\"text\":\"Alice has money again. Let\u2019s take that first one. I need an array of an object and I need a txid and a vout. I\u2019ll grab those right from here.\"}, {\"type\":\"paragraph\",\"text\":\"Q - So you\u2019re constructing a transaction from transaction inputs?\"}, {\"type\":\"paragraph\",\"text\":\"A - From unspent outputs. I\u2019m telling it for my input I want to use that transaction, index number 0, it should be that top one with the 10 coins in.\"}, {\"type\":\"paragraph\",\"text\":\"Another thing I can do multiple lines, I just can\u2019t have spaces between the multiple lines. That\u2019s my first parameter. Now I need someone to send it to. Let\u2019s go get Bob, an object with an address and an amount.\"}, {\"type\":\"paragraph\",\"text\":\"Bob - `getnewaddress`\"}, {\"type\":\"paragraph\",\"text\":\"We\u2019ll send 5 again. There\u2019s our transaction we created.\"}, {\"type\":\"paragraph\",\"text\":\"Regpool - `createrawtransaction [{\u201ctxid\u201d: \u201c[add transaction ID]\u201d, \u201cvout\u201d: 0}] {\u201c[add address]\u201d: 5}`\"}, {\"type\":\"paragraph\",\"text\":\"So what do you think is going to happen if I try to send that?\"}, {\"type\":\"paragraph\",\"text\":\"Q - You generated a new address for Bob and plugged it in as the output right?\"}, {\"type\":\"paragraph\",\"text\":\"A - Yeah\"}, {\"type\":\"paragraph\",\"text\":\"No it is not going to work because we have not signed the transaction. This will give you more flexibility if you\u2019re creating transactions and you want to create them by hand. This is the way to do it. You have more flexibility than to just send to address, you can include your own scripts and all kind of things. I don\u2019t think we\u2019re going to get into that today. I want to sign the transaction.\"}, {\"type\":\"paragraph\",\"text\":\"`signrawtransaction \u201c[add result hex string]\u201d`\"}, {\"type\":\"paragraph\",\"text\":\"So now I have a signed transaction. Let\u2019s send that baby. The next thing is `sendrawtransaction` and then all you really need is a string.\"}, {\"type\":\"paragraph\",\"text\":\"`sendrawtransaction \u201c[add result hex string]\u201d`\"}, {\"type\":\"paragraph\",\"text\":\"Q - The `createrawtransaction` has an input and then the second thing is an output?\"}, {\"type\":\"paragraph\",\"text\":\"A - Right. The output is the address I\u2019m sending to and the amount, it is an object. I can have multiple addresses. The address is the key and the amount is the value. It is a JSON object, a key-value, address-amount.\"}, {\"type\":\"paragraph\",\"text\":\"Q - The unspent transaction output is 10?\"}, {\"type\":\"paragraph\",\"text\":\"A - Right. We can spend it, we\u2019re going to throw 5 coins away as a fee. Or are we? Absurdly high fee, it won\u2019t let me do that. Thank you Bitcoin RPC, you just saved me 5 Bitcoin.\"}, {\"type\":\"paragraph\",\"text\":\"Q - Can you JSON out to show a full transaction? Can you decode rawtx?\"}, {\"type\":\"paragraph\",\"text\":\"A - Sure. This is the one we tried to send.\"}, {\"type\":\"paragraph\",\"text\":\"`decoderawtransaction  \u201c[add result hex string]\u201d`\"}, {\"type\":\"paragraph\",\"text\":\"There\u2019s what it looks like decoded. The signature is in the witness data.\"}, {\"type\":\"paragraph\",\"text\":\"So what Alice needs to do is get a change address, `getrawchangeaddress` with no parameters.\"}, {\"type\":\"paragraph\",\"text\":\"`getrawchangeaddress`\"}, {\"type\":\"paragraph\",\"text\":\"This is why almost all transactions have two outputs. It is because the likelihood that you\u2019re going to be spending exactly whatever output is very low so 224 bytes is the normal.\"}, {\"type\":\"paragraph\",\"text\":\"I added the rest of the 10 minus a miner fee. Now I can recreate a transaction.\"}, {\"type\":\"paragraph\",\"text\":\"Alice - `createrawtransaction [{\u201ctxid\u201d: \u201c[add transaction ID]\u201d, \u201cvout\u201d: 0}] {\u201c[add address_1]\u201d: 5, \u201c[add address_2]\u201d: 4.99999 }`\"}, {\"type\":\"paragraph\",\"text\":\"Q - So the second address is Alice?\"}, {\"type\":\"paragraph\",\"text\":\"A - That\u2019s Alice\u2019s change. 5 going to Bob, 4.99999 going back to Alice, at her new change address that we just created.\"}, {\"type\":\"paragraph\",\"text\":\"I\u2019m not sure what the difference is between change address versus address. I know in HD it is m/0/0/0/1 for the change address and m/0/0/0/0 for the main address.\"}, {\"type\":\"paragraph\",\"text\":\"Q - Does `getrawchangeaddress` have a different HD?\"}, {\"type\":\"paragraph\",\"text\":\"A - I don\u2019t know Bitcoin Core\u2019s implementation well but if you\u2019re using the HD feature of Bitcoin Core it does not use the BIP32 default. It uses hardened derivation for every address, it is not compatible with your Trezor or whatever.\"}, {\"type\":\"paragraph\",\"text\":\"If you had a HD wallet like I said that derivation path would end in 0 and 1 for the change address.\"}, {\"type\":\"paragraph\",\"text\":\"I\u2019m creating the transaction, I want to sign it.\"}, {\"type\":\"paragraph\",\"text\":\"`signrawtransaction \u201c[add result hex string]\u201d`\"}, {\"type\":\"paragraph\",\"text\":\"There\u2019s my signed transaction, I want to send that as a raw transaction.\"}, {\"type\":\"paragraph\",\"text\":\"`sendrawtransaction \u201c[add result hex string]\u201d`\"}, {\"type\":\"paragraph\",\"text\":\"There\u2019s my transaction ID. I guess I\u2019ll keep going. I also have a simulate script (simulate.js) in here. What this does is randomly creates transactions of random amounts from your main regtest node. I\u2019ve set it to five minutes, I think I\u2019ll bump it down to show it\u2019ll mine a block in five minutes.\"}, {\"type\":\"paragraph\",\"text\":\"`node simulate.js`\"}, {\"type\":\"paragraph\",\"text\":\"I just created a transaction, it has created some random transactions. If you also want to run this script you\u2019ll be generating transactions. We\u2019ll go more than five minutes, that\u2019s fine. Randomly generating, we\u2019re going to mine every five minutes. So you\u2019re going to get more of a real world simulation where there\u2019s a lot more transactions and you go and analyze a lot better. I\u2019ll show you. Here\u2019s a script I wrote for connecting directly to the network. I\u2019m not going through the RPC, I\u2019m TCP/IPing into one of the nodes, making a connection, doing the handshake, version, verack, inventory message and all that. You\u2019ll be able to see that here, this is just for demonstration purposes.\"}, {\"type\":\"paragraph\",\"text\":\"`node peers.js`\"}, {\"type\":\"paragraph\",\"text\":\"I connected, I did my handshake, now I\u2019m waiting. I have that other one running in the background. I should eventually see transactions coming in. I sent a `getdata` command, I got an inventory message saying there\u2019s a transaction. I said I don\u2019t have that one send it to me. I sent the `getdata` command and then I got a response. If you\u2019re developing and connecting it is handy for that. If I go back to Regpool now I\u2019ve got an additional peer. I can troubleshoot my code now that my version is working. If you\u2019re writing code to connect to a peer that\u2019s a handy way.\"}, {\"type\":\"paragraph\",\"text\":\"Q - Do you make the handshake in raw hex?\"}, {\"type\":\"paragraph\",\"text\":\"A - It is raw. This is all Javascript. I just went through the spec and it said here\u2019s the handshake. All the messages have the magic bytes, then it has the message header which is always in the same format. Then it has a payload. I just went through and read all that and experimented and saw what came back.\"}, {\"type\":\"paragraph\",\"text\":\"Q - We did that in Jimmy Song\u2019s class.\"}, {\"type\":\"paragraph\",\"text\":\"A - I\u2019ve been going through his book and doing everything in Javascript so that I can do it rather than just copying the Python code and tweaking it. Javascript wouldn\u2019t be my first choice but it is what I know and it was the fastest way to learn.\"}, {\"type\":\"paragraph\",\"text\":\"That\u2019s part of the development environment. I wanted you to get set up, it is optional. You can actually see transactions coming in.\"}, {\"type\":\"paragraph\",\"text\":\"Q - What file is that in the repository?\"}, {\"type\":\"paragraph\",\"text\":\"A - It is a different repo, the one that\u2019s actually connecting directly. The idea is to simulate. If you connected directly and there was no simulation you\u2019d just be sitting at a blank screen. You\u2019d get a ping, you\u2019d get a pong. That\u2019s a bunch of random stuff I go through for my own education. I wanted to share it. If things work for me and you prefer Javascript over Python. If you\u2019re not a Python guy and you prefer Javascript there\u2019s another alternative. You can go through and read that. You can try running these scripts just to play with them and tweak them a little bit. Or just to watch the network. You can put breakpoints in your code and see something didn\u2019t happen. The whole idea is to have a troubleshooting tool.\"}, {\"type\":\"paragraph\",\"text\":\"Let\u2019s go back to this guy. I\u2019m pretty sure I mined a block by now. Let\u2019s find out.\"}, {\"type\":\"paragraph\",\"text\":\"Regpool - `getblock [add getbestblockhash result]`\"}, {\"type\":\"paragraph\",\"text\":\"It has been more than five minutes. Now I have a block that looks more like a block, it is not just a coinbase transaction. So now if I want to start parsing blocks I have something to work with. I have another test script, just me playing around here. It is doing a whole bunch of things but one of the things is calculating a Merkle root, I\u2019ll leave that at the end. I have an example from Andreas\u2019 book here. I can go back to the block I just created. Here is what the Merkle root should be. I\u2019ll put that in there. I\u2019m just `console.log`ing out. I\u2019m calculating a root and print out what it is and it should match. I\u2019ll grab all these guys and paste them in there. I\u2019ll take Andreas\u2019 sample out, put it in that. Now if I go and run that.\"}, {\"type\":\"paragraph\",\"text\":\"`node main.js`\"}, {\"type\":\"paragraph\",\"text\":\"It is doing a bunch of other things. I\u2019ve got some stuff I should have commented out. I\u2019m experimenting with compact blocks, there\u2019s something after the Merkle root. It looks like it matches. That\u2019s another advantage of the simulation. You can have blocks with data in them. It would take you a while to type in Alice sending to Bob and Bob sending to Alice and do that all day long and then try to generate a block. It is just another tool to help help you. That was the whole point. To have a useful local environment where you\u2019re not on the blockchain, you don\u2019t have to worry about syncing every time, every time you close your laptop and come back up.\"}, {\"type\":\"heading\",\"text\":\"Q&A\"}, {\"type\":\"paragraph\",\"text\":\"Q - How does the random simulator work?\"}, {\"type\":\"paragraph\",\"text\":\"A - It is just talking to the RPC server and it is sending commands, that simple `sendtoaddress`. It is picking a random amount and creating that.\"}, {\"type\":\"paragraph\",\"text\":\"Q - Are they all valid transactions?\"}, {\"type\":\"paragraph\",\"text\":\"A - Yeah. Let me pull up the code (simulate.js). I\u2019m going to generate a random amount between 0 and 2 and we\u2019ll get a new address. I\u2019m in my own local environment. I\u2019m sending all money back to myself. From Bob\u2019s and Alice\u2019s perspective they don\u2019t know that. It looks like somebody creating transactions and sending them on the network. I get a new address, I send to address and then I give it that random amount. Then I send. I have a timer here so that every five minutes it is going to mine.\"}, {\"type\":\"paragraph\",\"text\":\"Q - You\u2019ve got transactions that you\u2019re spitting out and you\u2019ve got blocks that you\u2019re spitting out?\"}, {\"type\":\"paragraph\",\"text\":\"A - Right. If you were in there doing Bob and Alice while that was running those would be there too. But that way you have a mining thing. It is closer to real world.\"}, {\"type\":\"paragraph\",\"text\":\"Q - Can regtest open up to the network? Can you make a port available on the internet and then just connect to a bunch\u2026\"}, {\"type\":\"paragraph\",\"text\":\"A - You have the magic bytes, that determines your network. That\u2019s the very first thing of every message. So every message starts with the magic bytes. There\u2019s three different ones.\"}, {\"type\":\"paragraph\",\"text\":\"Q - If Michael and I wanted to be on the same regtest network? It is probably a networking challenge?\"}, {\"type\":\"paragraph\",\"text\":\"A - You could just open up a port? I don\u2019t know. That would be a good idea but I don\u2019t know. You wouldn\u2019t have to download testnet.\"}, {\"type\":\"paragraph\",\"text\":\"You could test the UI and stuff. You could have cooperative development and have the same\u2026 You don\u2019t really need to do that. You can run them separately, you don\u2019t have to see exactly the same numbers.\"}",
    "body": "\nClone this repo to follow along: <https://github.com/austin-bitcoin-developers/regtest-dev-environment>\n\n<https://twitter.com/kanzure/status/1161266116293009408>\n\n## Intro\n\nSo the goal here as Justin said is to get the regtest environment set up. The advantages he mentioned, there is also the advantage that you can mine your own coins at will so you don\u2019t have to mess around with testnet faucets. You can generate blocks as well so you don\u2019t have to wait for six confirmations or whatever or even the ten minutes. You get confirmations right away and that\u2019s one of the things we will be going through. Bitcoin Core is what we are going to be using. Does anybody not have it installed yet? We\u2019ll go through and I\u2019ll show everything with my setup I got here. You can follow along. Also there is this repository here, if you can download this repository that would be helpful. Once you\u2019ve got Bitcoin Core set up you run some scripts that will set up three nodes in regtest mode. So you\u2019re going to be running three nodes on your laptop which starts with zero blocks. You\u2019ve got a clean blockchain and if it starts\u2026 you can delete it. You don\u2019t really have to worry about resources. It is one of the advantages of regtest. I guess we can start cloning the repo. Shall I just dive in and start demonstrating?\n\n## Demo\n\nIn the repository we\u2019ve got some scripts. First off we want to do the run script which will get us up and running and get all three nodes if we have our configurations set. I\u2019m going to crank it up here. If you guys are ready you can try to crank it up. If you have problems we can stop and try to figure out what they are.\n\n`./run.sh`\n\nWe\u2019ll show the scripts as we go through, that\u2019s a good idea.\n\nQ - Is it just like a bash script?\n\nA - Yeah. If you are on Windows you can just change it too .bat. It is just command line. This is assuming you have bitcoind in your PATH. The Bitcoin version number, however you set it up, if you do the default install it is going to be bitcoin, the version number, .bin. If you have that in your PATH you get that up and running.\n\nQ - For those who don\u2019t know what is bitcoind?\n\nA - bitcoind is the Bitcoin daemon which is your node implementation. It is kind of a black box that communicates to the other nodes and sends transactions, receives transactions, it is your full node.\n\nQ - You can think of it basically as the client you would see in Bitcoin Core but without a head? It is just running on the server.\n\nA - Yeah\n\nQ - So what do these commands do?\n\nA - The -regtest is obviously regtest which will mean you don\u2019t connect to mainnet or testnet. You\u2019ve got your own local environment. The -daemon at the end means it is going to run in the background. You see Bitcoin server starting and I still have my command prompt. If you try to use this without the daemon you\u2019d be locked there and your console would be locked up.\n\nQ - What about the datadir?\n\nA - We have Alice and then we have a data directory of Bob. The top one doesn\u2019t have one because it goes to the default. Whenever you install it it should be home/user/.bitcoin/bitcoin.conf That\u2019s why there\u2019s not one there. Alice, we\u2019ll look at her. Really secure passwords, don\u2019t try to steal any money from Alice here. We set up some unique ports for it and we\u2019re adding nodes to it so she can talk to Bob and she can talk to the default regtest node.\n\nQ - So this is just a bitcoind configuration file?\n\nA - It is bitcoin.conf for bitcoind. Or if you run Bitcoin-Qt it will look at the same one.\n\nQ - So how are Alice and Bob are different?\n\nA - They have different ports. These are just random numbers, they just had to be unique. So you can see Bob is 18446, the default port for regtest is 18444, this is 18445. And then the same thing for the RPC ports. There\u2019s a default of 18443, there\u2019s this random thing that Justin made up and then Bob has another random thing that Justin made up.\n\nQ - Ok so when it says `port=` that it is what Alice is running and then the other two are how to connect to these other two peers? It is a way of bootstrapping our little mini network of 3?\n\nA - Right.\n\nSo if I go back to my command prompt. I\u2019m up and running.\n\nQ - You only actually really need to add one of them and you will discover the other peers, `addnode` is a luxury?\n\nA - There is no peer discovery in regtest. That is true if you\u2019re on testnet but not on regtest. No peer discovery, that\u2019s one of the limitations. You trade being able to mine coins at will for not having peer discovery. You do have pretty much most of the other features, there may be a few that are missing.\n\nQ - You can also right now confirm that it is working by looking in the Alice and Bob directories? You\u2019ll have chainstate\u2026\n\nA - Sure. I have a regtest directory that started up. I deleted these before I started. But what we really want to do is verify through the CLI or through some of these other tools that we want to look at.\n\nWe\u2019ve got aliases.sh, is a convenient script. We don\u2019t have to type port 99 whatever for Alice and port 99 whatever for Bob. We can just create these aliases. Right now I\u2019ve got the default. The -regtest gets us on the network and I want to put in a command.\n\n`bitcoin-cli -regtest getpeerinfo`\n\nYou\u2019ve got id 2 and their address.\n\nQ - What command did you do?\n\nA - getpeerinfo. This is a way to see exactly who we\u2019re talking to and some additional information. We\u2019re running the same client so they\u2019ll all have the same version and a lot of the same information. The main thing is we\u2019ve got the address, here\u2019s the port we\u2019re connected on.\n\nQ - That\u2019s the peer?\n\nA - Yeah these are the peers. We actually have our own little network here. Other than verifying that there is something in those folders we can verify that yeah we are communicating.\n\nThat was from your default point of view. We also want to have a point of view from Alice and Bob. That\u2019s where the aliases come in. Let me pull that up. The Bitcoin CLI, there\u2019s your port, there\u2019s your data directory. The port in this is your RPC port. Now you can type in `alice-cli` instead of typing `bitcoin-cli -port=9334 -datadir=alice` each time, we have a shortcut.\n\n`source aliases.sh`\n\nNow I can do the same thing.\n\n`alice-cli getpeerinfo`\n\nNow I have Alice\u2019s point of view of the network. Same thing for Bob.\n\n`bob-cli getpeerinfo`\n\nIt is really hard to follow in the CLI but we have a solution to that, don\u2019t worry. So let\u2019s see how we\u2019re doing cash wise.\n\n`bitcoin-cli -regtest getbalance`\n\nOk no money, sad state of affairs. But we don\u2019t have to mess with testnet faucets, we can generate our own. There is a command called generate so we use that and then the number of blocks you want to generate.\n\n`bitcoin-cli -regtest generate 1`\n\nSo we generate a block. There\u2019s the hash of the block we generated. Kind of unexciting, nothing but a coinbase in there but that\u2019s the way things work.\n\nQ - If only you could find a way to sneak that into the real chain.\n\nA - No I\u2019ve got something. Hang tight, I\u2019ve got you covered. You don\u2019t need a real chain, that\u2019s the whole point of this. If you could get up and running this fast but the world don\u2019t work that way.\n\nSo I generated a block, I want to get my balance again.\n\n`bitcoin-cli -regtest getbalance`\n\nOh no I\u2019m still broke. What happened? You need 100 blocks before you can claim your mined coins. We\u2019re simulating mining, we\u2019re still simulating the same way. I want to generate another 100.\n\n`bitcoin-cli -regtest generate 100`\n\nNow I\u2019ve got whole bunch of very exciting blocks with just a coinbase transaction but now I have a balance of 50. The very first one matured more than 100 blocks so we\u2019re set. So ready to start spreading out the wealth here. So I\u2019m getting an address for Alice so I can send Alice some coins.\n\n`alice-cli getnewaddress`\n\nQ - Regtest addresses start with a 2?\n\nA - They start with m or n if it is the old legacy address. They start with 2 if it is a SegWit address. If it is a bech32 it starts with btr I think fir regtest mode.\n\nSo we\u2019ve got an address for Alice, we want to spend Alice some coins.\n\nQ - What\u2019s her balance?\n\nA - Sure why not. We know it is zero but it is good to confirm.\n\n`alice-cli getbalance`\n\nI need an address and an amount, let\u2019s give her 10.\n\n`bitcoin-cli -regtest sendtoaddress [insert address] 10`\n\nSo there\u2019s a transaction hash which returns from that command. Let\u2019s check Alice\u2019s balance.\n\n`alice-cli getbalance`\n\nIt is zero. Why? There has been no mining. We can tell that it happened though.\n\n`alice-cli listunspent 0`\n\nThe first parameter of that is the minimum number of confirmations. So if we say zero we can verify that Alice did receive that transaction, it is just not available. See the zero confirmations? We see the same transaction ID, we see the same 10 Bitcoins that we sent to her.\n\nQ - What is it querying to figure out what her unspent is with zero confirmations?\n\nA - listunspent was the command. If you do listunspent without any parameters it is not going to include the zero confirmations. So you have several parameters. You\u2019ve got min confirmations, max confirmations, you can filter out by addresses. Where it says safe at the bottom you can include unsafe which it defaults to true I believe anyway. You can pass another object to it to get minimum amount, I want to see all unspent transactions over 2 Bitcoin or I want to see all unspent transactions under 5 Bitcoin or whatever.\n\nQ - What\u2019s the data store where that is stored in? For unspent? Unspent would not be in the blockchain?\n\nA - Everything is the blockchain. From Alice\u2019s perspective the Bitcoin daemon has a wallet built into it and the listunspent is looking at Alice\u2019s wallet.\n\nQ - So she is looking at her local mempool?\n\nA - It would be her local mempool but it would be any addresses in her wallet that have outputs in that mempool. Once it is mined it is not in the mempool, it is part of the blockchain.\n\nSo let\u2019s generate 1.\n\n`bitcoin-cli -regtest generate 1`\n\nNow Alice can get her balance.\n\n`alice-cli getbalance`\n\nThere\u2019s her 10 coins.\n\nQ - The default should have 100?\n\nA - It had 50 and sent 10. It should have 40 minus a fee so 39.9 something.\n\nQ - But we got a new block mature?\n\nA - That\u2019s true, plus the 50. You\u2019re right.\n\n`bitcoin-cli -regtest getbalance`\n\nThe original 50, the recently mined 50 minus the 10 sent to Alice minus a transaction fee.\n\nQ - The fee is autogenerated? Who is coming up with the transaction fee here in this regtest?\n\nA - Everybody has their own wallet. Regtest has a wallet, Alice has a wallet, Bob has a wallet.\n\nQ - It is a default fee setting?\n\nA - Their wallet comes up with the fee, each individual wallet. We\u2019re too early in the game to really be optimizing fees. Once you get a thousand blocks in or whatever, I\u2019m not sure what the exact number is.\n\nQ - Who received the fee?\n\nA - The miner.\n\nQ - Is the miner the default in this case or do you have a fourth party?\n\nA - You\u2019re right. I have to wait 100 blocks to get that back. If we mine 100 blocks we should have an even number.\n\nIf we generate 100 blocks.\n\n`bitcoin-cli -regtest generate 100`\n\nEven number, so they got the fee. That\u2019s what we\u2019re looking for. That\u2019s the beauty of regtest, you don\u2019t have to worry about it. Just make more, we\u2019re worse than the Fed here. That\u2019s pretty basic unexciting stuff.\n\nQ - Can you send more coins to Alice, send her like 10 more and run that query with a minimum zero confirmations? Would it add the mempool and the amount on the blockchain? The total would include the 10 coins that haven\u2019t been mined?\n\nA - Yes. Let\u2019s do it.\n\nI need another address from Alice.\n\n`alice-cli getnewaddress`\n\nWe\u2019re going to send another 10.\n\n`bitcoin-cli -regtest sendtoaddress  [insert address] 10`\n\nSo I\u2019ve got a transaction.\n\n`alice-cli listunspent`\n\nIf I do that I\u2019m not going to get the new 10. I\u2019ve only got one transaction with 101 confirmations now. But if I do the minimum with a zero\u2026\n\n`alice-cli listunspent 0`\n\nI\u2019ve got the two transactions.\n\n`nodes-debug`\n\nIt came up on this screen, it is so small I can\u2019t see it. What I did was develop a tool that allows you to connect to multiple nodes and it has some convenient features for working with the commands so you don\u2019t have to be clumsy working with the CLI. We can do some of the same things.\n\nQ - We should all be getting the exact same results as you down to the signatures? My transaction IDs don\u2019t match yours. On the command line output, it is deterministic, we should be getting the same results? I think Bitcoin Core uses deterministic k values now so the signatures should be duplicated.\n\nA - We\u2019ve got three different configurations. I wouldn\u2019t expect the same results but you may be right. If you installed on mainnet you\u2019re not going to generate from the same seed.\n\nQ - What does regtest do for mining? Is there any difficulty?\n\nA - No it is instant. If I generate 100 you saw how quickly that came up. It is just simulated, it is not a real thing.\n\nQ - Can you get the proof, the string that is hashed? Even zero difficulty actually has some difficulty. Satoshi made a really weird choice. But it is trivial.\n\nYou saw how I was struggling with the commands. I wrote this to get some auto completion and you get some parameter help.\n\n`getbestblockhash`\n\nQ - Can you pull the GitHub repo real quick?\n\nA - It is on the README. https://github.com/rsbondi/nodes-debug.git\n\nI\u2019m going to get that block.\n\n`getblock [insert block hash]`\n\nQ - On the left you execute commands and on the right you get the outputs?\n\nWe want to look at the block, we want to look at the difficulty, chainwork. It is really difficult, look at all those zeros. It is fake, it doesn\u2019t mean anything.\n\nQ - Right above that line it shows the difficulty, e^(-10)?\n\nA - That\u2019s really easy then. Why does it have all the zeros? That\u2019s the amount of work, that\u2019s not the hash. It should be pretty easy, they generate instantly.\n\nWe\u2019ll do the same thing here. We\u2019ll come back to Alice and list the unspent. I don\u2019t have to type in order, I can just use the shortcut `lisu` it jumps up the `listunspent`. It makes it a little bit easier. What are my parameters? Look at that, the first one is min confirmations, I put a zero there. The next one is max confirmations, 9999. That last one, `query_options`, it doesn\u2019t tell us much about it. But you don\u2019t have to go into the help you just hover over it. Now you get the full help. This is pointed all out in the RPC server. Whatever version you\u2019re on this is going to work. It is optional, use it if you like. I made it because it helped me a tonne, just to not have to go back and forth looking stuff up. Let\u2019s send Bob some money. He\u2019s been left out here. Bob needs to get an address first.\n\n`getnewaddress`\n\n`sendtoaddress \u201c[insert address]\u201d 5`\n\nIt is a little different here from the CLI, the strings you don\u2019t need the quotes. Here you do because it is Javascript and I didn\u2019t want to figure out how to parse it. How much do we want to send Bob, we\u2019ll send 5, we\u2019ll keep most of the wealth to ourselves. We\u2019ve got that transaction, we can look at that if we want to. Somebody tell me how do I see that that transaction came through to Bob?\n\n`listunspent 0`\n\nThere we go, zero confirmations.\n\nQ - How did you add Alice and Bob? I got an error message when I tried adding them. Was there an easy way to add those?\n\nA - I already had them set up. You have the Add Node button here. You need the config file because that is your user credentials. It pulls that from there.\n\nQ - Could you try deleting one and adding one in real time?\n\nA - Sure why not. Let\u2019s look at Bob\u2019s configuration first. Edit Node and then copy this. I\u2019m going to delete Bob and add him back. Put in the config path. I know we don\u2019t need the host, I don\u2019t think we need the port either. It should get that from the config. There he is, he\u2019s up and talking.\n\nQ - You didn\u2019t have to put in the port?\n\nA - No because that\u2019s in the config. If you have the config and you have that configured in there and you\u2019re not just pulling it up from the command line, bitcoind, it\u2019s already there. You always need the config because that\u2019s where your credentials are.\n\nOk so what we\u2019ve done is pretty boring, send to address, the address and the amount. Let\u2019s do it by hand. I\u2019ll use the same address. Not good practice but alright. Create raw transaction, what parameters do I need here? I need some unspent outputs. Why doesn\u2019t Alice have any money? We need to mine the block. She sent some money and it sends the whole Bitcoin not part of it. Let\u2019s generate one. Notice I called this Regpool, that\u2019s my mining node.\n\nRegpool - `generate 1`\n\nAlice - `listunspent`\n\nAlice has money again. Let\u2019s take that first one. I need an array of an object and I need a txid and a vout. I\u2019ll grab those right from here.\n\nQ - So you\u2019re constructing a transaction from transaction inputs?\n\nA - From unspent outputs. I\u2019m telling it for my input I want to use that transaction, index number 0, it should be that top one with the 10 coins in.\n\nAnother thing I can do multiple lines, I just can\u2019t have spaces between the multiple lines. That\u2019s my first parameter. Now I need someone to send it to. Let\u2019s go get Bob, an object with an address and an amount.\n\nBob - `getnewaddress`\n\nWe\u2019ll send 5 again. There\u2019s our transaction we created.\n\nRegpool - `createrawtransaction [{\u201ctxid\u201d: \u201c[add transaction ID]\u201d, \u201cvout\u201d: 0}] {\u201c[add address]\u201d: 5}`\n\nSo what do you think is going to happen if I try to send that?\n\nQ - You generated a new address for Bob and plugged it in as the output right?\n\nA - Yeah\n\nNo it is not going to work because we have not signed the transaction. This will give you more flexibility if you\u2019re creating transactions and you want to create them by hand. This is the way to do it. You have more flexibility than to just send to address, you can include your own scripts and all kind of things. I don\u2019t think we\u2019re going to get into that today. I want to sign the transaction.\n\n`signrawtransaction \u201c[add result hex string]\u201d`\n\nSo now I have a signed transaction. Let\u2019s send that baby. The next thing is `sendrawtransaction` and then all you really need is a string.\n\n`sendrawtransaction \u201c[add result hex string]\u201d`\n\nQ - The `createrawtransaction` has an input and then the second thing is an output?\n\nA - Right. The output is the address I\u2019m sending to and the amount, it is an object. I can have multiple addresses. The address is the key and the amount is the value. It is a JSON object, a key-value, address-amount.\n\nQ - The unspent transaction output is 10?\n\nA - Right. We can spend it, we\u2019re going to throw 5 coins away as a fee. Or are we? Absurdly high fee, it won\u2019t let me do that. Thank you Bitcoin RPC, you just saved me 5 Bitcoin.\n\nQ - Can you JSON out to show a full transaction? Can you decode rawtx?\n\nA - Sure. This is the one we tried to send.\n\n`decoderawtransaction  \u201c[add result hex string]\u201d`\n\nThere\u2019s what it looks like decoded. The signature is in the witness data.\n\nSo what Alice needs to do is get a change address, `getrawchangeaddress` with no parameters.\n\n`getrawchangeaddress`\n\nThis is why almost all transactions have two outputs. It is because the likelihood that you\u2019re going to be spending exactly whatever output is very low so 224 bytes is the normal.\n\nI added the rest of the 10 minus a miner fee. Now I can recreate a transaction.\n\nAlice - `createrawtransaction [{\u201ctxid\u201d: \u201c[add transaction ID]\u201d, \u201cvout\u201d: 0}] {\u201c[add address_1]\u201d: 5, \u201c[add address_2]\u201d: 4.99999 }`\n\nQ - So the second address is Alice?\n\nA - That\u2019s Alice\u2019s change. 5 going to Bob, 4.99999 going back to Alice, at her new change address that we just created.\n\nI\u2019m not sure what the difference is between change address versus address. I know in HD it is m/0/0/0/1 for the change address and m/0/0/0/0 for the main address.\n\nQ - Does `getrawchangeaddress` have a different HD?\n\nA - I don\u2019t know Bitcoin Core\u2019s implementation well but if you\u2019re using the HD feature of Bitcoin Core it does not use the BIP32 default. It uses hardened derivation for every address, it is not compatible with your Trezor or whatever.\n\nIf you had a HD wallet like I said that derivation path would end in 0 and 1 for the change address.\n\nI\u2019m creating the transaction, I want to sign it.\n\n`signrawtransaction \u201c[add result hex string]\u201d`\n\nThere\u2019s my signed transaction, I want to send that as a raw transaction.\n\n`sendrawtransaction \u201c[add result hex string]\u201d`\n\nThere\u2019s my transaction ID. I guess I\u2019ll keep going. I also have a simulate script (simulate.js) in here. What this does is randomly creates transactions of random amounts from your main regtest node. I\u2019ve set it to five minutes, I think I\u2019ll bump it down to show it\u2019ll mine a block in five minutes.\n\n`node simulate.js`\n\nI just created a transaction, it has created some random transactions. If you also want to run this script you\u2019ll be generating transactions. We\u2019ll go more than five minutes, that\u2019s fine. Randomly generating, we\u2019re going to mine every five minutes. So you\u2019re going to get more of a real world simulation where there\u2019s a lot more transactions and you go and analyze a lot better. I\u2019ll show you. Here\u2019s a script I wrote for connecting directly to the network. I\u2019m not going through the RPC, I\u2019m TCP/IPing into one of the nodes, making a connection, doing the handshake, version, verack, inventory message and all that. You\u2019ll be able to see that here, this is just for demonstration purposes.\n\n`node peers.js`\n\nI connected, I did my handshake, now I\u2019m waiting. I have that other one running in the background. I should eventually see transactions coming in. I sent a `getdata` command, I got an inventory message saying there\u2019s a transaction. I said I don\u2019t have that one send it to me. I sent the `getdata` command and then I got a response. If you\u2019re developing and connecting it is handy for that. If I go back to Regpool now I\u2019ve got an additional peer. I can troubleshoot my code now that my version is working. If you\u2019re writing code to connect to a peer that\u2019s a handy way.\n\nQ - Do you make the handshake in raw hex?\n\nA - It is raw. This is all Javascript. I just went through the spec and it said here\u2019s the handshake. All the messages have the magic bytes, then it has the message header which is always in the same format. Then it has a payload. I just went through and read all that and experimented and saw what came back.\n\nQ - We did that in Jimmy Song\u2019s class.\n\nA - I\u2019ve been going through his book and doing everything in Javascript so that I can do it rather than just copying the Python code and tweaking it. Javascript wouldn\u2019t be my first choice but it is what I know and it was the fastest way to learn.\n\nThat\u2019s part of the development environment. I wanted you to get set up, it is optional. You can actually see transactions coming in.\n\nQ - What file is that in the repository?\n\nA - It is a different repo, the one that\u2019s actually connecting directly. The idea is to simulate. If you connected directly and there was no simulation you\u2019d just be sitting at a blank screen. You\u2019d get a ping, you\u2019d get a pong. That\u2019s a bunch of random stuff I go through for my own education. I wanted to share it. If things work for me and you prefer Javascript over Python. If you\u2019re not a Python guy and you prefer Javascript there\u2019s another alternative. You can go through and read that. You can try running these scripts just to play with them and tweak them a little bit. Or just to watch the network. You can put breakpoints in your code and see something didn\u2019t happen. The whole idea is to have a troubleshooting tool.\n\nLet\u2019s go back to this guy. I\u2019m pretty sure I mined a block by now. Let\u2019s find out.\n\nRegpool - `getblock [add getbestblockhash result]`\n\nIt has been more than five minutes. Now I have a block that looks more like a block, it is not just a coinbase transaction. So now if I want to start parsing blocks I have something to work with. I have another test script, just me playing around here. It is doing a whole bunch of things but one of the things is calculating a Merkle root, I\u2019ll leave that at the end. I have an example from Andreas\u2019 book here. I can go back to the block I just created. Here is what the Merkle root should be. I\u2019ll put that in there. I\u2019m just `console.log`ing out. I\u2019m calculating a root and print out what it is and it should match. I\u2019ll grab all these guys and paste them in there. I\u2019ll take Andreas\u2019 sample out, put it in that. Now if I go and run that.\n\n`node main.js`\n\nIt is doing a bunch of other things. I\u2019ve got some stuff I should have commented out. I\u2019m experimenting with compact blocks, there\u2019s something after the Merkle root. It looks like it matches. That\u2019s another advantage of the simulation. You can have blocks with data in them. It would take you a while to type in Alice sending to Bob and Bob sending to Alice and do that all day long and then try to generate a block. It is just another tool to help help you. That was the whole point. To have a useful local environment where you\u2019re not on the blockchain, you don\u2019t have to worry about syncing every time, every time you close your laptop and come back up.\n\n## Q&A\n\nQ - How does the random simulator work?\n\nA - It is just talking to the RPC server and it is sending commands, that simple `sendtoaddress`. It is picking a random amount and creating that.\n\nQ - Are they all valid transactions?\n\nA - Yeah. Let me pull up the code (simulate.js). I\u2019m going to generate a random amount between 0 and 2 and we\u2019ll get a new address. I\u2019m in my own local environment. I\u2019m sending all money back to myself. From Bob\u2019s and Alice\u2019s perspective they don\u2019t know that. It looks like somebody creating transactions and sending them on the network. I get a new address, I send to address and then I give it that random amount. Then I send. I have a timer here so that every five minutes it is going to mine.\n\nQ - You\u2019ve got transactions that you\u2019re spitting out and you\u2019ve got blocks that you\u2019re spitting out?\n\nA - Right. If you were in there doing Bob and Alice while that was running those would be there too. But that way you have a mining thing. It is closer to real world.\n\nQ - Can regtest open up to the network? Can you make a port available on the internet and then just connect to a bunch\u2026\n\nA - You have the magic bytes, that determines your network. That\u2019s the very first thing of every message. So every message starts with the magic bytes. There\u2019s three different ones.\n\nQ - If Michael and I wanted to be on the same regtest network? It is probably a networking challenge?\n\nA - You could just open up a port? I don\u2019t know. That would be a good idea but I don\u2019t know. You wouldn\u2019t have to download testnet.\n\nYou could test the UI and stuff. You could have cooperative development and have the same\u2026 You don\u2019t really need to do that. You can run them separately, you don\u2019t have to see exactly the same numbers.\n\n\n",
    "body_type": "markdown",
    "created_at": "2018-08-17T00:00:00.000Z",
    "domain": "https://btctranscripts.com/",
    "url": "https://btctranscripts.com/austin-bitcoin-developers/2018-08-17-richard-bondi-bitcoin-cli-regtest",
    "categories": [
        "meetup"
    ],
    "tags": [
        "bitcoin-core",
        "developer-tools"
    ],
    "media": "https://www.youtube.com/watch?v=sbupEpL6-J4",
    "authors": [
        "Richard Bondi"
    ],
    "indexed_at": "2024-03-21T16:33:35.892Z",
    "transcript_by": "Michael Folkson",
    "summary": "In a recent podcast, Richard Bondi offered an insightful exploration into the realm of Bitcoin development, particularly focusing on the setup and utilization of a regtest (regression test) environment. This specialized setup is designed to aid developers by providing a platform where they can mine their own coins instantly, thus bypassing the need for external testnet faucets and eliminating the delays typically associated with block confirmations in the real Bitcoin network. Bondi's detailed walkthrough underscores the regtest mode's significance in offering a streamlined, isolated environment conducive to rapid development and testing.\n\nCentral to Bondi's discussion was the practical application of Bitcoin Core in initiating a regtest mode, enabling developers to operate three separate nodes on local machines. Initiating from a clean state\u2014devoid of any pre-existing blocks\u2014this configuration presents a pristine blockchain environment, tailor-made for testing scenarios that can be easily reset as required. The efficiency and isolation of this setup make it an ideal choice for developers aiming to refine applications without the overheads or complexities tied to the main or test networks.\n\nFurther delving into the technicalities, Bondi highlighted the pivotal role of 'bitcoind', the Bitcoin daemon, in managing node operations within the regtest environment. He elaborated on the use of specific scripts sourced from GitHub, designed to ease the process of configuring and launching the regtest nodes. These scripts automate the intricate process of setting unique communication ports among nodes, thereby crafting a mini-network that facilitates seamless interaction and transaction processes on a developer\u2019s local machine.\n\nOne of the critical technical facets Bondi discussed was the configuration file for 'bitcoind' (bitcoin.conf), which is essential for customizing network settings for each node to ensure cohesive operation within the regtest setup. This necessitates manual node connection, given the regtest mode's lack of peer discovery support, representing a trade-off for the convenience of on-demand coin mining.\n\nThe podcast also served as a platform for Bondi to demonstrate how developers can verify network functionality and execute transactions within the regtest environment. Through practical exercises, he showcased the generation of blocks to mint new coins and the execution of transactions, such as sending coins from the default node to Alice\u2019s node. These demonstrations illuminated the mechanics of transaction confirmations, fees, and the necessity of mining additional blocks to enable the spending of newly generated coins\u2014mirroring the operational dynamics of the actual Bitcoin network.\n\nExpanding the conversation, Bondi explored advanced commands and utilities that further ease interactions within the regtest network. The creation of aliases for different nodes, for instance, simplifies command executions and enriches the developer's understanding of network dynamics from various perspectives, thereby enhancing efficiency and comprehension of the underlying processes.\n\nThe discussion transitioned into a broader examination of Bitcoin's transaction processes, where Bondi utilized a scenario involving Alice sending coins to illuminate the importance of confirmations and the concept of the mempool. He further elucidated on the regtest mode's distinct feature of instant block generation due to its zero difficulty level, a design choice facilitating testing over real-world mining conditions. This segment underscored the utility of developer tools like `nodes-debug`, which Bondi developed to streamline command-line interactions, offering auto-completion features that significantly boost debugging and experimentation efforts.\n\nBondi also highlighted the manual creation and signing of raw Bitcoin transactions as an exemplar of the flexibility developers have in managing transactions\u2014a process that involves specifying inputs and defining recipients meticulously. Additionally, the use of scripts like `simulate.js` to generate random transactions and `peers.js` for direct node communication showcased the depth of practical exercises possible within the regtest environment, offering developers a dynamic and realistic testing ground.\n\nConcluding his narrative, Bondi shared his personal venture into translating Python exercises from Jimmy Song's book into Javascript, an endeavor aimed at leveraging his existing programming skills to deepen his blockchain technology understanding. This adaptation facilitated a more engaging learning experience through simulated transactions, demonstrating the invaluable role of practical experimentation alongside theoretical study in mastering complex technological domains.\n\nThrough Richard Bondi's comprehensive discussion, listeners gain a profound understanding of the regtest environment's potential and functionality, highlighting it as a fundamental tool for innovation and experimentation in the evolving landscape of blockchain technology. Bondi's narrative not only emphasizes the technical aspects and utilities fostering efficient blockchain software development but also reflects a broader theme of adaptability and personalized learning paths in mastering technological intricacies."
}