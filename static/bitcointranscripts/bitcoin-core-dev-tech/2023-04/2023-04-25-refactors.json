{
    "id": "bitcointranscripts+bitcoin-core-dev-tech+2023-04+2023-04-25-refactors",
    "title": "Refactors",
    "body_formatted": "{\"type\":\"paragraph\",\"text\":\"One take-away from the Chaincode residency in 2019 was: Don\u2019t do refactors (unless you really need it)\"}, {\"type\":\"paragraph\",\"text\":\"A marked increase from 2019 to today\\n(Chart on the increase of refactors)\"}, {\"type\":\"paragraph\",\"text\":\"The comments and PRs are steady but the refactors are increasing\"}, {\"type\":\"paragraph\",\"text\":\"Quibble about how regular reviewers are counted (should be higher than 5 comments)\"}, {\"type\":\"paragraph\",\"text\":\"Project reasons:\"}, {\"type\":\"list\"}, {\"type\":\"paragraph\",\"text\":\"Personal reasons:\"}, {\"type\":\"list\"}, {\"type\":\"paragraph\",\"text\":\"What is the effect?\"}, {\"type\":\"list\"}, {\"type\":\"paragraph\",\"text\":\"Refactoring has been fully commoditized with LLMs\"}, {\"type\":\"list\"}, {\"type\":\"paragraph\",\"text\":\"PRs from newcomers\"}, {\"type\":\"list\"}, {\"type\":\"paragraph\",\"text\":\"Part of the problem is too much politeness\"}, {\"type\":\"list\"}, {\"type\":\"paragraph\",\"text\":\"If you are part time, it\u2019s easier to do small things\"}, {\"type\":\"list\"}, {\"type\":\"paragraph\",\"text\":\"High value refactors:\"}, {\"type\":\"list\"}, {\"type\":\"paragraph\",\"text\":\"Onboarding perspective - if you are mentoring someone, be mindful for what they are working on\"}, {\"type\":\"paragraph\",\"text\":\"Funding matters when it comes to diving into something deeper vs nights/weekend contribution\"}, {\"type\":\"paragraph\",\"text\":\"Don\u2019t have enough good first issues anymore, label isn\u2019t used much lately\\nWe should give better guidance to newcomers and those that may be experienced but don\u2019t have much time\\n\\\"I don\u2019t think we should have follow-ups to fix your nits\\\"\\n\\\"If you are the 3rd person to ack a PR and you leaving 30 nits, then it probably doesn\u2019t matter\\\"\"}, {\"type\":\"paragraph\",\"text\":\"Q: Did the refactor moratorium ever have any effect?\"}, {\"type\":\"paragraph\",\"text\":\"A: It was never instituted\"}, {\"type\":\"paragraph\",\"text\":\"Q: Do we have any guidance on the contributing guidelines?\"}, {\"type\":\"paragraph\",\"text\":\"A: Yes\"}, {\"type\":\"paragraph\",\"text\":\"Q: Do nit changes need to invalidate ACKs where the maintainers can clearly see that they don\u2019t impact functionality?\"}, {\"type\":\"paragraph\",\"text\":\"A: The merge script won\u2019t pick up something from the older commits\"}, {\"type\":\"paragraph\",\"text\":\"Q: Could change the merge script to add the stale acks, but the commits they ack disappear\"}, {\"type\":\"paragraph\",\"text\":\"A: If you want attribution, you can re-ack\"}, {\"type\":\"paragraph\",\"text\":\"You are allowed as an author to ignore nits, but it\u2019s good for you to acknowledge them, even if you are going to ignore them\"}",
    "body": "\nOne take-away from the Chaincode residency in 2019 was: Don\u2019t do refactors (unless you really need it)\n\nA marked increase from 2019 to today\n(Chart on the increase of refactors)\n\nThe comments and PRs are steady but the refactors are increasing\n\nQuibble about how regular reviewers are counted (should be higher than 5 comments)\n\nProject reasons:\n\n- Ossification?\n- Natural way mature projects progress/Boy Scout Rule\n\nPersonal reasons:\n\n- Time commitment of large review may not be possible (extended period of singular focus)\n- Merged PRs as proof of work, could help with the next grant\n- Feels good to ship\n\nWhat is the effect?\n\n- Working on refactors takes away from other work\n- Leads to rebases, sisyphus work for authors and reviewers\n- Speeds up for new-comers but slows down experienced contributors\n- Renamed variables as example\n\nRefactoring has been fully commoditized with LLMs\n\n- If there is a good refactor from GPT, we should take that too\n\nPRs from newcomers\n\n- We allow for less complex topics\n\nPart of the problem is too much politeness\n\n- You don\u2019t have to ignore it\n- It does have value\n- But it depends on whether it\u2019s a problem\n- In 2014: people have also been complaining about paying too much attention to small things\n- If reviewers have preference for picking smaller things to look at first, that also detracts\n- This is probably a problem because of reviewers choosing to review smaller things\n- Harsh feedback scares people away\n- More pushback on the individual level\n\nIf you are part time, it\u2019s easier to do small things\n\n- Full timers - more comfortable to jump into something that is deeper - we don\u2019t have\n- Like to work on larger domains but grants may not value that as much\n- Open a lot of smaller refactors to make it seem like they are doing something\n\nHigh value refactors:\n\n- Fuzz targets\n- Some refactors that are high value that never get addressed\n- Significant PRs can have refactor commits and sometimes those are the best kind\n  - The reason why the big projcects have refactors is because it is addressing the technical debt\n- We need to be more proactive and vocal about what we want and don\u2019t want\n\nOnboarding perspective - if you are mentoring someone, be mindful for what they are working on\n\nFunding matters when it comes to diving into something deeper vs nights/weekend contribution\n\nDon\u2019t have enough good first issues anymore, label isn\u2019t used much lately\nWe should give better guidance to newcomers and those that may be experienced but don\u2019t have much time\n\"I don\u2019t think we should have follow-ups to fix your nits\"\n\"If you are the 3rd person to ack a PR and you leaving 30 nits, then it probably doesn\u2019t matter\"\n\nQ: Did the refactor moratorium ever have any effect?\n\nA: It was never instituted\n\nQ: Do we have any guidance on the contributing guidelines?\n\nA: Yes\n\nQ: Do nit changes need to invalidate ACKs where the maintainers can clearly see that they don\u2019t impact functionality?\n\nA: The merge script won\u2019t pick up something from the older commits\n\nQ: Could change the merge script to add the stale acks, but the commits they ack disappear\n\nA: If you want attribution, you can re-ack\n\nYou are allowed as an author to ignore nits, but it\u2019s good for you to acknowledge them, even if you are going to ignore them\n\n",
    "body_type": "markdown",
    "created_at": "2023-04-25T00:00:00.000Z",
    "domain": "https://btctranscripts.com/",
    "url": "https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-25-refactors",
    "categories": [
        "core-dev-tech"
    ],
    "tags": [
        "bitcoin core"
    ],
    "authors": [
        "Fabian Jahr"
    ],
    "indexed_at": "2024-03-21T16:33:36.014Z",
    "summary": "In the evolving landscape of software development, particularly within the context of the Chaincode residency in 2019, Fabian Jahr has highlighted a significant shift towards increased refactoring efforts. Despite the prevailing wisdom to avoid refactoring unless absolutely necessary, data indicates a notable rise in these activities from 2019 to the present, as evidenced by an accompanying chart. This uptick in refactoring stands in contrast to the steady volume of comments and pull requests (PRs), sparking a debate regarding the criteria for counting regular reviewers, with suggestions that contributions exceeding five comments merit recognition.\n\nThe motivations behind this surge in refactoring efforts can be dissected into project-related and personal factors. From a project perspective, considerations such as ossification\u2014the process by which a software project becomes difficult to change\u2014and adherence to the Boy Scout Rule, which encourages the improvement of code with each iteration, play pivotal roles. On a personal level, contributors might opt for refactoring tasks due to constraints on time, allowing for shorter, focused work periods. Additionally, successfully merged PRs serve as tangible evidence of productivity, potentially influencing future grant considerations. The satisfaction derived from completing and shipping code modifications further incentivizes contributors to engage in refactoring.\n\nHowever, the implications of prioritizing refactoring are multifaceted. Although it can facilitate the integration of newcomers by simplifying their initial contributions, it simultaneously imposes burdens on seasoned developers through the necessity of frequent rebases and can lead to what is termed 'Sisyphus work'\u2014efforts that must be continually repeated. Moreover, the trend towards commoditization of refactoring tasks, facilitated by advancements in Large Language Models (LLMs) like GPT, suggests that valuable contributions from these technologies should also be embraced.\n\nDespite the allowance for less complex topics in PRs from newcomers, a culture of excessive politeness has emerged, sometimes deterring constructive criticism. This hesitancy to provide candid feedback, coupled with a preference among reviewers for less demanding tasks, exacerbates the challenge of balancing quality with inclusivity. Harsh feedback, while discouraging, can be mitigated with more nuanced pushback at the individual level.\n\nFor part-time contributors, the inclination towards smaller tasks is understandable, yet it contrasts with the desires of full-time developers who are better positioned to tackle more substantial challenges. This discrepancy is further complicated by funding mechanisms, which may not adequately value significant overhauls, leading to an abundance of minor refactors that superficially suggest productivity.\n\nRecognizing high-value refactors, such as fuzz targets and those addressing technical debt, is crucial for steering projects towards meaningful improvements. These efforts often include refactor commits within significant PRs, underscoring the importance of proactive and vocal prioritization of desired changes. Furthermore, from an onboarding perspective, mentors should guide newcomers towards impactful contributions, taking into account both the availability of 'good first issues' and the balance between deep engagement and casual, time-constrained participation.\n\nGuidance on contributing and handling nitpicks remains a contentious issue, with suggestions that not all minor suggestions need to derail the acknowledgment process for PRs. The possibility of modifying merge scripts to accommodate stale acknowledgments reflects an ongoing dialogue about how best to recognize contributions without compromising on quality or efficiency.\n\nIn summary, while the increase in refactoring activities within the Chaincode residency and similar projects presents opportunities for growth and inclusivity, it also necessitates a careful consideration of project goals, contributor motivations, and the overall impact on the software development lifecycle. Balancing these elements requires a nuanced approach to guidance, feedback, and recognition, ensuring that refactoring efforts contribute positively to the evolution of the project."
}