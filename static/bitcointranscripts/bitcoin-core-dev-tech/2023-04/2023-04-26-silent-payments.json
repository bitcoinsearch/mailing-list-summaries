{
    "id": "bitcointranscripts+bitcoin-core-dev-tech+2023-04+2023-04-26-silent-payments",
    "title": "Silent Payments",
    "body_formatted": "{\"type\":\"heading\",\"text\":\"BIP Overview\"}, {\"type\":\"paragraph\",\"text\":\"Scanning key and spending key are different: better security.\\nSilent payment transactions are indistinguishable from transactions with taproot outputs on-chain.\"}, {\"type\":\"paragraph\",\"text\":\"Q: Address labeling, why not create two silent payment addresses?\"}, {\"type\":\"paragraph\",\"text\":\"A: It doubles scanning costs.\"}, {\"type\":\"paragraph\",\"text\":\"Limited to taproot UTXOs (currently about 3% of transactions) but when it increases we should find ways to optimize scanning, even though it currently does not seem to be an issue.\"}, {\"type\":\"paragraph\",\"text\":\"Q: Why no P2PK\"}, {\"type\":\"paragraph\",\"text\":\"A: Limit to most used payment types to keep the implementation simple? No strong opinion.\"}, {\"type\":\"paragraph\",\"text\":\"Q: Do you need txindex?\"}, {\"type\":\"paragraph\",\"text\":\"A: No. It uses undo data to get the prevouts\"}, {\"type\":\"paragraph\",\"text\":\"Q: Can you prune data?\"}, {\"type\":\"paragraph\",\"text\":\"A: Yes, but can only rescan wallet history from unpruned blocks. It should be possible to recover from the UTXO set on a pruned node\"}, {\"type\":\"heading\",\"text\":\"Address encoding\"}, {\"type\":\"paragraph\",\"text\":\"prefix: sp for mainnet and tsp: testnet\\n'q' char: silent payment v0\\n64 bytes concat of recipient pubkey Bm || Bscan\"}, {\"type\":\"heading\",\"text\":\"Public Keys\"}, {\"type\":\"paragraph\",\"text\":\"Instead of using a single public key, use all the input public keys that were signed for\\nNeeded to prevent coinjoin input linking (knowing who you're paying to). Also helps with scanning (only one ECDH per transaction).\"}, {\"type\":\"paragraph\",\"text\":\"One way we could do this is to limit to Complex scripts:\\n    Script contains a pubkey and signature\\n    Script is valid miniscript\"}, {\"type\":\"paragraph\",\"text\":\"Q: Why not only native segwit inputs and drop support for other types?\"}, {\"type\":\"paragraph\",\"text\":\"A: UTXOs already exist in other types, don't want to require senders to migrate UTXOs to newer versions because it is costly and raises costs to entry and hurts adoption\"}, {\"type\":\"paragraph\",\"text\":\"We want the protocol to be as easy as possible for senders and keep the protocol simple. Sending is simpler than receiving in terms of implementation.\"}, {\"type\":\"paragraph\",\"text\":\"Q: How does ECDH work with MuSig?\"}, {\"type\":\"paragraph\",\"text\":\"A: Should be fine, have not tested.\"}, {\"type\":\"heading\",\"text\":\"Creating outputs\"}, {\"type\":\"paragraph\",\"text\":\"can pay multiple outputs in the same transaction\\nMost expensive step is ECDH, which only needs to be done once, regardless of the number of outputs\"}, {\"type\":\"paragraph\",\"text\":\"Q: Why support creating outputs to the same recipient in a transaction?\"}, {\"type\":\"paragraph\",\"text\":\"A: For paying the same entity to multiple labels and also in the case of a coinjoin where multiple participants are paying the same silent payment address\"}, {\"type\":\"paragraph\",\"text\":\"Q: Is adding keys together vulnerable to rogue key attacks?\"}, {\"type\":\"paragraph\",\"text\":\"A: Not a problem. All keys have signatures.\"}, {\"type\":\"paragraph\",\"text\":\"Q: Why increment N and not take output index?\"}, {\"type\":\"paragraph\",\"text\":\"A: Don't want to tie it to how the tx is setup -> have to check all the transaction index makes the scanning faster\"}, {\"type\":\"paragraph\",\"text\":\"Spend and scanning keys are derived using BIP32 using m/BIP'/0'k and m/BIP'/1'/k respectively.\\nUsing separate derivation paths for spend and scanning keys allows for better security.\\nLeaking the scanning key does not leak the spend key and vice versa.\"}, {\"type\":\"paragraph\",\"text\":\"Q: Most wallets don't support exporting private keys\"}, {\"type\":\"paragraph\",\"text\":\"A: We talked to a few hardware wallet manufacturers and so far everyone has said  they would support it. Need to figure out a safe way to do it.\"}, {\"type\":\"paragraph\",\"text\":\"Q: Could use hashed public key as private key for the scan key if private key cannot be exported from wallet.\"}, {\"type\":\"paragraph\",\"text\":\"A: We would rather avoid it, your public key is now secret data. If you leak the public key, you would lose your privacy\"}, {\"type\":\"paragraph\",\"text\":\"You could have a dedicated wallet for silent payments.\\nCan generate silent payment addresses for change outputs, will not require BIP32 support.\\nMaybe will support marking the change outputs using labels so that when funds are restored the user can know which outputs are change outputs.\"}, {\"type\":\"paragraph\",\"text\":\"After the SP BIP is published, another BIP for Silent Payment descriptors should be published.\"}, {\"type\":\"paragraph\",\"text\":\"The receiver of an SP payment has a wallet that is tied to a full node for scanning.\"}, {\"type\":\"paragraph\",\"text\":\"Could use the script interpreter to extract the signatures from the script.\\nMay cause issues with newer versions of taproot for nodes serving multiple light clients.\\nDropping support for complex scripts may resolve issues but will reduce the anonymity set.\"}, {\"type\":\"paragraph\",\"text\":\"Versioning feature would require scanning transactions for each version.\\nA single input supporting SP is required in the transaction.\"}, {\"type\":\"paragraph\",\"text\":\"SP could serve as donations but also as a routing number for transactions to transfer funds to ourselves. Could also be used in username protocols\"}, {\"type\":\"paragraph\",\"text\":\"Light client process:\"}, {\"type\":\"list\"}, {\"type\":\"heading\",\"text\":\"Next steps\"}, {\"type\":\"list\"}",
    "body": "\n## BIP Overview\n\nScanning key and spending key are different: better security.\nSilent payment transactions are indistinguishable from transactions with taproot outputs on-chain.\n\nQ: Address labeling, why not create two silent payment addresses?\n\nA: It doubles scanning costs.\n\nLimited to taproot UTXOs (currently about 3% of transactions) but when it increases we should find ways to optimize scanning, even though it currently does not seem to be an issue.\n\nQ: Why no P2PK\n\nA: Limit to most used payment types to keep the implementation simple? No strong opinion.\n\nQ: Do you need txindex?\n\nA: No. It uses undo data to get the prevouts\n\nQ: Can you prune data?\n\nA: Yes, but can only rescan wallet history from unpruned blocks. It should be possible to recover from the UTXO set on a pruned node\n\n## Address encoding\n\nprefix: sp for mainnet and tsp: testnet\n'q' char: silent payment v0\n64 bytes concat of recipient pubkey Bm || Bscan\n\n## Public Keys\n\nInstead of using a single public key, use all the input public keys that were signed for\nNeeded to prevent coinjoin input linking (knowing who you're paying to). Also helps with scanning (only one ECDH per transaction).\n\nOne way we could do this is to limit to Complex scripts:\n    Script contains a pubkey and signature\n    Script is valid miniscript\n\nQ: Why not only native segwit inputs and drop support for other types?\n\nA: UTXOs already exist in other types, don't want to require senders to migrate UTXOs to newer versions because it is costly and raises costs to entry and hurts adoption\n\nWe want the protocol to be as easy as possible for senders and keep the protocol simple. Sending is simpler than receiving in terms of implementation.\n\nQ: How does ECDH work with MuSig?\n\nA: Should be fine, have not tested.\n\n## Creating outputs\n\ncan pay multiple outputs in the same transaction\nMost expensive step is ECDH, which only needs to be done once, regardless of the number of outputs\n\nQ: Why support creating outputs to the same recipient in a transaction?\n\nA: For paying the same entity to multiple labels and also in the case of a coinjoin where multiple participants are paying the same silent payment address\n\nQ: Is adding keys together vulnerable to rogue key attacks?\n\nA: Not a problem. All keys have signatures.\n\nQ: Why increment N and not take output index?\n\nA: Don't want to tie it to how the tx is setup -> have to check all the transaction index makes the scanning faster\n\nSpend and scanning keys are derived using BIP32 using m/BIP'/0'k and m/BIP'/1'/k respectively.\nUsing separate derivation paths for spend and scanning keys allows for better security.\nLeaking the scanning key does not leak the spend key and vice versa.\n\nQ: Most wallets don't support exporting private keys\n\nA: We talked to a few hardware wallet manufacturers and so far everyone has said  they would support it. Need to figure out a safe way to do it.\n\nQ: Could use hashed public key as private key for the scan key if private key cannot be exported from wallet.\n\nA: We would rather avoid it, your public key is now secret data. If you leak the public key, you would lose your privacy\n\nYou could have a dedicated wallet for silent payments.\nCan generate silent payment addresses for change outputs, will not require BIP32 support.\nMaybe will support marking the change outputs using labels so that when funds are restored the user can know which outputs are change outputs.\n\nAfter the SP BIP is published, another BIP for Silent Payment descriptors should be published.\n\nThe receiver of an SP payment has a wallet that is tied to a full node for scanning.\n\nCould use the script interpreter to extract the signatures from the script.\nMay cause issues with newer versions of taproot for nodes serving multiple light clients.\nDropping support for complex scripts may resolve issues but will reduce the anonymity set.\n\nVersioning feature would require scanning transactions for each version.\nA single input supporting SP is required in the transaction.\n\nSP could serve as donations but also as a routing number for transactions to transfer funds to ourselves. Could also be used in username protocols\n\nLight client process:\n\n- Node scans the blockchain for potential SP transactions.\n- Sums up the pubkeys and sends them to the light client for verification.\n\n## Next steps\n\n- We will update the BIP and submit it to the mailing list.\n- We will convert the draft PR into a smaller PR to add support in Core, will follow up with a second PR for adding RPC coverage, etc\n\n",
    "body_type": "markdown",
    "created_at": "2023-04-25T00:00:00.000Z",
    "domain": "https://btctranscripts.com/",
    "url": "https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-26-silent-payments",
    "categories": [
        "core-dev-tech"
    ],
    "tags": [
        "bitcoin core",
        "silent payments"
    ],
    "authors": [
        "Josibake",
        "Ruben Somsen"
    ],
    "indexed_at": "2024-03-21T16:33:36.017Z",
    "summary": "In a recent podcast, Josibake and Ruben Somsen delved into the intricacies of a Bitcoin Improvement Proposal (BIP) focused on enhancing transaction privacy through silent payments. This innovative approach introduces a distinction between scanning keys and spending keys to bolster security, ensuring that silent payment transactions are indistinguishable from those with taproot outputs when observed on the blockchain. Despite the potential for increased scanning costs associated with creating multiple silent payment addresses, the benefits of this method were emphasized, particularly in the context of limited taproot UTXOs\u2014which currently comprise about 3% of all transactions.\n\nThe dialogue also covered technical aspects of address encoding, specifying a prefix system (\"sp\" for mainnet and \"tsp\" for testnet) alongside a character identifier ('q' for silent payment v0), followed by a concatenation of recipient public key and scanning key. This setup aims to mitigate coinjoin input linking by leveraging all input public keys signed for, thereby enhancing privacy while simplifying the scanning process through the utilization of elliptic curve Diffie-Hellman (ECDH) for each transaction.\n\nFurther discussion addressed the protocol's inclusivity regarding UTXO types, opting not to limit transactions to native segwit inputs alone. This decision reflects a commitment to ease of use for senders and broadening adoption without imposing migration costs. Moreover, the conversation touched upon the compatibility of ECDH with MuSig, indicating an openness to diverse cryptographic practices within the framework of silent payments.\n\nCreating outputs emerged as another focal point, with the protocol allowing for multiple outputs in a single transaction. The most resource-intensive step, ECDH, necessitates execution only once per transaction, regardless of output number, facilitating payments to the same entity under various labels or in coinjoin scenarios. To streamline the scanning process and enhance security, spend and scanning keys are derived using distinct BIP32 paths, with hardware wallet manufacturers reportedly expressing willingness to support such functionalities.\n\nThe podcast also hinted at future developments, including a dedicated BIP for Silent Payment descriptors and considerations for light client processes. These advancements seek to refine the user experience for SP payment receivers, potentially employing script interpreters to extract signatures and addressing challenges posed by taproot versioning for nodes serving multiple clients. As the BIP undergoes further updates and discussions within the community, its potential for fostering transactional privacy while maintaining simplicity and accessibility remains a compelling narrative in the evolution of Bitcoin\u2019s ecosystem."
}