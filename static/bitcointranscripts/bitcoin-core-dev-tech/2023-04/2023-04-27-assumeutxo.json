{
    "id": "bitcointranscripts+bitcoin-core-dev-tech+2023-04+2023-04-27-assumeutxo",
    "title": "AssumeUTXO update",
    "body_formatted": "{\"type\":\"heading\",\"text\":\"Goals\"}, {\"type\":\"list\"}, {\"type\":\"heading\",\"text\":\"Approach\"}, {\"type\":\"list\"}, {\"type\":\"heading\",\"text\":\"Progress update\"}, {\"type\":\"list\"}, {\"type\":\"heading\",\"text\":\"Open issues\"}, {\"type\":\"paragraph\",\"text\":\"`nFile` order gets fragmented, potential problems with pruning and/or reindex\\n-> Introduce blockfile nFile counter per chainstate types (simple change)\"}, {\"type\":\"heading\",\"text\":\"Pruning\"}, {\"type\":\"list\"}, {\"type\":\"heading\",\"text\":\"Indexing\"}, {\"type\":\"paragraph\",\"text\":\"`validationinterface` signals are picked up by indices\"}, {\"type\":\"list\"}, {\"type\":\"heading\",\"text\":\"Approach re-ack discussion\"}, {\"type\":\"list\"}",
    "body": "\n## Goals\n\n- allow nodes to get a utxo set quickly (1h)\n- at the same time, no major security concessions\n\n## Approach\n\n- Provide serialized utxo snapshot\n- get headers chain first, load snapshot and deserialize, sync to tip from that\n- then start background verification with a 2nd snapshot\n- finally, compare hashes when background IBD hits snapshot base\n\n## Progress update\n\n- lots of refactoring has been done; `ChainStateManager `was introduced, globals removed, mempool / blockstorage refactored\n- init / shutdown logic changes have been merged\n- wallet changes done\n- p2p changes still under review (i.e. picking the chainstate to which to append new blocks )\n\n## Open issues\n\n`nFile` order gets fragmented, potential problems with pruning and/or reindex\n-> Introduce blockfile nFile counter per chainstate types (simple change)\n\n## Pruning\n\n- currently, pruning target w/ trailing window\n- do the same, but with two tips - different possiblities to achieve this\n\n## Indexing\n\n`validationinterface` signals are picked up by indices\n\n- could build out of order, but some indexes (coinstats) cant be build out of order\n- simple solution: just disable all indexes until sync completes\n- fancy solution: disable some indexers only\n\n- Introduce rpc to load chainstate\n- Put actual assumeutxo hashes into chainparams\n- In total, only ~1k loc left, although mostly in important places\n\n## Approach re-ack discussion\n\n- Do we really need background sync?\n- not doing the background sync is simpler, but changes security assumptions\n- Also, it would remove the necessity that every node must be able to sync the chain\n\n",
    "body_type": "markdown",
    "created_at": "2023-04-27T00:00:00.000Z",
    "domain": "https://btctranscripts.com/",
    "url": "https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-27-assumeutxo",
    "categories": [
        "core-dev-tech"
    ],
    "tags": [
        "bitcoin core",
        "assumeutxo"
    ],
    "authors": [
        "James O'Beirne"
    ],
    "indexed_at": "2024-03-21T16:33:36.019Z",
    "summary": "In a recent podcast, James O'Beirne discussed innovative strategies aimed at enhancing the efficiency of node synchronization in blockchain networks without compromising security. The primary goal is to enable nodes to acquire a utxo (unspent transaction output) set within an hour, maintaining the network's integrity and security. O'Beirne outlined a multi-faceted approach to achieve this objective, which includes the provision of serialized utxo snapshots for quick acquisition by nodes, followed by synchronization to the current network state from the point of the snapshot.\n\nTo ensure the reliability and security of this process, O'Beirne proposed a method where, after the initial snapshot loading and synchronization, nodes commence a background verification using a second snapshot. This step is critical as it allows for a comparison of hashes when the background Initial Block Download (IBD) reaches the snapshot base, ensuring consistency and integrity of the data across the network.\n\nO'Beirne provided an update on the progress of implementing these strategies, noting substantial refactoring efforts that have been undertaken to streamline the system. This includes the introduction of `ChainStateManager`, the removal of global variables, and significant refinements to mempool and block storage management. Additionally, changes to initialization and shutdown logic have been successfully integrated, alongside updates to wallet functionalities. However, peer-to-peer network modifications are still under review, specifically concerning the selection of chainstate for appending new blocks.\n\nDespite these advancements, O'Beirne highlighted several unresolved issues, such as the fragmentation of `nFile` order, which could potentially impact pruning and reindexing processes. A proposed solution involves introducing a blockfile `nFile` counter specific to each chainstate type, simplifying the overall management of blockfiles.\n\nPruning strategies were also discussed, with the current method involving a pruning target with a trailing window. O'Beirne suggested maintaining this approach but adapting it to accommodate two tips, offering various possibilities for efficient data management. Additionally, challenges related to indexing were addressed, particularly the issue of building indexes out of order. To circumvent this, disabling all indexes until synchronization is complete was presented as a straightforward solution, with a more sophisticated option involving selective indexer deactivation.\n\nFurther technical enhancements include the introduction of an RPC to load chainstate and the incorporation of actual assumeutxo hashes into chain parameters. O'Beirne estimated that approximately 1,000 lines of code remain to be implemented, mostly in critical areas of the system.\n\nThe discussion concluded with a reevaluation of the necessity for background synchronization. While omitting this step would simplify the process, it would alter the security assumptions underlying the network's operation. Eliminating the requirement for every node to be capable of syncing the entire chain might streamline operations but necessitates careful consideration of the trade-offs involved in such a decision, underscoring the ongoing efforts to balance efficiency with security in blockchain technology advancements."
}