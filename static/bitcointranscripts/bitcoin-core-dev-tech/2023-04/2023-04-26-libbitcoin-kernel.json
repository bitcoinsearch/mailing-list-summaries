{
    "id": "bitcointranscripts+bitcoin-core-dev-tech+2023-04+2023-04-26-libbitcoin-kernel",
    "title": "Libbitcoin kernel",
    "body_formatted": "{\"type\":\"heading\",\"text\":\"Questions and Answers\"}, {\"type\":\"paragraph\",\"text\":\"Q: bitcoind and bitcoin-qt linked against kernel the libary in the future?\"}, {\"type\":\"list\"}, {\"type\":\"paragraph\",\"text\":\"Q: Have you looked at an electrum implementation using libbitcoinkernel?\"}, {\"type\":\"list\"}, {\"type\":\"paragraph\",\"text\":\"Q: Other use-cases:\"}, {\"type\":\"list\"}, {\"type\":\"paragraph\",\"text\":\"Q: Should the mempool be in the kernel?\"}, {\"type\":\"list\"}, {\"type\":\"paragraph\",\"text\":\"Q: Presenter: Feedback on approach to building smaller PoC in private to find out what the API can look like?\"}, {\"type\":\"list\"}, {\"type\":\"paragraph\",\"text\":\"Q: Many places that call shutdown. Errors should bubble up with \\\"this function called shutdown\\\".\"}, {\"type\":\"list\"}",
    "body": "## Questions and Answers\n\nQ: bitcoind and bitcoin-qt linked against kernel the libary in the future?\n\n- presenter: yes, that is a / the goal\n\nQ: Have you looked at an electrum implementation using libbitcoinkernel?\n\n- audience: yes, would be good to have something like this!\n- audience: Also could do the long proposed address index with that?\n- audience: not only address index, other indexes too.\n\nQ: Other use-cases:\n\n- audience: be able to run stuff on iOS\n\nQ: Should the mempool be in the kernel?\n\n- presenter: there are some mempool files in the kernel\n- audience: No, it should not be.\n- audience: Why not? Should people implement their own?\n- audience: it's policy, not consensus\n- audience: maybe libbitcoinmempool..? also libs for addrman, p2p, ..?\n- audience: what are we trying to achieve? avoid net-splits between different implementations?\n- audience: include a default mempool impl but possibility to use own/custom mempool?\n- audience: depends on what people need. Some want it. Maybe finish this project and then look from there.\n- audience: do we want to maintain libmempool or other libs?\n- audience: if we use it ourselves it shouln't be a problem\n- audience: will help with repo seperation in the future if we have multiple libs\n- audience: yes, will help maintenance tremendously. Kill the monolith. people can build on libs and don't need to pollute the `bitcoin` repo.\n- audience: bitcoin (Core) needs this in the long run\n- audience: allows moving e.g. RPCs into many smaller tools that access a running kernel lib\n- audience: will more/multiple libs get less review? Not really, maybe.\n\nQ: Presenter: Feedback on approach to building smaller PoC in private to find out what the API can look like?\n\n- (no responses)\n\nQ: Many places that call shutdown. Errors should bubble up with \"this function called shutdown\".\n\n- audience: To do this, we'd have to change a lot of code - huge diff.\n- audience: we can use a scripted-diff which makes review easier.\n- audience: alternative is catching exceptions: e.g. UTXO set corrupt, disk is full\n- audience: the lib user should make these decisions. seems terrible to review all the code.\n\n",
    "body_type": "markdown",
    "created_at": "2023-04-26T00:00:00.000Z",
    "domain": "https://btctranscripts.com/",
    "url": "https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-26-libbitcoin-kernel",
    "categories": [
        "core-dev-tech"
    ],
    "tags": [
        "bitcoin core",
        "build-system"
    ],
    "authors": [
        "thecharlatan"
    ],
    "indexed_at": "2024-03-21T16:33:36.015Z",
    "summary": "In a recent discussion led by the presenter, known as thecharlatan, an innovative vision for the integration of bitcoind and bitcoin-qt with kernel library emerged as a strategic goal. This ambitious endeavor aims to harness the potential of libbitcoinkernel to revolutionize the way Bitcoin operates, underscoring a significant shift towards more efficient and versatile implementations. The conversation delved into the possibility of leveraging libbitcoinkernel for an Electrum implementation, sparking enthusiasm among the audience. This development could pave the way for advanced functionalities, including the long-awaited address index and other indexing capabilities, which would substantially enhance Bitcoin's utility and user experience.\n\nFurthermore, the dialogue explored various use-cases that could benefit from this integration, such as executing operations on iOS platforms, indicating a broader vision for Bitcoin's accessibility and adaptability. A pivotal point of debate centered around whether the mempool should be incorporated into the kernel. While some mempool files currently reside in the kernel, opinions varied on the necessity and feasibility of this approach. Critics argued that the mempool constitutes policy rather than consensus, suggesting alternative solutions like creating dedicated libraries for mempool, addrman, p2p, and others. The overarching goal is to mitigate net-splits between different implementations, with suggestions to include a default mempool implementation while allowing for custom alternatives. This would cater to diverse needs within the community and potentially streamline future projects by clarifying dependencies and requirements.\n\nThe discussion also touched upon the strategic advantages of dividing the Bitcoin repository into multiple libraries. Such a restructuring could significantly ease maintenance efforts, eliminate the challenges posed by the monolithic codebase, and encourage the development of smaller, focused tools that interact with a running kernel library. This modular approach could facilitate the migration of RPCs into more manageable components without compromising the thoroughness of code reviews.\n\nThe presenter concluded by seeking feedback on the proposed method of building smaller proofs of concept in private to refine the API's design. Despite the lack of immediate responses, this strategy highlights a pragmatic approach to tackling the complex challenges of integrating Bitcoin with the kernel library. Additionally, the conversation acknowledged the technical hurdles involved in enhancing error handling within the Bitcoin codebase. Suggestions included adopting scripted-diffs to simplify code review processes and implementing exception catching for critical errors, emphasizing the importance of empowering library users to make informed decisions regarding error management.\n\nThis comprehensive discussion reflects a forward-thinking mindset within the Bitcoin community, aiming to enhance the cryptocurrency's infrastructure through innovative solutions and collaborative problem-solving. The envisioned integration with the kernel library not only promises to expand Bitcoin's functionality and efficiency but also underscores the community's commitment to evolving and adapting in response to technological advancements and user needs."
}