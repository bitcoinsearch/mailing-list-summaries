{
    "id": "bitcointranscripts+bitcoin-core-dev-tech+2018-10+2018-10-10-signmessage",
    "title": "Signmessage",
    "body_formatted": "{\"type\":\"paragraph\",\"text\":\"kallewoof and others\"}, {\"type\":\"paragraph\",\"text\":\"<https://twitter.com/kanzure/status/1049834659306061829>\"}, {\"type\":\"paragraph\",\"text\":\"I am trying to make a new signmessage to do other things. Just use the signature system inside bitcoin to sign a message. Sign a message that someone wants. You can use proof-of-funds or whatever.\"}, {\"type\":\"paragraph\",\"text\":\"You could just have a signature and it's a signature inside of a package and it's small and easy. Another option is to have a .. that is invalid somehow. You do a transaction with some input, where the txid is the message hash or something. We could have OP\\\\_MESSAGEONLY, which is that if you run into that in a signature for a transaction then you immediately fail, and if it's a message then you ignore it. You can have a signmessage pubkey and a spend pubkey and they are separate.\"}, {\"type\":\"paragraph\",\"text\":\"You might have a shared wallet and those UTXOs might represent funds that someone else owns. The complication of proving funds available are what do you do about cold wallets vs hot wallets? Do you use the same UTXOs to prove those funds?\"}, {\"type\":\"paragraph\",\"text\":\"Greg Sanders wants to have use a fork id for signmessage or proof-of-funds and then just use that whenever signing, which means it would be invalid on bitcoin. Make sure that altcoins don't use this too; but what happens when they go ahead and do that? Maybe any fork id means it's a signmessage and all the replay protection goes out the window ((laughter)).\"}, {\"type\":\"paragraph\",\"text\":\"People are asking for a simple extension for signmessage that works with segwit. Turning it into a new transaction type or whatever seems like something worth solving but a different problem. For those who just want to be able to sign a message with an address, having all this complication about well okay I'm expecting a signature from you and you're giving me a signature of a transaction but it has 100 inputs and it's doing other things. What is my verifier supposed to do with that? The API gets really complicated. You're compsing all the complexity of what a transaction can do in a simple message verification feature.\"}, {\"type\":\"paragraph\",\"text\":\"What do people want this for? proof of funds, auditing, airdrops, ...?\"}, {\"type\":\"paragraph\",\"text\":\"For just signing a message with a segwit address, there's already an electrum/trezor thing which is adding a flag to the existing signature. It's just an extension of the existing signature scheme. We could do that. It just seems hacky, though. It's not easily extended to any future change.\"}, {\"type\":\"paragraph\",\"text\":\"You could take the existing script system but the sighash or instead of ECDSA signatures with a suffix that indicates what to hash, any place where a signature is expected you sign the message with that public key. And the message gets some prefix to make sure it doesn't accidentally collide with some transaction or something. Just like a prefix like \\\"bitcoin message:\\\" plus the message. You don't need to include the message in the signature. It's just a scriptsig and a script witness.\"}, {\"type\":\"paragraph\",\"text\":\"The reason why people want the transaction version of this is that then you can get mimblewimble whatever later.. maybe I should throw out the proof-of-funds stuff and keep the signmessage part. Are people signing an address to prove? Are they using this as a PGP replacement, or to prove funds? Sometimes they precommit to a contract before being paid, which isn't very common, but that's what it does.\"}, {\"type\":\"paragraph\",\"text\":\"In confidential transactions, they have a blinding key, and-- they do some decryption. I don't think it's related to this.\"}, {\"type\":\"paragraph\",\"text\":\"I use signmessage to sign wallet entries in my wallet. I do this for proof-of-funds to show that any entry in my wallet is something that I actually control.\"}, {\"type\":\"paragraph\",\"text\":\"This is bip322.\"}",
    "body": "kallewoof and others\n\n<https://twitter.com/kanzure/status/1049834659306061829>\n\nI am trying to make a new signmessage to do other things. Just use the signature system inside bitcoin to sign a message. Sign a message that someone wants. You can use proof-of-funds or whatever.\n\nYou could just have a signature and it's a signature inside of a package and it's small and easy. Another option is to have a .. that is invalid somehow. You do a transaction with some input, where the txid is the message hash or something. We could have OP\\_MESSAGEONLY, which is that if you run into that in a signature for a transaction then you immediately fail, and if it's a message then you ignore it. You can have a signmessage pubkey and a spend pubkey and they are separate.\n\nYou might have a shared wallet and those UTXOs might represent funds that someone else owns. The complication of proving funds available are what do you do about cold wallets vs hot wallets? Do you use the same UTXOs to prove those funds?\n\nGreg Sanders wants to have use a fork id for signmessage or proof-of-funds and then just use that whenever signing, which means it would be invalid on bitcoin. Make sure that altcoins don't use this too; but what happens when they go ahead and do that? Maybe any fork id means it's a signmessage and all the replay protection goes out the window ((laughter)).\n\nPeople are asking for a simple extension for signmessage that works with segwit. Turning it into a new transaction type or whatever seems like something worth solving but a different problem. For those who just want to be able to sign a message with an address, having all this complication about well okay I'm expecting a signature from you and you're giving me a signature of a transaction but it has 100 inputs and it's doing other things. What is my verifier supposed to do with that? The API gets really complicated. You're compsing all the complexity of what a transaction can do in a simple message verification feature.\n\nWhat do people want this for? proof of funds, auditing, airdrops, ...?\n\nFor just signing a message with a segwit address, there's already an electrum/trezor thing which is adding a flag to the existing signature. It's just an extension of the existing signature scheme. We could do that. It just seems hacky, though. It's not easily extended to any future change.\n\nYou could take the existing script system but the sighash or instead of ECDSA signatures with a suffix that indicates what to hash, any place where a signature is expected you sign the message with that public key. And the message gets some prefix to make sure it doesn't accidentally collide with some transaction or something. Just like a prefix like \"bitcoin message:\" plus the message. You don't need to include the message in the signature. It's just a scriptsig and a script witness.\n\nThe reason why people want the transaction version of this is that then you can get mimblewimble whatever later.. maybe I should throw out the proof-of-funds stuff and keep the signmessage part. Are people signing an address to prove? Are they using this as a PGP replacement, or to prove funds? Sometimes they precommit to a contract before being paid, which isn't very common, but that's what it does.\n\nIn confidential transactions, they have a blinding key, and-- they do some decryption. I don't think it's related to this.\n\nI use signmessage to sign wallet entries in my wallet. I do this for proof-of-funds to show that any entry in my wallet is something that I actually control.\n\nThis is bip322.\n\n",
    "body_type": "markdown",
    "created_at": "2018-10-10T00:00:00.000Z",
    "domain": "https://btctranscripts.com/",
    "url": "https://btctranscripts.com/bitcoin-core-dev-tech/2018-10/2018-10-10-signmessage",
    "categories": [
        "core-dev-tech"
    ],
    "tags": [
        "wallet"
    ],
    "authors": [
        "Kalle Alm"
    ],
    "indexed_at": "2024-03-21T16:33:35.971Z",
    "transcript_by": "Bryan Bishop",
    "summary": "In a recent discussion, Kalle Alm delved into the intricacies and potential innovations surrounding Bitcoin's signature mechanisms, particularly focusing on the concept of signing messages as an extension or alternative use of Bitcoin's inherent signature system. The conversation highlighted the burgeoning need for a more versatile and user-friendly approach to message signing within the Bitcoin ecosystem, which could cater to a variety of applications such as proof-of-funds, auditing, and even airdrops.\n\nKalle Alm introduced the idea of creating a new signmessage protocol that utilizes the existing signature framework of Bitcoin but is tailored for more specific uses outside traditional transactions. This would enable users to sign messages directly, offering a straightforward method to prove ownership or control over funds without the complexities tied to transaction signatures. Alm proposed several methods to achieve this, including employing a simple package signature or integrating a unique transaction type that fails standard transaction checks but succeeds in verifying signed messages.\n\nThe discussion also touched upon the challenges of differentiating between cold and hot wallet funds in the context of proving fund availability. Greg Sanders contributed to the conversation by suggesting the use of a fork id specific to signmessage or proof-of-funds operations, ensuring these signatures would be invalidated on the Bitcoin network while cautioning against potential misuse by altcoins.\n\nA significant portion of the dialogue addressed the community's desire for a signmessage capability compatible with segwit addresses. Despite existing solutions like those implemented by Electrum and Trezor, which add flags to signatures, the consensus was that these approaches feel makeshift and lack future-proofing. Kalle Alm explored the feasibility of leveraging Bitcoin's scripting system for message signing, suggesting modifications to how messages are hashed and signed without fundamentally altering the underlying signature algorithm.\n\nFurthermore, the conversation ventured into the realm of transaction-based message signing and its implications for future developments, such as integration with privacy-focused technologies like Mimblewimble. The importance of such features for various use cases, including contract precommitments and confidential transactions, was acknowledged, highlighting the diverse needs driving innovation in message signing within the Bitcoin space.\n\nFinally, Kalle Alm shared personal insights into his use of the signmessage functionality for proof-of-funds verification within his wallet, underscoring the practical utility and significance of expanding and refining Bitcoin's message signing capabilities. This discussion culminated in the introduction of BIP322, a proposal aimed at addressing the outlined challenges and opportunities, marking a critical step forward in enhancing Bitcoin's utility beyond mere currency transactions."
}