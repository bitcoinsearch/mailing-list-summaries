{
    "id": "bitcointranscripts+bitcoin-core-dev-tech+2023-09+assumeUTXO-update",
    "title": "AssumeUTXO Update",
    "body_formatted": "{\"type\":\"list\"}",
    "body": "\n- One remaining PR\n  - [#27596](https://github.com/bitcoin/bitcoin/pull/27596)\n  - Adds loadtxoutset and getchainstate RPC, documentation, scripts, tests\n  - Adds critical functionality needed for assumeutxo validation to work: net processing updates, validation interface updates, verifydb bugfix, cache rebalancing\n  - Makes other improvements so pruning, indexing, -reindex features are compatible with assumeutxo and work nicely\n  - Adds hardcoded assumeutxo hash at height 788,000\n    - Probably this should be moved to separate PR?\n\n- Questions about initial next steps (unanswered):\n  - Which release is this PR targeted for?\n  - Does it make sense to merge code changes first, then hash later?\n  - Maybe staged rollout makes sense? First merge code changes, then merge hash, then distribute snapshots?\n    - Assumeutxo is a new feature which needs testing.\n    - Start by merging functionality but require modifying source to actually use it.\n    - Then add hardcoded hash and let binary users create snapshots, verify snapshots, and load snapshots.\n    - Later work on distributing snapshot files, making the feature more accessible.\n\n- Longer term questions\n  - Should snapshots hash be configurable, allowed to be specified on command line?\n    - Potentially risky to allow but not allowing might incentivize using unofficial builds\n  - Should other hashes by added or supported?\n    - Muhash would make it a easier for someone running a node to verify snapshot hashes hardcoded in source code are correct, because no it will no longer require rolling back chainstate\n    - Bittorrent infohash could be distributed outside of source so user can know they are using the right torrent without having to download the whole thing and try to load it with the RPC\n  - Should hashes eventually be removed from source code?\n    - Having snapshot hashes could be considered a regression, since we are in the process of removing checkpoint hashes\n    - Having snapshot hashes potentially incentivizes modified Bitcoin Core binaries that provide more recent snapshots that could be malicious\n  - Should source code contain only one snapshot hash, or historical snapshots?\n  - Concerns about no one validating the hash\n    - Future Bitcoin developers could provide invalid hashes\n    - The attack would be a public, non stealth attack\n    - Switching to muhash could make it easier for more people to verify the hash\n  - P2P way of distributing snapshots and hashes separate from source distribution\n    - Have a new hash every 50,000 block\n    - Or some other fixed N blocks\n    - Release would have the most recent one\n    - One of the original ideas was distributing over the P2P network\n\n- Misc\n  - Reliability of stop at height\n  - Jameob\u2019s makesnapshot script resolves this\n\n",
    "body_type": "markdown",
    "created_at": "2023-09-20T00:00:00.000Z",
    "domain": "https://btctranscripts.com/",
    "url": "https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/assumeUTXO-update",
    "categories": [
        "core-dev-tech"
    ],
    "tags": [
        "bitcoin core",
        "assumeUTXO"
    ],
    "indexed_at": "2024-03-21T16:33:36.022Z",
    "summary": "In a recent and detailed discussion surrounding the implementation and integration of a significant update in Bitcoin's codebase, primarily encapsulated in pull request [#27596](https://github.com/bitcoin/bitcoin/pull/27596), the conversation shed light on both the immediate steps required for its merge into the main branch and the broader implications for future releases. This proposed update introduces two new RPC commands: loadtxoutset and getchainstate, along with comprehensive documentation, scripts, and tests to bolster Bitcoin's functionality. A pivotal enhancement facilitated by this PR is the addition of critical functionalities necessary for the validation of assumeutxo, including net processing updates, validation interface updates, a verifydb bugfix, and cache rebalancing. Furthermore, the update ensures that features such as pruning, indexing, and reindexing are compatible with assumeutxo, enhancing the overall efficiency and reliability of these operations.\n\nA notable inclusion in this pull request is the hardcoded assumeutxo hash at height 788,000, though it raises the question of whether this specific component should be moved to a separate PR for streamlined review and integration. As discussions unfold, several unanswered questions emerge regarding the initial next steps for the PR's integration, including its targeted release and whether a phased rollout might be more appropriate. The consensus leans towards a staged approach, beginning with the merger of code changes to enable preliminary testing, followed by the integration of the hardcoded hash to facilitate snapshot creation, verification, and loading by binary users. This methodical progression aims to ensure stability and thorough vetting before making snapshot files more widely accessible to the user base.\n\nLooking ahead, the conversation transitions to more strategic considerations concerning the long-term management and implementation of snapshot hashes. Debates arise over the potential configurability of snapshot hashes via command-line inputs, the addition of alternative hash types like Muhash for easier verification by node operators, and the eventual phasing out of hardcoded snapshot hashes from the source code to prevent reliance on potentially malicious modified binaries. Moreover, the discourse touches on the importance of maintaining only the most relevant snapshot hash in the source code to mitigate the risk of invalid hash distribution by future developers, advocating for a shift towards a peer-to-peer model of snapshot and hash dissemination.\n\nAmidst these forward-looking discussions, practical concerns such as the reliability of the stop at height feature are addressed, highlighting Jameob\u2019s makesnapshot script as a solution to ensure accurate and dependable snapshot creation. This dialogue encapsulates the multifaceted challenges and considerations involved in advancing Bitcoin's core functionalities through [#27596](https://github.com/bitcoin/bitcoin/pull/27596), illustrating a diligent and thoughtful approach to enhancing the security, efficiency, and usability of this groundbreaking cryptocurrency."
}