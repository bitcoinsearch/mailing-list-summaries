{
    "id": "bitcointranscripts+bitcoin-core-dev-tech+2023-09+wallet-coin-selection",
    "title": "Discussion on open Coin Selection matters",
    "body_formatted": "{\"type\":\"list\"}",
    "body": "\n* **Topic: review of https://github.com/bitcoin/bitcoin/pull/27601**\n    * Problem statement: when doing manual RBF (without using bumpfee RPC) we treat previous change output as a receiver and thus create two outputs to the same address\n    * Proposal: combine amount on outputs to the same address\n    * What are valid use-cases for having the same address for change and output?\n        * Consolidation with payment\n            * Alternative: Use sendall with two outputs one with an amount and yours without an amount\n        * Payment and send at least X to yourself\n        * Consolidate with automatic coin selection of at least X\n            * Alternative: Implement \"Send at least\" as a separate and explicitly feature\n    * Consider just giving an error if change destination is the same with one of the outputs\n        * Should we do the enforcement only at RPC level?\n            * No, because this is risky\n    * We don't want to fix manual RBF, because we have bumpfee RPC\n        * Maybe you can also take original TX and give to fundrawtransaction\n* **Topic:  https://github.com/bitcoin/bitcoin/pull/26732**\n    * CreateTransactionInternal should remove UTXOs conflicting with preselected\n* **Topic: Where do we make change decisions? During tx building or coin selection?**\n    * Whether we create change, how big it is and the type\n    * We determine the size of the change twice\n        * One time to feed into coinselection\n        * Second time when we do the actual tx building\n    * One approach is to let coinselection pick change type\n    * Conclusion so far: Status quo remains\n* **Topic: Bug when BnB produce change https://github.com/bitcoin/bitcoin/issues/28180**\n    * Min_viable_change is different from cost_of_change and it doesn't include change_fee\n            * Zeroing out coins selection params for SFFO is bad\n        * We need to fix change_fee\n    * One solution: Reduce upper bound for BnB when SFFO\n    * Another solution: disable BnB and exact knapsack when user requested SFFO\n    * SFFO use cases are still unclear\n* **Topic: Coin grinder algorithm**\n    * Find a solutions with minimum weight and always creating change\n    * Differences from BnB\n        * when fee rate is lower than LTFR\n        * Always find a solutions because we have change\n    * Why lower first?\n        * To minimize liquidity in flight\n    * How to avoid grinding it to very small UTXO set\n        * Only use it at high fee rates\n        * Use multiple of LTFR\n    * Next steps: Run the simulations\n* **Topic: Knapsack removal**\n    * Useful because consolidatory\n    * Need more research on changeless solutions not found by BnB\n    * CoinGrinder replaces lowest larger\n    * Garbage collection for negative effective value\n\n",
    "body_type": "markdown",
    "created_at": "2023-09-19T00:00:00.000Z",
    "domain": "https://btctranscripts.com/",
    "url": "https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/wallet-coin-selection",
    "categories": [
        "core-dev-tech"
    ],
    "tags": [
        "bitcoin core",
        "coin selection"
    ],
    "indexed_at": "2024-03-21T16:33:36.035Z",
    "summary": "In the evolving landscape of Bitcoin transactions, developers and contributors are continually seeking improvements to enhance efficiency and security. A recent discussion in the Bitcoin GitHub repository sheds light on a series of proposals aimed at refining transaction processes, especially focusing on Replace-by-Fee (RBF), coin selection, and change output handling.\n\nOne notable proposal revolves around the optimization of manual RBF transactions. Currently, when users manually attempt an RBF without utilizing the 'bumpfee' RPC command, they may inadvertently create duplicate outputs to the same address, treating the original change output as a recipient. The proposed solution suggests amalgamating amounts directed to identical addresses to circumvent this redundancy. This approach not only streamlines transactions but also addresses potential use cases where having the same address for both change and output is desirable, such as payment consolidation or ensuring a minimum amount is sent to oneself. However, the discussion highlights a reluctance to overhaul manual RBF operations due to the existence of the 'bumpfee' RPC functionality, suggesting instead that users could leverage 'fundrawtransaction' with the original transaction details for more nuanced control.\n\nAnother critical area of debate concerns the 'CreateTransactionInternal' function, which, as suggested, should exclude UTXOs conflicting with those preselected by the user. This refinement ensures a more intuitive and error-free transaction building experience by preventing potential conflicts during the selection process.\n\nThe conversation also delves into the mechanics of change output decisions during transaction creation and coin selection. It's underscored that the decision-making regarding whether to create change, its amount, and type occurs at two distinct junctures: initially, to inform coin selection and subsequently during actual transaction construction. The current consensus leans towards maintaining the status quo, allowing coin selection algorithms to influence change type decisions.\n\nFurthermore, the discussion addresses a bug identified in the \"Branch and Bound\" (BnB) algorithm, which fails to account for the change fee in its calculation of the minimum viable change. This oversight leads to suboptimal coin selection under certain conditions, prompting suggestions for algorithmic adjustments. Specifically, recommendations include modifying the BnB upper bound constraints and considering disabling BnB for scenarios requesting \"Spend From Fee Only\" (SFFO), although the practical applications of SFFO remain somewhat ambiguous.\n\nAn alternative coin selection strategy, termed the \"Coin Grinder\" algorithm, emerges from these deliberations as a promising solution for situations where the fee rate is below a long-term fee rate (LTFR) threshold. Unlike BnB, the Coin Grinder ensures the creation of change, aiming to minimize liquidity in flight by prioritizing lower-value transactions. However, to avoid fragmenting the UTXO set excessively, its application would be limited to high-fee environments and calibrated using multiples of the LTFR.\n\nLastly, the potential removal of the \"Knapsack\" algorithm from Bitcoin's transaction processing repertoire sparks discussion. While the Knapsack serves a consolidatory function, there's a growing interest in exploring \"changeless\" solutions not covered by BnB, with the Coin Grinder algorithm positioned as a possible replacement. This shift underscores a broader intent to refine Bitcoin's handling of transactions through targeted algorithmic improvements and strategic feature implementations.\n\nThese discussions reflect a dynamic dialogue among Bitcoin developers, illustrating a commitment to addressing the intricacies of cryptocurrency transactions. Through careful consideration and collaborative exploration of proposed changes, the community aims to enhance the Bitcoin network's efficiency, usability, and overall integrity."
}