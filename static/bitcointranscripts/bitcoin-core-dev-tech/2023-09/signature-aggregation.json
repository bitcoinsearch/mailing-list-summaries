{
    "id": "bitcointranscripts+bitcoin-core-dev-tech+2023-09+signature-aggregation",
    "title": "Signature Aggregation Update",
    "body_formatted": "{\"type\":\"heading\",\"text\":\"The status of the Half-Agg BIP?\"}, {\"type\":\"paragraph\",\"text\":\"TODOs but also no use cases upcoming so adding it to the BIP repo doesn't seem useful\"}, {\"type\":\"paragraph\",\"text\":\"BIP Half-agg [TODOs for BIP](https://github.com/BlockstreamResearch/cross-input-aggregation/issues/11)\"}, {\"type\":\"paragraph\",\"text\":\"Consider setting z_0 = 1\"}, {\"type\":\"paragraph\",\"text\":\"Reconsider maximum number of signatures\"}, {\"type\":\"paragraph\",\"text\":\"Add failing verification test vectors that exercise edge cases.\"}, {\"type\":\"paragraph\",\"text\":\"Add signing test vectors (passing and failing, including edge cases)\"}, {\"type\":\"paragraph\",\"text\":\"Test latest version of hacspec (run through checker)\"}, {\"type\":\"paragraph\",\"text\":\"Half-agg BIP has a max number of signatures (2^16), making testing easy\"}, {\"type\":\"paragraph\",\"text\":\"Needs more test vectors\"}, {\"type\":\"paragraph\",\"text\":\"Open it as an informational BIP?\"}, {\"type\":\"paragraph\",\"text\":\"Potentially attract talent/more eyes to the project\"}, {\"type\":\"heading\",\"text\":\"Incremental half aggregation\"}, {\"type\":\"paragraph\",\"text\":\"Kind of new, already included in BIP and PR\"}, {\"type\":\"paragraph\",\"text\":\"Crypto portion straightforward, no secrets involved\"}, {\"type\":\"paragraph\",\"text\":\"Gossip channel announcements use case being discussed (Rusty?), no real momentum currently, not sure if 32bytes bandwidth saving is worth the effort\"}, {\"type\":\"paragraph\",\"text\":\"Half-agg will give a blocksize efficiency improvement, but no computational benefit\"}, {\"type\":\"paragraph\",\"text\":\"How many more tx in a block? Not many more, as witnesses already discounted.\"}, {\"type\":\"paragraph\",\"text\":\"Half agg much easier than full-agg as no interactivity needed\"}, {\"type\":\"paragraph\",\"text\":\"Discussion about whether aggregation could be done in a utreexo style roll-out with a different class of nodes, while not changing the consensus rules\"}, {\"type\":\"paragraph\",\"text\":\"Full aggregation and MuSig are completely different on a conceptual level\"}, {\"type\":\"paragraph\",\"text\":\"Useful to think of sig validation between 3 parties (sender, receiver, and validators)\"}, {\"type\":\"paragraph\",\"text\":\"MuSig example did whoever need to sign sign? (dont care WHO signed)\"}, {\"type\":\"paragraph\",\"text\":\"MuSig, FROST, etc are techniques to have a single key for an input, but going across multiple inputs is fundamentally different\"}, {\"type\":\"paragraph\",\"text\":\"In sigagg, aggregation is done by the verifiers who see everything vs MuSig where only involved parties see the keys\"}, {\"type\":\"paragraph\",\"text\":\"In musig and frost you simply use schnorr verification (verify(sig, message, pubkey) => true/false) while sigagg verification is verify(sig, [(m1, p1), \u2026.])\"}, {\"type\":\"heading\",\"text\":\"Benefits of halfagg\"}, {\"type\":\"paragraph\",\"text\":\"More tx in a block, space savings\"}, {\"type\":\"paragraph\",\"text\":\"But not much computational savings\"}, {\"type\":\"paragraph\",\"text\":\"Coinjoin benefits (halfagg and fullagg)\"}, {\"type\":\"paragraph\",\"text\":\"Concerns about fullagg actually hurting privacy\"}, {\"type\":\"paragraph\",\"text\":\"Having a single signature via full-agg is easier to do on your own txs rather than on multi-party tx where interactivity is needed. This means privacy busting services like chainalysis can use that as a heuristic, assuming aggregated-sigs are a sign that all the inputs belong to the same person.\"}, {\"type\":\"paragraph\",\"text\":\"Batch validation and Half-agg have same computation performance benefits\"}, {\"type\":\"paragraph\",\"text\":\"Approach: Consensus change, v2 witness\"}, {\"type\":\"paragraph\",\"text\":\"Half-agg consensus changes more invasive than taproot\"}, {\"type\":\"heading\",\"text\":\"Security proofs\"}, {\"type\":\"paragraph\",\"text\":\"Under certain assumptions, if you can forge schnorr sig, you break discrete log\"}, {\"type\":\"paragraph\",\"text\":\"Security loss of proof details\"}, {\"type\":\"paragraph\",\"text\":\"When we say we have a security proof, there is nuance; under certain assumptions we prove that if we can forge a schnorr sig, you can also break discrete log. Most traditional Schnorr proof, the statement is of the form, if you have a probability x of forging a sign, that turns into a prob of some function of that (x^2) of breaking the discrete log.\"}, {\"type\":\"paragraph\",\"text\":\"If we assume that the probability for computing the discreet log is not better than 2^128, this only implies that schnorr sig forgery is no more secure than 2^64. Which is not something that we would ordinarily accept. Crypto world has accepted this, theoretical world not so. Can you make your schnoor group big enough this is not a problem?\"}, {\"type\":\"paragraph\",\"text\":\"Can target a certain security level by increasing group size, e.g. 512 bit group bight give 128 bit security.\"}, {\"type\":\"paragraph\",\"text\":\"In practice world accepted that these loss factors are a side-effect of the proof, and not real. And that it actually is hard to break Schnorr signatures.\"}, {\"type\":\"paragraph\",\"text\":\"There is an alt proof with different assumptions re. group size and hash size (the two params). The first one says we have a ^2 one for the group, but this one says use bigger hashes and make the group a bit smaller. Does this point to a lack of a fully-sensible proof? Using random-oracle stuff you might not get a tight proof.\"}, {\"type\":\"paragraph\",\"text\":\"If you don't assume special things about the group, idealised assumptions, you have a loss of that square property. Someone has proved that there is no better proof. This doesn't imply it's insecure, but there is no better proof. In MuSig 1 paper there was a ^4 root loss. Similar here for half agg; there is a fork per signature, so there is a loss factor which is 2^n where n is number of transactions. So with 7 tx it only proves that signature is 1 bit secure.\"}, {\"type\":\"paragraph\",\"text\":\"There is no perfect security proof, but in practice that is often tolerated/acceptable. But for half agg, since it's new, makes sense to be cautious.\"}, {\"type\":\"paragraph\",\"text\":\"If you look at math guarantees, it can be misleading. e.g. if MuSig turns out to be much weaker than schnorr, then we can switch. We are only as secure as the weakest link.\"}, {\"type\":\"paragraph\",\"text\":\"Today we can do broken things in consensus, but it's not whether consensus allows, but whether it's safe. If there are many things encumbered by a scheme that is now insecure, that becomes a problem.\"}, {\"type\":\"paragraph\",\"text\":\"How can MuSig be insecure? Perhaps only from your co-signers. But with half-agg, if this is in consensus and turns out to be broken, then I might be able to spend your coins with a half agg sig, which would be extra bad. Very different level of failure to MuSig turning out insecure.\"}, {\"type\":\"paragraph\",\"text\":\"Half agg needs a much more invasive consensus change than taproot; where instead of True become x, but half agg needs a tx-level something?\"}, {\"type\":\"paragraph\",\"text\":\"Is a stronger proof a requirement to introduce to bitcoin? Some say no. ECDSA was picked before a security proof existed! :P There is a proof but the theoretical-loss is so large that is \u201cappears\u201d broken. There is a \u201ctight\u201d proof (little loss) in a stronger model, but the question is do we accept this. Community must decide\u2026\"}, {\"type\":\"paragraph\",\"text\":\"Is a security proof required for a proposed consensus change?\"}, {\"type\":\"paragraph\",\"text\":\"With full CISA, a problem with a new script version, similar to g'root\"}, {\"type\":\"paragraph\",\"text\":\"separate sigs from scripting - does this also apply to half agg? Yes. Need to be unambiguous about which sigs are aggregated. Imagine a new tapscript, V2 (simplicity?), an old verified will not be able to see those signatures, not recognise them as signatures, need two separate algos; one for pre-fork, and one for the upgraded nodes. Not hard, but must be careful in designing as e.g. OP_CHECKSIG/OP_SUCCESS could break? One thing you could do is say CISA only applies to key-path spend. Downside is that this needs a new witness version. But it is the most impactful as we expect most signatures to be key-path spends. Not aggregating keys in the script side removes many problems.\"}, {\"type\":\"paragraph\",\"text\":\"Tx validation needs to be unambiguous about what the signatures are for\"}, {\"type\":\"paragraph\",\"text\":\"Old verifier cant see those signatures, wont recognized them as sigs even\"}, {\"type\":\"paragraph\",\"text\":\"Covenant cases which could be popular would not be covered by sigagg\"}, {\"type\":\"paragraph\",\"text\":\"Do covenants help this? A vault could hold up? But they don't care about fee savings, less than lightning users perhaps. COuld end with two classes of tx which don't mix well together, which would be unfortunate. We envision more script changes than signature changes.\"}, {\"type\":\"heading\",\"text\":\"Halfagg at the block level\"}, {\"type\":\"paragraph\",\"text\":\"Could run into problems like MW cut-through at relay time (a + b + c works but a+b and b+c don't) but we should just not do something like that\"}, {\"type\":\"paragraph\",\"text\":\"Run into MW problems, talking about block-level half agg now.\"}, {\"type\":\"paragraph\",\"text\":\"During re-orgs we could not separate the signatures again; would need to save them. Notes in the half agg repo describe this interesting Q more.\"}, {\"type\":\"heading\",\"text\":\"Reorg issues\"}, {\"type\":\"paragraph\",\"text\":\"No proposed solution at the moment except keeping the signatures around for a while\"}, {\"type\":\"paragraph\",\"text\":\"Validators at the tip dont get the benefits (at block level)\"}, {\"type\":\"paragraph\",\"text\":\"Block-wide stuff is very future anyway, from one PoV half-agg works, and we can use it now if we wanted. But should we spend time coming up with a full agg proof? Do people want this.\"}, {\"type\":\"paragraph\",\"text\":\"lets say miner does the aggregation, only people who save bandwidth are blocksonly. But for half agg at the tx level, everyone saves. But at the block level, doesn't save any bandwidth. Let's stick to tx-level for now.\"}, {\"type\":\"paragraph\",\"text\":\"What would happen if you didn't commit to the s-values with the tx? No clear answer on this point\u2026\"}, {\"type\":\"paragraph\",\"text\":\"Who is willing to spend time on it? One hand raised.\"}, {\"type\":\"paragraph\",\"text\":\"One Coinjoin implementation is interested, and half agg can make a coinjoined tx cheaper than a non-coinjoined one, and give you more plausible deniability \u2013 I coinjoined because it's cheaper! And full agg possible for coinjoins, as it's already interactive.\"}, {\"type\":\"paragraph\",\"text\":\"Full agg is stateful, and has terrible security proof, which is why it's less considered. If you see a fully aggregated tx, you must infer that all inputs belong to the same person. So you make privacy worse.\"}, {\"type\":\"paragraph\",\"text\":\"When more than 1 person in the tx, there's interactivity involved, but pushback on doing full agg as it increased the number of rounds.\"}",
    "body": "\n## The status of the Half-Agg BIP?\n\nTODOs but also no use cases upcoming so adding it to the BIP repo doesn't seem useful\n\nBIP Half-agg [TODOs for BIP](https://github.com/BlockstreamResearch/cross-input-aggregation/issues/11)\n\nConsider setting z_0 = 1\n\nReconsider maximum number of signatures\n\nAdd failing verification test vectors that exercise edge cases.\n\nAdd signing test vectors (passing and failing, including edge cases)\n\nTest latest version of hacspec (run through checker)\n\nHalf-agg BIP has a max number of signatures (2^16), making testing easy\n\nNeeds more test vectors\n\nOpen it as an informational BIP?\n\nPotentially attract talent/more eyes to the project\n\n## Incremental half aggregation\n\nKind of new, already included in BIP and PR\n\nCrypto portion straightforward, no secrets involved\n\nGossip channel announcements use case being discussed (Rusty?), no real momentum currently, not sure if 32bytes bandwidth saving is worth the effort\n\nHalf-agg will give a blocksize efficiency improvement, but no computational benefit\n\nHow many more tx in a block? Not many more, as witnesses already discounted.\n\nHalf agg much easier than full-agg as no interactivity needed\n\nDiscussion about whether aggregation could be done in a utreexo style roll-out with a different class of nodes, while not changing the consensus rules\n\nFull aggregation and MuSig are completely different on a conceptual level\n\nUseful to think of sig validation between 3 parties (sender, receiver, and validators)\n\nMuSig example did whoever need to sign sign? (dont care WHO signed)\n\nMuSig, FROST, etc are techniques to have a single key for an input, but going across multiple inputs is fundamentally different\n\nIn sigagg, aggregation is done by the verifiers who see everything vs MuSig where only involved parties see the keys\n\nIn musig and frost you simply use schnorr verification (verify(sig, message, pubkey) => true/false) while sigagg verification is verify(sig, [(m1, p1), \u2026.])\n\n## Benefits of halfagg\n\nMore tx in a block, space savings\n\nBut not much computational savings\n\nCoinjoin benefits (halfagg and fullagg)\n\nConcerns about fullagg actually hurting privacy\n\nHaving a single signature via full-agg is easier to do on your own txs rather than on multi-party tx where interactivity is needed. This means privacy busting services like chainalysis can use that as a heuristic, assuming aggregated-sigs are a sign that all the inputs belong to the same person.\n\nBatch validation and Half-agg have same computation performance benefits\n\nApproach: Consensus change, v2 witness\n\nHalf-agg consensus changes more invasive than taproot\n\n## Security proofs\n\nUnder certain assumptions, if you can forge schnorr sig, you break discrete log\n\nSecurity loss of proof details\n\nWhen we say we have a security proof, there is nuance; under certain assumptions we prove that if we can forge a schnorr sig, you can also break discrete log. Most traditional Schnorr proof, the statement is of the form, if you have a probability x of forging a sign, that turns into a prob of some function of that (x^2) of breaking the discrete log.\n\nIf we assume that the probability for computing the discreet log is not better than 2^128, this only implies that schnorr sig forgery is no more secure than 2^64. Which is not something that we would ordinarily accept. Crypto world has accepted this, theoretical world not so. Can you make your schnoor group big enough this is not a problem?\n\nCan target a certain security level by increasing group size, e.g. 512 bit group bight give 128 bit security.\n\nIn practice world accepted that these loss factors are a side-effect of the proof, and not real. And that it actually is hard to break Schnorr signatures.\n\nThere is an alt proof with different assumptions re. group size and hash size (the two params). The first one says we have a ^2 one for the group, but this one says use bigger hashes and make the group a bit smaller. Does this point to a lack of a fully-sensible proof? Using random-oracle stuff you might not get a tight proof.\n\nIf you don't assume special things about the group, idealised assumptions, you have a loss of that square property. Someone has proved that there is no better proof. This doesn't imply it's insecure, but there is no better proof. In MuSig 1 paper there was a ^4 root loss. Similar here for half agg; there is a fork per signature, so there is a loss factor which is 2^n where n is number of transactions. So with 7 tx it only proves that signature is 1 bit secure.\n\nThere is no perfect security proof, but in practice that is often tolerated/acceptable. But for half agg, since it's new, makes sense to be cautious.\n\nIf you look at math guarantees, it can be misleading. e.g. if MuSig turns out to be much weaker than schnorr, then we can switch. We are only as secure as the weakest link.\n\nToday we can do broken things in consensus, but it's not whether consensus allows, but whether it's safe. If there are many things encumbered by a scheme that is now insecure, that becomes a problem.\n\nHow can MuSig be insecure? Perhaps only from your co-signers. But with half-agg, if this is in consensus and turns out to be broken, then I might be able to spend your coins with a half agg sig, which would be extra bad. Very different level of failure to MuSig turning out insecure.\n\nHalf agg needs a much more invasive consensus change than taproot; where instead of True become x, but half agg needs a tx-level something?\n\nIs a stronger proof a requirement to introduce to bitcoin? Some say no. ECDSA was picked before a security proof existed! :P There is a proof but the theoretical-loss is so large that is \u201cappears\u201d broken. There is a \u201ctight\u201d proof (little loss) in a stronger model, but the question is do we accept this. Community must decide\u2026\n\nIs a security proof required for a proposed consensus change?\n\nWith full CISA, a problem with a new script version, similar to g'root\n\nseparate sigs from scripting - does this also apply to half agg? Yes. Need to be unambiguous about which sigs are aggregated. Imagine a new tapscript, V2 (simplicity?), an old verified will not be able to see those signatures, not recognise them as signatures, need two separate algos; one for pre-fork, and one for the upgraded nodes. Not hard, but must be careful in designing as e.g. OP_CHECKSIG/OP_SUCCESS could break? One thing you could do is say CISA only applies to key-path spend. Downside is that this needs a new witness version. But it is the most impactful as we expect most signatures to be key-path spends. Not aggregating keys in the script side removes many problems.\n\nTx validation needs to be unambiguous about what the signatures are for\n\nOld verifier cant see those signatures, wont recognized them as sigs even\n\nCovenant cases which could be popular would not be covered by sigagg\n\nDo covenants help this? A vault could hold up? But they don't care about fee savings, less than lightning users perhaps. COuld end with two classes of tx which don't mix well together, which would be unfortunate. We envision more script changes than signature changes.\n\n## Halfagg at the block level\n\nCould run into problems like MW cut-through at relay time (a + b + c works but a+b and b+c don't) but we should just not do something like that\n\nRun into MW problems, talking about block-level half agg now.\n\nDuring re-orgs we could not separate the signatures again; would need to save them. Notes in the half agg repo describe this interesting Q more.\n\n## Reorg issues\n\nNo proposed solution at the moment except keeping the signatures around for a while\n\nValidators at the tip dont get the benefits (at block level)\n\nBlock-wide stuff is very future anyway, from one PoV half-agg works, and we can use it now if we wanted. But should we spend time coming up with a full agg proof? Do people want this.\n\nlets say miner does the aggregation, only people who save bandwidth are blocksonly. But for half agg at the tx level, everyone saves. But at the block level, doesn't save any bandwidth. Let's stick to tx-level for now.\n\nWhat would happen if you didn't commit to the s-values with the tx? No clear answer on this point\u2026\n\nWho is willing to spend time on it? One hand raised.\n\nOne Coinjoin implementation is interested, and half agg can make a coinjoined tx cheaper than a non-coinjoined one, and give you more plausible deniability \u2013 I coinjoined because it's cheaper! And full agg possible for coinjoins, as it's already interactive.\n\nFull agg is stateful, and has terrible security proof, which is why it's less considered. If you see a fully aggregated tx, you must infer that all inputs belong to the same person. So you make privacy worse.\n\nWhen more than 1 person in the tx, there's interactivity involved, but pushback on doing full agg as it increased the number of rounds.\n\n",
    "body_type": "markdown",
    "created_at": "2023-09-21T00:00:00.000Z",
    "domain": "https://btctranscripts.com/",
    "url": "https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/signature-aggregation",
    "categories": [
        "core-dev-tech"
    ],
    "tags": [
        "bitcoin core",
        "signature aggregation"
    ],
    "indexed_at": "2024-03-21T16:33:36.033Z",
    "summary": "In the realm of Bitcoin protocol development, discussions regarding the implementation and implications of half aggregation (half-agg) for Bitcoin Improvement Proposals (BIPs) are gaining traction. The concept, while still in its developmental phase, has yet to find compelling use cases that would necessitate its inclusion in the BIP repository immediately. Despite this, there is a consideration to open it as an informational BIP to draw more attention and possibly attract contributors to the project.\n\nIncremental half aggregation, although a relatively new concept, has been included in both BIP and PR discussions. Its cryptographic aspects are straightforward, involving no secrets, but its practical application, such as in gossip channel announcements, remains uncertain with concerns about the actual bandwidth savings versus the effort required for implementation. The potential of half-agg to enhance block size efficiency without offering computational benefits has been acknowledged, although the impact on transaction volume per block might be minimal due to existing discounts on witness data.\n\nThe discussion also veers into the comparison between half-agg and full aggregation techniques like MuSig, highlighting the significant difference in their operational frameworks. While MuSig facilitates creating a single key for an input thereby simplifying signature verification, half-agg requires aggregation by verifiers who have visibility over all transaction inputs, presenting a unique approach to signature validation.\n\nOne of the highlighted benefits of half-agg includes increased transaction capacity within a block, leading to space savings. However, this comes without substantial computational savings. Furthermore, the possibility of half-agg aiding in Coinjoin transactions was discussed, albeit with concerns about potentially compromising privacy in scenarios of full aggregation where a single signature could inadvertently signal that all inputs belong to a single entity.\n\nSecurity considerations form a significant part of the discourse, focusing on the nuances of proving the security of Schnorr signatures\u2014a foundational element of half-agg. It's pointed out that while traditional security proofs exist, they come with assumptions that may not fully align with practical expectations of security levels. This discrepancy raises questions about the adequacy of current cryptographic proofs and their implications for implementing new protocols like half-agg within the consensus mechanisms of Bitcoin.\n\nMoreover, the conversation touches upon the potential requirement for consensus changes more invasive than those introduced by taproot, emphasizing the need for clear differentiation between aggregated signatures and scripting languages to avoid ambiguity in transaction validation. This leads to a broader contemplation on the necessity and feasibility of integrating half-agg at the transaction level versus the block level, taking into account the challenges associated with reorganization and the desire to maintain bandwidth efficiency.\n\nLastly, the debate encapsulates considerations surrounding the practical deployment of half-agg, including its implications for coinjoined transactions and the delicate balance between enhancing transaction efficiency and preserving\u2014or potentially compromising\u2014user privacy. The collective sentiment suggests a cautious approach towards adopting half-agg, advocating for further research and community consensus before embedding such changes into the Bitcoin protocol."
}