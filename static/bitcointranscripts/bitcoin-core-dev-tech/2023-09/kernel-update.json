{
    "id": "bitcointranscripts+bitcoin-core-dev-tech+2023-09+kernel-update",
    "title": "Kernel Update",
    "body_formatted": "{\"type\":\"paragraph\",\"text\":\"Original roadmap decided by carl was:\"}, {\"type\":\"list\"}, {\"type\":\"heading\",\"text\":\"Open problems\"}, {\"type\":\"paragraph\",\"text\":\"(no opinions on what to do yet, we can discuss later this week)\"}, {\"type\":\"list\"}, {\"type\":\"paragraph\",\"text\":\"In the last few months, had convos with potential kernel users\"}, {\"type\":\"list\"}, {\"type\":\"heading\",\"text\":\"Q&A\"}, {\"type\":\"list\"}",
    "body": "\nOriginal roadmap decided by carl was:\n\n- Stage 1\n  - Step 1 Introduce bitcoin-chainstate \"kitchen sink\"\n\n- Step 2 (wrapped up ~2mon ago) remove non-valiation code\n\n- Step 3 (where we are rn) remove non-validation headers from bitcoin-chainstate\n  - We have mostly implemented\n\n- Step 4 integrate libbitcoinkernel as a static library\n  - Have the implementation on personal repo\n  - Need to look into breaking up files or live with code organization not being super logical\n\n- Stage 2 (we should talk about this now) improve libbitcoinkernel interface\n\n## Open problems\n\n(no opinions on what to do yet, we can discuss later this week)\n\n- Bubbling up fatal errors\n- Cory is working on leveraging clang-tidy to enforce this\n- Also need to figure out how to do this without\n- What we should do with mempool and policy. If not in the kernel, how to isolate?\n- Should kernel have any Bitcoin Core-specific functionality like assumevalid and checkpoints?\n- Can these features be \"clients\" of kernel?\n- Do kernel users have to use Core\u2019s state model?\n- E.g. UTreeXO data model. Maybe we should make it plugable\n- Defining a C header, guarantee stable api?\n- Should we expose system resources like thread/file handles in these headers\n- Compile-time vs run-time config, e.g.\n- Abstraction?\n  - Layer (1) opinionated elegant simple API on top of (2) kitchen sinky one\n\nIn the last few months, had convos with potential kernel users\n\n- Alternative full node implementations\n- People who want to validate on embedded devices\n- Data science utilities that need to use Bitcoin Core data structures etc. and value high performance\n\n## Q&A\n\n- Do you want to have fights about these things now or tomorrow?\n- Who\u2019s going to write the C headers api? Manually = very complicated. Is one option to generate them?\n- Currently thinking we can wrap every function with Russ\u2019 util::Result for coherence. Then come up with clever macro\n- Seems like a lot of these questions may be determined by the use cases. Other people can define their own C headers\n- What\u2019s important to me is that there is utility to Core. If not useful to Core, then we shouldn\u2019t do much.\n- C headers should be the last thing then.\n- Data model is interesting. One reason this took so long is discussion about doing this safely. Wasn\u2019t sure about giving client this abstraction as it can be footgun. Question might be what is the use case instead of what is safe.\n\n- What project is most likely to be the first user?\n  - #1 is bitcoind, #2 is the Bitcoin Core project. Secondary is external users like alternative implementations.\n  - Our usage:\n    - Maybe tests, as a lot of things can be tested without full bitcoind\n    - Standard utility like a rescan util\n    - Get the kernel separated and if we get that far, then others would probably find that interesting\n\n- We made some bad calls with bitcoinconsensus that we shouldn\u2019t repeat. We tried to make it as clean as possible, but that made it a little bit useless. We should try to focus on making this useful.\n\n",
    "body_type": "markdown",
    "created_at": "2023-09-18T00:00:00.000Z",
    "domain": "https://btctranscripts.com/",
    "url": "https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/kernel-update",
    "categories": [
        "core-dev-tech"
    ],
    "tags": [
        "bitcoin core",
        "build-system"
    ],
    "authors": [
        "thecharlatan"
    ],
    "indexed_at": "2024-03-21T16:33:36.027Z",
    "summary": "In a recent discussion led by thecharlatan, the evolving roadmap for enhancing Bitcoin's core infrastructure was meticulously outlined, marking significant strides toward optimizing its underlying technology. Initially, Carl's original roadmap set the stage for a progressive overhaul, beginning with introducing the bitcoin-chainstate \"kitchen sink,\" followed by the elimination of non-validation code, a step recently accomplished. Currently, the focus has shifted toward removing non-validation headers from the bitcoin-chainstate, a task nearing completion. The subsequent phase involves integrating libbitcoinkernel as a static library, a development that is already underway in personal repositories, albeit with considerations regarding code organization.\n\nAs the conversation transitioned into Stage 2, the imperative to refine the libbitcoinkernel interface was underscored. Open problems awaiting resolution were highlighted, including strategies for bubbling up fatal errors\u2014a challenge Cory is addressing through the leveraging of clang-tidy. Other critical discussions revolve around the placement and isolation of mempool and policy, the potential inclusion of Bitcoin Core-specific functionalities like assumevalid and checkpoints within the kernel, and the adaptability of the kernel to different data models, such as UTreeXO.\n\nThe dialogue also delved into technical specifics concerning the definition of a stable C header API, the exposure of system resources within these headers, and the balance between compile-time versus run-time configuration. A layered approach to API design was proposed, aiming to marry an opinionated, simplistic interface with the underlying complexity of bitcoin's architecture. Conversations with potential kernel users have illuminated diverse needs ranging from alternative full node implementations to high-performance requirements for data science utilities.\n\nA Q&A session further explored these themes, debating the timing for addressing contentious issues and the responsibility for crafting the C headers API. The possibility of automating this process was considered alongside utilizing Russ' util::Result wrapper for function coherence. The utility of the project to the core Bitcoin ecosystem emerged as a central criterion for proceeding with any enhancements, underscoring the project's commitment to practicality over theoretical perfection.\n\nFinally, reflections on past missteps with bitcoinconsensus called for a renewed focus on utility and applicability. The ambition is not only to refine the bitcoin kernel for internal advancements but also to cater to external users, with bitcoind and the Bitcoin Core project identified as primary beneficiaries. This initiative promises to extend its utility beyond testing environments to standard utilities, potentially attracting broader interest from the wider Bitcoin community.\n\nIn summary, the discussion encapsulated a forward-looking vision for Bitcoin's technological evolution, blending rigorous technical planning with a pragmatic approach to development and application. By addressing open problems, refining interfaces, and prioritizing utility, the project aims to solidify Bitcoin's infrastructure for both current and future demands."
}