{
    "id": "bitcointranscripts+bitcoin-core-dev-tech+2023-09+cmake",
    "title": "CMake Update",
    "body_formatted": "{\"type\":\"heading\",\"text\":\"Update\"}, {\"type\":\"paragraph\",\"text\":\"Hebasto has a branch he has been PRing into his own repo. Opened a huge CMake PR for Bitcoin core.\"}, {\"type\":\"paragraph\",\"text\":\"Introducing it chunk by chunk on his own repo\"}, {\"type\":\"paragraph\",\"text\":\"QT and GUIX is after that\"}, {\"type\":\"heading\",\"text\":\"Next steps\"}, {\"type\":\"paragraph\",\"text\":\"How to get this into Core?\"}, {\"type\":\"paragraph\",\"text\":\"We don\u2019t have something clean. Still have something wonky and how and what to do with autotools.\"}, {\"type\":\"paragraph\",\"text\":\"Ideally introduce CMake for a full cycle. It might still be a little too rough to ship on day 1 of the v27 cycle.\"}, {\"type\":\"paragraph\",\"text\":\"We could deviate from the beginning of the cycle plan. Half way through a release cycle half way through a cycle is better than a crash and burn at the beginning of a cycle.\"}, {\"type\":\"paragraph\",\"text\":\"This is for people\u2019s setups. There is a real possibility that people here wouldn\u2019t be able to work.\"}, {\"type\":\"paragraph\",\"text\":\"Every branch is going to need to rebase, reinstalling stuff, etc. It will be a hit for productivity.\"}, {\"type\":\"paragraph\",\"text\":\"In an IRC meeting. If you think this is weird or just try it out. Try it now or for a month from now, but you are going to have to go through the pain.\"}, {\"type\":\"paragraph\",\"text\":\"If we wait until after branch off, how much of a difference will that be.\"}, {\"type\":\"paragraph\",\"text\":\"If you have 6 weeks, is that not enough time?\\nPing people and have them try it.\"}, {\"type\":\"paragraph\",\"text\":\"Miners running old operating system, maybe will have the flow downstream. (C++ 11)\"}, {\"type\":\"paragraph\",\"text\":\"It is going to be a painful release.\"}, {\"type\":\"paragraph\",\"text\":\"We now have a split in the build systems, like backporting, now every PR has to rebase.\"}, {\"type\":\"paragraph\",\"text\":\"The goal is after the branch off to merge CMake and delete autotools.\"}, {\"type\":\"heading\",\"text\":\"The plan\"}, {\"type\":\"paragraph\",\"text\":\"Ping individual people to test - there is a [PR to test]((https://github.com/hebasto/bitcoin/pull/31)). Goal is to have conviction on whether to merge after branch off.\\nOnce things gets merged and that you can\u2019t build, it\u2019s on you.\"}",
    "body": "## Update\n\nHebasto has a branch he has been PRing into his own repo. Opened a huge CMake PR for Bitcoin core.\n\nIntroducing it chunk by chunk on his own repo\n\nQT and GUIX is after that\n\n## Next steps\n\nHow to get this into Core?\n\nWe don\u2019t have something clean. Still have something wonky and how and what to do with autotools.\n\nIdeally introduce CMake for a full cycle. It might still be a little too rough to ship on day 1 of the v27 cycle.\n\nWe could deviate from the beginning of the cycle plan. Half way through a release cycle half way through a cycle is better than a crash and burn at the beginning of a cycle.\n\nThis is for people\u2019s setups. There is a real possibility that people here wouldn\u2019t be able to work.\n\nEvery branch is going to need to rebase, reinstalling stuff, etc. It will be a hit for productivity.\n\nIn an IRC meeting. If you think this is weird or just try it out. Try it now or for a month from now, but you are going to have to go through the pain.\n\nIf we wait until after branch off, how much of a difference will that be.\n\nIf you have 6 weeks, is that not enough time?\nPing people and have them try it.\n\nMiners running old operating system, maybe will have the flow downstream. (C++ 11)\n\nIt is going to be a painful release.\n\nWe now have a split in the build systems, like backporting, now every PR has to rebase.\n\nThe goal is after the branch off to merge CMake and delete autotools.\n\n## The plan\n\nPing individual people to test - there is a [PR to test]((https://github.com/hebasto/bitcoin/pull/31)). Goal is to have conviction on whether to merge after branch off.\nOnce things gets merged and that you can\u2019t build, it\u2019s on you.\n\n",
    "body_type": "markdown",
    "created_at": "2023-09-21T00:00:00.000Z",
    "domain": "https://btctranscripts.com/",
    "url": "https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/cmake",
    "categories": [
        "core-dev-tech"
    ],
    "tags": [
        "bitcoin-core",
        "build-system"
    ],
    "authors": [
        "Cory Fields"
    ],
    "indexed_at": "2024-03-21T16:33:36.022Z",
    "summary": "In a recent podcast, Cory Fields delves into the significant strides and forthcoming changes in Bitcoin Core's development process, particularly focusing on Hebasto's ambitious endeavor to integrate CMake into the project. This initiative marks a pivotal shift from the traditional build systems, promising a more streamlined and efficient approach to managing the project's complex codebase. Hebasto has meticulously prepared for this transition by gradually introducing changes through pull requests (PRs) into his repository, laying the groundwork for a broader adoption within the Bitcoin Core ecosystem.\n\nThe conversation further explores the strategic planning required to seamlessly incorporate CMake into Bitcoin Core. Fields highlights the importance of a cautious and phased implementation strategy, acknowledging the potential rough edges that may not be suitable for immediate release in the upcoming v27 cycle. The proposal suggests deviating from the initial plan, contemplating a mid-cycle introduction as a safer alternative to avoid disrupting the development workflow. This consideration stems from an understanding of the significant adjustments developers will have to make, including rebasing branches and reinstalling dependencies, which could temporarily hinder productivity.\n\nA crucial aspect of this transition involves addressing concerns related to the coexistence of CMake and the legacy autotools system. Fields notes the inevitability of a \"painful release\" due to the dual build systems necessitating additional efforts from contributors to rebase their PRs. The goal is to eventually phase out autotools post-branch off, streamlining the build process and mitigating future complexities. However, this change also raises considerations for miners operating on older systems, hinting at downstream implications that warrant careful management.\n\nTo facilitate a smooth transition, Fields outlines a proactive approach involving targeted outreach to individual contributors, urging them to test the new CMake integration through a specific PR available for trial. This hands-on testing phase is crucial for gathering feedback and building consensus on the readiness for merging CMake post-branch off. Fields emphasizes the community's shared responsibility in adapting to the new build system, stating that once the integration is complete, the onus will be on each contributor to ensure compatibility with their setups.\n\nThrough this discussion, Cory Fields sheds light on the intricate process of evolving Bitcoin Core's development infrastructure. The move towards adopting CMake reflects a forward-thinking attitude within the community, aiming to enhance the project's robustness and accessibility for developers. Despite the challenges and learning curve associated with such a significant change, the collective effort and strategic planning underscored in the podcast illustrate a committed path toward innovation and improvement within the Bitcoin Core project."
}