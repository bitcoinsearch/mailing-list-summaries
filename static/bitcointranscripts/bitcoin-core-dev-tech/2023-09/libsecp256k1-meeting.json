{
    "id": "bitcointranscripts+bitcoin-core-dev-tech+2023-09+libsecp256k1-meeting",
    "title": "Libsecp256k1 Meeting",
    "body_formatted": "{\"type\":\"list\"}",
    "body": "\n- Topics: Scope, Priorities\n- Next release Dec 16th\n- Scope: Informal agreeement currently\n- What new modules to add?\n- Needs a specification (whatever that means, Pseudocode etc.0\n- Should we formalize the agreement more? Should also not be too specific\n- What are examples where this came up in the past? Exfill, Ecdh, Elswift, SIlent payments, musig, schnorr, adaptor sigs, half-agg\n- How specific do we need to be? Tie it to examples to be more clear\n- ECIES (Interesting in the future?)\n- Other problem: What is the boundary to core? For example move hashing to secp?\n- Need argument for security, needs use-case\n- Buy-in from maintainers, willingness to maintain it long term\n- Relevance to the project is very vague as a requirement\n- Security also hard to formalize\n- Example: Anti-Exfill, people want it, but not our priority, fulfilling the requirements would not have helped in that case, different opinions on this change\n- Requirements are hygiene but don't guarantee that it will be reviewed/merged\n- Attack hard to do and mulitsig solves it anyway\n- Would still be good to be transparent and give feedback earlier\n- What is a specification? External standardization documentation, hashing externally avoided the question for ECDH, ECDH is a protocol not a cryptographic function\n- Abstract description of a protocol, ellswift has the BIP\n- Documentation, just describe how intended to be used, can not prevent every possible misuse\n- Rationale/Motivation\n- Security goals\n- \"Easiest way to use it should be a secure way\"\n- Too large spectrum to clearly define, needs to be convincing to the group\n- Relevance: clear use-case, details still hard to agree on in certain cases, \"good for bitcoin\"?\n- Contributing.md going to be added by nickler\n- Next release for december features? ECMult_const, xonlyECDH, silent payments?\n- Silent payments now uses low level stuff it shouldn't be using\n- Would like to have a module for silent payment functions that do the work and encapsulate it\n- Make a PR on Secp? Show what it would look like, silent payment will work on it\n- All lower level component are already there for it\n- Change: remove scratch space, only wanted to do in a major release? Basically unused\n- Fix issues with secp-rust (nostd), they need to make patches to remove syscalls, which are not strictly needed\n- build system docs, contrib md\n- Musig\n- synthetic nonces in ecdsa? modern ecdsa module\n- 1.0 was tied to milestones but abandoned to not hinder shipping incremental releases, still a goal to make a 1.0\n- Fuzzing project? Not far enough yet\n- ARM testing/CI (Macro Fake)\n- Priorities: ECMULT, ust nostd, xonlyECDH picked\n- Boundaries to Core: Where should hashing reside?\n- There are arguments on both sides: Con: Easier to get access to machine specific hashing optimization from Bitcoin Core because it is higher level, high cost to add this to secp, so either we have performance cost or maintenance cost, but for many things this may not matter. Pro: we could have higher level APIs in secp.\n- For bitcoin core hashing performance for ECDSA is very relevant, so probably not going to happen there, making it slower for validation would be bad\n- question if the optimization should be part of the scope?\n- what does applicable to bitcoin mean? could mean anything looking into eventual future, layer-2s etc. What about Muhash, checksums for tor v2 addrs etc.?\n- BIP32 module is probably in scope\n\n",
    "body_type": "markdown",
    "created_at": "2023-09-20T00:00:00.000Z",
    "domain": "https://btctranscripts.com/",
    "url": "https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/libsecp256k1-meeting",
    "categories": [
        "core-dev-tech"
    ],
    "tags": [
        "bitcoin core",
        "libsecp256k1"
    ],
    "indexed_at": "2024-03-21T16:33:36.027Z",
    "summary": "The podcast delves into the intricate discussions surrounding the scope and priorities for the upcoming December 16th release, highlighting the informal agreement currently in place regarding the addition of new modules and the necessity for a more structured specification. The conversation emphasizes the importance of not overly formalizing this agreement to maintain flexibility, yet underscores the need for clarity through examples such as Exfill, Ecdh, Elswift, Silent Payments, Musig, Schnorr, Adaptor Signatures, and Half-Agg. These instances demonstrate the varying degrees of specificity required to effectively integrate new functionalities while ensuring they align with the project's core objectives.\n\nA recurring theme throughout the discussion is the challenge of defining the boundary between the project's core components and auxiliary features, exemplified by the debate on whether hashing functionalities should be moved to secp. This touches on broader issues such as security requirements, use-case justification, and the necessity for long-term maintainer buy-in. The case of Anti-Exfill illustrates how even popular demand for a feature does not automatically prioritize its development, pointing to the complexity of balancing community expectations with project goals.\n\nThe conversation further explores the concept of a specification, distinguishing it from mere pseudocode or abstract descriptions. It stresses the importance of external standardization documentation, using ECDH as an example of a protocol that benefits from clear, standardized definitions. This leads to a broader discussion on the essential elements of a specification, including rationale, motivation, and security goals, with the guiding principle that the easiest way to use a feature should also be the most secure.\n\nLooking ahead, the podcast outlines potential features for the December release, such as ECMult_const, xonlyECDH, and enhancements to silent payments, alongside technical improvements like the removal of scratch space and fixes for compatibility issues with secp-rust. The inclusion of contributing guidelines by nickler aims to streamline future contributions, reflecting an ongoing effort to refine the project's development process.\n\nIn closing, the participants reflect on the strategic priorities identified for the project, including ECMULT, ust nostd, and xonlyECDH, while revisiting the debate on the appropriate boundaries for core functionalities. The discussion of whether to include high-level APIs in secp or rely on Bitcoin Core for hashing optimizations encapsulates the broader dilemma of balancing performance and maintenance costs against the project's evolving needs. This nuanced conversation underscores the complexity of steering a dynamic open-source project amidst diverse stakeholder expectations and the relentless pace of technological innovation."
}