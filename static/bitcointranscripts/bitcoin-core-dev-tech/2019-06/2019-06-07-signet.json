{
    "id": "bitcointranscripts+bitcoin-core-dev-tech+2019-06+2019-06-07-signet",
    "title": "Signet",
    "body_formatted": "{\"type\":\"paragraph\",\"text\":\"<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-March/016734.html>\"}, {\"type\":\"paragraph\",\"text\":\"<https://twitter.com/kanzure/status/1136980462524608512>\"}, {\"type\":\"heading\",\"text\":\"Introduction\"}, {\"type\":\"paragraph\",\"text\":\"I am going to talk a little bit about signet. Does anyone not know what signet is? The idea is to have a signature of the block or the previous block. The idea is that testnet is horribly broken for testing things, especially testing things for long-term. You have large reorgs on testnet. What about testnet with a less broken difficulty adjustment? Testnet is for miner testing really. One of the goals is that you want predictable unreliability and not world-shattering unreliability. Signet would be like a new series of networks. Anyone can spin up a signet; it's a public network but only people with the private key can create blocks. Anyone can create blocks but it would be invalid if you look at the coinbase. You could fool SPV clients I guess. You could have a taproot signet and spin that up, or a Schnorr signet, or whatever you want to do.\"}, {\"type\":\"heading\",\"text\":\"Q&A\"}, {\"type\":\"paragraph\",\"text\":\"Q: It still does proof-of-work?\"}, {\"type\":\"paragraph\",\"text\":\"A: The blockheader is still valid, yes. It still does proof-of-work. People are lazy and they want to support this in their software, but they don't want to go in and hack around their consensus validation software. Instead, they can keep this as is. How to store and download headers also stays the same, you don't want to change those things.\"}, {\"type\":\"paragraph\",\"text\":\"Q: Is this regtest proof-of-work?\"}, {\"type\":\"paragraph\",\"text\":\"A: It's like difficulty 1.\"}, {\"type\":\"paragraph\",\"text\":\"Q: Then you could be easily be fooled by header changes?\"}, {\"type\":\"paragraph\",\"text\":\"A: Yes, you can. This is for testing, so you shouldn't be connected to random nodes.\"}, {\"type\":\"paragraph\",\"text\":\"Implementations do not need to implement the signature check and it works with all existing software. You have a coinbase output that has a signature saying my consensus is configured and you configure what the scriptpubkey is for that in the scriptsig. Instead of signing the transaction you sign the block. The changes are not very big at all. It's the same as transaction signing. There's a new signer that takes a hash and you create a signature. The hash is the blockhash.\"}, {\"type\":\"paragraph\",\"text\":\"Q: Is your goal for people to spin up random signets, or for there to be a global one?\"}, {\"type\":\"paragraph\",\"text\":\"A: One idea is to have a reliable signet that people can use for testing. This permanent signet would have a web interface and we could ask it to double spend you or something and then it would double spend your address. All of this is outside of the proposal, this is just a tool that does it. It's double spending as a service (DSaaS).\"}, {\"type\":\"paragraph\",\"text\":\"You have a circular dependency- it can't be the blockhash. The best way would be to remove the witness commitment manually. In segwit, they set it to 0000 in the merkle... But you probably don't want to do that here because you still want to sign your coinbase. You could do something like, compute the would-be blockhash if that commitment was removed, and then that's what you sign. Zeroed out or removed, either way.\"}, {\"type\":\"paragraph\",\"text\":\"You could sign the previous block instead of the current block. You sign everything except the signature itself of course, and probably the nonce in the header. The thing with this is that you are going to have to create a signature every time, because you are going to do PoW and do one signature per nonce. So you don't sign the nonce. You could do the signature, and then still roll the nonce. With difficulty 1, you're only going to do one on average anyway. It's going to be mainnet difficulty 1.\"}, {\"type\":\"heading\",\"text\":\"Regtest vs signet\"}, {\"type\":\"paragraph\",\"text\":\"Regtest is bad, because anyone can go and make a billion blocks. You have to get the headers and then the block and then check the signature.\"}, {\"type\":\"paragraph\",\"text\":\"What's so bad about having the signature in the header? Everyone would have to change their consensus code to be able to parse and validate this. It would be easier if they don't have to modify any software to use this. It could either be out of the box, or they make changes for signet. There's little motivation to add signature verification to different tools when this is not used in production for anything. It's literally only to test new protocols, or to test your exchange integration to be sure that you're handling reorgs properly- but you could use regtest for that case.\"}, {\"type\":\"paragraph\",\"text\":\"You can run bitcoind enforcing signet, and you connect to your own node. You don't really care that you're vulnerable to-- because you're not checking, you're only getting blocks from your own node. The same is true for regtest, but anyone else who connects to that regtest network can blow away your blocks. You could just use regtest and only trust certain nodes, which means block relay would be from a single node running the thing.\"}, {\"type\":\"paragraph\",\"text\":\"You don't need to protect a signet network though. On signet, you're still connected to a node that is validating. A node that is validating on regtest will see the reorg and see that it is still valid and consensus-valid, unless you do whitelist-only for regtest, which everyone would have to setup. Regtest is context-sensitive. Signet users still need to validate signatures, you connect to bitcoind running signet. So you do have to use the signet software, but they don't require other changes to their other software stacks if the new header format breaks something. You opt into a particular signet based on its scriptsig. It doesn't matter what software you run internally, but you use bitcoind as an edge router.\"}, {\"type\":\"paragraph\",\"text\":\"What about having a regular header, and a separate set of signature? It's the segwit trick. How many changes is Bitcoin Core going to accept for this signet testing-only thing? It's super simple if it's just \\\"a signature in a certain place\\\". If you don't like it, you don't have to use it. Well, if it's going to be part of Bitcoin Core then that means we're maintaining.\"}, {\"type\":\"paragraph\",\"text\":\"regtest has no proof-of-work? No, it has proof-of-work but it's one bit of work. You have to set it to zero. Half the time, you get it on the first try.\"}, {\"type\":\"paragraph\",\"text\":\"If your goal is to have 10 minute blocks, you don't need to change the difficulty rules at all. You can just use the mainnet rules. And then the signer, if you have a high-profile signet somewhere, they have 10 ASICs available, they can choose a higher difficulty if they want and it will have that security. The difficulty will be exactly what the signer chooses or can produce. He can also choose minimal and it's less secure... The signer can have a cronjob and make a minimum-difficulty block at that time. You just mine the whole time, and it gets you to some difficulty.\"}, {\"type\":\"paragraph\",\"text\":\"How are you going to do reorg on demand if the difficulty is exactly what they can do? Well, it will take 10-20 minutes to make the reorg. That's fine. It would be nice for faster reorgs. 10 minutes is only for difficulty adjustment.\"}, {\"type\":\"paragraph\",\"text\":\"Have a chainparam serialization and make it easy to send that out. That's the pull request that someone was thinking about-- it's a custom chain like regtest but you can change all the chainparams to whatever you want, like a custom genesis or whatever. A configure arg or command line parameter that has the file for chainparams.\"}, {\"type\":\"heading\",\"text\":\"Applications\"}, {\"type\":\"paragraph\",\"text\":\"It's superior in every way to testnet, I think. The only thing testnet is useful for is mining testing and testing miner equipment. If you want really fast blocks and really fast reorgs, then use testnet.\"}, {\"type\":\"paragraph\",\"text\":\"If you are testing protocols like eltoo protocols across many different people, then regtest is way too fragile for that, and testnet is also way too fragile for that if you want to get anything productive done. But you still want to be able to do things like double spending as a service, because eltoo needs to be robust enough to be able to handle expected reorgs but not necessarily earth-shattering reorgs. Another application is that, as an exchange, I always wanted my customers to join regtest and test with my arbitrary reorgs.\"}, {\"type\":\"paragraph\",\"text\":\"We can take bip-taproot and just slap it in there. We could either just run the branch itself on signet... or the signer can enforce other consensus rules and now those consensus rules are active there. Taproot can be a soft-fork and you can just say this soft-fork is enabled on this network, sure. During the development of segwit, there were a few different test networks for segwit called segnet. Not a typo, there was segnet and now there is signet. Nobody remembers segnet except Pieter.\"}, {\"type\":\"paragraph\",\"text\":\"It's also useful for testing wallet software. Say an exchange running a semi-private signet. It's extremely common to visit exchanges and you look at their wallet code, and they aren't even checking for reorgs at all. So here's an easy way for them to check their work against reorgs. It could be very educational.\"}, {\"type\":\"heading\",\"text\":\"Implementation\"}, {\"type\":\"paragraph\",\"text\":\"The pull request for signet is in limbo. I am planning on going back to it. There's an older implementation that modifies the blockheaders. I am going to replace that with something that doesn't do that. It doesn't seem too hard to do.\"}",
    "body": "<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-March/016734.html>\n\n<https://twitter.com/kanzure/status/1136980462524608512>\n\n## Introduction\n\nI am going to talk a little bit about signet. Does anyone not know what signet is? The idea is to have a signature of the block or the previous block. The idea is that testnet is horribly broken for testing things, especially testing things for long-term. You have large reorgs on testnet. What about testnet with a less broken difficulty adjustment? Testnet is for miner testing really. One of the goals is that you want predictable unreliability and not world-shattering unreliability. Signet would be like a new series of networks. Anyone can spin up a signet; it's a public network but only people with the private key can create blocks. Anyone can create blocks but it would be invalid if you look at the coinbase. You could fool SPV clients I guess. You could have a taproot signet and spin that up, or a Schnorr signet, or whatever you want to do.\n\n## Q&A\n\nQ: It still does proof-of-work?\n\nA: The blockheader is still valid, yes. It still does proof-of-work. People are lazy and they want to support this in their software, but they don't want to go in and hack around their consensus validation software. Instead, they can keep this as is. How to store and download headers also stays the same, you don't want to change those things.\n\nQ: Is this regtest proof-of-work?\n\nA: It's like difficulty 1.\n\nQ: Then you could be easily be fooled by header changes?\n\nA: Yes, you can. This is for testing, so you shouldn't be connected to random nodes.\n\nImplementations do not need to implement the signature check and it works with all existing software. You have a coinbase output that has a signature saying my consensus is configured and you configure what the scriptpubkey is for that in the scriptsig. Instead of signing the transaction you sign the block. The changes are not very big at all. It's the same as transaction signing. There's a new signer that takes a hash and you create a signature. The hash is the blockhash.\n\nQ: Is your goal for people to spin up random signets, or for there to be a global one?\n\nA: One idea is to have a reliable signet that people can use for testing. This permanent signet would have a web interface and we could ask it to double spend you or something and then it would double spend your address. All of this is outside of the proposal, this is just a tool that does it. It's double spending as a service (DSaaS).\n\nYou have a circular dependency- it can't be the blockhash. The best way would be to remove the witness commitment manually. In segwit, they set it to 0000 in the merkle... But you probably don't want to do that here because you still want to sign your coinbase. You could do something like, compute the would-be blockhash if that commitment was removed, and then that's what you sign. Zeroed out or removed, either way.\n\nYou could sign the previous block instead of the current block. You sign everything except the signature itself of course, and probably the nonce in the header. The thing with this is that you are going to have to create a signature every time, because you are going to do PoW and do one signature per nonce. So you don't sign the nonce. You could do the signature, and then still roll the nonce. With difficulty 1, you're only going to do one on average anyway. It's going to be mainnet difficulty 1.\n\n## Regtest vs signet\n\nRegtest is bad, because anyone can go and make a billion blocks. You have to get the headers and then the block and then check the signature.\n\nWhat's so bad about having the signature in the header? Everyone would have to change their consensus code to be able to parse and validate this. It would be easier if they don't have to modify any software to use this. It could either be out of the box, or they make changes for signet. There's little motivation to add signature verification to different tools when this is not used in production for anything. It's literally only to test new protocols, or to test your exchange integration to be sure that you're handling reorgs properly- but you could use regtest for that case.\n\nYou can run bitcoind enforcing signet, and you connect to your own node. You don't really care that you're vulnerable to-- because you're not checking, you're only getting blocks from your own node. The same is true for regtest, but anyone else who connects to that regtest network can blow away your blocks. You could just use regtest and only trust certain nodes, which means block relay would be from a single node running the thing.\n\nYou don't need to protect a signet network though. On signet, you're still connected to a node that is validating. A node that is validating on regtest will see the reorg and see that it is still valid and consensus-valid, unless you do whitelist-only for regtest, which everyone would have to setup. Regtest is context-sensitive. Signet users still need to validate signatures, you connect to bitcoind running signet. So you do have to use the signet software, but they don't require other changes to their other software stacks if the new header format breaks something. You opt into a particular signet based on its scriptsig. It doesn't matter what software you run internally, but you use bitcoind as an edge router.\n\nWhat about having a regular header, and a separate set of signature? It's the segwit trick. How many changes is Bitcoin Core going to accept for this signet testing-only thing? It's super simple if it's just \"a signature in a certain place\". If you don't like it, you don't have to use it. Well, if it's going to be part of Bitcoin Core then that means we're maintaining.\n\nregtest has no proof-of-work? No, it has proof-of-work but it's one bit of work. You have to set it to zero. Half the time, you get it on the first try.\n\nIf your goal is to have 10 minute blocks, you don't need to change the difficulty rules at all. You can just use the mainnet rules. And then the signer, if you have a high-profile signet somewhere, they have 10 ASICs available, they can choose a higher difficulty if they want and it will have that security. The difficulty will be exactly what the signer chooses or can produce. He can also choose minimal and it's less secure... The signer can have a cronjob and make a minimum-difficulty block at that time. You just mine the whole time, and it gets you to some difficulty.\n\nHow are you going to do reorg on demand if the difficulty is exactly what they can do? Well, it will take 10-20 minutes to make the reorg. That's fine. It would be nice for faster reorgs. 10 minutes is only for difficulty adjustment.\n\nHave a chainparam serialization and make it easy to send that out. That's the pull request that someone was thinking about-- it's a custom chain like regtest but you can change all the chainparams to whatever you want, like a custom genesis or whatever. A configure arg or command line parameter that has the file for chainparams.\n\n## Applications\n\nIt's superior in every way to testnet, I think. The only thing testnet is useful for is mining testing and testing miner equipment. If you want really fast blocks and really fast reorgs, then use testnet.\n\nIf you are testing protocols like eltoo protocols across many different people, then regtest is way too fragile for that, and testnet is also way too fragile for that if you want to get anything productive done. But you still want to be able to do things like double spending as a service, because eltoo needs to be robust enough to be able to handle expected reorgs but not necessarily earth-shattering reorgs. Another application is that, as an exchange, I always wanted my customers to join regtest and test with my arbitrary reorgs.\n\nWe can take bip-taproot and just slap it in there. We could either just run the branch itself on signet... or the signer can enforce other consensus rules and now those consensus rules are active there. Taproot can be a soft-fork and you can just say this soft-fork is enabled on this network, sure. During the development of segwit, there were a few different test networks for segwit called segnet. Not a typo, there was segnet and now there is signet. Nobody remembers segnet except Pieter.\n\nIt's also useful for testing wallet software. Say an exchange running a semi-private signet. It's extremely common to visit exchanges and you look at their wallet code, and they aren't even checking for reorgs at all. So here's an easy way for them to check their work against reorgs. It could be very educational.\n\n## Implementation\n\nThe pull request for signet is in limbo. I am planning on going back to it. There's an older implementation that modifies the blockheaders. I am going to replace that with something that doesn't do that. It doesn't seem too hard to do.\n\n",
    "body_type": "markdown",
    "created_at": "2019-06-07T00:00:00.000Z",
    "domain": "https://btctranscripts.com/",
    "url": "https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-07-signet",
    "categories": [
        "core-dev-tech"
    ],
    "tags": [
        "signet"
    ],
    "indexed_at": "2024-03-21T16:33:35.988Z",
    "transcript_by": "Bryan Bishop",
    "summary": "In a recent discussion aimed at addressing the limitations of testnet for blockchain development, the concept of signet was introduced. Signet offers a more reliable environment for testing new features and protocols within the Bitcoin network. Unlike the current testnet, which is prone to large reorganizations making it less suitable for long-term testing, signet ensures predictable unreliability without world-shattering consequences. This new series of networks allows anyone to create a signet, but block creation is exclusive to those holding a specific private key, ensuring the integrity of the network while still supporting experimental developments like taproot and Schnorr signatures.\n\nThe design of signet retains the proof-of-work mechanism, albeit with a significantly reduced difficulty level. This adjustment aims to maintain compatibility with existing software, eliminating the need for developers to overhaul their consensus validation tools. The innovation lies in the coinbase output, which carries a signature confirming the configured consensus, thereby simplifying the transition between traditional block signing and this new method. Despite its ease of integration, the security implications of such low difficulty and the potential for being misled by header alterations are noted, emphasizing the importance of cautious connectivity during testing phases.\n\nOne ambitious goal for signet is the establishment of a global, reliable network that could facilitate double spending as a service (DSaaS). This would enable thorough testing of transaction handling under various conditions without introducing the vulnerabilities associated with testnet's instability. Furthermore, the proposed method for handling the witness commitment in segwit transactions showcases the technical considerations necessary for implementing signet, highlighting the balance between maintaining current operational frameworks and introducing new testing capabilities.\n\nComparisons with regtest elucidate signet's advantages, particularly its resistance to arbitrary block generation by unauthorized users. Signet ensures that only validated blocks from trusted nodes are accepted, mitigating the risks associated with open networks while still providing a realistic testing ground for developers. This controlled environment, coupled with the flexibility of setting block difficulties, presents a valuable tool for accurately simulating mainnet conditions.\n\nSignet's superiority over testnet extends to various applications, including protocol testing, exchange integration, and wallet software development. Its capacity to emulate real-world scenarios, such as reorganizations, without the unpredictability of testnet makes it an invaluable asset for enhancing the robustness and reliability of Bitcoin technologies. Moreover, the ability to enforce specific consensus rules on a signet enables targeted testing of soft forks and other network upgrades, offering a streamlined path for evaluating new features.\n\nDespite the clear benefits and the community's interest, the implementation of signet faces challenges, primarily concerning the acceptance and integration into the broader Bitcoin Core software ecosystem. The ongoing efforts to refine and formalize signet into a pull request signify a collaborative push towards optimizing blockchain testing environments. This initiative not only underscores the importance of innovation in blockchain technology but also highlights the collective endeavor to improve and secure the future of digital currencies."
}