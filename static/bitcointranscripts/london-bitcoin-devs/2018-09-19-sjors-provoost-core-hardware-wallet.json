{
    "id": "bitcointranscripts+london-bitcoin-devs+2018-09-19-sjors-provoost-core-hardware-wallet",
    "title": "Bitcoin Core and hardware wallets",
    "body_formatted": "{\"type\":\"paragraph\",\"text\":\"Topic: Using Bitcoin Core with hardware wallets\"}, {\"type\":\"paragraph\",\"text\":\"Location: London Bitcoin Devs\"}, {\"type\":\"paragraph\",\"text\":\"Slides: <https://github.com/Sjors/presentations/blob/master/2018-09-19%20London%20Bitcoin%20Devs/2018-09%20London%20Bitcoin%20Devs%200.5.pdf>\"}, {\"type\":\"paragraph\",\"text\":\"Core, HWI docs: <https://hwi.readthedocs.io/en/latest/examples/bitcoin-core-usage.html>\"}, {\"type\":\"heading\",\"text\":\"Introduction\"}, {\"type\":\"paragraph\",\"text\":\"I am Sjors, I am going to show you how to use, you probably shouldn\u2019t try this at home, the Bitcoin Core wallet directly with a hardware wallet. Most of that work is done by Andrew Chow. I\u2019m just showing how it works. I will have some thoughts of my own on how that could be made more user friendly.\"}, {\"type\":\"heading\",\"text\":\"Bitcoin Core wallet\"}, {\"type\":\"paragraph\",\"text\":\"The Bitcoin Core wallet, most people will probably recognize it either as a graphical user interface but a lot of people use the command line. This is what the GUI looks like, it is pretty bare bones but it works. It receives Bitcoin, it sends Bitcoin, it validates all the transactions. Then other people prefer it like this where you say \u201cGive me a list of transactions\u201d. I prefer GUIs actually. Why would you want to use the Core wallet? It validates all the blocks, checks all the rules, it is very well reviewed code mostly. But there is a downside, it sits on your computer. If you are like me, use all these developer tools and all these fun programs then maybe a virus sneaks in and takes your private keys. It could just look for `wallet.dat` file and take it. That is a pretty big downside.\"}, {\"type\":\"heading\",\"text\":\"Hardware wallet\"}, {\"type\":\"paragraph\",\"text\":\"Hardware wallets on the other hand are not on your computer. Even if there are problems with the hardware at least it is not on your computer. But the downside is it reveals addresses to a third party. You have to use the Ledger, Trezor whatever backend service to see your balance. They shipped the device to your physical address. IP addresses are usually easy to correlate to physical addresses, it is not good. I am surprised that\u2019s not used more but I guess there are easier ways to go after people. The other thing is it relies on external truth. We talked about BIP148, the opposite of that is SegWit2x where other companies said \u201cLet\u2019s change Bitcoin\u201d. Those other companies can just tell you \u201cThis is your balance\u201d and your transaction is perfectly valid on this other chain. We don\u2019t want to rely on external truth. It involves quite a lot of code. Especially if they also ship a wallet that tends to be a tonne of Javascript and Python bindings, lots of stuff that probably doesn\u2019t get as much review. I\u2019m sure they do great work and they have auditors and all that stuff. It is all open source but still it is a lot of code.\"}, {\"type\":\"heading\",\"text\":\"Combined\"}, {\"type\":\"paragraph\",\"text\":\"So let\u2019s combine this. Keys are not on your computer, that\u2019s good. You get much better privacy because all the checking of your balance is done on your computer. You download the whole blockchain so nobody knows what you are interested in. If you relay your transactions through Tor as was talked about earlier that could help. As well as the Dandelion idea coming up. There\u2019s no external truth, that\u2019s good. The amount of code that you still have to review would be much, much smaller. It might just be a driver for that specific wallet and the software that runs on the actual device. That\u2019s a bright future.\"}, {\"type\":\"heading\",\"text\":\"Problems\"}, {\"type\":\"paragraph\",\"text\":\"There are some problems. How do you encode transaction data? That\u2019s been solved recently with something called Partially Signed Bitcoin Transactions (PSBTs). I\u2019ll show that in a bit. That used to be a problem, how do you communicate a transaction? There\u2019s no standard for it. There is now. The other is how do you actually communicate, what protocol do you use? Electrum Personal Server is one way to communicate between the device and the Core wallet. You can do lots of things semi manually which I\u2019ll show you. I have some ideas on how to turn that into a better standard. Also how do you minimize the amount of stuff you need to install? When it comes to Bitcoin Core specifically making super radical changes like adding device specific support, USB drivers and the whole kitchen sink, I don\u2019t think that will ever get merged. Whatever you do has to be extremely minimal. Maybe add one RPC call or one little thing.\"}, {\"type\":\"heading\",\"text\":\"Anatomy of Bitcoin Core Wallet\"}, {\"type\":\"paragraph\",\"text\":\"So what does a Bitcoin Core wallet look like roughly? You have a master private key, your seed essentially which you should backup. Then this thing called the keypool which is a pool of keys. You take the master key and you derive all these keys from it. Then whenever you want to receive something it turns that key into an address and you send money to that address.\"}, {\"type\":\"heading\",\"text\":\"Core + HWW Setup\"}, {\"type\":\"paragraph\",\"text\":\"When you want to combine this, the workflow you\u2019d want that has been built now, you start with an empty wallet that does not allow any private keys in it. That is a new flag (`watch-only`). A watch only wallet. There is nothing in the keypool, there\u2019s no addresses. What you are going to do is feed it with addresses from the hardware wallet.\"}, {\"type\":\"heading\",\"text\":\"Core + HWW Usage\"}, {\"type\":\"paragraph\",\"text\":\"Once you\u2019ve fed it now the wallet contains a bunch of public keys from the hardware wallet and you can generate receive addresses as before. The nice thing about this is you can receive money and create new addresses without having the hardware device plugged in. It just has a bunch of addresses. When you want to spend something now you\u2019ll need to connect it and you somehow need to sign the transaction with the hardware device. That is the thing I will show.\"}, {\"type\":\"heading\",\"text\":\"HWI\"}, {\"type\":\"paragraph\",\"text\":\"<https://github.com/bitcoin-core/HWI>\"}, {\"type\":\"paragraph\",\"text\":\"Docs: <https://hwi.readthedocs.io/en/latest/>\"}, {\"type\":\"paragraph\",\"text\":\"HWI, hardware wallet interactions, a repository by Andrew Chow who has been working on this for a while. Finally getting some attention. What he\u2019s done is he has taken all these device drivers from Ledger and Trezor and a bunch of others that are all in Python and built a generic wrapper around it so they all take the same commands. You can tell it \u201cGive me an address\u201d or \u201cGive me an xpub\u201d or \u201cSign this thing\u201d without having to think too much about the specific device. There\u2019s a nice manual here.\"}, {\"type\":\"heading\",\"text\":\"List devices\"}, {\"type\":\"paragraph\",\"text\":\"One of the commands you can do is:\"}, {\"type\":\"paragraph\",\"text\":\"`./hwi.py enumerate | jq`\"}, {\"type\":\"paragraph\",\"text\":\"It will say \u201cI found a Ledger and the fingerprint which is the BIP32 root key is that\u201d. If you know the fingerprint then you can talk to the device. We create a watch only wallet with the top command:\"}, {\"type\":\"paragraph\",\"text\":\"`bitcoin-cli createwallet \u201cledger\u201d true`\"}, {\"type\":\"paragraph\",\"text\":\"`bitcoin-cli -rpcwallet=ledger getwalletinfo`\"}, {\"type\":\"paragraph\",\"text\":\"New in Bitcoin Core 0.17 is that you can create new wallets on the fly. That\u2019s quite nice. You can load and unload them. What does that wallet look like? You give it a name and the most important thing is that that keypool is empty. There\u2019s no keys in it. We haven\u2019t done anything with it yet.\"}, {\"type\":\"heading\",\"text\":\"Get keys from device: receive\"}, {\"type\":\"paragraph\",\"text\":\"Now we are going to get some keys from the device. We identify it with the fingerprint, one way to reach it.\"}, {\"type\":\"paragraph\",\"text\":\"`./hwi.py --testnet --fingerprint d9d676d4 getkeypool \u201cm/84\u2019/1\u2019/0\u2019/0\u201d 0 0 --keypool | jq`\"}, {\"type\":\"paragraph\",\"text\":\"We give it a BIP84, is everyone familiar with BIP44 address generation? You start with a master key and then you derive a bunch of subkeys from it down a hierarchy. That is why it is called a hierarchical deterministic wallet. The first derivation is called the purpose. In this case I\u2019m using `84` which is the new bech32 SegWit format. `1` is the coin type, `0` would be Bitcoin, `1` would be Bitcoin testnet. Ethereum is g\\\\*d knows what number. The next number is the account and the last is whether it is a receive or a change address. This is a receive address instead of a change address. Then you give it a range, you say \u201cGive me the change addresses from number 0 to say 100\u201d. You only want to do this whole setup process so I would take 1000 keys or whatever it can handle. This spits out the public keys in a format that Bitcoin Core understands. You don\u2019t actually have to be able to read this, just know that Bitcoin Core understands it. You can ignore the address field, that is not actually used.\"}, {\"type\":\"heading\",\"text\":\"Get keys from device: change\"}, {\"type\":\"paragraph\",\"text\":\"The same with change addresses. There is a `1` here instead of a `0`.\"}, {\"type\":\"heading\",\"text\":\"Import keys into wallet\"}, {\"type\":\"paragraph\",\"text\":\"Then you import it using the call `importmulti`. You copy, paste the output from the previous command, it says `\u201csuccess\u201d: true`. That\u2019s good. If it throws an error message you did something wrong. Done that wrong a few times. There is one little extra thing here that I should clarify.\"}, {\"type\":\"paragraph\",\"text\":\"`\u201dm/84h/1h/0h/1/0\u201d`\"}, {\"type\":\"paragraph\",\"text\":\"Here it explains that this public key that you are about to import belongs to a device or a tree with this fingerprint at this location. The reason you need that is if your hardware wallet wants to sign something, if you just tell the hardware wallet \u201cHere\u2019s a transaction, go sign it\u201d the hardware wallet will say \u201cWhat the hell are you talking about? I have a million private keys, do you want me to check all of them?\u201d No, you have to tell it what specific private key to use. This is how you communicate which specific private key to use. The problem is Bitcoin Core currently doesn\u2019t actually import that type of information. One of the changes Andrew Chow made which is probably mergeable does store that. That\u2019s the little tweak you could potentially get into Bitcoin Core, nothing too radical, just a little extra field. You import that, it is happy.\"}, {\"type\":\"heading\",\"text\":\"Generate receive address\"}, {\"type\":\"paragraph\",\"text\":\"Then you can use it to receive as you would otherwise. You\u2019d say \u201cGive me a receive address\u201d and it creates a nice address. You send some money to it.\"}, {\"type\":\"heading\",\"text\":\"Wait for confirmation\"}, {\"type\":\"paragraph\",\"text\":\"You wait for it to arrive. Notice that now this on the watch only side. There is a [pull request](https://github.com/bitcoin/bitcoin/pull/13966) currently out there, if the wallet is only a watch only wallet then it is kind of nonsense to make this distinction. It is all watch only. That pull request will remove this and just have one number, much cleaner. This little icon will be moved over there. It is clear that this whole wallet is watch only. It is a very small tweak that you can do to make it better.\"}, {\"type\":\"heading\",\"text\":\"Prepare transaction\"}, {\"type\":\"paragraph\",\"text\":\"We want to spend some of this money. We are going to create this PSBT thing, partially signed Bitcoin transaction. I will show what it looks like in a bit. It is like creating a transaction, you tell it where to send it to, the address, you tell it how much to send (0.1 test Bitcoin) and then importantly you say `includeWatching: true`. That\u2019s a new thing. You tell it \u201cYes you can spend from your watch only addresses\u201d. Bitcoin Core doesn\u2019t normally let you do that. I say \u201cYes don\u2019t worry about it\u201d.  Then you add this `true` boolean which says \u201cGive it the BIP32 derivation path\u201d. If you forget that you will get very confused. It spits out this thing. We are going to look at what that thing is.\"}, {\"type\":\"paragraph\",\"text\":\"You can decode it, the same string, it splits it out. This is a whole long list. It contains the transaction hash as it would be before you sign it. It shows the inputs, it shows the outputs. The address is where you are sending it to. And this is the change address. Not that interesting. Then on the inputs what is important is you are telling the device what pubkey you are spending from but you also have this BIP32 derivation. It says this pubkey belongs to this path. That\u2019s all part of that partially signed Bitcoin transaction format standard, that type of information. On the outputs again, this is a change address, `1` means change address. That means the Ledger or Trezor or whatever you are using knows that part of the money is going to the outside world, it will prompt you \u201cDo you want to send money to this address?\u201d and part of the money is going back to itself. It knows that it doesn\u2019t need to show this because it has the private key for this, it doesn\u2019t need to worry about this 100 Bitcoin that\u2019s moving around. It just goes to myself. That is quite useful for a good user experience.\"}, {\"type\":\"heading\",\"text\":\"Sign transaction\"}, {\"type\":\"paragraph\",\"text\":\"So you sign it with this command:\"}, {\"type\":\"paragraph\",\"text\":\"`./hwi.py --testnet --fingerprint d9d676d4 signtx insert_long_thing`\"}, {\"type\":\"paragraph\",\"text\":\"If you click the button on ok it spits out a slightly longer version of that same thing.\"}, {\"type\":\"paragraph\",\"text\":\"Q - Can I just ask why you\u2019re not using process PSBT? Process PSBT takes what you had before, the output of create funded\u2026\"}, {\"type\":\"paragraph\",\"text\":\"A - It can\u2019t sign it. But if you had a multisig situation you would do that. I\u2019ve tried that at home, don\u2019t try that home, a multisig between a Bitcoin Core wallet and a hardware wallet. You tell the Bitcoin Core wallet \u201cProcess this thing\u201d, it signs its side, you tell the hardware wallet \u201cProcess this thing\u201d. You can even do that in parallel. There\u2019s a command [combinepsbt](https://github.com/bitcoin/bitcoin/blob/master/doc/psbt.md#rpcs) which will take one thing signed by one device and one thing signed by another device and tries to combine it. If it has enough signatures it says \u201cDone\u201d and then you can broadcast it. It is very, very cool. Very scary to do it manually though. With all of this I\u2019ve tried it with real money.\"}, {\"type\":\"paragraph\",\"text\":\"Q - With multisig it did work?\"}, {\"type\":\"paragraph\",\"text\":\"A - It did work. I\u2019ve done it with multisig, not lost it yet. I\u2019ve done it with just basically the hardware wallet as the only thing with keys and not lost anything yet.\"}, {\"type\":\"paragraph\",\"text\":\"Q - Why is it scary?\"}, {\"type\":\"paragraph\",\"text\":\"A - It is extremely scary. These are super manual commands with public keys, am I actually able to sign this money? You tell somebody \u201cGo send money to this bech32 address\u201d. They send you money and you\u2019re like \u201cLet\u2019s see if I can still spend that\u201d. I find that scary.\"}, {\"type\":\"paragraph\",\"text\":\"Q - You\u2019ve got all these long JSON strings\u2026\"}, {\"type\":\"paragraph\",\"text\":\"A - While making this presentation I screwed up like 3 times.\"}, {\"type\":\"paragraph\",\"text\":\"Q - The hardware wallet is supposed to internally prevent that.\"}, {\"type\":\"paragraph\",\"text\":\"A - You are generating keys so if you are generating addresses the wrong way. You want to make sure the destination is a public key controlled by the hardware. You want to make sure the derivation path is not some random string that you can not reproduce. It is probably easier to screw up on testnet. Even then I screwed up but I didn\u2019t lose any testnet coins. I sent money to the same wallet instead of an external wallet, it was not too bad.\"}, {\"type\":\"heading\",\"text\":\"Before\"}, {\"type\":\"paragraph\",\"text\":\"Before and after, what we see here is the input side of the transaction that they needed to sign, the address that it is coming from and the public key. It has this derivation for the public key (`\u201dm/84\u2019/1\u2019/0\u2019/0/0\u201d`).\"}, {\"type\":\"heading\",\"text\":\"After\"}, {\"type\":\"paragraph\",\"text\":\"Boom, partial signatures. It says \u201cNow I have a signature for this thing\u201d. That was added by the hardware device. That\u2019s why that long string looks slightly different.\"}, {\"type\":\"heading\",\"text\":\"Finalize and broadcast\"}, {\"type\":\"paragraph\",\"text\":\"We have this command called `finalizepsbt`.\"}, {\"type\":\"paragraph\",\"text\":\"`bitcoin-cli -rpcwallet=ledger finalizepsbt insert_long_thing`\"}, {\"type\":\"paragraph\",\"text\":\"You copy, paste the long thing in there. It produces a transaction in hex format that you can use. And it says `\u201dcomplete\u201d: true`. Complete means this thing has all the signatures and is otherwise valid. If it is incomplete then maybe you need to send it to someone else to add another signature or you did something wrong. Then you say `sendrawtransaction` or you copy, paste it in some other place.\"}, {\"type\":\"paragraph\",\"text\":\"`bitcoin-cli sendrawtransaction insert_transaction_hex`\"}, {\"type\":\"paragraph\",\"text\":\"It gives you the transaction hash and then it is on its way. It is very cool I think. It is a bit manual but I think it could be made quite elegant.\"}, {\"type\":\"heading\",\"text\":\"Signer RPC\"}, {\"type\":\"paragraph\",\"text\":\"What I\u2019ve been trying the last couple of days, I didn\u2019t finish it, is to figure out how do you communicate that you want something signed. That could be a hardware wallet, \u201cGo sign my transaction\u201d but it could be a BitGo or some other service that does multisig where you say \u201cHere\u2019s my partial transaction. Go sign whatever you can sign and then give it back to me.\u201d Have that completely automated. You are in a Bitcoin Core wallet with some other wallet and you are entering your destination, it figures out \u201cI have these keys I need to sign. I know what the master public key is and I have some mapping of this master public key belongs to this service and that master public key belongs to that service\u201d. That is why I\u2019m thinking about a JSON-RPC because then you would have something like localhost, port 1000 and that represents a hardware wallet. Then the hardware wallet driver would just run a little server on your own computer that you talk to locally. They already do because a lot of times there is Electron Javascript simulated, it is like a little Chrome browser in a box. Often that actually is a client, server mechanism anyway, it is not even that bizarre to do it that way.\"}, {\"type\":\"heading\",\"text\":\"Hardware wallet side\"}, {\"type\":\"paragraph\",\"text\":\"What could that look like? Something like this. The hardware wallet or the multisig service out there accepts a bunch of commands. It has a command `enumerate` that gives a list of devices. It has a command `getxpub` which you pass a device identifier `device_id` and the path `bip32_path`. \u201cGive me the xpub of the receive chain\u201d or \u201cGive me the xpub of the change chain\u201d. Then maybe something like `displayaddress` to show this particular address on the device so the user can check that it is the same to what they are seeing on their computer. And one that says `signtx` which takes one of these partially signed Bitcoin transactions.\"}, {\"type\":\"code\",\"text\":\"enumerate\\ngetxpub \u201cdevice_id\u201d \u201cbip32_path\u201d\\ndisplayaddress \u201cdevice_id\u201d \u201cbip32_path\u201d (\u201caddress_type\u201d)\\nsigntx \u201cpsbt\u201d\"}, {\"type\":\"heading\",\"text\":\"Bitcoin Core side\"}, {\"type\":\"paragraph\",\"text\":\"Then on the Bitcoin Core side you would add a number of fairly simple methods I think. One is when you launch it you give it a RPC URL.\"}, {\"type\":\"paragraph\",\"text\":\"`bitcoind -signerrpc=localhost: 1000`\"}, {\"type\":\"code\",\"text\":\"listsigners\\ndisplayaddress \u201cdevice_id\u201d \u201cbip32_path\u201d (\u201caddress_type\u201d)\\nimportsignerkeypool \u201cdevice_id\u201d \u201cbip32_path\u201d start end\\nsendto \u201caddress\u201d {signer: \u201cdevice_id\u201d}\"}, {\"type\":\"paragraph\",\"text\":\"There is one signer located at this address. It already knows how to do calls to other JSON-RPCs. That\u2019s no dependency. Then you\u2019d have a couple of extra commands. One is `listsigners`. This looks at all these things and asks it what devices do you have or what multisigs do you have. Also `displayaddress` which just relays the same command. Then the `importsignerkeypool`, that\u2019s the whole flow I showed where you generate all these keys and import them. That would be one command. \u201cGo fetch 1000 keys from this device\u201d, it is a one-off thing. Then the last one would be `sendto`. You give it an address and an amount and tell it a hint which device to use as a signer. I would like it to just work but I don\u2019t think that\u2019s going to happen. I would like it to just go through the transaction and figure out \u201cI need this signer and I\u2019ll go call that service\u201d. I don\u2019t think it will be that automated. You can make a nice GUI around this. I would imagine you install your driver from the hardware manufacturer and then you go into Bitcoin Core and you say \u201cDo you want hardware support?\u201d It has a default place to look for but you can give it a manual address if it is somewhere else. Then it says \u201cOk. Please connect the device\u201d. Behind the scenes it calls this `importsignerkeypool`, sucks in all the addresses and then whenever you want to send something it says \u201cPlug it in and we\u2019ll wait for it to sign it\u201d. That is how simple it could get. From the Bitcoin Core side you have very few changes to merge, just a few new calls. You leave it to the hardware manufacturers to implement this particular standard. This wouldn\u2019t be Bitcoin Core specific either because any wallet could call a RPC like that. That\u2019s my thought, maybe someone has already done it, I haven\u2019t Googled enough.\"}, {\"type\":\"heading\",\"text\":\"Thanks\"}, {\"type\":\"paragraph\",\"text\":\"I\u2019ll put the slides [here](https://www.slideshare.net/provoost) I have a [blog](https://medium.com/provoost-on-crypto), I have a PGP key. I didn\u2019t check if somebody edited this thing.\"}, {\"type\":\"heading\",\"text\":\"Q&A\"}, {\"type\":\"paragraph\",\"text\":\"Q - What about authentication?\"}, {\"type\":\"paragraph\",\"text\":\"A - If it is on the local device I don\u2019t think you need authentication. If you are plugging in something your own computer then you trust it. It will call localhost unauthenticated. I was thinking about if you have an external signing service, one idea I had is JSON-RPCs can do logins and passwords and all that nonsense but it sounds complicated. Something that could be simpler is you call this service and you give it the unsigned transaction but you also give it a public key. Then the service basically gives you back a UUID, a completely random number plus a date, \u201cCome back at this time\u201d. Then you call that UUID which nobody can guess because it is random and it gives you back an encrypted payload using that public key you just gave them. Even if somebody could guess it they couldn\u2019t decrypt the signed transaction. Then you get your signed transaction. That would be nice because the way this works so far is we are just blocking RPC calls. You say \u201cSign this thing\u201d and then it blocks until you press the button. That\u2019s fine if you are signing locally but if you have some service that says \u201cThank you. We are going to send you an email and a text message and we\u2019ll give you a 2 day cool day period\u201d and all that stuff you don\u2019t want a blocking call waiting for that. Just come back later. The nice thing about this PSBT thing is it is in parallel. You could just have it call the hardware wallet and have it call some other service. They don\u2019t need to come back at the same time. That would require more changes on the wallet side. Now you need to track what am I waiting for? You\u2019d need to have a list somewhere of pending transactions and where you are expecting a result. That\u2019s not that big either. This transaction, plus a URL plus a UUID and a date and you wipe it if it takes too long.\"}, {\"type\":\"paragraph\",\"text\":\"Q - If one key is Bitcoin Core and one key is Ledger and I don\u2019t know which key is on the underlying multisig, I could ask Bitcoin Core to sign it and it would end up going to you and not me?\"}, {\"type\":\"paragraph\",\"text\":\"A - That\u2019s where the authentication comes in. They receive a transaction from some random source. They recognize your public keys because there is enough information in there so they can map that back to you. Then they send you the email saying \u201cSomebody is trying to spend your money. Is that you?\u201d Maybe you want to add some extra hurdles there so you can\u2019t just spam them and randomly try to intercept somebody\u2019s email or some trick like that. I haven\u2019t thought this through in that much detail. I\u2019d just like this to work without any login concept but I\u2019m not married to that.\"}, {\"type\":\"paragraph\",\"text\":\"Q - What are your thoughts on the security of hardware wallets? Do you feel it is the right model for long term cold storage?\"}, {\"type\":\"paragraph\",\"text\":\"A - I don\u2019t know, I certainly know my laptop is not the right model for long term cold storage. My last laptop disappeared in Barcelona. I think this is unsolved. Even the hardware wallets tell you \u201cWrite down your paper key\u201d so now you have this paper key lying around in your sock drawer. Is that good? I don\u2019t know. For the time being unless you are extremely rich you are more likely to lose your Bitcoin because of your own stupidity than to get robbed by someone. My guess is in theory you should be able to get insurance against that type of physical theft, it is a very known threat model. You should just be able to say \u201cIf somebody robs me and I give some sort of proof of reserve to the insurance\u2026\u201d\"}, {\"type\":\"paragraph\",\"text\":\"Q - I dox myself and how many Bitcoin I have?\"}, {\"type\":\"paragraph\",\"text\":\"A - Your insurance company will know. That\u2019s the trade-off. If you don\u2019t want to trust the insurance company then don\u2019t get insurance. If you do want insurance then the only trade-off is the insurance company will know how much you have, the tax authorities will know how much you have but they won\u2019t know what you have. It may very well be worth it if you are rich enough. If you are rich enough people will know it anyway. That\u2019s the thing with people who think they can avoid the tax authorities. If your behavior is like the behavior of a person who has a lot of money your neighbors are going to be jealous. \u201cI think he has more money than he says he does. He is driving this lambo.\u201d They will follow you and look at everything you are doing. They\u2019ll dedicate 10 people for a month to dig into everything they find. They\u2019ll blackmail your children. Taxing rich people is an older profession than prostitution, it is competing. Tax enforcement and prostitution are probably about as old. Everybody thinks Bitcoin changes everything, I doubt it. I really doubt it. But I\u2019m a bit of a cynic.\"}, {\"type\":\"paragraph\",\"text\":\"Q - The keypool had to be empty so it has to be a fresh wallet when you set it up?\"}, {\"type\":\"paragraph\",\"text\":\" A- You don\u2019t have to. If you are comfortable getting extremely confused you can do this in an existing wallet. One of the setups that I tried was multisig where you would have a regular wallet that has its own keys and you combine it with a hardware wallet. You pull in the keys just for the purpose of multisig. Multisig however is extremely confusing in Bitcoin Core.\"}, {\"type\":\"paragraph\",\"text\":\"Q - How does it work? BIP32 has the gap so if I derive one key\u2026\"}, {\"type\":\"paragraph\",\"text\":\"A - Bitcoin Core doesn\u2019t do gap limit. What it does is derive a bunch of addresses, throws them in a keypool which it can draw from.\"}, {\"type\":\"paragraph\",\"text\":\"Q - If I use my Ledger with Bitcoin Core?\"}, {\"type\":\"paragraph\",\"text\":\"A - The compatibility problem? The way I did the demo here, I tried to stay compatible by using the standardized derivation paths. But then it is up to you to honor the gap limit.\"}, {\"type\":\"paragraph\",\"text\":\"Q - Are the keys in the keypool in order?\"}, {\"type\":\"paragraph\",\"text\":\"A - It picks them in order. You will probably honor the gap limit. If you wanted to patch Bitcoin Core and say \u201cHonor the gap limit as an optional flag\u201d that sounds like the kind of change that is small enough so that it could get in. The gap limit is especially a problem for merchants. What merchants do is they have a customer and they have a shopping cart, they generate an address specifically for that customer. They should not reuse that for another customer. They shouldn\u2019t even reuse it at all. If I wanted to spy on a merchant I would just create all these fake orders and collect all their addresses and then monitor the entire revenue going into that shop. The problem with generating a new address is you hit the gap limit which is why merchants should use Lightning, Lightning doesn\u2019t have that problem. It solves the gap limit problem quite elegantly. For normal users I think it is less likely because the way you break the gap limit is by generating 20 addresses in a row and having a very pedantic implementation from the other wallet. Wallets should be very conservative in not exceeding the gap limit. I worked for a wallet in the past and I spent quite a lot of time making sure it honored the gap limit very pedantically. But it should import quite royally. It should be accepting 100 or more if it can.\"}, {\"type\":\"paragraph\",\"text\":\"Q - How could multisig be improved using Bitcoin Core?\"}, {\"type\":\"paragraph\",\"text\":\"A - PSBTs is a huge improvement. That\u2019s step 1. That makes it less confusing than it was. Me having done it 20 times also makes it less confusing. I know sipa is working on cleaning up the wallet in general using these output descriptors for example. The wallet was based on the very old model, you just have keys and those keys you have the private keys for. All the wallet cares about is do I have this private key or do I not have this private key? SegWit got added and now one private key could map to different spending scripts. That was kind of hacked into the wallet. If that gets cleaned up then I think we can have a way to describe \u201cI know of these keys and I know I have one key of this multisig\u201d. Right now it is quite a few commands to do multisig. You have to say \u201cGive me an address\u201d but then you also have to explicitly import that address.\"}, {\"type\":\"paragraph\",\"text\":\"Q - Multisig is quite easy to use on Electrum.\"}, {\"type\":\"paragraph\",\"text\":\"A - Your solution is easier for now. But you need to install more things. You need to add all of Electrum.\"}, {\"type\":\"paragraph\",\"text\":\"Q - Electrum used its own format for this kind of problem.\"}, {\"type\":\"paragraph\",\"text\":\"A - That was another problem I ran into it. It uses xpubs, ypubs and zpubs and they are not really standardized. You need to go through the right steps to not dox yourself when you install it. You need to make sure the first time you run Electrum it doesn\u2019t connect to any of the external servers. You can do that if you do it carefully. Then you can get the xpub out of your Trezor or Ledger without it ever hitting the Trezor or Ledger servers but that is also not that easy. When you get a new Ledger it says \u201cGo to this website. Install this program.\u201d This program says \u201cWelcome. Write down your seed and here is your balance\u201d and now they know your keys. That\u2019s why I use BIP32 addresses because the Ledger wallet doesn\u2019t support those. Ledger doesn\u2019t actually know those keys yet.\"}, {\"type\":\"paragraph\",\"text\":\"Q - You seem skeptical about this project but it is only because it is early?\"}, {\"type\":\"paragraph\",\"text\":\"A - I think it is not ready to use yet. But I am actually really optimistic. I can see how you could do this. It is not going to happen overnight but I can see where it goes. Multisig is more complicated and I like this idea of having this JSON-RPC standard that could work for different wallets and different signing services. I could see how people would find that useful. They would probably all have their own wish lists. Pretty optimistic.\"}",
    "body": "\nTopic: Using Bitcoin Core with hardware wallets\n\nLocation: London Bitcoin Devs\n\nSlides: <https://github.com/Sjors/presentations/blob/master/2018-09-19%20London%20Bitcoin%20Devs/2018-09%20London%20Bitcoin%20Devs%200.5.pdf>\n\nCore, HWI docs: <https://hwi.readthedocs.io/en/latest/examples/bitcoin-core-usage.html>\n\n# Introduction\n\nI am Sjors, I am going to show you how to use, you probably shouldn\u2019t try this at home, the Bitcoin Core wallet directly with a hardware wallet. Most of that work is done by Andrew Chow. I\u2019m just showing how it works. I will have some thoughts of my own on how that could be made more user friendly.\n\n# Bitcoin Core wallet\n\nThe Bitcoin Core wallet, most people will probably recognize it either as a graphical user interface but a lot of people use the command line. This is what the GUI looks like, it is pretty bare bones but it works. It receives Bitcoin, it sends Bitcoin, it validates all the transactions. Then other people prefer it like this where you say \u201cGive me a list of transactions\u201d. I prefer GUIs actually. Why would you want to use the Core wallet? It validates all the blocks, checks all the rules, it is very well reviewed code mostly. But there is a downside, it sits on your computer. If you are like me, use all these developer tools and all these fun programs then maybe a virus sneaks in and takes your private keys. It could just look for `wallet.dat` file and take it. That is a pretty big downside.\n\n# Hardware wallet\n\nHardware wallets on the other hand are not on your computer. Even if there are problems with the hardware at least it is not on your computer. But the downside is it reveals addresses to a third party. You have to use the Ledger, Trezor whatever backend service to see your balance. They shipped the device to your physical address. IP addresses are usually easy to correlate to physical addresses, it is not good. I am surprised that\u2019s not used more but I guess there are easier ways to go after people. The other thing is it relies on external truth. We talked about BIP148, the opposite of that is SegWit2x where other companies said \u201cLet\u2019s change Bitcoin\u201d. Those other companies can just tell you \u201cThis is your balance\u201d and your transaction is perfectly valid on this other chain. We don\u2019t want to rely on external truth. It involves quite a lot of code. Especially if they also ship a wallet that tends to be a tonne of Javascript and Python bindings, lots of stuff that probably doesn\u2019t get as much review. I\u2019m sure they do great work and they have auditors and all that stuff. It is all open source but still it is a lot of code.\n\n# Combined\n\nSo let\u2019s combine this. Keys are not on your computer, that\u2019s good. You get much better privacy because all the checking of your balance is done on your computer. You download the whole blockchain so nobody knows what you are interested in. If you relay your transactions through Tor as was talked about earlier that could help. As well as the Dandelion idea coming up. There\u2019s no external truth, that\u2019s good. The amount of code that you still have to review would be much, much smaller. It might just be a driver for that specific wallet and the software that runs on the actual device. That\u2019s a bright future.\n\n# Problems\n\nThere are some problems. How do you encode transaction data? That\u2019s been solved recently with something called Partially Signed Bitcoin Transactions (PSBTs). I\u2019ll show that in a bit. That used to be a problem, how do you communicate a transaction? There\u2019s no standard for it. There is now. The other is how do you actually communicate, what protocol do you use? Electrum Personal Server is one way to communicate between the device and the Core wallet. You can do lots of things semi manually which I\u2019ll show you. I have some ideas on how to turn that into a better standard. Also how do you minimize the amount of stuff you need to install? When it comes to Bitcoin Core specifically making super radical changes like adding device specific support, USB drivers and the whole kitchen sink, I don\u2019t think that will ever get merged. Whatever you do has to be extremely minimal. Maybe add one RPC call or one little thing.\n\n# Anatomy of Bitcoin Core Wallet\n\nSo what does a Bitcoin Core wallet look like roughly? You have a master private key, your seed essentially which you should backup. Then this thing called the keypool which is a pool of keys. You take the master key and you derive all these keys from it. Then whenever you want to receive something it turns that key into an address and you send money to that address.\n\n# Core + HWW Setup\n\nWhen you want to combine this, the workflow you\u2019d want that has been built now, you start with an empty wallet that does not allow any private keys in it. That is a new flag (`watch-only`). A watch only wallet. There is nothing in the keypool, there\u2019s no addresses. What you are going to do is feed it with addresses from the hardware wallet.\n\n# Core + HWW Usage\n\nOnce you\u2019ve fed it now the wallet contains a bunch of public keys from the hardware wallet and you can generate receive addresses as before. The nice thing about this is you can receive money and create new addresses without having the hardware device plugged in. It just has a bunch of addresses. When you want to spend something now you\u2019ll need to connect it and you somehow need to sign the transaction with the hardware device. That is the thing I will show.\n\n# HWI\n\n<https://github.com/bitcoin-core/HWI>\n\nDocs: <https://hwi.readthedocs.io/en/latest/>\n\nHWI, hardware wallet interactions, a repository by Andrew Chow who has been working on this for a while. Finally getting some attention. What he\u2019s done is he has taken all these device drivers from Ledger and Trezor and a bunch of others that are all in Python and built a generic wrapper around it so they all take the same commands. You can tell it \u201cGive me an address\u201d or \u201cGive me an xpub\u201d or \u201cSign this thing\u201d without having to think too much about the specific device. There\u2019s a nice manual here.\n\n# List devices\n\nOne of the commands you can do is:\n\n`./hwi.py enumerate | jq`\n\nIt will say \u201cI found a Ledger and the fingerprint which is the BIP32 root key is that\u201d. If you know the fingerprint then you can talk to the device. We create a watch only wallet with the top command:\n\n`bitcoin-cli createwallet \u201cledger\u201d true`\n\n`bitcoin-cli -rpcwallet=ledger getwalletinfo`\n\nNew in Bitcoin Core 0.17 is that you can create new wallets on the fly. That\u2019s quite nice. You can load and unload them. What does that wallet look like? You give it a name and the most important thing is that that keypool is empty. There\u2019s no keys in it. We haven\u2019t done anything with it yet.\n\n# Get keys from device: receive\n\nNow we are going to get some keys from the device. We identify it with the fingerprint, one way to reach it.\n\n`./hwi.py --testnet --fingerprint d9d676d4 getkeypool \u201cm/84\u2019/1\u2019/0\u2019/0\u201d 0 0 --keypool | jq`\n\nWe give it a BIP84, is everyone familiar with BIP44 address generation? You start with a master key and then you derive a bunch of subkeys from it down a hierarchy. That is why it is called a hierarchical deterministic wallet. The first derivation is called the purpose. In this case I\u2019m using `84` which is the new bech32 SegWit format. `1` is the coin type, `0` would be Bitcoin, `1` would be Bitcoin testnet. Ethereum is g\\*d knows what number. The next number is the account and the last is whether it is a receive or a change address. This is a receive address instead of a change address. Then you give it a range, you say \u201cGive me the change addresses from number 0 to say 100\u201d. You only want to do this whole setup process so I would take 1000 keys or whatever it can handle. This spits out the public keys in a format that Bitcoin Core understands. You don\u2019t actually have to be able to read this, just know that Bitcoin Core understands it. You can ignore the address field, that is not actually used.\n\n# Get keys from device: change\n\nThe same with change addresses. There is a `1` here instead of a `0`.\n\n# Import keys into wallet\n\nThen you import it using the call `importmulti`. You copy, paste the output from the previous command, it says `\u201csuccess\u201d: true`. That\u2019s good. If it throws an error message you did something wrong. Done that wrong a few times. There is one little extra thing here that I should clarify.\n\n`\u201dm/84h/1h/0h/1/0\u201d`\n\nHere it explains that this public key that you are about to import belongs to a device or a tree with this fingerprint at this location. The reason you need that is if your hardware wallet wants to sign something, if you just tell the hardware wallet \u201cHere\u2019s a transaction, go sign it\u201d the hardware wallet will say \u201cWhat the hell are you talking about? I have a million private keys, do you want me to check all of them?\u201d No, you have to tell it what specific private key to use. This is how you communicate which specific private key to use. The problem is Bitcoin Core currently doesn\u2019t actually import that type of information. One of the changes Andrew Chow made which is probably mergeable does store that. That\u2019s the little tweak you could potentially get into Bitcoin Core, nothing too radical, just a little extra field. You import that, it is happy.\n\n# Generate receive address\n\nThen you can use it to receive as you would otherwise. You\u2019d say \u201cGive me a receive address\u201d and it creates a nice address. You send some money to it.\n\n# Wait for confirmation\n\nYou wait for it to arrive. Notice that now this on the watch only side. There is a [pull request](https://github.com/bitcoin/bitcoin/pull/13966) currently out there, if the wallet is only a watch only wallet then it is kind of nonsense to make this distinction. It is all watch only. That pull request will remove this and just have one number, much cleaner. This little icon will be moved over there. It is clear that this whole wallet is watch only. It is a very small tweak that you can do to make it better.\n\n# Prepare transaction\n\nWe want to spend some of this money. We are going to create this PSBT thing, partially signed Bitcoin transaction. I will show what it looks like in a bit. It is like creating a transaction, you tell it where to send it to, the address, you tell it how much to send (0.1 test Bitcoin) and then importantly you say `includeWatching: true`. That\u2019s a new thing. You tell it \u201cYes you can spend from your watch only addresses\u201d. Bitcoin Core doesn\u2019t normally let you do that. I say \u201cYes don\u2019t worry about it\u201d.  Then you add this `true` boolean which says \u201cGive it the BIP32 derivation path\u201d. If you forget that you will get very confused. It spits out this thing. We are going to look at what that thing is.\n\nYou can decode it, the same string, it splits it out. This is a whole long list. It contains the transaction hash as it would be before you sign it. It shows the inputs, it shows the outputs. The address is where you are sending it to. And this is the change address. Not that interesting. Then on the inputs what is important is you are telling the device what pubkey you are spending from but you also have this BIP32 derivation. It says this pubkey belongs to this path. That\u2019s all part of that partially signed Bitcoin transaction format standard, that type of information. On the outputs again, this is a change address, `1` means change address. That means the Ledger or Trezor or whatever you are using knows that part of the money is going to the outside world, it will prompt you \u201cDo you want to send money to this address?\u201d and part of the money is going back to itself. It knows that it doesn\u2019t need to show this because it has the private key for this, it doesn\u2019t need to worry about this 100 Bitcoin that\u2019s moving around. It just goes to myself. That is quite useful for a good user experience.\n\n# Sign transaction\n\nSo you sign it with this command:\n\n`./hwi.py --testnet --fingerprint d9d676d4 signtx insert_long_thing`\n\nIf you click the button on ok it spits out a slightly longer version of that same thing.\n\nQ - Can I just ask why you\u2019re not using process PSBT? Process PSBT takes what you had before, the output of create funded\u2026\n\nA - It can\u2019t sign it. But if you had a multisig situation you would do that. I\u2019ve tried that at home, don\u2019t try that home, a multisig between a Bitcoin Core wallet and a hardware wallet. You tell the Bitcoin Core wallet \u201cProcess this thing\u201d, it signs its side, you tell the hardware wallet \u201cProcess this thing\u201d. You can even do that in parallel. There\u2019s a command [combinepsbt](https://github.com/bitcoin/bitcoin/blob/master/doc/psbt.md#rpcs) which will take one thing signed by one device and one thing signed by another device and tries to combine it. If it has enough signatures it says \u201cDone\u201d and then you can broadcast it. It is very, very cool. Very scary to do it manually though. With all of this I\u2019ve tried it with real money.\n\nQ - With multisig it did work?\n\nA - It did work. I\u2019ve done it with multisig, not lost it yet. I\u2019ve done it with just basically the hardware wallet as the only thing with keys and not lost anything yet.\n\nQ - Why is it scary?\n\nA - It is extremely scary. These are super manual commands with public keys, am I actually able to sign this money? You tell somebody \u201cGo send money to this bech32 address\u201d. They send you money and you\u2019re like \u201cLet\u2019s see if I can still spend that\u201d. I find that scary.\n\nQ - You\u2019ve got all these long JSON strings\u2026\n\nA - While making this presentation I screwed up like 3 times.\n\nQ - The hardware wallet is supposed to internally prevent that.\n\nA - You are generating keys so if you are generating addresses the wrong way. You want to make sure the destination is a public key controlled by the hardware. You want to make sure the derivation path is not some random string that you can not reproduce. It is probably easier to screw up on testnet. Even then I screwed up but I didn\u2019t lose any testnet coins. I sent money to the same wallet instead of an external wallet, it was not too bad.\n\n# Before\n\nBefore and after, what we see here is the input side of the transaction that they needed to sign, the address that it is coming from and the public key. It has this derivation for the public key (`\u201dm/84\u2019/1\u2019/0\u2019/0/0\u201d`).\n\n# After\n\nBoom, partial signatures. It says \u201cNow I have a signature for this thing\u201d. That was added by the hardware device. That\u2019s why that long string looks slightly different.\n\n# Finalize and broadcast\n\nWe have this command called `finalizepsbt`.\n\n`bitcoin-cli -rpcwallet=ledger finalizepsbt insert_long_thing`\n\nYou copy, paste the long thing in there. It produces a transaction in hex format that you can use. And it says `\u201dcomplete\u201d: true`. Complete means this thing has all the signatures and is otherwise valid. If it is incomplete then maybe you need to send it to someone else to add another signature or you did something wrong. Then you say `sendrawtransaction` or you copy, paste it in some other place.\n\n`bitcoin-cli sendrawtransaction insert_transaction_hex`\n\nIt gives you the transaction hash and then it is on its way. It is very cool I think. It is a bit manual but I think it could be made quite elegant.\n\n# Signer RPC\n\nWhat I\u2019ve been trying the last couple of days, I didn\u2019t finish it, is to figure out how do you communicate that you want something signed. That could be a hardware wallet, \u201cGo sign my transaction\u201d but it could be a BitGo or some other service that does multisig where you say \u201cHere\u2019s my partial transaction. Go sign whatever you can sign and then give it back to me.\u201d Have that completely automated. You are in a Bitcoin Core wallet with some other wallet and you are entering your destination, it figures out \u201cI have these keys I need to sign. I know what the master public key is and I have some mapping of this master public key belongs to this service and that master public key belongs to that service\u201d. That is why I\u2019m thinking about a JSON-RPC because then you would have something like localhost, port 1000 and that represents a hardware wallet. Then the hardware wallet driver would just run a little server on your own computer that you talk to locally. They already do because a lot of times there is Electron Javascript simulated, it is like a little Chrome browser in a box. Often that actually is a client, server mechanism anyway, it is not even that bizarre to do it that way.\n\n# Hardware wallet side\n\nWhat could that look like? Something like this. The hardware wallet or the multisig service out there accepts a bunch of commands. It has a command `enumerate` that gives a list of devices. It has a command `getxpub` which you pass a device identifier `device_id` and the path `bip32_path`. \u201cGive me the xpub of the receive chain\u201d or \u201cGive me the xpub of the change chain\u201d. Then maybe something like `displayaddress` to show this particular address on the device so the user can check that it is the same to what they are seeing on their computer. And one that says `signtx` which takes one of these partially signed Bitcoin transactions.\n\n```\nenumerate\ngetxpub \u201cdevice_id\u201d \u201cbip32_path\u201d\ndisplayaddress \u201cdevice_id\u201d \u201cbip32_path\u201d (\u201caddress_type\u201d)\nsigntx \u201cpsbt\u201d\n```\n\n# Bitcoin Core side\n\nThen on the Bitcoin Core side you would add a number of fairly simple methods I think. One is when you launch it you give it a RPC URL.\n\n`bitcoind -signerrpc=localhost: 1000`\n\n```\nlistsigners\ndisplayaddress \u201cdevice_id\u201d \u201cbip32_path\u201d (\u201caddress_type\u201d)\nimportsignerkeypool \u201cdevice_id\u201d \u201cbip32_path\u201d start end\nsendto \u201caddress\u201d {signer: \u201cdevice_id\u201d}\n```\n\nThere is one signer located at this address. It already knows how to do calls to other JSON-RPCs. That\u2019s no dependency. Then you\u2019d have a couple of extra commands. One is `listsigners`. This looks at all these things and asks it what devices do you have or what multisigs do you have. Also `displayaddress` which just relays the same command. Then the `importsignerkeypool`, that\u2019s the whole flow I showed where you generate all these keys and import them. That would be one command. \u201cGo fetch 1000 keys from this device\u201d, it is a one-off thing. Then the last one would be `sendto`. You give it an address and an amount and tell it a hint which device to use as a signer. I would like it to just work but I don\u2019t think that\u2019s going to happen. I would like it to just go through the transaction and figure out \u201cI need this signer and I\u2019ll go call that service\u201d. I don\u2019t think it will be that automated. You can make a nice GUI around this. I would imagine you install your driver from the hardware manufacturer and then you go into Bitcoin Core and you say \u201cDo you want hardware support?\u201d It has a default place to look for but you can give it a manual address if it is somewhere else. Then it says \u201cOk. Please connect the device\u201d. Behind the scenes it calls this `importsignerkeypool`, sucks in all the addresses and then whenever you want to send something it says \u201cPlug it in and we\u2019ll wait for it to sign it\u201d. That is how simple it could get. From the Bitcoin Core side you have very few changes to merge, just a few new calls. You leave it to the hardware manufacturers to implement this particular standard. This wouldn\u2019t be Bitcoin Core specific either because any wallet could call a RPC like that. That\u2019s my thought, maybe someone has already done it, I haven\u2019t Googled enough.\n\n# Thanks\n\nI\u2019ll put the slides [here](https://www.slideshare.net/provoost) I have a [blog](https://medium.com/provoost-on-crypto), I have a PGP key. I didn\u2019t check if somebody edited this thing.\n\n# Q&A\n\nQ - What about authentication?\n\nA - If it is on the local device I don\u2019t think you need authentication. If you are plugging in something your own computer then you trust it. It will call localhost unauthenticated. I was thinking about if you have an external signing service, one idea I had is JSON-RPCs can do logins and passwords and all that nonsense but it sounds complicated. Something that could be simpler is you call this service and you give it the unsigned transaction but you also give it a public key. Then the service basically gives you back a UUID, a completely random number plus a date, \u201cCome back at this time\u201d. Then you call that UUID which nobody can guess because it is random and it gives you back an encrypted payload using that public key you just gave them. Even if somebody could guess it they couldn\u2019t decrypt the signed transaction. Then you get your signed transaction. That would be nice because the way this works so far is we are just blocking RPC calls. You say \u201cSign this thing\u201d and then it blocks until you press the button. That\u2019s fine if you are signing locally but if you have some service that says \u201cThank you. We are going to send you an email and a text message and we\u2019ll give you a 2 day cool day period\u201d and all that stuff you don\u2019t want a blocking call waiting for that. Just come back later. The nice thing about this PSBT thing is it is in parallel. You could just have it call the hardware wallet and have it call some other service. They don\u2019t need to come back at the same time. That would require more changes on the wallet side. Now you need to track what am I waiting for? You\u2019d need to have a list somewhere of pending transactions and where you are expecting a result. That\u2019s not that big either. This transaction, plus a URL plus a UUID and a date and you wipe it if it takes too long.\n\nQ - If one key is Bitcoin Core and one key is Ledger and I don\u2019t know which key is on the underlying multisig, I could ask Bitcoin Core to sign it and it would end up going to you and not me?\n\nA - That\u2019s where the authentication comes in. They receive a transaction from some random source. They recognize your public keys because there is enough information in there so they can map that back to you. Then they send you the email saying \u201cSomebody is trying to spend your money. Is that you?\u201d Maybe you want to add some extra hurdles there so you can\u2019t just spam them and randomly try to intercept somebody\u2019s email or some trick like that. I haven\u2019t thought this through in that much detail. I\u2019d just like this to work without any login concept but I\u2019m not married to that.\n\nQ - What are your thoughts on the security of hardware wallets? Do you feel it is the right model for long term cold storage?\n\nA - I don\u2019t know, I certainly know my laptop is not the right model for long term cold storage. My last laptop disappeared in Barcelona. I think this is unsolved. Even the hardware wallets tell you \u201cWrite down your paper key\u201d so now you have this paper key lying around in your sock drawer. Is that good? I don\u2019t know. For the time being unless you are extremely rich you are more likely to lose your Bitcoin because of your own stupidity than to get robbed by someone. My guess is in theory you should be able to get insurance against that type of physical theft, it is a very known threat model. You should just be able to say \u201cIf somebody robs me and I give some sort of proof of reserve to the insurance\u2026\u201d\n\nQ - I dox myself and how many Bitcoin I have?\n\nA - Your insurance company will know. That\u2019s the trade-off. If you don\u2019t want to trust the insurance company then don\u2019t get insurance. If you do want insurance then the only trade-off is the insurance company will know how much you have, the tax authorities will know how much you have but they won\u2019t know what you have. It may very well be worth it if you are rich enough. If you are rich enough people will know it anyway. That\u2019s the thing with people who think they can avoid the tax authorities. If your behavior is like the behavior of a person who has a lot of money your neighbors are going to be jealous. \u201cI think he has more money than he says he does. He is driving this lambo.\u201d They will follow you and look at everything you are doing. They\u2019ll dedicate 10 people for a month to dig into everything they find. They\u2019ll blackmail your children. Taxing rich people is an older profession than prostitution, it is competing. Tax enforcement and prostitution are probably about as old. Everybody thinks Bitcoin changes everything, I doubt it. I really doubt it. But I\u2019m a bit of a cynic.\n\nQ - The keypool had to be empty so it has to be a fresh wallet when you set it up?\n\n A- You don\u2019t have to. If you are comfortable getting extremely confused you can do this in an existing wallet. One of the setups that I tried was multisig where you would have a regular wallet that has its own keys and you combine it with a hardware wallet. You pull in the keys just for the purpose of multisig. Multisig however is extremely confusing in Bitcoin Core.\n\nQ - How does it work? BIP32 has the gap so if I derive one key\u2026\n\nA - Bitcoin Core doesn\u2019t do gap limit. What it does is derive a bunch of addresses, throws them in a keypool which it can draw from.\n\nQ - If I use my Ledger with Bitcoin Core?\n\nA - The compatibility problem? The way I did the demo here, I tried to stay compatible by using the standardized derivation paths. But then it is up to you to honor the gap limit.\n\nQ - Are the keys in the keypool in order?\n\nA - It picks them in order. You will probably honor the gap limit. If you wanted to patch Bitcoin Core and say \u201cHonor the gap limit as an optional flag\u201d that sounds like the kind of change that is small enough so that it could get in. The gap limit is especially a problem for merchants. What merchants do is they have a customer and they have a shopping cart, they generate an address specifically for that customer. They should not reuse that for another customer. They shouldn\u2019t even reuse it at all. If I wanted to spy on a merchant I would just create all these fake orders and collect all their addresses and then monitor the entire revenue going into that shop. The problem with generating a new address is you hit the gap limit which is why merchants should use Lightning, Lightning doesn\u2019t have that problem. It solves the gap limit problem quite elegantly. For normal users I think it is less likely because the way you break the gap limit is by generating 20 addresses in a row and having a very pedantic implementation from the other wallet. Wallets should be very conservative in not exceeding the gap limit. I worked for a wallet in the past and I spent quite a lot of time making sure it honored the gap limit very pedantically. But it should import quite royally. It should be accepting 100 or more if it can.\n\nQ - How could multisig be improved using Bitcoin Core?\n\nA - PSBTs is a huge improvement. That\u2019s step 1. That makes it less confusing than it was. Me having done it 20 times also makes it less confusing. I know sipa is working on cleaning up the wallet in general using these output descriptors for example. The wallet was based on the very old model, you just have keys and those keys you have the private keys for. All the wallet cares about is do I have this private key or do I not have this private key? SegWit got added and now one private key could map to different spending scripts. That was kind of hacked into the wallet. If that gets cleaned up then I think we can have a way to describe \u201cI know of these keys and I know I have one key of this multisig\u201d. Right now it is quite a few commands to do multisig. You have to say \u201cGive me an address\u201d but then you also have to explicitly import that address.\n\nQ - Multisig is quite easy to use on Electrum.\n\nA - Your solution is easier for now. But you need to install more things. You need to add all of Electrum.\n\nQ - Electrum used its own format for this kind of problem.\n\nA - That was another problem I ran into it. It uses xpubs, ypubs and zpubs and they are not really standardized. You need to go through the right steps to not dox yourself when you install it. You need to make sure the first time you run Electrum it doesn\u2019t connect to any of the external servers. You can do that if you do it carefully. Then you can get the xpub out of your Trezor or Ledger without it ever hitting the Trezor or Ledger servers but that is also not that easy. When you get a new Ledger it says \u201cGo to this website. Install this program.\u201d This program says \u201cWelcome. Write down your seed and here is your balance\u201d and now they know your keys. That\u2019s why I use BIP32 addresses because the Ledger wallet doesn\u2019t support those. Ledger doesn\u2019t actually know those keys yet.\n\nQ - You seem skeptical about this project but it is only because it is early?\n\nA - I think it is not ready to use yet. But I am actually really optimistic. I can see how you could do this. It is not going to happen overnight but I can see where it goes. Multisig is more complicated and I like this idea of having this JSON-RPC standard that could work for different wallets and different signing services. I could see how people would find that useful. They would probably all have their own wish lists. Pretty optimistic.\n\n\n",
    "body_type": "markdown",
    "created_at": "2018-09-19T00:00:00.000Z",
    "domain": "https://btctranscripts.com/",
    "url": "https://btctranscripts.com/london-bitcoin-devs/2018-09-19-sjors-provoost-core-hardware-wallet",
    "categories": [
        "meetup"
    ],
    "tags": [
        "hardware wallet",
        "bitcoin core"
    ],
    "media": "https://www.youtube.com/watch?v=SUDkYbkcTsQ",
    "authors": [
        "Sjors Provoost"
    ],
    "indexed_at": "2024-03-21T16:33:36.718Z",
    "transcript_by": "Michael Folkson",
    "summary": "In a comprehensive discussion held in London, Sjors Provoost explored the evolving landscape of Bitcoin security and privacy through the lens of integrating Bitcoin Core wallets with hardware wallets. This integration, primarily developed by Andrew Chow, aims to leverage the robust validation features of Bitcoin Core wallets while mitigating the vulnerabilities inherent in storing them on potentially insecure personal computers. Provoost underscored the fundamental reasons for utilizing Bitcoin Core, including its thorough transaction validation and rigorously reviewed codebase, and juxtaposed these with the contrasting security model offered by hardware wallets which store private keys externally to safeguard against software-based thefts.\n\nThe fusion of Bitcoin Core with hardware wallets presents an innovative solution aimed at enhancing privacy and reducing dependency on third-party services for transaction verifications. By conducting all transactions and balance checks locally, users can significantly diminish their exposure to external parties. Additionally, this amalgamation narrows down the amount of code that users need to trust, focusing mainly on the wallet's driver and device software, thereby promising a more secure and private Bitcoin transaction experience.\n\nDespite the clear advantages, Provoost outlined several technical challenges that need addressing to achieve seamless integration. These include the encoding of transaction data\u2014overcome by the introduction of Partially Signed Bitcoin Transactions (PSBTs)\u2014and establishing effective communication protocols between the hardware device and Bitcoin Core. The minimal modification goal within Bitcoin Core is to ensure changes remain manageable and maintainable.\n\nFurther delving into Bitcoin transaction signing, Provoost shared insights on the complexities involved, especially with multisig configurations, through his own experiences. He discussed the potential risks and detailed the process of preparing transactions for signing, highlighting the critical role of PSBT in facilitating secure transaction signing between Bitcoin Core and hardware wallets. Provoost envisioned a framework where interactions between Bitcoin Core and hardware wallets are streamlined, proposing a series of JSON-RPC commands to simplify the currently manual-intensive process.\n\nAddressing broader security concerns, Provoost candidly spoke about the vulnerabilities associated with various cryptocurrency storage methods. He speculated on the possibility of insuring cryptocurrency holdings against physical theft as a means to mitigate some of these risks, acknowledging the privacy trade-offs involved.\n\nThe final portion of the conversation shifted focus towards enhancing Bitcoin's privacy and security features, particularly through the implementation of multisig setups within Bitcoin Core. Despite the current challenges, such as the interface complexity and the gap limit issue, Provoost expressed optimism for future developments. He sees great potential in standardizing protocols for multisig and other advanced wallet features, paving the way for wider adoption and ease of use.\n\nConclusively, Sjors Provoost's presentation not only sheds light on the technical intricacies and challenges of integrating Bitcoin Core with hardware wallets but also reflects on the broader implications for Bitcoin's security and privacy. His insights offer a glimpse into the potential future of securely managing digital assets, emphasizing the importance of continual innovation and improvement within the ecosystem to protect users against both external threats and privacy intrusions."
}