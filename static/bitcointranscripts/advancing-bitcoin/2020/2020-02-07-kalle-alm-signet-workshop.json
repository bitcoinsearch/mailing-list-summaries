{
    "id": "bitcointranscripts+advancing-bitcoin+2020+2020-02-07-kalle-alm-signet-workshop",
    "title": "Signet Workshop",
    "body_formatted": "{\"type\":\"paragraph\",\"text\":\"Video: No video posted online\"}, {\"type\":\"heading\",\"text\":\"Let\u2019s prepare\"}, {\"type\":\"code\",\"text\":\"mkdir workspace\\ncd workspace\\ngit clone https://github.com/bitcoin/bitcoin.git\\ncd bitcoin\\ngit remote add kallewoof https://github.com/kallewoof/bitcoin.git\\ngit fetch kallewoof\\ngit checkout signet\\n./autogen.sh\\n./configure -C --disable-bench --disable-test --without-gui\\nmake -j5\"}, {\"type\":\"paragraph\",\"text\":\"When you try to run the configure part you are going to have some problems if you don\u2019t have the dependencies. If you don\u2019t have the dependencies Google your OS and \u201cBitcoin build\u201d. If you have Windows you\u2019re out of luck.\"}, {\"type\":\"code\",\"text\":\"cd ..\\ngit clone https://github.com/kallewoof/btcdeb.git\\ncd btcdeb\\ngit checkout taproot\\n./autogen.sh\\n./configure -C --enable-dangerous\\nmake -j5\"}, {\"type\":\"paragraph\",\"text\":\"In your src folder you should have bitcoind, bitcoin-cli and a couple of the binaries. If you are all done with this part you can go into your src folder and type `./bitcoind -signet` and hit enter.\"}, {\"type\":\"paragraph\",\"text\":\"If you have managed to sync up Signet do:\"}, {\"type\":\"paragraph\",\"text\":\"`./bitcoin-cli -signet getnewaddress`\"}, {\"type\":\"paragraph\",\"text\":\"You should get a `sb1\u2026` address. Post this address in the Telegram group.\"}, {\"type\":\"paragraph\",\"text\":\"Q - Do you have to be fully synced to get a new address?\"}, {\"type\":\"paragraph\",\"text\":\"A - No you don\u2019t.\"}, {\"type\":\"paragraph\",\"text\":\"`./bitcoin-cli -signet getbalance`\"}, {\"type\":\"paragraph\",\"text\":\"`ssh gcog`\"}, {\"type\":\"paragraph\",\"text\":\"`cd workspace/signet/src`\"}, {\"type\":\"paragraph\",\"text\":\"`./bitcoin-cli -datadir=$HOME/signet-sgniii getrawtransaction 4b9911\u2026.88c7 1`\"}, {\"type\":\"paragraph\",\"text\":\"`bitcoin-cli -datadir=$HOME/signet-sgniii sendtoaddress sb1\u20265spr 100`\"}, {\"type\":\"paragraph\",\"text\":\"`cd contrib/signet`\"}, {\"type\":\"paragraph\",\"text\":\"`./mkblock.sh ../../src/bitcoin-cli -datadir=$HOME/signet-taproot`\"}, {\"type\":\"paragraph\",\"text\":\"`./bitcoin-cli -signet getbalance`\"}, {\"type\":\"paragraph\",\"text\":\"`./bitcoin-cli -signet getunconfirmedbalance`\"}, {\"type\":\"paragraph\",\"text\":\"Some person out there set up their own Signet so we are getting blocks for it.\"}, {\"type\":\"paragraph\",\"text\":\"`./bitcoin-cli -signet getconnectioncount`\"}, {\"type\":\"paragraph\",\"text\":\"`./bitcoin-cli-signet getblockcount`\"}, {\"type\":\"paragraph\",\"text\":\"`./bitcoin-cli-signet getpeerinfo`\"}, {\"type\":\"paragraph\",\"text\":\"I have a network running with Signet Taproot right now. We will eventually switch to that one. If you are going to Stepan Snigirev\u2019s hardware workshop this afternoon which I recommend you should do then you will be able to continue using the Signet Taproot setup that you have with coins and everything in his workshop with a hardware wallet.\"}, {\"type\":\"paragraph\",\"text\":\"`./bitcoin-cli -signet settxfee 0.00001`\"}, {\"type\":\"paragraph\",\"text\":\"`./bitcoin-cli -signet sendtoaddress sb1\u2026.8mg 1`\"}, {\"type\":\"paragraph\",\"text\":\"I am sending everyone 1 Signet Bitcoin. If you go to the [Signet block explorer](https://explorer.bc-2.jp/) copy the `AddToWallet` text string and put it into the block explorer. You should see it is unconfirmed, the fees etc.\"}, {\"type\":\"heading\",\"text\":\"btcdeb\"}, {\"type\":\"paragraph\",\"text\":\"I am going to move onto the btcdeb part. This is the Bitcoin debugger that I maintain. It has experimental support for Taproot so I figured out we could use that.\"}, {\"type\":\"code\",\"text\":\"cd ..\\ngit clone https://github.com/kallewoof/btcdeb.git\\ncd btcdeb\\ngit checkout taproot\\n./autogen.sh\\n./configure -C --enable-dangerous\\nmake -j5\"}, {\"type\":\"paragraph\",\"text\":\"Q - I do have an issue with a config file.\"}, {\"type\":\"paragraph\",\"text\":\"A - You may have to remove the -C flag.\"}, {\"type\":\"paragraph\",\"text\":\"Q - What does the -C flag do?\"}, {\"type\":\"paragraph\",\"text\":\"A - It speeds up configure when you run it multiple times because it will cache all of the outputs. But I think there is an issue with libsecp that causes this to a problem the first time. You can do without -C.\"}, {\"type\":\"heading\",\"text\":\"Remotes\"}, {\"type\":\"paragraph\",\"text\":\"Your fork of Bitcoin Core git@github.com:user/bitcoin.git\"}, {\"type\":\"paragraph\",\"text\":\"Upstream https://github.com/bitcoin/bitcoin.git\"}, {\"type\":\"paragraph\",\"text\":\"Feature remote https://github.com/owner/bitcoin.git\"}, {\"type\":\"code\",\"text\":\"origin git@github.com:kallewoof/bitcoin.git (fetch)\\norigin git@github.com:kallewoof/bitcoin.git (push)\\nsipa https://github.com/sipa/bitcoin.git (fetch)\\nsipa https://github.com/sipa/bitcoin.git (push)\\nupstream https://github.com/bitcoin/bitcoin.git (fetch)\\nupstream https://github.com/bitcoin/bitcoin.git (push)\"}, {\"type\":\"paragraph\",\"text\":\"Right now Signet is not in Bitcoin Core which causes complications. The [Signet PR](https://github.com/bitcoin/bitcoin/pull/18267) is in the [high priority blockers](https://github.com/bitcoin/bitcoin/projects/8) category so hopefully it will be in 0.20 which is supposed be released in May. Until then we have to juggle GitHub repositories. Eventually you will be able to use the default Signet with any supported custom upcoming features. With Taproot or OP_CHECKTEMPLATEVERIFY or any potential soft forks, in the future if there are any soft forks, as soon as they are added to the Signet miner which is just one machine, anyone can turn these on and off however they want. If you want to mine Taproot you can grab the Taproot branch. You can send Taproot transactions and you can receive them. Right now it is a little manual. We will try to set up a custom Signet for the people here. We will pick one person who is the miner or a couple of people. We could do one of everyone in here if we wanted to. I would say just pick one miner. I don\u2019t know if you are familiar with using GitHub but there is something called a remote. By default there is only one remote, it is called origin. It is whatever you type in after git clone. But you can add remotes. You can do `git remote add name URL` and then you have another remote.  You can do `git fetch remote-name` and it will fetch that. In this case I am creating a Taproot Signet network. I have my origin which is my Bitcoin repository. Because I am using `git@github` here I am able to use RSA keys instead of having to enter a password all the time. I am adding this sipa remote because sipa is the person who is doing the work in progress Taproot [pull request](https://github.com/bitcoin/bitcoin/pull/17977). You don\u2019t have to add this, you could pull directly the pull request but this is in some ways easier. You can pull directly. Upstream is Bitcoin, you don\u2019t really need upstream in this case. In your case you would replace origin kallewoof with your name.\"}, {\"type\":\"heading\",\"text\":\"Branches\"}, {\"type\":\"paragraph\",\"text\":\"Because Signet is not merged yet there is a `signet` branch. As soon as it is merged into Bitcoin Core we don\u2019t have that anymore. In our GitHub we create a signet branch and then we create a `signet-vanilla-taproot` (signet and network params). We have a `taproot` upstream feature branch which is sipa\u2019s. Then we create a `signet-taproot` branch. That is feature (`taproot`) merged on top of `signet-vanilla-taproot`.\"}, {\"type\":\"heading\",\"text\":\"Branches (post signet merge)\"}, {\"type\":\"paragraph\",\"text\":\"One it gets merged we won\u2019t have a `signet` branch.\"}, {\"type\":\"heading\",\"text\":\"Branches (future)\"}, {\"type\":\"paragraph\",\"text\":\"In the future we will only have a feature (`taproot`) branch (upstream feature with signet params). It is going to be a little finicky today but we\u2019ll see how far we get.\"}, {\"type\":\"heading\",\"text\":\"The signet branch\"}, {\"type\":\"paragraph\",\"text\":\"We have already done this part and you should have built this branch already.\"}, {\"type\":\"paragraph\",\"text\":\"(You can add https://github.com/kallewoof/bitcoin.git as a remote and then fetch it and simply checkout the signet branch)\"}, {\"type\":\"code\",\"text\":\"git remote add kallewoof https://github.com/kallewoof/bitcoin.git\\ngit fetch kallewoof\\ngit checkout signet\"}, {\"type\":\"paragraph\",\"text\":\"(Alternatively you can fetch the pull request directly from the bitcoin remote)\"}, {\"type\":\"code\",\"text\":\"git fetch upstream pull/16411/head:signet\\ngit checkout signet\"}, {\"type\":\"heading\",\"text\":\"The signet-vanilla-feature branch\"}, {\"type\":\"paragraph\",\"text\":\"(We create this once and then base our signet-feature branch off of it. If we end up wanting to reset signet-feature we do so by recreating it based on this branch.)\"}, {\"type\":\"paragraph\",\"text\":\"From the signet branch do\"}, {\"type\":\"paragraph\",\"text\":\"`git checkout -b signet-vanilla-taproot`\"}, {\"type\":\"paragraph\",\"text\":\"(And then tweak the chainparams.cpp file (we do that later)\"}, {\"type\":\"paragraph\",\"text\":\"Right now we are on the signet branch. What we want to do is change the chain parameters a little bit. If we use signet right after this it is going to use the whole signet which does not have Taproot support. If we are going to create a custom Signet for own feature, or sipa\u2019s feature, we need to first tweak some chain parameters. We create this branch here `signet-vanilla-taproot`.\"}, {\"type\":\"paragraph\",\"text\":\"Q - This is in the Bitcoin repo?\"}, {\"type\":\"paragraph\",\"text\":\"A - Yes. btcdeb is already set up to work with this.\"}, {\"type\":\"paragraph\",\"text\":\"If you have done that you should now have a branch called `signet-vanilla-taproot`. We\u2019re not going to do anything with that now but we are going to change the chain parameters later.\"}, {\"type\":\"heading\",\"text\":\"The feature branch\"}, {\"type\":\"paragraph\",\"text\":\"(We keep this identical to owner (here \u201csipa\u201d) and never diverge:\"}, {\"type\":\"code\",\"text\":\"git remote add sipa https://github.com/sipa/bitcoin.git\\ngit fetch sipa\\ngit checkout taproot\\ngit pull\\ngit reset --hard sipa/taproot\"}, {\"type\":\"paragraph\",\"text\":\"sipa is Pieter Wuille by the way.\"}, {\"type\":\"paragraph\",\"text\":\"Q - \u2026\"}, {\"type\":\"paragraph\",\"text\":\"A - Some other Signet was technically connected to us. You can exit if you want to or you can keep it running for now.\"}, {\"type\":\"paragraph\",\"text\":\"`git checkout signet-vanilla-taproot`\"}, {\"type\":\"paragraph\",\"text\":\"We have already created this `signet-vanilla-taproot` branch, check it out. I don\u2019t think we are going to have time to do our own network so let\u2019s use one that I have already made. In the Telegram I posted this code snippet from chainparams.cpp. In whatever editor you want if you open this file (chainparams.cpp) and then you go down to find the class called `SigNetParams`. There is this if case here and inside here is the default Signet parameters. You want to delete all that and then put this instead. I have posted that in the Telegram so you don\u2019t have to type it manually.\"}, {\"type\":\"code\",\"text\":\"LogPrintf(\\\"Using default taproot signet network\\\\n\\\");\\nbin = ParseHex(\\\"512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae\\\");\\ngenesis_nonce = 280965\\nvSeeds.push_back(\\\"178.128.221.177\\\");\"}, {\"type\":\"paragraph\",\"text\":\"Q - On which branch is this?\"}, {\"type\":\"paragraph\",\"text\":\"A - signet-vanilla.\"}, {\"type\":\"paragraph\",\"text\":\"I will quickly go through what this is. The `bin` part is the challenge. You probably recognize it. It looks like a normal Bitcoin script. What it does it says a 1 and a 33 byte push and a pubkey and a 1 and a CHECKMULTISIG. It is a 1-of-1 MULTISIG. The second part is a genesis nonce, I will talk about that. The third party is a seed, the computer that is running this version of Signet.\"}, {\"type\":\"paragraph\",\"text\":\"`git commit -am \u201cnew signet parameters\u201d`\"}, {\"type\":\"paragraph\",\"text\":\"You should commit to your signet-vanilla-taproot repository with your new parameters. Once you have that you can merge this with taproot. When we run it we should be able to use Taproot.\"}, {\"type\":\"paragraph\",\"text\":\"Q - \u2026\"}, {\"type\":\"paragraph\",\"text\":\"A - You don\u2019t need to compile right now. If you want to compile that is probably a good idea to make sure you don\u2019t have any errors.\"}, {\"type\":\"paragraph\",\"text\":\"We check out signet-taproot.\"}, {\"type\":\"paragraph\",\"text\":\"`git checkout -b signet-taproot`\"}, {\"type\":\"paragraph\",\"text\":\"And then we do the `git merge taproot`. If you have done `git checkout -b signet-taproot` already you may want to do `git merge signet-vanilla-taproot` first. When you\u2019ve done that you do `git merge taproot`.\"}, {\"type\":\"paragraph\",\"text\":\"(We merge taproot on top of signet-taproot)\"}, {\"type\":\"paragraph\",\"text\":\"When you do the `git merge taproot` you are going to have conflicts. You need both parts but remove the verify witness program in the first part.\"}, {\"type\":\"paragraph\",\"text\":\"The reason why I am having you painstakingly go through this is because this is exactly what you are going to have to do if you ever have a feature yourself that you want to merge. You are going to have these merge conflicts that show up. We are now at the part where our Signet is working. If you manage to compile this and run it it will crash. The reason why it crashes is because you have an old Signet running. You want to delete the Signet folder in your Data. Let\u2019s do that. Stop your running bitcoind.\"}, {\"type\":\"paragraph\",\"text\":\"`rm -rf ~/.bitcoin/signet`\"}, {\"type\":\"paragraph\",\"text\":\"For Macs:\"}, {\"type\":\"paragraph\",\"text\":\"`rm -rf ~/Library/Application\\\\ Support/bitcoin/signet`\"}, {\"type\":\"paragraph\",\"text\":\"Remove that folder. You should be on the `signet-taproot` branch.\"}, {\"type\":\"paragraph\",\"text\":\"`make`\"}, {\"type\":\"paragraph\",\"text\":\"Once you have finished make:\"}, {\"type\":\"paragraph\",\"text\":\"`./bitcoind -signet`\"}, {\"type\":\"paragraph\",\"text\":\"If you remembered to delete the signet folder in your data it should now connect to a different Signet which has Taproot. This one started in January 2020. If you were back in 2019 you are using the previous Signet.\"}, {\"type\":\"paragraph\",\"text\":\"`./autogen.sh`\"}, {\"type\":\"paragraph\",\"text\":\"`./configure -C --disable-test --disable-bench --without-gui`\"}, {\"type\":\"paragraph\",\"text\":\"If you are running into compiler errors you may have to `./autogen.sh` and `./configure` again and then `make clean`.\"}, {\"type\":\"heading\",\"text\":\"btcdeb\"}, {\"type\":\"paragraph\",\"text\":\"While we are waiting for some compiler stuff let\u2019s take the last few minutes to see if we can do something with this. We have the btcdeb folder.\"}, {\"type\":\"paragraph\",\"text\":\"`cd btcdeb`\"}, {\"type\":\"paragraph\",\"text\":\"There is a `tap` man here that has a bunch of features.\"}, {\"type\":\"paragraph\",\"text\":\"`./tap`\"}, {\"type\":\"paragraph\",\"text\":\"The homework is to use this man to create a Taproot address and send that to me. If you send that to me I will send you some coins. This is all experimental and new. If you do this and run into problems, have bugs whatever, that is invaluable for the Bitcoin community. I really encourage you to do this. You may even be able to make a contribution to the current [pull request](https://github.com/bitcoin/bitcoin/pull/17977), the work in progress Taproot pull request on the Bitcoin Core repository. If people play around with this stuff and break it then we can improve that pull request. But it is all very new and experimental. I can show you an example. I don\u2019t know if you have ever used btcdeb before. This version of btcdeb can handle BIP-Taproot spends.\"}, {\"type\":\"paragraph\",\"text\":\"`./btcdeb --txin=$txin --tx=020000\u2026`\"}, {\"type\":\"paragraph\",\"text\":\"What I am doing is saying \u201cThis is the input transaction here and then this is the transaction and tell me what happens.\u201d It says this is a SegWit transaction and gives the transaction data. Then here we come to the `Taproot commitment`. This has the `control` object. Have you heard about MAST? This is MAST implemented in Taproot. What Taproot does is uses MAST to prove that a particular script, this `script`, was actually added into the address at creation time. When you create the address you can insert any amounts of scripts you want but no one is going to see the scripts unless you use them to spend. In this case I am using this one to spend the transaction. The `control` object is saying that you use this data to derive the root of the Merkle tree. If you have a root of the Merkle tree and it matches then that script was committed. The \u2018control\u2019 object has a version byte and then it is followed by a pubkey. Pubkeys in Taproot are 32 bytes. If you are used to pubkeys in Bitcoin in general they are 33 bytes. They have 02 or 03 followed by a hex value. We remove the 02 or 03 and it is assuming they are a particular type. Then there is a `program`. There is `p` and `q`. `p` is the internal pubkey used to create this Taproot spend. Then there is some Merkle root stuff that goes on. What btcdeb does here is it steps through this commitment phase. There is this `final k` here and then there is a `TapTweak`. There is a `CheckPayToContract` here. This script only has one input so it doesn\u2019t have a Merkle tree at all. Once this finishes with the Taproot commitment check we see the script being run. It is OP_SHA256, OP_EQUALVERIFY and then there is a pubkey and a OP_CHECKSIG. This is just like normal.\"}, {\"type\":\"paragraph\",\"text\":\"`btcdeb> step`\"}, {\"type\":\"paragraph\",\"text\":\"This is the result of the OP_CHECKSIG. You can see a few things here. It is a 32 byte pubkey so it is a `schnorr sig check`. This pubkey is different from the internal pubkey that we gave. This is part of the script, this is Alice\u2019s pubkey. The internal pubkey is everyone\u2019s pubkey that they share. We do the `VerifySchnorrSignature` and that works. There is a [document](https://github.com/bitcoin-core/btcdeb/blob/taproot/doc/tapscript-example-with-tap.md) where I go through an example which has two different scripts. [This](https://github.com/bitcoin-core/btcdeb/blob/taproot/doc/tapscript-example-with-tap.md) is the normal Bitcoin script. Instead of doing this OP_IF OP_ELSE OP_ENDIF thing we take this and the CHECKSIG as one script and we take this and the CHECKSIG as the other script. Whenever we spend it we don\u2019t have to show the world all this stuff. We just prove that this was a possibility and we satisfy it.\"}, {\"type\":\"paragraph\",\"text\":\"Q - This is the Merkle tree part? You don\u2019t provide the whole script, you only provide the path that you are executing.\"}, {\"type\":\"paragraph\",\"text\":\"A - Yes. This works exactly like the Merkle root inside transactions except there are some tweaks with version bytes and stuff.\"}, {\"type\":\"paragraph\",\"text\":\"If you look at it like this you are not saving a lot of space but you have to remember that these things are all big blobs, 32 byte values. If you look here you see this thing is kind of big. If you don\u2019t have to show one of these you are saving space and saving fees. It is a huge improvement. If everyone agrees you can spend it as if it was a regular pubkey. That is a huge saving privacy wise and fee wise. Nobody is going to be able to separate your custom stuff with a normal pubkey if everyone is in agreement. Think about a payment channel in Lightning, how often do you have the other person not agreeing to close a channel? Usually they are like \u201cOk\u201d. Normally you would just use the pubkey and be done with it. In this example I actually have the private key, normally you don\u2019t. The way you do this is you use MuSig or something to create the internal private key. That way nobody actually knows the private key but you can still spend it. I didn\u2019t get as far as I hoped but hopefully you got a start at least.\"}",
    "body": "Video: No video posted online\n\n## Let\u2019s prepare\n\n```\nmkdir workspace\ncd workspace\ngit clone https://github.com/bitcoin/bitcoin.git\ncd bitcoin\ngit remote add kallewoof https://github.com/kallewoof/bitcoin.git\ngit fetch kallewoof\ngit checkout signet\n./autogen.sh\n./configure -C --disable-bench --disable-test --without-gui\nmake -j5\n```\n\nWhen you try to run the configure part you are going to have some problems if you don\u2019t have the dependencies. If you don\u2019t have the dependencies Google your OS and \u201cBitcoin build\u201d. If you have Windows you\u2019re out of luck.\n\n```\ncd ..\ngit clone https://github.com/kallewoof/btcdeb.git\ncd btcdeb\ngit checkout taproot\n./autogen.sh\n./configure -C --enable-dangerous\nmake -j5\n```\nIn your src folder you should have bitcoind, bitcoin-cli and a couple of the binaries. If you are all done with this part you can go into your src folder and type `./bitcoind -signet` and hit enter.\n\nIf you have managed to sync up Signet do:\n\n`./bitcoin-cli -signet getnewaddress`\n\nYou should get a `sb1\u2026` address. Post this address in the Telegram group.\n\nQ - Do you have to be fully synced to get a new address?\n\nA - No you don\u2019t.\n\n`./bitcoin-cli -signet getbalance`\n\n`ssh gcog`\n\n`cd workspace/signet/src`\n\n`./bitcoin-cli -datadir=$HOME/signet-sgniii getrawtransaction 4b9911\u2026.88c7 1`\n\n`bitcoin-cli -datadir=$HOME/signet-sgniii sendtoaddress sb1\u20265spr 100`\n\n`cd contrib/signet`\n\n`./mkblock.sh ../../src/bitcoin-cli -datadir=$HOME/signet-taproot`\n\n`./bitcoin-cli -signet getbalance`\n\n`./bitcoin-cli -signet getunconfirmedbalance`\n\nSome person out there set up their own Signet so we are getting blocks for it.\n\n`./bitcoin-cli -signet getconnectioncount`\n\n`./bitcoin-cli-signet getblockcount`\n\n`./bitcoin-cli-signet getpeerinfo`\n\nI have a network running with Signet Taproot right now. We will eventually switch to that one. If you are going to Stepan Snigirev\u2019s hardware workshop this afternoon which I recommend you should do then you will be able to continue using the Signet Taproot setup that you have with coins and everything in his workshop with a hardware wallet.\n\n`./bitcoin-cli -signet settxfee 0.00001`\n\n`./bitcoin-cli -signet sendtoaddress sb1\u2026.8mg 1`\n\nI am sending everyone 1 Signet Bitcoin. If you go to the [Signet block explorer](https://explorer.bc-2.jp/) copy the `AddToWallet` text string and put it into the block explorer. You should see it is unconfirmed, the fees etc.\n\n## btcdeb\n\nI am going to move onto the btcdeb part. This is the Bitcoin debugger that I maintain. It has experimental support for Taproot so I figured out we could use that.\n\n```\ncd ..\ngit clone https://github.com/kallewoof/btcdeb.git\ncd btcdeb\ngit checkout taproot\n./autogen.sh\n./configure -C --enable-dangerous\nmake -j5\n```\n\nQ - I do have an issue with a config file.\n\nA - You may have to remove the -C flag.\n\nQ - What does the -C flag do?\n\nA - It speeds up configure when you run it multiple times because it will cache all of the outputs. But I think there is an issue with libsecp that causes this to a problem the first time. You can do without -C.\n\n## Remotes\n\nYour fork of Bitcoin Core git@github.com:user/bitcoin.git\n\nUpstream https://github.com/bitcoin/bitcoin.git\n\nFeature remote https://github.com/owner/bitcoin.git\n\n```\norigin git@github.com:kallewoof/bitcoin.git (fetch)\norigin git@github.com:kallewoof/bitcoin.git (push)\nsipa https://github.com/sipa/bitcoin.git (fetch)\nsipa https://github.com/sipa/bitcoin.git (push)\nupstream https://github.com/bitcoin/bitcoin.git (fetch)\nupstream https://github.com/bitcoin/bitcoin.git (push)\n```\n\nRight now Signet is not in Bitcoin Core which causes complications. The [Signet PR](https://github.com/bitcoin/bitcoin/pull/18267) is in the [high priority blockers](https://github.com/bitcoin/bitcoin/projects/8) category so hopefully it will be in 0.20 which is supposed be released in May. Until then we have to juggle GitHub repositories. Eventually you will be able to use the default Signet with any supported custom upcoming features. With Taproot or OP_CHECKTEMPLATEVERIFY or any potential soft forks, in the future if there are any soft forks, as soon as they are added to the Signet miner which is just one machine, anyone can turn these on and off however they want. If you want to mine Taproot you can grab the Taproot branch. You can send Taproot transactions and you can receive them. Right now it is a little manual. We will try to set up a custom Signet for the people here. We will pick one person who is the miner or a couple of people. We could do one of everyone in here if we wanted to. I would say just pick one miner. I don\u2019t know if you are familiar with using GitHub but there is something called a remote. By default there is only one remote, it is called origin. It is whatever you type in after git clone. But you can add remotes. You can do `git remote add name URL` and then you have another remote.  You can do `git fetch remote-name` and it will fetch that. In this case I am creating a Taproot Signet network. I have my origin which is my Bitcoin repository. Because I am using `git@github` here I am able to use RSA keys instead of having to enter a password all the time. I am adding this sipa remote because sipa is the person who is doing the work in progress Taproot [pull request](https://github.com/bitcoin/bitcoin/pull/17977). You don\u2019t have to add this, you could pull directly the pull request but this is in some ways easier. You can pull directly. Upstream is Bitcoin, you don\u2019t really need upstream in this case. In your case you would replace origin kallewoof with your name.\n\n## Branches\n\nBecause Signet is not merged yet there is a `signet` branch. As soon as it is merged into Bitcoin Core we don\u2019t have that anymore. In our GitHub we create a signet branch and then we create a `signet-vanilla-taproot` (signet and network params). We have a `taproot` upstream feature branch which is sipa\u2019s. Then we create a `signet-taproot` branch. That is feature (`taproot`) merged on top of `signet-vanilla-taproot`.\n\n## Branches (post signet merge)\n\nOne it gets merged we won\u2019t have a `signet` branch.\n\n## Branches (future)\n\nIn the future we will only have a feature (`taproot`) branch (upstream feature with signet params). It is going to be a little finicky today but we\u2019ll see how far we get.\n\n## The signet branch\n\nWe have already done this part and you should have built this branch already.\n\n(You can add https://github.com/kallewoof/bitcoin.git as a remote and then fetch it and simply checkout the signet branch)\n\n```\ngit remote add kallewoof https://github.com/kallewoof/bitcoin.git\ngit fetch kallewoof\ngit checkout signet\n```\n\n(Alternatively you can fetch the pull request directly from the bitcoin remote)\n\n```\ngit fetch upstream pull/16411/head:signet\ngit checkout signet\n```\n\n## The signet-vanilla-feature branch\n\n(We create this once and then base our signet-feature branch off of it. If we end up wanting to reset signet-feature we do so by recreating it based on this branch.)\n\nFrom the signet branch do\n\n`git checkout -b signet-vanilla-taproot`\n\n(And then tweak the chainparams.cpp file (we do that later)\n\nRight now we are on the signet branch. What we want to do is change the chain parameters a little bit. If we use signet right after this it is going to use the whole signet which does not have Taproot support. If we are going to create a custom Signet for own feature, or sipa\u2019s feature, we need to first tweak some chain parameters. We create this branch here `signet-vanilla-taproot`.\n\nQ - This is in the Bitcoin repo?\n\nA - Yes. btcdeb is already set up to work with this.\n\nIf you have done that you should now have a branch called `signet-vanilla-taproot`. We\u2019re not going to do anything with that now but we are going to change the chain parameters later.\n\n## The feature branch\n\n(We keep this identical to owner (here \u201csipa\u201d) and never diverge:\n\n```\ngit remote add sipa https://github.com/sipa/bitcoin.git\ngit fetch sipa\ngit checkout taproot\ngit pull\ngit reset --hard sipa/taproot\n```\n\nsipa is Pieter Wuille by the way.\n\nQ - \u2026\n\nA - Some other Signet was technically connected to us. You can exit if you want to or you can keep it running for now.\n\n`git checkout signet-vanilla-taproot`\n\nWe have already created this `signet-vanilla-taproot` branch, check it out. I don\u2019t think we are going to have time to do our own network so let\u2019s use one that I have already made. In the Telegram I posted this code snippet from chainparams.cpp. In whatever editor you want if you open this file (chainparams.cpp) and then you go down to find the class called `SigNetParams`. There is this if case here and inside here is the default Signet parameters. You want to delete all that and then put this instead. I have posted that in the Telegram so you don\u2019t have to type it manually.\n\n```\nLogPrintf(\"Using default taproot signet network\\n\");\nbin = ParseHex(\"512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae\");\ngenesis_nonce = 280965\nvSeeds.push_back(\"178.128.221.177\");\n```\n\nQ - On which branch is this?\n\nA - signet-vanilla.\n\nI will quickly go through what this is. The `bin` part is the challenge. You probably recognize it. It looks like a normal Bitcoin script. What it does it says a 1 and a 33 byte push and a pubkey and a 1 and a CHECKMULTISIG. It is a 1-of-1 MULTISIG. The second part is a genesis nonce, I will talk about that. The third party is a seed, the computer that is running this version of Signet.\n\n`git commit -am \u201cnew signet parameters\u201d`\n\nYou should commit to your signet-vanilla-taproot repository with your new parameters. Once you have that you can merge this with taproot. When we run it we should be able to use Taproot.\n\nQ - \u2026\n\nA - You don\u2019t need to compile right now. If you want to compile that is probably a good idea to make sure you don\u2019t have any errors.\n\nWe check out signet-taproot.\n\n`git checkout -b signet-taproot`\n\nAnd then we do the `git merge taproot`. If you have done `git checkout -b signet-taproot` already you may want to do `git merge signet-vanilla-taproot` first. When you\u2019ve done that you do `git merge taproot`.\n\n(We merge taproot on top of signet-taproot)\n\nWhen you do the `git merge taproot` you are going to have conflicts. You need both parts but remove the verify witness program in the first part.\n\nThe reason why I am having you painstakingly go through this is because this is exactly what you are going to have to do if you ever have a feature yourself that you want to merge. You are going to have these merge conflicts that show up. We are now at the part where our Signet is working. If you manage to compile this and run it it will crash. The reason why it crashes is because you have an old Signet running. You want to delete the Signet folder in your Data. Let\u2019s do that. Stop your running bitcoind.\n\n`rm -rf ~/.bitcoin/signet`\n\nFor Macs:\n\n`rm -rf ~/Library/Application\\ Support/bitcoin/signet`\n\nRemove that folder. You should be on the `signet-taproot` branch.\n\n`make`\n\nOnce you have finished make:\n\n`./bitcoind -signet`\n\nIf you remembered to delete the signet folder in your data it should now connect to a different Signet which has Taproot. This one started in January 2020. If you were back in 2019 you are using the previous Signet.\n\n`./autogen.sh`\n\n`./configure -C --disable-test --disable-bench --without-gui`\n\nIf you are running into compiler errors you may have to `./autogen.sh` and `./configure` again and then `make clean`.\n\n## btcdeb\n\nWhile we are waiting for some compiler stuff let\u2019s take the last few minutes to see if we can do something with this. We have the btcdeb folder.\n\n`cd btcdeb`\n\nThere is a `tap` man here that has a bunch of features.\n\n`./tap`\n\nThe homework is to use this man to create a Taproot address and send that to me. If you send that to me I will send you some coins. This is all experimental and new. If you do this and run into problems, have bugs whatever, that is invaluable for the Bitcoin community. I really encourage you to do this. You may even be able to make a contribution to the current [pull request](https://github.com/bitcoin/bitcoin/pull/17977), the work in progress Taproot pull request on the Bitcoin Core repository. If people play around with this stuff and break it then we can improve that pull request. But it is all very new and experimental. I can show you an example. I don\u2019t know if you have ever used btcdeb before. This version of btcdeb can handle BIP-Taproot spends.\n\n`./btcdeb --txin=$txin --tx=020000\u2026`\n\nWhat I am doing is saying \u201cThis is the input transaction here and then this is the transaction and tell me what happens.\u201d It says this is a SegWit transaction and gives the transaction data. Then here we come to the `Taproot commitment`. This has the `control` object. Have you heard about MAST? This is MAST implemented in Taproot. What Taproot does is uses MAST to prove that a particular script, this `script`, was actually added into the address at creation time. When you create the address you can insert any amounts of scripts you want but no one is going to see the scripts unless you use them to spend. In this case I am using this one to spend the transaction. The `control` object is saying that you use this data to derive the root of the Merkle tree. If you have a root of the Merkle tree and it matches then that script was committed. The \u2018control\u2019 object has a version byte and then it is followed by a pubkey. Pubkeys in Taproot are 32 bytes. If you are used to pubkeys in Bitcoin in general they are 33 bytes. They have 02 or 03 followed by a hex value. We remove the 02 or 03 and it is assuming they are a particular type. Then there is a `program`. There is `p` and `q`. `p` is the internal pubkey used to create this Taproot spend. Then there is some Merkle root stuff that goes on. What btcdeb does here is it steps through this commitment phase. There is this `final k` here and then there is a `TapTweak`. There is a `CheckPayToContract` here. This script only has one input so it doesn\u2019t have a Merkle tree at all. Once this finishes with the Taproot commitment check we see the script being run. It is OP_SHA256, OP_EQUALVERIFY and then there is a pubkey and a OP_CHECKSIG. This is just like normal.\n\n`btcdeb> step`\n\nThis is the result of the OP_CHECKSIG. You can see a few things here. It is a 32 byte pubkey so it is a `schnorr sig check`. This pubkey is different from the internal pubkey that we gave. This is part of the script, this is Alice\u2019s pubkey. The internal pubkey is everyone\u2019s pubkey that they share. We do the `VerifySchnorrSignature` and that works. There is a [document](https://github.com/bitcoin-core/btcdeb/blob/taproot/doc/tapscript-example-with-tap.md) where I go through an example which has two different scripts. [This](https://github.com/bitcoin-core/btcdeb/blob/taproot/doc/tapscript-example-with-tap.md) is the normal Bitcoin script. Instead of doing this OP_IF OP_ELSE OP_ENDIF thing we take this and the CHECKSIG as one script and we take this and the CHECKSIG as the other script. Whenever we spend it we don\u2019t have to show the world all this stuff. We just prove that this was a possibility and we satisfy it.\n\nQ - This is the Merkle tree part? You don\u2019t provide the whole script, you only provide the path that you are executing.\n\nA - Yes. This works exactly like the Merkle root inside transactions except there are some tweaks with version bytes and stuff.\n\nIf you look at it like this you are not saving a lot of space but you have to remember that these things are all big blobs, 32 byte values. If you look here you see this thing is kind of big. If you don\u2019t have to show one of these you are saving space and saving fees. It is a huge improvement. If everyone agrees you can spend it as if it was a regular pubkey. That is a huge saving privacy wise and fee wise. Nobody is going to be able to separate your custom stuff with a normal pubkey if everyone is in agreement. Think about a payment channel in Lightning, how often do you have the other person not agreeing to close a channel? Usually they are like \u201cOk\u201d. Normally you would just use the pubkey and be done with it. In this example I actually have the private key, normally you don\u2019t. The way you do this is you use MuSig or something to create the internal private key. That way nobody actually knows the private key but you can still spend it. I didn\u2019t get as far as I hoped but hopefully you got a start at least.\n\n\n",
    "body_type": "markdown",
    "created_at": "2020-02-07T00:00:00.000Z",
    "domain": "https://btctranscripts.com/",
    "url": "https://btctranscripts.com/advancing-bitcoin/2020/2020-02-07-kalle-alm-signet-workshop",
    "categories": [
        "workshop"
    ],
    "tags": [
        "taproot",
        "signet"
    ],
    "authors": [
        "Kalle Alm"
    ],
    "indexed_at": "2024-03-21T16:33:35.865Z",
    "transcript_by": "Michael Folkson",
    "summary": "In a comprehensive exploration of Bitcoin's latest upgrade, Taproot, Kalle Alm provides an insightful walkthrough aimed at developers eager to contribute to its evolution. The podcast begins with a focus on the practical aspects of feature integration within Bitcoin's development environment, particularly addressing the challenge of merge conflicts. Alm navigates through these technical hurdles, offering guidance on setting up a Signet testing environment. This step is crucial for developers to test new features such as Taproot in a safe and controlled setting without endangering the main network. He emphasizes the importance of starting from a clean slate by removing any pre-existing Signet data, thus ensuring smooth deployment across both Mac and Linux systems.\n\nDiving deeper into the technical setup, Alm outlines the necessary compilation processes to run a Bitcoin node specifically configured for Taproot on Signet. Execution commands like `make` and `./bitcoind -signet` are highlighted as essential steps to connect to a Taproot-enabled Signet. Alm encourages active participation in this experimental phase, stressing that engaging in testing and debugging can significantly enhance one's understanding and contribute to the overall development effort. This segment sheds light on the Taproot pull request on the Bitcoin Core repository, inviting listeners to be part of this innovative journey.\n\nA significant portion of the discussion is devoted to `btcdeb`, a tool developed for debugging Bitcoin scripts. Alm offers a detailed guide on using `btcdeb` to handle Taproot transactions, focusing on creating a Taproot address and the intricacies involved in transaction verification. He explains the concept of `Taproot commitment`, utilizing MAST (Merkelized Abstract Syntax Tree) to improve privacy and script execution efficiency. Taproot's ability to include multiple scripts in a single address without exposing them simultaneously during transactions marks a leap forward in achieving more compact and private transactions.\n\nFurthermore, Alm elaborates on Taproot's spending conditions, where only the executed script's path is revealed, thereby maintaining the privacy of unexecuted scripts. Through examples, he underscores the potential space and fee savings, highlighting Taproot's role in enhancing Bitcoin's privacy, scalability, and overall efficiency. This discussion points to the broader implications of Taproot for the Bitcoin network, suggesting avenues for future enhancements.\n\nConcluding the podcast, Kalle Alm emphasizes the collaborative essence of Bitcoin's development process. He urges the community to experiment with Taproot and actively participate in refining its features. By engaging with experimental functionalities and reporting issues, community members have the opportunity to influence Bitcoin's technological progression directly. Although Alm acknowledges the limitations in covering the vast topic fully, he remains optimistic that the shared insights will serve as a valuable resource for those keen on delving deeper into Bitcoin's latest technological advancements."
}