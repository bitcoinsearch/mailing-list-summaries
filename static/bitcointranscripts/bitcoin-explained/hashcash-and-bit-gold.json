{
    "id": "bitcointranscripts+bitcoin-explained+hashcash-and-bit-gold",
    "title": "Hashcash and Bit Gold",
    "body_formatted": "{\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:00:18\"}, {\"type\":\"paragraph\",\"text\":\"Live from Utrecht, this is Bitcoin Explained.\\nHey Sjors.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:00:21\"}, {\"type\":\"paragraph\",\"text\":\"Yo, yo.\"}, {\"type\":\"paragraph\",\"text\":\"[removed sponsor segment]\"}, {\"type\":\"heading\",\"text\":\"Aaron's book - \\\"The Genesis Book\\\"\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:01:07\"}, {\"type\":\"paragraph\",\"text\":\"So, Aaron, you wrote a book.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:01:08\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nOh, yes, I did.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:01:09\"}, {\"type\":\"paragraph\",\"text\":\"Cool.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:01:09\"}, {\"type\":\"paragraph\",\"text\":\"At the time of recording, it's almost published.\\nWe're publishing it tomorrow, January 3rd, but that's like midnight actually, UTC.\\nSo in a couple of hours, Sjors, my book will be live.\\nYeah, so that's kind of cool.\\nIt is called \\\"The Genesis Book\\\", Sjors, and it tells the prehistory of Bitcoin, the origin story of Bitcoin.\\nIt's the story of the people and projects that inspired Bitcoin.\\nSo, Sjors, to celebrate that, we're going to discuss some of the topics from my book.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:01:45\"}, {\"type\":\"paragraph\",\"text\":\"That's right.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:01:46\"}, {\"type\":\"paragraph\",\"text\":\"So it's kind of for the first time, I think, not really an episode about Bitcoin.\\nHave we done something about it?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:01:54\"}, {\"type\":\"paragraph\",\"text\":\"We've done an episode about Digicash.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:01:57\"}, {\"type\":\"paragraph\",\"text\":\"Well, no, hang on, we also did the episode about Tornado Cash.\\nThat was actually not about Bitcoin.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:02:03\"}, {\"type\":\"paragraph\",\"text\":\"Exactly.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:02:03\"}, {\"type\":\"paragraph\",\"text\":\"Anyways.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:02:05\"}, {\"type\":\"paragraph\",\"text\":\"And we'll still cover things that are very relevant to Bitcoin.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:02:08\"}, {\"type\":\"paragraph\",\"text\":\"Right, well, my entire book is very relevant to Bitcoin.\\nEverything in my book is relevant to Bitcoin, Sjors, so of course, also what we're going to discuss.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:02:15\"}, {\"type\":\"paragraph\",\"text\":\"Excellent.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:02:17\"}, {\"type\":\"paragraph\",\"text\":\"Did I mention it's called \\\"The Genesis Book\\\", and you can find it on the Bitcoin Magazine store and Amazon and I don't know where else.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:02:23\"}, {\"type\":\"paragraph\",\"text\":\"Sounds good.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:02:24\"}, {\"type\":\"paragraph\",\"text\":\"I think [thegenesisbook.com](https://thegenesisbook.com) should be live by the time you listen to this, hopefully.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:02:32\"}, {\"type\":\"paragraph\",\"text\":\"All right.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:02:32\"}, {\"type\":\"paragraph\",\"text\":\"You want to know anything more about where you can find my book, Sjors?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:02:35\"}, {\"type\":\"paragraph\",\"text\":\"No, but we will put it in the show notes.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:02:37\"}, {\"type\":\"paragraph\",\"text\":\"Okay, we'll go to the episode then.\\nI discuss in my book, there are five main digital cash projects that are precursors to Bitcoin in a way.\\nThere are more, and there's a lot more in the book, Sjors.\\nThere's all kinds of background and stories, and colors, and storylines and adventures, and ... okay, I'll stop now.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:03:05\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, from what I've been reading, you cover Austrian economic stories, and sort of alternate the digital money story versus the political story.\"}, {\"type\":\"heading\",\"text\":\"Introduction\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:03:16\"}, {\"type\":\"paragraph\",\"text\":\"Anyway, enough with the shilling, let's get to the actual episode.\\nSo there's five electronic cash projects in the book that have a bigger focus than some of the more minor ones.\\nSo the first one of that is e-cash, which was produced by Digicash.\\nWe're not going to talk about that because we already did in episode 52, which was about Fedimint, right?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:03:43\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, in episode 52, Fedimint, we start all the way back with how David Chaum's e-cash works, how blinded signatures work, definitely recommended listening.\\nThen we go all the way to how that's now applied to Fedimint and Cashu.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:04:00\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, so we're going to skip that one, we're not going to talk about that again.\\nInstead this episode will be about Hashcash and BitGold.\\nI don't know how we're going to do this format, usually I'm the one who asks questions.\\nWe'll figure it out, I think.\\nI have no idea how to do this now.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:04:22\"}, {\"type\":\"paragraph\",\"text\":\"Well, you should tell a little bit of the story, and then we'll get to some of the technical juicy bits where I might have some opinions too.\"}, {\"type\":\"heading\",\"text\":\"Hashcash\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:04:31\"}, {\"type\":\"paragraph\",\"text\":\"Okay, cool, yeah.\\nThe first one is [Hashcash](http://www.Hashcash.org/papers/Hashcash.pdf).\\nThe background here is, in the nineties the internet was becoming more popular, and also there was the cypherpunks mailing list.\\nThey had their own mailing list where they were discussing privacy technologies, but also more ideological types of posts, or how to create digital cash and all these kinds of discussions.\\nA bunch of the cypherpunks were also running remailers, this was sort of the precursor of Tor.\\nThere was a way to send an email anonymously, send an email without the recipients knowing where the email came from.\\nThe problem was that spam was becoming popular around this time as well, the cypherpunk mailing list itself was being spammed, anyone else who had an email address was being spammed, and especially also these remailers were starting to be spammed to the extent that it was becoming burdensome to run one.\\nSo it was potentially an attack on these remailers.\\nEither it was a spam attack that remailers were being abused for, or maybe it was just an attack on the remailers themselves, as a denial of service type of situation.\\nSo cypherpunks specifically wanted to create digital cash.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:05:54\"}, {\"type\":\"paragraph\",\"text\":\"One step back, I think they also wanted to fix the spam problem, right?\\nWith digital cash maybe in the back of their mind.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:06:02\"}, {\"type\":\"paragraph\",\"text\":\"Sorry, I said digital cash, I meant digital postage, and that's what you're getting.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:06:06\"}, {\"type\":\"paragraph\",\"text\":\"Yes, digital postage stamps.\\nBut it might be interesting, something you also mentioned in the book is that there was a worry that if the cypherpunks didn't fix this problem, then governments would step in and they would start dealing with spam.\\nThis would be a problem because if governments have to fight spam, then the way they would probably do that is by de-anonymizing everyone and basically KYC-ing email to the extent of where if there's a spammer, they know who they are.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:06:36\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, plus the government would then have to make a judgment call about what is spam and (that's) kind of relevant to Bitcoin these days, with the whole Ordinals thing.\\nBut yeah, then governments have to make a judgment call about what is spam, so what actually is legal?\\nThen by the time they can find a spammer, yeah, that would have to be some sort of identification.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:06:54\"}, {\"type\":\"paragraph\",\"text\":\"And they would have to ban anonymous email, which is the kind of thing they were trying to do.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:07:00\"}, {\"type\":\"paragraph\",\"text\":\"Right, so the cypherpunks didn't like this, and specifically Adam Back didn't like this.\\nAdam Back was of course one of these cypherpunks, I don't think he needs an introduction to anyone who listens to this podcast.\\nSo Adam Back wanted to come up with digital postage.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:07:19\"}, {\"type\":\"paragraph\",\"text\":\"First I think we should go back in time, right?\\nBecause everybody talks about Hashcash and how Adam Back invented that, and he did, but it was not the first time it was invented, as so often happens in history.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:07:30\"}, {\"type\":\"paragraph\",\"text\":\"I was also considering if I should talk about the other ways they were thinking about digital postage, but I think we should skip that, right?\\nThat's what you can find in the book.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:07:40\"}, {\"type\":\"paragraph\",\"text\":\"Exactly.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:07:41\"}, {\"type\":\"paragraph\",\"text\":\"So shall I hand it to you here?\\nActually Adam Back was not the first person to invent digital postage.\\nHe did think he was, he was not aware of the previous proposal, but there was actually another proposal that's a bit older and quite similar to Adam Back's proposal, which was... the names from the top of my head?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:08:06\"}, {\"type\":\"paragraph\",\"text\":\"[Dwork and Naor](https://www.wisdom.weizmann.ac.il/~naor/PAPERS/pvp.pdf).\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:08:07\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, I was thinking of their first names, but yeah, their last names were definitely Dwork and Naor, Moni Naor and Cynthia Dwork, I think.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:08:14\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, and they did not come from a cypherpunk background.\\nThey came from it with a just, hey, we are people using email and we don't like spam background.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:08:27\"}, {\"type\":\"paragraph\",\"text\":\"They were from IBM, right, they were computer pros.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:08:31\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, they weren't random people, but they were not saying - how can we prevent the government coming into this email world?\\nIt's just, how do we get rid of spam?\\nEssentially they came up with the idea of introducing Proof-of-Work for email, and they came up with three different work algorithms.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:08:51\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, and to be clear, the term Proof-of-Work didn't exist yet at this time.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:08:55\"}, {\"type\":\"paragraph\",\"text\":\"I don't know exactly what they called it, but something along the lines of like a challenge or...\\nBut basically, they picked three algorithms, and I think one of them boiled down to finding - if you take a number and you wanna figure out which two primes can be multiplied to get to the number.\\nSo let's say you pick the number 100 and you say \\\"tell me which two prime numbers multiply to 100\\\", and you would say \\\"I don't know, because it's 10 times 10\\\", so those are not prime.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:09:28\"}, {\"type\":\"paragraph\",\"text\":\"Kind of a bad example.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:09:30\"}, {\"type\":\"paragraph\",\"text\":\"No it's a fine example but it shows that as soon as you give me the right answer, I can very quickly verify that, yes, these two numbers multiply to this total.\\nActually, I think you didn't have to find prime numbers, it's just modulo prime number.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:09:43\"}, {\"type\":\"paragraph\",\"text\":\"I think the way it works is you have two very big prime numbers, these are factored (multiplied) into another big number, and then the big number can only be produced by two specific prime numbers then, right?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:09:56\"}, {\"type\":\"paragraph\",\"text\":\"I think that's RSA, but not what this...\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:10:01\"}, {\"type\":\"paragraph\",\"text\":\"Oh, this works a bit different?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:10:02\"}, {\"type\":\"paragraph\",\"text\":\"I think this was much simpler, this was something called modulo a prime number.\\nSo if you take a much smaller number we know the number 13 is prime, right?\\nSo you would say okay here's the number 10, find me two numbers that you can multiply to get the number 10, but you can multiply and then you do modulo 13.\\nSo you can say - this is not very good in math - but if you do 3 times 4 that's 12, so that's not enough.\\nIf you do three times five, that's 15.\\n(15) Modulo 13 is two, right?\\nYou keep looking for this number that if you go around in circles around this prime number, it gets you the correct result.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:10:45\"}, {\"type\":\"paragraph\",\"text\":\"Okay, we're getting very into the weeds now, let's get back to the main road.\\nSo they had three ideas.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:10:50\"}, {\"type\":\"paragraph\",\"text\":\"Exactly.\\nSo this is one of them and the key part is that it takes a while to find these numbers, but it's very quick to check.\\nYou just multiply modulo and you're done.\\nThey had two other algorithms that I don't want to go into also because I don't know them, but they had an interesting property from them is that you could build an exception into it.\\nSo basically saying, well, if you're the mailing list operator, then you can use this special key and you can bypass the work.\\nI don't know whether that would be practical or not, but that's sort of what they came up with.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:11:23\"}, {\"type\":\"paragraph\",\"text\":\"Right, the backdoor function.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:11:25\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:11:27\"}, {\"type\":\"paragraph\",\"text\":\"The points being here though, so what Naor and Dwork, the idea they come up with is that whatever calculation you have to make, you have to make it in combination with some data from the email itself.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:11:41\"}, {\"type\":\"paragraph\",\"text\":\"Yes, because you can prove that you did a bunch of work, but if that's unrelated to your email, you would just reuse the same work.\\nSo you have to make sure that the work is always a function of the email itself.\\nIronically, they discovered the use of hash functions for that, or they knew that you needed hash functions for that part.\\nSo you take the hash of the email, and then you use the hash as the starting point of your challenge.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:12:05\"}, {\"type\":\"paragraph\",\"text\":\"Oh, they did use the hash for that part?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:12:07\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:12:08\"}, {\"type\":\"paragraph\",\"text\":\"Oh, I didn't know that, that's interesting.\\nWe should spell this out for those who haven't realized this.\\nNaor and Dwork were not using hashes for the Proof-of-Work.\\nThey were using, what's it called?\\nIs there a better term for what they were (using)?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:12:25\"}, {\"type\":\"paragraph\",\"text\":\"They were just using math problems.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:12:26\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, right.\\nNow the idea was still very similar to...\\nMost people that listen sort of know where Proof-of-Work came from, that's why we're sort of skipping some parts, but we should actually spell it out.\\nSo the idea was if you attach a little bit of Proof-of-Work to an email, then (for) most people that want to send an email, that's not really a problem, that's like a couple of seconds of computing time.\\nHowever, if you're a spammer that wants to send tens of thousands, or maybe even millions of emails, which you usually have to do to be a profitable spammer, then it becomes so expensive that it's not worth it anymore.\\nSo that's how it's postage.\\nIt's different (from) postage in the sense that you're not buying it from anyone.\\nAlso whoever you're sending the email to is not getting the money or anything like that.\\nYou're proving that you spent some resources, some energy, and that way it's too expensive for a spammer to be a spammer.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:13:23\"}, {\"type\":\"paragraph\",\"text\":\"Yes, exactly.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:13:25\"}, {\"type\":\"paragraph\",\"text\":\"That's what Naor and Dwork essentially came up with.\\nThis was in 1992, but then independently, basically, it was sort of a parallel invention - not exactly parallel, (there was) some time difference, but Adam Back was not aware of this solution, so when they were discussing this problem on the cypherpunks list, they didn't know it was kind of a solved problem, but then he reinvented something very similar.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:13:54\"}, {\"type\":\"paragraph\",\"text\":\"Yes, but then using a hash function, SHA-1 in this case, but that doesn't really matter.\\nThe thing is it's not actually better or worse than the design that was made before.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:14:08\"}, {\"type\":\"paragraph\",\"text\":\"Okay, (can) you explain how it works?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:14:10\"}, {\"type\":\"paragraph\",\"text\":\"So you take some aspects of the email, as we said before, and then you add a nonce to it.\\nA nonce is a number that you pick randomly, doesn't matter what it is, but you have to pick it such that the resulting hash starts with a certain number of zeros.\\nNotice that in Bitcoin Core, the hash does not only start with a certain numbers of zeros, but has a specific value that it has to stay under, but it's roughly the same idea.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:14:37\"}, {\"type\":\"paragraph\",\"text\":\"Right, so you would send the email, you include this hash.\\nThen the recipient would check if there's actually a valid hash in it, if not, the email would just bounce.\\nI guess that was the same with Naor and Dwork's system.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:14:54\"}, {\"type\":\"paragraph\",\"text\":\"Yep, same idea.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:14:56\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, I didn't spell that out, but same idea, basically.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:14:57\"}, {\"type\":\"paragraph\",\"text\":\"Yep, they both have the concept of difficulty, where you can make the hash more or less difficult, depending on what your perceived spam problem is.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:15:04\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, the recipient or the remailers, which I mentioned earlier, will check - does this have a failed hash?\\nIf not, just reject it, and if so, it's forwarded to whoever it needs to be forwarded to.\\nSo that's basically the idea of Hashcash, right?\\nDid we forget about anything?\\nI can tell you that in the early days, there was some adoption of it.\\nSo Apache used, is that how I pronounce it actually?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:15:43\"}, {\"type\":\"paragraph\",\"text\":\"I think Apache, yeah, SpamAssassin.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:15:45\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, they used it in SpamAssassin and Microsoft recreated something very similar.\\nIt was incompatible with different standards, but basically the same idea again.\\nAnd then more recently...\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:15:59\"}, {\"type\":\"paragraph\",\"text\":\"Those two are completely unused right now because SpamAssassin removed it again, and the Microsoft thing doesn't exist anymore.\\nMore recently, as you're getting to, Tor has been using Proof-of-Work.\\nAgain, it's a completely different algorithm, but it is an example of Proof-of-Work being used outside of a cryptocurrency, where it's not used to produce value, it's simply used to prevent spam.\\nSo this concept is still alive and well.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:16:27\"}, {\"type\":\"paragraph\",\"text\":\"Right.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:16:27\"}, {\"type\":\"paragraph\",\"text\":\"Now, one interesting aspect I wanted to talk about...\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:16:33\"}, {\"type\":\"paragraph\",\"text\":\"This is why we're talking about it in a Bitcoin podcast.\\nWhy we're focusing on Hashcash more than the Naor-Dwork concept, right?\\nIs that where you're getting at?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:16:42\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, there's an interesting kind of a historical coincidence, I would almost say.\\nThis is something you pointed out earlier that I think Adam Back was aware of and he pointed it out, which is to say that there are multiple kinds of Proof-of-Work, but in particular, two different kinds are stochastic and non-stochastic Proof-of-Work.\\nThat's a distinction I hadn't really thought about.\\nThe idea here is that with a hash function you may or may not get the right result, and statistically it will take a certain amount of time before you find a solution, but it's random.\\nSometimes you find the right solution instantly, other times it takes a very long time.\\nWhereas with these earlier algorithms, there's a guaranteed time of how long it takes to find the square root, for example, of two numbers.\\nSo I suppose you could maybe make it random, but assuming you use a standard algorithm, it'll take a fixed amount of time to find a solution.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:17:45\"}, {\"type\":\"paragraph\",\"text\":\"Let me give an analogy that I've used, not in the book but in an article I wrote earlier.\\nLet's say there's a 100 lottery tickets, and one person buys 40 tickets and another buys 60.\\nNow the person that has 60 has more chance to win - 60%, but the person that bought 40 still has 40% (chance) to win as well.\\nWhile if you take two cyclists and one of them can ride his bike (at) 60 miles an hour and the other (at) 40 miles (an hour), then any time they do a race, the one that can cycle 60 miles an hour will just win, every time.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:18:25\"}, {\"type\":\"paragraph\",\"text\":\"Exactly.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:18:26:\"}, {\"type\":\"paragraph\",\"text\":\"Every time the same cyclist will win.\\nThere's no 40% chance that a 40 mile(s) per hour cyclist will ever win.\\nIt's just not going to happen.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:18:35\"}, {\"type\":\"paragraph\",\"text\":\"So if you translate that to the context of Bitcoin mining as it is today, let's say we had picked a non-stochastic form of Proof-of-Work, based on that original paper.\\nSo if Adam Back had known about the original paper and had not bothered to implement something based on a hash function, because there's already a solution out there, then you would have the biggest miner, whoever that is, will just always find the next block first, because they would always find that big prime number or whatever the challenge is.\\nThey would always find it first.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:19:04\"}, {\"type\":\"paragraph\",\"text\":\"Right.\\nIt will be like that 60 mile cyclist rather than...\\nCurrently Bitcoin mining kind of works like this lottery, but if the biggest miner just always wins, then you can't have Bitcoin like we have it today.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:19:16\"}, {\"type\":\"paragraph\",\"text\":\"Of course, we still have some centralization problems in that sense, but this would be centralization on steroids if we did not have hash-based Proof-of-Work.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:19:23\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, basically Bitcoin wouldn't work, like not as it's designed today.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:19:27\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, or maybe we would have figured it out and then changed it, but definitely it would have been not optimal.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:19:32\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, so what you alluded to, we may have been quite lucky in that sense, that Adam Back wasn't aware of the prior proposal.\\nHe invented this in a way that's actually useful for Bitcoin.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:19:45\"}, {\"type\":\"paragraph\",\"text\":\"Exactly, but it's not something he was aware of at the time, or at least he didn't put it in the paper.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:19:51\"}, {\"type\":\"paragraph\",\"text\":\"As far as I know, and I've discussed it with him, so either my memory is failing me or I'm pretty sure he only realized that after Bitcoin himself.\\nHe only figured that out, so that actually Hashcash specifically only works for Bitcoin.\\nThat was not some sort of pre-planned thing for Mr. Back.\"}, {\"type\":\"heading\",\"text\":\"Nick Szabo on secure benchmark functions\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:20:09\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, now before we get to the next topic, which is BitGold, we should talk about something that the author of BitGold observed about Proof-of-Work.\\nThat's kind of the bridge I wanted to make.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:20:23\"}, {\"type\":\"paragraph\",\"text\":\"Yeah that is also the bridge I make in my book, Sjors.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:20:26\"}, {\"type\":\"paragraph\",\"text\":\"Excellent.\\nIt's almost like I read it.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:20:29\"}, {\"type\":\"paragraph\",\"text\":\"At least if we're thinking about the same thing.\\nSo Hashcash or Proof-of-Work, for the first time introduced something, created something akin to digital scarcity, because there is an actual physical cost - energy in the real world required to produce it.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:20:55\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:20:56\"}, {\"type\":\"paragraph\",\"text\":\"So rather than just copying numbers, you have to actually invest something, real resources, and that sort of creates something that you could see as digital scarcity, right?\\nThat's what you're getting at.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:21:05\"}, {\"type\":\"paragraph\",\"text\":\"That's not where we're getting it, though it is true.\\nWhat I'm getting at is, the question is, how do you define Proof-of-Work, or how do you measure it?\\nHow is it different from other cryptography?\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:21:18\"}, {\"type\":\"paragraph\",\"text\":\"This is not a bridge I make in my book, Sjors.\\nUnless I'm completely confused where you're going.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:21:23\"}, {\"type\":\"paragraph\",\"text\":\"It is a new bridge, but basically Nick Szabo wrote an article about something he calls... now I lost the term, that's not smart.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:21:33\"}, {\"type\":\"paragraph\",\"text\":\"You mean secure benchmark functions?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:21:35\"}, {\"type\":\"paragraph\",\"text\":\"Yes, secure benchmark functions.\\nSo here's the thing, we know that with normal public key cryptography for example, and with hash functions like SHA-256, we know that it's easy to verify.\\n_Easy_ is defined as (it) takes a very short time on a typical computer, and impossible, or it would take forever, effectively, to hack it, to coincidentally go back from the hash to the original, from the public key to the private key which is then called _hard_.\\nBut with Proof-of-Work you're doing something that's a little bit in between.\\nIt is definitely not easy to go back to find a certain number of zeros for example, in the Proof-of-Work in the hash, but it's also not hard - in the sense that it will not take forever.\\nIn fact, you don't want it to take forever because then you cannot make the Proof-of-Work on your email if it would take forever to make the Proof-of-Work.\\nThen the question is, how do you define that?\\nHow hard is hard enough?\\n(It) should not be too easy, (it) should not be too hard.\\nNick Szabo wrote this article about it, coining of term \\\"secure benchmark function\\\".\\nNow if you look at the 1992 paper about Proof-of-Work, they were also informally defining it as something that's not too easy, not too hard, somewhere in between.\\nSo, Szabo put it in slightly more mathy terms.\\nThe analogy we could get into is the one-way function, or what it's comparing it with.\\nSo we talked about one-way functions in an earlier episode, where you actually were correct and I was wrong.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:23:15\"}, {\"type\":\"paragraph\",\"text\":\"So I remember that.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:23:18\"}, {\"type\":\"paragraph\",\"text\":\"Good, so keep enjoying that feeling.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:23:20\"}, {\"type\":\"paragraph\",\"text\":\"Yes.\\nI think everyone heard that, right?\\nCan you repeat it one more time?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:23:25\"}, {\"type\":\"paragraph\",\"text\":\"Let's just try and explain it correctly, because I don't even remember exactly what I was saying.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:23:30\"}, {\"type\":\"paragraph\",\"text\":\"Go on.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:23:31\"}, {\"type\":\"paragraph\",\"text\":\"A one-way function is a function that is very easy to go in one way, like checking that a hash is correct, but very hard to go the other way, like trying to produce a fake original (pre-image) of a hash.\\nThere are a bunch of one-way functions out there.\\nOne is finding the factors in a big number, or these prime factors as you mentioned with RSA.\\nAnother is the discrete logarithm problem, or that's sort of a more generic one, but that is used for public and private key cryptography, like the elliptic curve.\\nThen there's cryptographic hash functions like SHA-256, which so far has not been broken.\\nThe problem is there is no mathematical proof that this actually exists.\\nWe think these functions are one-way, and they better be one-way, but it may turn out that some mathematician somewhere proves that they're not, and then you get into the whole `P = NP` stuff that we're not going to get into.\\nNow, there is a special kind of one-way function called the [trapdoor one-way function](https://en.wikipedia.org/wiki/Trapdoor_function).\\nThat is public key - private key cryptography, where it is very hard to go back, it is very hard to go from a public key to a private key, in fact (it would) take the age of the universe, unless you know the private key.\\nThen it's trivial.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:25:03\"}, {\"type\":\"paragraph\",\"text\":\"Yes.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:25:04\"}, {\"type\":\"paragraph\",\"text\":\"I think I said it wrong.\\nIt's very hard to fake a signature, for example, but if you know the private key, then it's trivial to make the signature, and that is the trapdoor, the secret passageway through which you can do things.\\nThat was the distinction we wanted to make back then.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:25:18\"}, {\"type\":\"paragraph\",\"text\":\"There actually is, Sjors, a chapter about this in my book as well.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:25:21\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, so then the secure benchmark function has to be less strenuous.\\nIt can't be a one-way function because then you'll never go back.\\nSo if you go to the [Wikipedia article](https://en.wikipedia.org/wiki/One-way_function) about one-way functions, it defines this little thing like, okay, for any blah, blah, blah function that you try a hundred thousand times or whatever, statistically you should almost never find the correct answer.\\nThat's sort of how they defined it.\\nThen Szabo basically writes a similar formula, but then explaining what this secure benchmark function should look like.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:25:57\"}, {\"type\":\"paragraph\",\"text\":\"Sjors, are we still just making a bridge?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:26:02\"}, {\"type\":\"paragraph\",\"text\":\"Yes, we are.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:26:03\"}, {\"type\":\"paragraph\",\"text\":\"This is a big bridge you're building here.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:26:04\"}, {\"type\":\"paragraph\",\"text\":\"I'm almost done with the bridge.\\nOne thing that is interesting there is that when it comes to these one-way functions, it doesn't matter what hardware you have.\\nYou can have the whole universe and you still cannot crack it.\\nYou can have a Dyson sphere and you can't crack it.\\nBut in the secure benchmark function, the device that you use, the machine that you do things on, actually matters in the math.\\nYou cannot just abstract away the machine, you have to say, okay, what is a realistic computer?\\nThen you get back to the spam problem.\\nIf a spammer has an ASIC, a modern-day ASIC, and let's say the algorithm was SHA-256 instead of SHA-1, then you as a consumer trying to send an email would have to burn your phone to the ground in order to just send an email, but that guy with the ASIC can just spam a million people because per watt of electricity that you're putting into that ASIC you can just produce enormous amounts of spam, whereas your phone is less efficient so it would just get too hot.\\nThat's why it's very hard to find functions that are easy enough for a phone, hard enough for an ASIC, and he anticipated that problem in that very short paper.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:27:12\"}, {\"type\":\"paragraph\",\"text\":\"That was Sjors building the Brooklyn Bridge over here, beautiful in its own right.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:27:17\"}, {\"type\":\"paragraph\",\"text\":\"Exactly.\\nThat's why he needed, for his BitGold proposal, because he didn't actually build the project, he says make sure it's one of those secure benchmark functions.\"}, {\"type\":\"heading\",\"text\":\"BitGold\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:27:31\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, in my book, I sort of muffle this away in a footnote, and I just call it hashes because it's what we were talking about anyways.\\nOkay Sjors, let's talk about BitGold.\\nI don't know if there's much specifically to introduce.\\nI can tell the whole story about how the cypherpunks want to create digital cash and Nick Szabo was one of them, but let's...\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:28:04\"}, {\"type\":\"paragraph\",\"text\":\"I think it might be interesting to mention... I think it was like seven points that he describes that this system should do?\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:28:12\"}, {\"type\":\"paragraph\",\"text\":\"Well, that was Adam Back.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:28:15\"}, {\"type\":\"paragraph\",\"text\":\"Oh, I thought the BitGold paper also lists like seven properties of the system.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:28:20\"}, {\"type\":\"paragraph\",\"text\":\"In the BitGold paper? It's been a while since I read it.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:28:22\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, maybe you just describe it in general terms.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:28:27\"}, {\"type\":\"paragraph\",\"text\":\"BitGold itself?\\nOkay, so we're getting more to the technical side then.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:28:32\"}, {\"type\":\"paragraph\",\"text\":\"Yes, what the architecture of the system is and how it should work.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:28:35\"}, {\"type\":\"paragraph\",\"text\":\"Okay, yeah, I can do that.\\nNick Szabo wanted to create digital cash, right?\\nHashcash was introduced, so now there was something akin to digital scarcity.\\nIt wasn't real digital scarcity, obviously, or at least not limited because over time it becomes easier and easier to create valid hashes.\\nThere were a number of problems with Hashcash, why you couldn't use it as money, also, of course, you can't pay someone with Hashcash.\\nIt's like a one-time use.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:29:03\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, so what you're describing is the inflation problem, right?\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:29:06\"}, {\"type\":\"paragraph\",\"text\":\"Well, that's the one problem, and also you can't transfer it to anyone.\\nYou can't re-spend Hashcash.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:29:13\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:29:14\"}, {\"type\":\"paragraph\",\"text\":\"So it wasn't really digital money yet, it was digital postage, essentially.\\nBut it did introduce something akin to the digital scarcity, and this idea inspired, for example, Nick Szabo to propose their own digital currency schemes.\\nNow, BitGold was never implemented, it was only ever a proposal, but it's still interesting.\\nThe way it works is you start with a candidate string.\\nThe candidate string can be anything, it doesn't really matter, but let's just say a random string of numbers.\\nThen with a Proof-of-Work or a secure benchmark function, as you just explained, that's how Nick Szabo called it in his paper, I believe.\\nAt least in one of his posts, he very specifically called it that.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:30:03\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, I think in the post I read, he just used all of the terms, but then made this benchmark a more specific definition.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:30:11\"}, {\"type\":\"paragraph\",\"text\":\"Right, exactly.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:30:12\"}, {\"type\":\"paragraph\",\"text\":\"But we can just call it Proof-of-Work because that's what it is.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:30:14\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, let's call it Proof-of-Work.\\nSo there's a candidate string, anyone can use Proof-of-Work to create a new valid hash, essentially.\\nNow the person who creates this valid hash becomes the owner of this hash.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:30:32\"}, {\"type\":\"paragraph\",\"text\":\"So whoever creates it first.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:30:33\"}, {\"type\":\"paragraph\",\"text\":\"Whoever creates this first, yeah.\\nI don't think it was specifically defined or specified how this initial ownership would work, but the obvious solution is you hash your public key with it, that would just be an easy way to do it, right?\\nAnyway, so whoever creates a valid hash using Proof-of-Work on the candidate string gets to own that string, and then the valid hash becomes the new candidate string.\\nSo now everyone can start hashing that to find the next candidate string to find the next valid hash, which then becomes the next candidate string.\\nOkay, so that's how you own these strings, essentially.\\nTransferring strings is much like Bitcoin, you sign a message saying, this string now belongs to this public key.\\nIf that message is cryptographically signed with the corresponding private key of whoever was owning it, whatever public key was owning it, then the transfer is valid.\\nThe challenge was - who gets to keep track of who owns what, or perhaps more specifically, how do you prevent double spending?\\nOne person could sign several transactions (to) go to several people.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:31:50\"}, {\"type\":\"paragraph\",\"text\":\"And how can you prevent, afterwards multiple people saying that they found it first, right, if the new thing was discovered?\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:31:58\"}, {\"type\":\"paragraph\",\"text\":\"Yes, right, that too.\\nSo there needs to be, consensus on who owns what.\\nAlso other problems are for example, censorship.\\nAnyways, so double spending, let's just say is the main problem.\\nNick Szabo envisaged like a ownership registry.\\nSo there would be a bunch of internet servers, and they would essentially vote on whether or not a transaction is valid or which transaction out of conflicting transactions is valid.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:32:31\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nThe key part there is it's at least not a central party that's doing it, but it's somehow decentralized, multiple people are tracking it, everybody can sort of check that it's at least, you know, maybe a bit honest.\\nI mean, there's certain things you can check because signatures are signatures, you can't forge them.\\nBut if all these public parties keeping records disagree, it's hard to decide which is right.\\nYou can't just count them, for example.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:32:56\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, well, the first thing you mentioned is interesting about the signatures.\\nSo the problem is essentially that this registry, these servers, they can be corrupted in different ways.\\nFor example, it wasn't Sybil resistant, or at least Nick Szabo hadn't come up with a robust way to make it Sybil resistant.\\nIn other words, one guy could join with 10,000 different servers and just outvote everyone else and double spend everyone, there was no robust way of stopping that.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:33:31\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, it's basically all the Proof-of-Stake problems.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:33:35\"}, {\"type\":\"paragraph\",\"text\":\"It's similar.\\nIt didn't use Proof-of-Stake itself, but yeah, there was nothing at stake in that sense, that's for sure.\\nNick Szabo at that time thought a potential mitigation against this is that users themselves can sort of keep an eye of what's going on.\\nThen let's say the Sybil attack happens, then the honest servers, the honest nodes in this registry system, they can split off.\\nThey can say, no, that's someone's trying to cheat, we're just going to start our own registry.\\nThen users who are paying attention can see, yep, this registry is honest and this registry is not.\\nThat was supposed to solve that problem, but it doesn't really.\\nFor example, if you're offline, and you come online, and you weren't paying attention, you're a new user or something like that, you were just offline, you were on holiday, who knows?\\nAll of a sudden there's two registries, there's no way to know which one was cheating and which one was not.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:34:44\"}, {\"type\":\"paragraph\",\"text\":\"Exactly.\\nIt sounds like you need to be online all the time and you need to download all the transactions.\\nIt's like running your own Bitcoin node, although there wasn't an actual blockchain at the time, well, there may have been, sort of.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:35:01\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, wait.\\nThe way you're phrasing it now sounds like it would have been a solved problem.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:35:06\"}, {\"type\":\"paragraph\",\"text\":\"No, you would.\\nIf you were to implement this system, then it sounds like everybody should just be verifying everything so that there is no third party.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:35:14\"}, {\"type\":\"paragraph\",\"text\":\"Well, so that's what we're getting later.\\nBut BitGold did not have this idea yet in any case.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:35:20\"}, {\"type\":\"paragraph\",\"text\":\"No, no, the idea would be that there would be multiple servers doing this job, but in order to check the servers, the only logical conclusion to me would be that everybody has to check everything.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:35:33\"}, {\"type\":\"paragraph\",\"text\":\"But you're very smart.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:35:34\"}, {\"type\":\"paragraph\",\"text\":\"Well, and I have the benefit of hindsight.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:35:37\"}, {\"type\":\"paragraph\",\"text\":\"Maybe mostly that.\\nOr both.\\nThere is a fairly recent analogy we could draw from this non-solution, you could say, which would, for example, be Ethereum Classic and Ethereum, right?\\nAt some point, a valid transfer happened on Ethereum and then that money was stolen back.\\nThen the people that stole it back said, no, we're the real Ethereum.\\nAt that point, there were two Ethereums, and the actual Ethereum was forced to change its name, while the Ethereum where the theft happened went on, and that's what people today call Ethereum.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:36:20\"}, {\"type\":\"paragraph\",\"text\":\"That's one perspective, and the other is that the people who call things Ethereum apparently do not primarily follow what the software says.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:36:30\"}, {\"type\":\"paragraph\",\"text\":\"That's kind of the point.\\nSo you can debate about this and there's no clear solution.\\nI still think what I said is correct.\\nI really mean that, but that's besides the point, the point is you're now expecting users to keep an eye on everything, so it wasn't really a good solution.\\nHowever, it was of course very innovative, it had a very innovative idea.\\nIt was a big step into thinking about creating digital cash, specifically digital cash based on Hashcash, that wasn't backed by anything else.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:37:03\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, I think one innovation there compared to Digicash, because we talked about that earlier or e-cash.\\nIn e-cash you have a mint, that's the entity that creates coins, and they are also the entity that is essentially the central bank that clears all transactions.\\nSo there is a single point, the entity that issues the coins, that checks all the transactions, that kind of has a monopoly on the transaction log, or maybe not.\\nWhereas at least the issuance now is completely decentralized because everybody can deliver their Proof-of-Work.\\nI think that ingredient is there.\\nThe verification, although still a bit hand-wavy, the idea is that it shouldn't be one entity.\\nI think he also was mentioning RPOW already, but that's something to discuss another time.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:37:54\"}, {\"type\":\"paragraph\",\"text\":\"He was not mentioning RPOW because RPOW came years later.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:37:59\"}, {\"type\":\"paragraph\",\"text\":\"Maybe I read a newer paper.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:38:01\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, that's probably it then.\\nLet's for the sake of convenience now imagine that this system would have worked.\\nNow you can create these strings and you can send them to other people, and there's this registry that keeps track of which public key owns which string.\\nNow we're getting close to something that looks like money, but there is a second big problem that BitGold was facing, or that it sort of solved?\\nThe second big problem is that over time it becomes cheaper to produce valid hashes, right?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:38:39\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:38:40\"}, {\"type\":\"paragraph\",\"text\":\"So at first, because computers just get better and better, it gets faster and faster, so it's easier and easier, cheaper and cheaper to create valid hashes.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:38:48\"}, {\"type\":\"paragraph\",\"text\":\"And there's more of them.\\nThat's actually not important that there's more of them, but that it is cheaper, costs fewer kilowatts of energy to do it.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:38:57\"}, {\"type\":\"paragraph\",\"text\":\"Right, so the problem then is that the money isn't fungible necessarily.\\nIt should be that each currency unit of the same denomination should be worth the same.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:39:10\"}, {\"type\":\"paragraph\",\"text\":\"Well, either it's fungible, but in that case, all the money you created in the past is now worthless, so it's fungible, but highly inflationary.\\nOr it's not fungible, and that's I think the solution that he proposed, is where you value older work more.\\nSo you say because this work was generated 10 years ago on a slower computer, we know that more energy was put into it, therefore we can correct for that.\\nThen the hope is that the market actually does that.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:39:41\"}, {\"type\":\"paragraph\",\"text\":\"No, no, the market doesn't have to, if the market doesn't do that, that's even better.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:39:45\"}, {\"type\":\"paragraph\",\"text\":\"Then it's highly inflationary.\\nSo you mine your coins in 1999, you have a hundred of these coins, and now a hundred units of work.\\nTen years later, somebody makes a hundred units of work in a fraction of a second, so either your hundred units of work are worth nothing in the future, or they are valued because they are old.\\nWhether the market will pick one of these two, I don't think there's any guarantee.\\nHe does argue that there are some precedent(s), like that older collector items are worth more, a bit like Ordinals, I guess.\\nBut that's not the part of Ordinals that's taking off the most.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:40:18\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, or like the misprints of certain postage stamps or something were worth more.\\nYeah, so indeed he does argue that.\\nThe idea that he proposed was we'll create a market for these strings, for these hashes, and on these markets people can trade them against each other.\\nSo that's how the markets can figure out how much a 2005 hash is worth in relation to a 2015 hash.\\nSo maybe one 2005 hash is worth ten 2015 hashes.\\nI should note all these hashes are also timestamped, they're made in order.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:41:01\"}, {\"type\":\"paragraph\",\"text\":\"You can prove that they are a certain age.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:41:06\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nWhich is also another chapter in my book, Sjors, where I talk about the invention of timestamping.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:41:12\"}, {\"type\":\"paragraph\",\"text\":\"Great.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:41:13\"}, {\"type\":\"paragraph\",\"text\":\"I won't get on that detour.\\nSo (in) BitGold there's this market for strings and you can figure out how much these strings are worth in relation to each other.\\nThen Nick Szabo's vision was there will be sort of banks, like in a free banking type of environment, where these banks will collect the different strings and bundle them together into buckets of strings of the same value.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:41:39\"}, {\"type\":\"paragraph\",\"text\":\"This was written before the derivatives markets implosion in 2007, right?\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:41:47\"}, {\"type\":\"paragraph\",\"text\":\"Yes, we're in 1998, so yes.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:41:50\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, when all these triple A rated buckets and I'm thinking about what happened there.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:41:54\"}, {\"type\":\"paragraph\",\"text\":\"Right, right, right.\\nYeah, has nothing to do with this Sjors, but thanks for that color.\\nIn my example earlier, where one 2005 hash is worth ten 2015 hashes, one bucket could consist of one 2005 hash, and another bucket could consist of ten 2015 hashes.\\nNow you have buckets of the same value.\\nThese banks would then use these buckets, or these bundles, whatever you want to call them, to issue coins on top, digital coins still.\\nSo for example, every bucket is worth 10,000 coins and these 10,000 coins are issued to people's account(s).\\nSo now you have a digital form of cash that people can pay each other with.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:42:41\"}, {\"type\":\"paragraph\",\"text\":\"That is actually Digicash, right, that layer on top?\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:42:45\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, you could use e-cash for that.\\nI mean, it doesn't have to, it's free banking, you're free to do whatever you want, Sjors.\\nYou could use e-cash for that, if you want to offer privacy to your customers and get customers that way.\\nBut yeah, this was the idea.\\nSo once you have 10,000 coins in my example, you can exchange them for an actual bucket of strings, and then you have the actual bucket, and you can maybe bring them to another bank.\\nAlso because these strings, it's cryptographically provable who owns them, you can also have the proof of reserve type of stuff.\\nNick Szabo was already thinking about that kind of stuff to address your 2008 concern, by the way.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:43:27\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, yeah, it's a free banking system.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:43:31\"}, {\"type\":\"paragraph\",\"text\":\"So this was basically the idea of BitGold, did I miss anything?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:43:37\"}, {\"type\":\"paragraph\",\"text\":\"Yes, so we talked about inflation and I guess these buckets also address the change problem, right?\\nBecause another issue is that when you had the original e-cash system, you could go to a shop, and you would come with your 10 euros worth of this stuff, and they would immediately go to the bank, redeem it, and give you your change back.\\nSo change wasn't a problem in the original system.\\nChange is also not a problem in Bitcoin because the transaction itself creates a change.\\nBut in this system these strings don't have change.\\nSo what you could do is somebody could make lots of small little pieces of work and distribute those, just like you would distribute small change, and then you go to a shop and you get these little strings back for your change, but it may be easier to do all this on a second layer and just have big buckets somewhere that don't need to be changed all the time.\\nBecause also it would mean having to track all the movement of all these mini-strings, like tracking the movement of every penny on the planet.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:44:39\"}, {\"type\":\"paragraph\",\"text\":\"Right, yeah exactly, it's interesting you mentioned that.\\nNick Szabo was already thinking about second layer solutions, as are being developed and exist on Bitcoin today.\\nThis was also sort of an original Nick Szabo vision to have different layers for different types of transactions.\\nSo that's, that's BitGold in a nutshell, I think, Sjors.\"}, {\"type\":\"heading\",\"text\":\"Conclusion\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:45:01\"}, {\"type\":\"paragraph\",\"text\":\"All right, well then I guess I can conclude that Bitcoin fixes this.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:45:05\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, we're going to make one more Genesis Book shill episode, right?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:45:09\"}, {\"type\":\"paragraph\",\"text\":\"I think so, yeah.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:45:10\"}, {\"type\":\"paragraph\",\"text\":\"Maybe next week or the week after we'll make one on B-money and RPOW.\\nCool.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:45:16\"}, {\"type\":\"paragraph\",\"text\":\"All right, then, in that case, thank you for listening to Bitcoin.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:45:19\"}, {\"type\":\"paragraph\",\"text\":\"Explained.\"}",
    "body": "Aaron van Wirdum: 00:00:18\n\nLive from Utrecht, this is Bitcoin Explained.\nHey Sjors.\n\nSjors Provoost: 00:00:21\n\nYo, yo.\n\n[removed sponsor segment]\n\n## Aaron's book - \"The Genesis Book\"\n\nSjors Provoost: 00:01:07\n\nSo, Aaron, you wrote a book.\n\nAaron van Wirdum: 00:01:08\n\nYeah.\nOh, yes, I did.\n\nSjors Provoost: 00:01:09\n\nCool.\n\nAaron van Wirdum: 00:01:09\n\nAt the time of recording, it's almost published.\nWe're publishing it tomorrow, January 3rd, but that's like midnight actually, UTC.\nSo in a couple of hours, Sjors, my book will be live.\nYeah, so that's kind of cool.\nIt is called \"The Genesis Book\", Sjors, and it tells the prehistory of Bitcoin, the origin story of Bitcoin.\nIt's the story of the people and projects that inspired Bitcoin.\nSo, Sjors, to celebrate that, we're going to discuss some of the topics from my book.\n\nSjors Provoost: 00:01:45\n\nThat's right.\n\nAaron van Wirdum: 00:01:46\n\nSo it's kind of for the first time, I think, not really an episode about Bitcoin.\nHave we done something about it?\n\nSjors Provoost: 00:01:54\n\nWe've done an episode about Digicash.\n\nAaron van Wirdum: 00:01:57\n\nWell, no, hang on, we also did the episode about Tornado Cash.\nThat was actually not about Bitcoin.\n\nSjors Provoost: 00:02:03\n\nExactly.\n\nAaron van Wirdum: 00:02:03\n\nAnyways.\n\nSjors Provoost: 00:02:05\n\nAnd we'll still cover things that are very relevant to Bitcoin.\n\nAaron van Wirdum: 00:02:08\n\nRight, well, my entire book is very relevant to Bitcoin.\nEverything in my book is relevant to Bitcoin, Sjors, so of course, also what we're going to discuss.\n\nSjors Provoost: 00:02:15\n\nExcellent.\n\nAaron van Wirdum: 00:02:17\n\nDid I mention it's called \"The Genesis Book\", and you can find it on the Bitcoin Magazine store and Amazon and I don't know where else.\n\nSjors Provoost: 00:02:23\n\nSounds good.\n\nAaron van Wirdum: 00:02:24\n\nI think [thegenesisbook.com](https://thegenesisbook.com) should be live by the time you listen to this, hopefully.\n\nSjors Provoost: 00:02:32\n\nAll right.\n\nAaron van Wirdum: 00:02:32\n\nYou want to know anything more about where you can find my book, Sjors?\n\nSjors Provoost: 00:02:35\n\nNo, but we will put it in the show notes.\n\nAaron van Wirdum: 00:02:37\n\nOkay, we'll go to the episode then.\nI discuss in my book, there are five main digital cash projects that are precursors to Bitcoin in a way.\nThere are more, and there's a lot more in the book, Sjors.\nThere's all kinds of background and stories, and colors, and storylines and adventures, and ... okay, I'll stop now.\n\nSjors Provoost: 00:03:05\n\nYeah, from what I've been reading, you cover Austrian economic stories, and sort of alternate the digital money story versus the political story.\n\n## Introduction\n\nAaron van Wirdum: 00:03:16\n\nAnyway, enough with the shilling, let's get to the actual episode.\nSo there's five electronic cash projects in the book that have a bigger focus than some of the more minor ones.\nSo the first one of that is e-cash, which was produced by Digicash.\nWe're not going to talk about that because we already did in episode 52, which was about Fedimint, right?\n\nSjors Provoost: 00:03:43\n\nYeah, in episode 52, Fedimint, we start all the way back with how David Chaum's e-cash works, how blinded signatures work, definitely recommended listening.\nThen we go all the way to how that's now applied to Fedimint and Cashu.\n\nAaron van Wirdum: 00:04:00\n\nYeah, so we're going to skip that one, we're not going to talk about that again.\nInstead this episode will be about Hashcash and BitGold.\nI don't know how we're going to do this format, usually I'm the one who asks questions.\nWe'll figure it out, I think.\nI have no idea how to do this now.\n\nSjors Provoost: 00:04:22\n\nWell, you should tell a little bit of the story, and then we'll get to some of the technical juicy bits where I might have some opinions too.\n\n## Hashcash\n\nAaron van Wirdum: 00:04:31\n\nOkay, cool, yeah.\nThe first one is [Hashcash](http://www.Hashcash.org/papers/Hashcash.pdf).\nThe background here is, in the nineties the internet was becoming more popular, and also there was the cypherpunks mailing list.\nThey had their own mailing list where they were discussing privacy technologies, but also more ideological types of posts, or how to create digital cash and all these kinds of discussions.\nA bunch of the cypherpunks were also running remailers, this was sort of the precursor of Tor.\nThere was a way to send an email anonymously, send an email without the recipients knowing where the email came from.\nThe problem was that spam was becoming popular around this time as well, the cypherpunk mailing list itself was being spammed, anyone else who had an email address was being spammed, and especially also these remailers were starting to be spammed to the extent that it was becoming burdensome to run one.\nSo it was potentially an attack on these remailers.\nEither it was a spam attack that remailers were being abused for, or maybe it was just an attack on the remailers themselves, as a denial of service type of situation.\nSo cypherpunks specifically wanted to create digital cash.\n\nSjors Provoost: 00:05:54\n\nOne step back, I think they also wanted to fix the spam problem, right?\nWith digital cash maybe in the back of their mind.\n\nAaron van Wirdum: 00:06:02\n\nSorry, I said digital cash, I meant digital postage, and that's what you're getting.\n\nSjors Provoost: 00:06:06\n\nYes, digital postage stamps.\nBut it might be interesting, something you also mentioned in the book is that there was a worry that if the cypherpunks didn't fix this problem, then governments would step in and they would start dealing with spam.\nThis would be a problem because if governments have to fight spam, then the way they would probably do that is by de-anonymizing everyone and basically KYC-ing email to the extent of where if there's a spammer, they know who they are.\n\nAaron van Wirdum: 00:06:36\n\nYeah, plus the government would then have to make a judgment call about what is spam and (that's) kind of relevant to Bitcoin these days, with the whole Ordinals thing.\nBut yeah, then governments have to make a judgment call about what is spam, so what actually is legal?\nThen by the time they can find a spammer, yeah, that would have to be some sort of identification.\n\nSjors Provoost: 00:06:54\n\nAnd they would have to ban anonymous email, which is the kind of thing they were trying to do.\n\nAaron van Wirdum: 00:07:00\n\nRight, so the cypherpunks didn't like this, and specifically Adam Back didn't like this.\nAdam Back was of course one of these cypherpunks, I don't think he needs an introduction to anyone who listens to this podcast.\nSo Adam Back wanted to come up with digital postage.\n\nSjors Provoost: 00:07:19\n\nFirst I think we should go back in time, right?\nBecause everybody talks about Hashcash and how Adam Back invented that, and he did, but it was not the first time it was invented, as so often happens in history.\n\nAaron van Wirdum: 00:07:30\n\nI was also considering if I should talk about the other ways they were thinking about digital postage, but I think we should skip that, right?\nThat's what you can find in the book.\n\nSjors Provoost: 00:07:40\n\nExactly.\n\nAaron van Wirdum: 00:07:41\n\nSo shall I hand it to you here?\nActually Adam Back was not the first person to invent digital postage.\nHe did think he was, he was not aware of the previous proposal, but there was actually another proposal that's a bit older and quite similar to Adam Back's proposal, which was... the names from the top of my head?\n\nSjors Provoost: 00:08:06\n\n[Dwork and Naor](https://www.wisdom.weizmann.ac.il/~naor/PAPERS/pvp.pdf).\n\nAaron van Wirdum: 00:08:07\n\nYeah, I was thinking of their first names, but yeah, their last names were definitely Dwork and Naor, Moni Naor and Cynthia Dwork, I think.\n\nSjors Provoost: 00:08:14\n\nYeah, and they did not come from a cypherpunk background.\nThey came from it with a just, hey, we are people using email and we don't like spam background.\n\nAaron van Wirdum: 00:08:27\n\nThey were from IBM, right, they were computer pros.\n\nSjors Provoost: 00:08:31\n\nYeah, they weren't random people, but they were not saying - how can we prevent the government coming into this email world?\nIt's just, how do we get rid of spam?\nEssentially they came up with the idea of introducing Proof-of-Work for email, and they came up with three different work algorithms.\n\nAaron van Wirdum: 00:08:51\n\nYeah, and to be clear, the term Proof-of-Work didn't exist yet at this time.\n\nSjors Provoost: 00:08:55\n\nI don't know exactly what they called it, but something along the lines of like a challenge or...\nBut basically, they picked three algorithms, and I think one of them boiled down to finding - if you take a number and you wanna figure out which two primes can be multiplied to get to the number.\nSo let's say you pick the number 100 and you say \"tell me which two prime numbers multiply to 100\", and you would say \"I don't know, because it's 10 times 10\", so those are not prime.\n\nAaron van Wirdum: 00:09:28\n\nKind of a bad example.\n\nSjors Provoost: 00:09:30\n\nNo it's a fine example but it shows that as soon as you give me the right answer, I can very quickly verify that, yes, these two numbers multiply to this total.\nActually, I think you didn't have to find prime numbers, it's just modulo prime number.\n\nAaron van Wirdum: 00:09:43\n\nI think the way it works is you have two very big prime numbers, these are factored (multiplied) into another big number, and then the big number can only be produced by two specific prime numbers then, right?\n\nSjors Provoost: 00:09:56\n\nI think that's RSA, but not what this...\n\nAaron van Wirdum: 00:10:01\n\nOh, this works a bit different?\n\nSjors Provoost: 00:10:02\n\nI think this was much simpler, this was something called modulo a prime number.\nSo if you take a much smaller number we know the number 13 is prime, right?\nSo you would say okay here's the number 10, find me two numbers that you can multiply to get the number 10, but you can multiply and then you do modulo 13.\nSo you can say - this is not very good in math - but if you do 3 times 4 that's 12, so that's not enough.\nIf you do three times five, that's 15.\n(15) Modulo 13 is two, right?\nYou keep looking for this number that if you go around in circles around this prime number, it gets you the correct result.\n\nAaron van Wirdum: 00:10:45\n\nOkay, we're getting very into the weeds now, let's get back to the main road.\nSo they had three ideas.\n\nSjors Provoost: 00:10:50\n\nExactly.\nSo this is one of them and the key part is that it takes a while to find these numbers, but it's very quick to check.\nYou just multiply modulo and you're done.\nThey had two other algorithms that I don't want to go into also because I don't know them, but they had an interesting property from them is that you could build an exception into it.\nSo basically saying, well, if you're the mailing list operator, then you can use this special key and you can bypass the work.\nI don't know whether that would be practical or not, but that's sort of what they came up with.\n\nAaron van Wirdum: 00:11:23\n\nRight, the backdoor function.\n\nSjors Provoost: 00:11:25\n\nYeah.\n\nAaron van Wirdum: 00:11:27\n\nThe points being here though, so what Naor and Dwork, the idea they come up with is that whatever calculation you have to make, you have to make it in combination with some data from the email itself.\n\nSjors Provoost: 00:11:41\n\nYes, because you can prove that you did a bunch of work, but if that's unrelated to your email, you would just reuse the same work.\nSo you have to make sure that the work is always a function of the email itself.\nIronically, they discovered the use of hash functions for that, or they knew that you needed hash functions for that part.\nSo you take the hash of the email, and then you use the hash as the starting point of your challenge.\n\nAaron van Wirdum: 00:12:05\n\nOh, they did use the hash for that part?\n\nSjors Provoost: 00:12:07\n\nYeah.\n\nAaron van Wirdum: 00:12:08\n\nOh, I didn't know that, that's interesting.\nWe should spell this out for those who haven't realized this.\nNaor and Dwork were not using hashes for the Proof-of-Work.\nThey were using, what's it called?\nIs there a better term for what they were (using)?\n\nSjors Provoost: 00:12:25\n\nThey were just using math problems.\n\nAaron van Wirdum: 00:12:26\n\nYeah, right.\nNow the idea was still very similar to...\nMost people that listen sort of know where Proof-of-Work came from, that's why we're sort of skipping some parts, but we should actually spell it out.\nSo the idea was if you attach a little bit of Proof-of-Work to an email, then (for) most people that want to send an email, that's not really a problem, that's like a couple of seconds of computing time.\nHowever, if you're a spammer that wants to send tens of thousands, or maybe even millions of emails, which you usually have to do to be a profitable spammer, then it becomes so expensive that it's not worth it anymore.\nSo that's how it's postage.\nIt's different (from) postage in the sense that you're not buying it from anyone.\nAlso whoever you're sending the email to is not getting the money or anything like that.\nYou're proving that you spent some resources, some energy, and that way it's too expensive for a spammer to be a spammer.\n\nSjors Provoost: 00:13:23\n\nYes, exactly.\n\nAaron van Wirdum: 00:13:25\n\nThat's what Naor and Dwork essentially came up with.\nThis was in 1992, but then independently, basically, it was sort of a parallel invention - not exactly parallel, (there was) some time difference, but Adam Back was not aware of this solution, so when they were discussing this problem on the cypherpunks list, they didn't know it was kind of a solved problem, but then he reinvented something very similar.\n\nSjors Provoost: 00:13:54\n\nYes, but then using a hash function, SHA-1 in this case, but that doesn't really matter.\nThe thing is it's not actually better or worse than the design that was made before.\n\nAaron van Wirdum: 00:14:08\n\nOkay, (can) you explain how it works?\n\nSjors Provoost: 00:14:10\n\nSo you take some aspects of the email, as we said before, and then you add a nonce to it.\nA nonce is a number that you pick randomly, doesn't matter what it is, but you have to pick it such that the resulting hash starts with a certain number of zeros.\nNotice that in Bitcoin Core, the hash does not only start with a certain numbers of zeros, but has a specific value that it has to stay under, but it's roughly the same idea.\n\nAaron van Wirdum: 00:14:37\n\nRight, so you would send the email, you include this hash.\nThen the recipient would check if there's actually a valid hash in it, if not, the email would just bounce.\nI guess that was the same with Naor and Dwork's system.\n\nSjors Provoost: 00:14:54\n\nYep, same idea.\n\nAaron van Wirdum: 00:14:56\n\nYeah, I didn't spell that out, but same idea, basically.\n\nSjors Provoost: 00:14:57\n\nYep, they both have the concept of difficulty, where you can make the hash more or less difficult, depending on what your perceived spam problem is.\n\nAaron van Wirdum: 00:15:04\n\nYeah, the recipient or the remailers, which I mentioned earlier, will check - does this have a failed hash?\nIf not, just reject it, and if so, it's forwarded to whoever it needs to be forwarded to.\nSo that's basically the idea of Hashcash, right?\nDid we forget about anything?\nI can tell you that in the early days, there was some adoption of it.\nSo Apache used, is that how I pronounce it actually?\n\nSjors Provoost: 00:15:43\n\nI think Apache, yeah, SpamAssassin.\n\nAaron van Wirdum: 00:15:45\n\nYeah, they used it in SpamAssassin and Microsoft recreated something very similar.\nIt was incompatible with different standards, but basically the same idea again.\nAnd then more recently...\n\nSjors Provoost: 00:15:59\n\nThose two are completely unused right now because SpamAssassin removed it again, and the Microsoft thing doesn't exist anymore.\nMore recently, as you're getting to, Tor has been using Proof-of-Work.\nAgain, it's a completely different algorithm, but it is an example of Proof-of-Work being used outside of a cryptocurrency, where it's not used to produce value, it's simply used to prevent spam.\nSo this concept is still alive and well.\n\nAaron van Wirdum: 00:16:27\n\nRight.\n\nSjors Provoost: 00:16:27\n\nNow, one interesting aspect I wanted to talk about...\n\nAaron van Wirdum: 00:16:33\n\nThis is why we're talking about it in a Bitcoin podcast.\nWhy we're focusing on Hashcash more than the Naor-Dwork concept, right?\nIs that where you're getting at?\n\nSjors Provoost: 00:16:42\n\nYeah, there's an interesting kind of a historical coincidence, I would almost say.\nThis is something you pointed out earlier that I think Adam Back was aware of and he pointed it out, which is to say that there are multiple kinds of Proof-of-Work, but in particular, two different kinds are stochastic and non-stochastic Proof-of-Work.\nThat's a distinction I hadn't really thought about.\nThe idea here is that with a hash function you may or may not get the right result, and statistically it will take a certain amount of time before you find a solution, but it's random.\nSometimes you find the right solution instantly, other times it takes a very long time.\nWhereas with these earlier algorithms, there's a guaranteed time of how long it takes to find the square root, for example, of two numbers.\nSo I suppose you could maybe make it random, but assuming you use a standard algorithm, it'll take a fixed amount of time to find a solution.\n\nAaron van Wirdum: 00:17:45\n\nLet me give an analogy that I've used, not in the book but in an article I wrote earlier.\nLet's say there's a 100 lottery tickets, and one person buys 40 tickets and another buys 60.\nNow the person that has 60 has more chance to win - 60%, but the person that bought 40 still has 40% (chance) to win as well.\nWhile if you take two cyclists and one of them can ride his bike (at) 60 miles an hour and the other (at) 40 miles (an hour), then any time they do a race, the one that can cycle 60 miles an hour will just win, every time.\n\nSjors Provoost: 00:18:25\n\nExactly.\n\nAaron van Wirdum: 00:18:26:\n\nEvery time the same cyclist will win.\nThere's no 40% chance that a 40 mile(s) per hour cyclist will ever win.\nIt's just not going to happen.\n\nSjors Provoost: 00:18:35\n\nSo if you translate that to the context of Bitcoin mining as it is today, let's say we had picked a non-stochastic form of Proof-of-Work, based on that original paper.\nSo if Adam Back had known about the original paper and had not bothered to implement something based on a hash function, because there's already a solution out there, then you would have the biggest miner, whoever that is, will just always find the next block first, because they would always find that big prime number or whatever the challenge is.\nThey would always find it first.\n\nAaron van Wirdum: 00:19:04\n\nRight.\nIt will be like that 60 mile cyclist rather than...\nCurrently Bitcoin mining kind of works like this lottery, but if the biggest miner just always wins, then you can't have Bitcoin like we have it today.\n\nSjors Provoost: 00:19:16\n\nOf course, we still have some centralization problems in that sense, but this would be centralization on steroids if we did not have hash-based Proof-of-Work.\n\nAaron van Wirdum: 00:19:23\n\nYeah, basically Bitcoin wouldn't work, like not as it's designed today.\n\nSjors Provoost: 00:19:27\n\nYeah, or maybe we would have figured it out and then changed it, but definitely it would have been not optimal.\n\nAaron van Wirdum: 00:19:32\n\nYeah, so what you alluded to, we may have been quite lucky in that sense, that Adam Back wasn't aware of the prior proposal.\nHe invented this in a way that's actually useful for Bitcoin.\n\nSjors Provoost: 00:19:45\n\nExactly, but it's not something he was aware of at the time, or at least he didn't put it in the paper.\n\nAaron van Wirdum: 00:19:51\n\nAs far as I know, and I've discussed it with him, so either my memory is failing me or I'm pretty sure he only realized that after Bitcoin himself.\nHe only figured that out, so that actually Hashcash specifically only works for Bitcoin.\nThat was not some sort of pre-planned thing for Mr. Back.\n\n## Nick Szabo on secure benchmark functions\n\nSjors Provoost: 00:20:09\n\nYeah, now before we get to the next topic, which is BitGold, we should talk about something that the author of BitGold observed about Proof-of-Work.\nThat's kind of the bridge I wanted to make.\n\nAaron van Wirdum: 00:20:23\n\nYeah that is also the bridge I make in my book, Sjors.\n\nSjors Provoost: 00:20:26\n\nExcellent.\nIt's almost like I read it.\n\nAaron van Wirdum: 00:20:29\n\nAt least if we're thinking about the same thing.\nSo Hashcash or Proof-of-Work, for the first time introduced something, created something akin to digital scarcity, because there is an actual physical cost - energy in the real world required to produce it.\n\nSjors Provoost: 00:20:55\n\nYeah.\n\nAaron van Wirdum: 00:20:56\n\nSo rather than just copying numbers, you have to actually invest something, real resources, and that sort of creates something that you could see as digital scarcity, right?\nThat's what you're getting at.\n\nSjors Provoost: 00:21:05\n\nThat's not where we're getting it, though it is true.\nWhat I'm getting at is, the question is, how do you define Proof-of-Work, or how do you measure it?\nHow is it different from other cryptography?\n\nAaron van Wirdum: 00:21:18\n\nThis is not a bridge I make in my book, Sjors.\nUnless I'm completely confused where you're going.\n\nSjors Provoost: 00:21:23\n\nIt is a new bridge, but basically Nick Szabo wrote an article about something he calls... now I lost the term, that's not smart.\n\nAaron van Wirdum: 00:21:33\n\nYou mean secure benchmark functions?\n\nSjors Provoost: 00:21:35\n\nYes, secure benchmark functions.\nSo here's the thing, we know that with normal public key cryptography for example, and with hash functions like SHA-256, we know that it's easy to verify.\n_Easy_ is defined as (it) takes a very short time on a typical computer, and impossible, or it would take forever, effectively, to hack it, to coincidentally go back from the hash to the original, from the public key to the private key which is then called _hard_.\nBut with Proof-of-Work you're doing something that's a little bit in between.\nIt is definitely not easy to go back to find a certain number of zeros for example, in the Proof-of-Work in the hash, but it's also not hard - in the sense that it will not take forever.\nIn fact, you don't want it to take forever because then you cannot make the Proof-of-Work on your email if it would take forever to make the Proof-of-Work.\nThen the question is, how do you define that?\nHow hard is hard enough?\n(It) should not be too easy, (it) should not be too hard.\nNick Szabo wrote this article about it, coining of term \"secure benchmark function\".\nNow if you look at the 1992 paper about Proof-of-Work, they were also informally defining it as something that's not too easy, not too hard, somewhere in between.\nSo, Szabo put it in slightly more mathy terms.\nThe analogy we could get into is the one-way function, or what it's comparing it with.\nSo we talked about one-way functions in an earlier episode, where you actually were correct and I was wrong.\n\nAaron van Wirdum: 00:23:15\n\nSo I remember that.\n\nSjors Provoost: 00:23:18\n\nGood, so keep enjoying that feeling.\n\nAaron van Wirdum: 00:23:20\n\nYes.\nI think everyone heard that, right?\nCan you repeat it one more time?\n\nSjors Provoost: 00:23:25\n\nLet's just try and explain it correctly, because I don't even remember exactly what I was saying.\n\nAaron van Wirdum: 00:23:30\n\nGo on.\n\nSjors Provoost: 00:23:31\n\nA one-way function is a function that is very easy to go in one way, like checking that a hash is correct, but very hard to go the other way, like trying to produce a fake original (pre-image) of a hash.\nThere are a bunch of one-way functions out there.\nOne is finding the factors in a big number, or these prime factors as you mentioned with RSA.\nAnother is the discrete logarithm problem, or that's sort of a more generic one, but that is used for public and private key cryptography, like the elliptic curve.\nThen there's cryptographic hash functions like SHA-256, which so far has not been broken.\nThe problem is there is no mathematical proof that this actually exists.\nWe think these functions are one-way, and they better be one-way, but it may turn out that some mathematician somewhere proves that they're not, and then you get into the whole `P = NP` stuff that we're not going to get into.\nNow, there is a special kind of one-way function called the [trapdoor one-way function](https://en.wikipedia.org/wiki/Trapdoor_function).\nThat is public key - private key cryptography, where it is very hard to go back, it is very hard to go from a public key to a private key, in fact (it would) take the age of the universe, unless you know the private key.\nThen it's trivial.\n\nAaron van Wirdum: 00:25:03\n\nYes.\n\nSjors Provoost: 00:25:04\n\nI think I said it wrong.\nIt's very hard to fake a signature, for example, but if you know the private key, then it's trivial to make the signature, and that is the trapdoor, the secret passageway through which you can do things.\nThat was the distinction we wanted to make back then.\n\nAaron van Wirdum: 00:25:18\n\nThere actually is, Sjors, a chapter about this in my book as well.\n\nSjors Provoost: 00:25:21\n\nYeah, so then the secure benchmark function has to be less strenuous.\nIt can't be a one-way function because then you'll never go back.\nSo if you go to the [Wikipedia article](https://en.wikipedia.org/wiki/One-way_function) about one-way functions, it defines this little thing like, okay, for any blah, blah, blah function that you try a hundred thousand times or whatever, statistically you should almost never find the correct answer.\nThat's sort of how they defined it.\nThen Szabo basically writes a similar formula, but then explaining what this secure benchmark function should look like.\n\nAaron van Wirdum: 00:25:57\n\nSjors, are we still just making a bridge?\n\nSjors Provoost: 00:26:02\n\nYes, we are.\n\nAaron van Wirdum: 00:26:03\n\nThis is a big bridge you're building here.\n\nSjors Provoost: 00:26:04\n\nI'm almost done with the bridge.\nOne thing that is interesting there is that when it comes to these one-way functions, it doesn't matter what hardware you have.\nYou can have the whole universe and you still cannot crack it.\nYou can have a Dyson sphere and you can't crack it.\nBut in the secure benchmark function, the device that you use, the machine that you do things on, actually matters in the math.\nYou cannot just abstract away the machine, you have to say, okay, what is a realistic computer?\nThen you get back to the spam problem.\nIf a spammer has an ASIC, a modern-day ASIC, and let's say the algorithm was SHA-256 instead of SHA-1, then you as a consumer trying to send an email would have to burn your phone to the ground in order to just send an email, but that guy with the ASIC can just spam a million people because per watt of electricity that you're putting into that ASIC you can just produce enormous amounts of spam, whereas your phone is less efficient so it would just get too hot.\nThat's why it's very hard to find functions that are easy enough for a phone, hard enough for an ASIC, and he anticipated that problem in that very short paper.\n\nAaron van Wirdum: 00:27:12\n\nThat was Sjors building the Brooklyn Bridge over here, beautiful in its own right.\n\nSjors Provoost: 00:27:17\n\nExactly.\nThat's why he needed, for his BitGold proposal, because he didn't actually build the project, he says make sure it's one of those secure benchmark functions.\n\n## BitGold\n\nAaron van Wirdum: 00:27:31\n\nYeah, in my book, I sort of muffle this away in a footnote, and I just call it hashes because it's what we were talking about anyways.\nOkay Sjors, let's talk about BitGold.\nI don't know if there's much specifically to introduce.\nI can tell the whole story about how the cypherpunks want to create digital cash and Nick Szabo was one of them, but let's...\n\nSjors Provoost: 00:28:04\n\nI think it might be interesting to mention... I think it was like seven points that he describes that this system should do?\n\nAaron van Wirdum: 00:28:12\n\nWell, that was Adam Back.\n\nSjors Provoost: 00:28:15\n\nOh, I thought the BitGold paper also lists like seven properties of the system.\n\nAaron van Wirdum: 00:28:20\n\nIn the BitGold paper? It's been a while since I read it.\n\nSjors Provoost: 00:28:22\n\nYeah, maybe you just describe it in general terms.\n\nAaron van Wirdum: 00:28:27\n\nBitGold itself?\nOkay, so we're getting more to the technical side then.\n\nSjors Provoost: 00:28:32\n\nYes, what the architecture of the system is and how it should work.\n\nAaron van Wirdum: 00:28:35\n\nOkay, yeah, I can do that.\nNick Szabo wanted to create digital cash, right?\nHashcash was introduced, so now there was something akin to digital scarcity.\nIt wasn't real digital scarcity, obviously, or at least not limited because over time it becomes easier and easier to create valid hashes.\nThere were a number of problems with Hashcash, why you couldn't use it as money, also, of course, you can't pay someone with Hashcash.\nIt's like a one-time use.\n\nSjors Provoost: 00:29:03\n\nYeah, so what you're describing is the inflation problem, right?\n\nAaron van Wirdum: 00:29:06\n\nWell, that's the one problem, and also you can't transfer it to anyone.\nYou can't re-spend Hashcash.\n\nSjors Provoost: 00:29:13\n\nYeah.\n\nAaron van Wirdum: 00:29:14\n\nSo it wasn't really digital money yet, it was digital postage, essentially.\nBut it did introduce something akin to the digital scarcity, and this idea inspired, for example, Nick Szabo to propose their own digital currency schemes.\nNow, BitGold was never implemented, it was only ever a proposal, but it's still interesting.\nThe way it works is you start with a candidate string.\nThe candidate string can be anything, it doesn't really matter, but let's just say a random string of numbers.\nThen with a Proof-of-Work or a secure benchmark function, as you just explained, that's how Nick Szabo called it in his paper, I believe.\nAt least in one of his posts, he very specifically called it that.\n\nSjors Provoost: 00:30:03\n\nYeah, I think in the post I read, he just used all of the terms, but then made this benchmark a more specific definition.\n\nAaron van Wirdum: 00:30:11\n\nRight, exactly.\n\nSjors Provoost: 00:30:12\n\nBut we can just call it Proof-of-Work because that's what it is.\n\nAaron van Wirdum: 00:30:14\n\nYeah, let's call it Proof-of-Work.\nSo there's a candidate string, anyone can use Proof-of-Work to create a new valid hash, essentially.\nNow the person who creates this valid hash becomes the owner of this hash.\n\nSjors Provoost: 00:30:32\n\nSo whoever creates it first.\n\nAaron van Wirdum: 00:30:33\n\nWhoever creates this first, yeah.\nI don't think it was specifically defined or specified how this initial ownership would work, but the obvious solution is you hash your public key with it, that would just be an easy way to do it, right?\nAnyway, so whoever creates a valid hash using Proof-of-Work on the candidate string gets to own that string, and then the valid hash becomes the new candidate string.\nSo now everyone can start hashing that to find the next candidate string to find the next valid hash, which then becomes the next candidate string.\nOkay, so that's how you own these strings, essentially.\nTransferring strings is much like Bitcoin, you sign a message saying, this string now belongs to this public key.\nIf that message is cryptographically signed with the corresponding private key of whoever was owning it, whatever public key was owning it, then the transfer is valid.\nThe challenge was - who gets to keep track of who owns what, or perhaps more specifically, how do you prevent double spending?\nOne person could sign several transactions (to) go to several people.\n\nSjors Provoost: 00:31:50\n\nAnd how can you prevent, afterwards multiple people saying that they found it first, right, if the new thing was discovered?\n\nAaron van Wirdum: 00:31:58\n\nYes, right, that too.\nSo there needs to be, consensus on who owns what.\nAlso other problems are for example, censorship.\nAnyways, so double spending, let's just say is the main problem.\nNick Szabo envisaged like a ownership registry.\nSo there would be a bunch of internet servers, and they would essentially vote on whether or not a transaction is valid or which transaction out of conflicting transactions is valid.\n\nSjors Provoost: 00:32:31\n\nYeah.\nThe key part there is it's at least not a central party that's doing it, but it's somehow decentralized, multiple people are tracking it, everybody can sort of check that it's at least, you know, maybe a bit honest.\nI mean, there's certain things you can check because signatures are signatures, you can't forge them.\nBut if all these public parties keeping records disagree, it's hard to decide which is right.\nYou can't just count them, for example.\n\nAaron van Wirdum: 00:32:56\n\nYeah, well, the first thing you mentioned is interesting about the signatures.\nSo the problem is essentially that this registry, these servers, they can be corrupted in different ways.\nFor example, it wasn't Sybil resistant, or at least Nick Szabo hadn't come up with a robust way to make it Sybil resistant.\nIn other words, one guy could join with 10,000 different servers and just outvote everyone else and double spend everyone, there was no robust way of stopping that.\n\nSjors Provoost: 00:33:31\n\nYeah, it's basically all the Proof-of-Stake problems.\n\nAaron van Wirdum: 00:33:35\n\nIt's similar.\nIt didn't use Proof-of-Stake itself, but yeah, there was nothing at stake in that sense, that's for sure.\nNick Szabo at that time thought a potential mitigation against this is that users themselves can sort of keep an eye of what's going on.\nThen let's say the Sybil attack happens, then the honest servers, the honest nodes in this registry system, they can split off.\nThey can say, no, that's someone's trying to cheat, we're just going to start our own registry.\nThen users who are paying attention can see, yep, this registry is honest and this registry is not.\nThat was supposed to solve that problem, but it doesn't really.\nFor example, if you're offline, and you come online, and you weren't paying attention, you're a new user or something like that, you were just offline, you were on holiday, who knows?\nAll of a sudden there's two registries, there's no way to know which one was cheating and which one was not.\n\nSjors Provoost: 00:34:44\n\nExactly.\nIt sounds like you need to be online all the time and you need to download all the transactions.\nIt's like running your own Bitcoin node, although there wasn't an actual blockchain at the time, well, there may have been, sort of.\n\nAaron van Wirdum: 00:35:01\n\nYeah, wait.\nThe way you're phrasing it now sounds like it would have been a solved problem.\n\nSjors Provoost: 00:35:06\n\nNo, you would.\nIf you were to implement this system, then it sounds like everybody should just be verifying everything so that there is no third party.\n\nAaron van Wirdum: 00:35:14\n\nWell, so that's what we're getting later.\nBut BitGold did not have this idea yet in any case.\n\nSjors Provoost: 00:35:20\n\nNo, no, the idea would be that there would be multiple servers doing this job, but in order to check the servers, the only logical conclusion to me would be that everybody has to check everything.\n\nAaron van Wirdum: 00:35:33\n\nBut you're very smart.\n\nSjors Provoost: 00:35:34\n\nWell, and I have the benefit of hindsight.\n\nAaron van Wirdum: 00:35:37\n\nMaybe mostly that.\nOr both.\nThere is a fairly recent analogy we could draw from this non-solution, you could say, which would, for example, be Ethereum Classic and Ethereum, right?\nAt some point, a valid transfer happened on Ethereum and then that money was stolen back.\nThen the people that stole it back said, no, we're the real Ethereum.\nAt that point, there were two Ethereums, and the actual Ethereum was forced to change its name, while the Ethereum where the theft happened went on, and that's what people today call Ethereum.\n\nSjors Provoost: 00:36:20\n\nThat's one perspective, and the other is that the people who call things Ethereum apparently do not primarily follow what the software says.\n\nAaron van Wirdum: 00:36:30\n\nThat's kind of the point.\nSo you can debate about this and there's no clear solution.\nI still think what I said is correct.\nI really mean that, but that's besides the point, the point is you're now expecting users to keep an eye on everything, so it wasn't really a good solution.\nHowever, it was of course very innovative, it had a very innovative idea.\nIt was a big step into thinking about creating digital cash, specifically digital cash based on Hashcash, that wasn't backed by anything else.\n\nSjors Provoost: 00:37:03\n\nYeah, I think one innovation there compared to Digicash, because we talked about that earlier or e-cash.\nIn e-cash you have a mint, that's the entity that creates coins, and they are also the entity that is essentially the central bank that clears all transactions.\nSo there is a single point, the entity that issues the coins, that checks all the transactions, that kind of has a monopoly on the transaction log, or maybe not.\nWhereas at least the issuance now is completely decentralized because everybody can deliver their Proof-of-Work.\nI think that ingredient is there.\nThe verification, although still a bit hand-wavy, the idea is that it shouldn't be one entity.\nI think he also was mentioning RPOW already, but that's something to discuss another time.\n\nAaron van Wirdum: 00:37:54\n\nHe was not mentioning RPOW because RPOW came years later.\n\nSjors Provoost: 00:37:59\n\nMaybe I read a newer paper.\n\nAaron van Wirdum: 00:38:01\n\nYeah, that's probably it then.\nLet's for the sake of convenience now imagine that this system would have worked.\nNow you can create these strings and you can send them to other people, and there's this registry that keeps track of which public key owns which string.\nNow we're getting close to something that looks like money, but there is a second big problem that BitGold was facing, or that it sort of solved?\nThe second big problem is that over time it becomes cheaper to produce valid hashes, right?\n\nSjors Provoost: 00:38:39\n\nYeah.\n\nAaron van Wirdum: 00:38:40\n\nSo at first, because computers just get better and better, it gets faster and faster, so it's easier and easier, cheaper and cheaper to create valid hashes.\n\nSjors Provoost: 00:38:48\n\nAnd there's more of them.\nThat's actually not important that there's more of them, but that it is cheaper, costs fewer kilowatts of energy to do it.\n\nAaron van Wirdum: 00:38:57\n\nRight, so the problem then is that the money isn't fungible necessarily.\nIt should be that each currency unit of the same denomination should be worth the same.\n\nSjors Provoost: 00:39:10\n\nWell, either it's fungible, but in that case, all the money you created in the past is now worthless, so it's fungible, but highly inflationary.\nOr it's not fungible, and that's I think the solution that he proposed, is where you value older work more.\nSo you say because this work was generated 10 years ago on a slower computer, we know that more energy was put into it, therefore we can correct for that.\nThen the hope is that the market actually does that.\n\nAaron van Wirdum: 00:39:41\n\nNo, no, the market doesn't have to, if the market doesn't do that, that's even better.\n\nSjors Provoost: 00:39:45\n\nThen it's highly inflationary.\nSo you mine your coins in 1999, you have a hundred of these coins, and now a hundred units of work.\nTen years later, somebody makes a hundred units of work in a fraction of a second, so either your hundred units of work are worth nothing in the future, or they are valued because they are old.\nWhether the market will pick one of these two, I don't think there's any guarantee.\nHe does argue that there are some precedent(s), like that older collector items are worth more, a bit like Ordinals, I guess.\nBut that's not the part of Ordinals that's taking off the most.\n\nAaron van Wirdum: 00:40:18\n\nYeah, or like the misprints of certain postage stamps or something were worth more.\nYeah, so indeed he does argue that.\nThe idea that he proposed was we'll create a market for these strings, for these hashes, and on these markets people can trade them against each other.\nSo that's how the markets can figure out how much a 2005 hash is worth in relation to a 2015 hash.\nSo maybe one 2005 hash is worth ten 2015 hashes.\nI should note all these hashes are also timestamped, they're made in order.\n\nSjors Provoost: 00:41:01\n\nYou can prove that they are a certain age.\n\nAaron van Wirdum: 00:41:06\n\nYeah.\nWhich is also another chapter in my book, Sjors, where I talk about the invention of timestamping.\n\nSjors Provoost: 00:41:12\n\nGreat.\n\nAaron van Wirdum: 00:41:13\n\nI won't get on that detour.\nSo (in) BitGold there's this market for strings and you can figure out how much these strings are worth in relation to each other.\nThen Nick Szabo's vision was there will be sort of banks, like in a free banking type of environment, where these banks will collect the different strings and bundle them together into buckets of strings of the same value.\n\nSjors Provoost: 00:41:39\n\nThis was written before the derivatives markets implosion in 2007, right?\n\nAaron van Wirdum: 00:41:47\n\nYes, we're in 1998, so yes.\n\nSjors Provoost: 00:41:50\n\nYeah, when all these triple A rated buckets and I'm thinking about what happened there.\n\nAaron van Wirdum: 00:41:54\n\nRight, right, right.\nYeah, has nothing to do with this Sjors, but thanks for that color.\nIn my example earlier, where one 2005 hash is worth ten 2015 hashes, one bucket could consist of one 2005 hash, and another bucket could consist of ten 2015 hashes.\nNow you have buckets of the same value.\nThese banks would then use these buckets, or these bundles, whatever you want to call them, to issue coins on top, digital coins still.\nSo for example, every bucket is worth 10,000 coins and these 10,000 coins are issued to people's account(s).\nSo now you have a digital form of cash that people can pay each other with.\n\nSjors Provoost: 00:42:41\n\nThat is actually Digicash, right, that layer on top?\n\nAaron van Wirdum: 00:42:45\n\nYeah, you could use e-cash for that.\nI mean, it doesn't have to, it's free banking, you're free to do whatever you want, Sjors.\nYou could use e-cash for that, if you want to offer privacy to your customers and get customers that way.\nBut yeah, this was the idea.\nSo once you have 10,000 coins in my example, you can exchange them for an actual bucket of strings, and then you have the actual bucket, and you can maybe bring them to another bank.\nAlso because these strings, it's cryptographically provable who owns them, you can also have the proof of reserve type of stuff.\nNick Szabo was already thinking about that kind of stuff to address your 2008 concern, by the way.\n\nSjors Provoost: 00:43:27\n\nYeah, yeah, it's a free banking system.\n\nAaron van Wirdum: 00:43:31\n\nSo this was basically the idea of BitGold, did I miss anything?\n\nSjors Provoost: 00:43:37\n\nYes, so we talked about inflation and I guess these buckets also address the change problem, right?\nBecause another issue is that when you had the original e-cash system, you could go to a shop, and you would come with your 10 euros worth of this stuff, and they would immediately go to the bank, redeem it, and give you your change back.\nSo change wasn't a problem in the original system.\nChange is also not a problem in Bitcoin because the transaction itself creates a change.\nBut in this system these strings don't have change.\nSo what you could do is somebody could make lots of small little pieces of work and distribute those, just like you would distribute small change, and then you go to a shop and you get these little strings back for your change, but it may be easier to do all this on a second layer and just have big buckets somewhere that don't need to be changed all the time.\nBecause also it would mean having to track all the movement of all these mini-strings, like tracking the movement of every penny on the planet.\n\nAaron van Wirdum: 00:44:39\n\nRight, yeah exactly, it's interesting you mentioned that.\nNick Szabo was already thinking about second layer solutions, as are being developed and exist on Bitcoin today.\nThis was also sort of an original Nick Szabo vision to have different layers for different types of transactions.\nSo that's, that's BitGold in a nutshell, I think, Sjors.\n\n## Conclusion\n\nSjors Provoost: 00:45:01\n\nAll right, well then I guess I can conclude that Bitcoin fixes this.\n\nAaron van Wirdum: 00:45:05\n\nYeah, we're going to make one more Genesis Book shill episode, right?\n\nSjors Provoost: 00:45:09\n\nI think so, yeah.\n\nAaron van Wirdum: 00:45:10\n\nMaybe next week or the week after we'll make one on B-money and RPOW.\nCool.\n\nSjors Provoost: 00:45:16\n\nAll right, then, in that case, thank you for listening to Bitcoin.\n\nAaron van Wirdum: 00:45:19\n\nExplained.\n\n",
    "body_type": "markdown",
    "created_at": "2024-01-03T00:00:00.000Z",
    "domain": "https://btctranscripts.com/",
    "url": "https://btctranscripts.com/bitcoin-explained/hashcash-and-bit-gold",
    "categories": [
        "podcast"
    ],
    "media": "https://bitcoinexplainedpodcast.com/@nado/episodes/episode-88-hashcash-and-bit-gold-a5cjn",
    "authors": [
        "Sjors Provoost",
        "Aaron van Wirdum"
    ],
    "indexed_at": "2024-03-21T16:33:36.137Z",
    "transcript_by": "varmur via review.btctranscripts.com",
    "summary": "In a recent episode of \"Bitcoin Explained,\" hosted by Aaron van Wirdum and Sjors Provoost, the prehistory of Bitcoin was meticulously unraveled, taking listeners on a journey through the origins and foundational projects that set the stage for the emergence of cryptocurrency as we know it today. The discussion, fueled by insights from van Wirdum's upcoming release, \"The Genesis Book,\" cast a spotlight on the critical analysis of the individuals and initiatives preceding Bitcoin, weaving through the digital cash concepts that have significantly contributed to the cryptocurrency landscape.\n\nThe conversation intricately explored the broader narrative surrounding the evolution of digital cash, extending beyond mere technological advancements to encapsulate the ideological and economic underpinnings instrumental in shaping the realm of digital currency. This excursion into the past not only highlights the technical innovations leading up to Bitcoin but also situates these developments within a wider socio-political context, emphasizing the importance of understanding Bitcoin\u2019s roots to fully appreciate the complexities of modern cryptocurrencies.\n\nA focal point of the podcast was the examination of Hashcash, developed by Adam Back among the cypherpunks, who were deeply engaged in combating email spam during the 1990s. This challenge catalyzed the creation of digital postage, predicated on computational work to mitigate spam\u2014a concept not entirely novel, as Cynthia Dwork and Moni Naor had previously suggested a similar proof-of-work (PoW) mechanism. These discussions underscore how past challenges and solutions have intricately woven into the fabric of Bitcoin's architecture, highlighting the significance of technological precedents in the development of cryptocurrency.\n\nFurther delving into the origins of PoW mechanisms, the conversation between Provoost and van Wirdum illuminated the pioneering work by Naor and Dwork, whose early iteration of PoW laid the groundwork for significant technologies in digital communication and cryptocurrency. The distinction between stochastic and non-stochastic PoW, as elucidated through Adam Back's Hashcash, revealed crucial implications for systems like Bitcoin, where the network's security and decentralization hinge on the unpredictability of block discovery. This exploration not only emphasized the historical significance of PoW but also its profound impact on the cryptographic and digital currency landscapes.\n\nThe duo also ventured into the realm of digital scarcity through PoW, a concept integral to the inception of digital currencies. The dialogue underscored PoW's reliance on the physical cost of energy, marking a pivotal moment in digital technology by creating something uniquely scarce in the digital domain. Through an engaging examination of one-way functions and secure benchmark functions introduced by Nick Szabo, the conversation shed light on the cryptographic principles underpinning digital scarcity and the practical application of these theories in proposals like BitGold, which aimed at establishing a digital cash system leveraging digital scarcity.\n\nIn a comprehensive exploration of decentralized digital currencies, Provoost and van Wirdum tackled the complexities of ownership and transaction verification within such systems. They discussed the challenges posed by double spending and the quest for consensus without central oversight, drawing on Nick Szabo's vision of an ownership registry. The dialogue further delved into the economic implications of fungibility and value, examining early digital currency proposals' innovative yet untested nature.\n\nConcluding their insightful exchange, the speakers highlighted the historical significance and enduring influence of BitGold on the development of digital currency systems. By examining foundational concepts like Digicash, B-money, and RPOW, they underscored the continuous evolution and expanding understanding of digital currencies, reaffirming the notion that contemporary advancements, particularly Bitcoin, have built upon these early innovations to resolve issues inherent in previous systems.\n\nThrough this engaging narrative, listeners are offered a comprehensive overview of the precursors to Bitcoin, illuminating the historical backdrop and foundational ideas that have shaped the trajectory of digital currency and blockchain technology."
}