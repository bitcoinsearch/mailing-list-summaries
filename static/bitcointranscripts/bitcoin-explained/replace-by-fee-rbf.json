{
    "id": "bitcointranscripts+bitcoin-explained+replace-by-fee-rbf",
    "title": "Replace By Fee (RBF)",
    "body_formatted": "{\"type\":\"heading\",\"text\":\"Introduction\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:01:33\"}, {\"type\":\"paragraph\",\"text\":\"Live from Utrecht, this is the The Van Wirdum Sjorsnado.\\nSjors, I heard Bitcoin is broken.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:01:40\"}, {\"type\":\"paragraph\",\"text\":\"It is.\\nYeah, it was absolutely terrible.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:01:43\"}, {\"type\":\"paragraph\",\"text\":\"A double spend happened.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:01:44\"}, {\"type\":\"paragraph\",\"text\":\"Yep, ruined.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:01:45\"}, {\"type\":\"paragraph\",\"text\":\"And this is because - \\\"a fatal flaw in the Bitcoin protocol.\\\"\\nThat's how it was reported, I think, in Bloomberg?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:01:54\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, I couldn't find the original report by Bloomberg.\\nI think Cointelegraph reported it more or less in that way, and then Bloomberg referred to it.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:02:01\"}, {\"type\":\"paragraph\",\"text\":\"Oh yeah, I think that's what happened.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:02:03\"}, {\"type\":\"paragraph\",\"text\":\"But at least more recent articles I saw from Bloomberg were saying, oh, noobs thought it was broken and they were all googling double spends.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:02:10\"}, {\"type\":\"paragraph\",\"text\":\"Oh, they corrected it?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:02:11\"}, {\"type\":\"paragraph\",\"text\":\"I wouldn't say corrected it.\\nThey were more like, you know, going meta on it.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:02:16\"}, {\"type\":\"paragraph\",\"text\":\"On their own mistake?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:02:18\"}, {\"type\":\"paragraph\",\"text\":\"So I don't know if it was their own mistake because I've only seen the haters basically saying that they made that mistake.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:02:25\"}, {\"type\":\"paragraph\",\"text\":\"Fair enough.\\nOkay so to be clear Bitcoin is not actually broken.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:02:30\"}, {\"type\":\"paragraph\",\"text\":\"Nope it's working as expected.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:02:33\"}, {\"type\":\"paragraph\",\"text\":\"It's working exactly as expected.\\nNow we could get into a discussion on whether or not a double spend happens or not, and that gets into the definition of double spend but we're not going to do that Sjors, instead we're going to explain what was sort of this alleged fatal flaw in the protocol, which was Replace By Fee, RBF.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:02:53\"}, {\"type\":\"paragraph\",\"text\":\"Yes.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:02:53 \"}, {\"type\":\"paragraph\",\"text\":\"That was sort of why this alleged double spend could have happened?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:02:58\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, it could have happened even without that, but...\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:03:00\"}, {\"type\":\"paragraph\",\"text\":\"Oh, sure, yeah.\\nAnd I guess that's the sort of stuff we're going to discuss in this great podcast today.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:03:05\"}, {\"type\":\"paragraph\",\"text\":\"Exactly, so stay with us and you'll learn more.\"}, {\"type\":\"heading\",\"text\":\"RBF Overview\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:03:08\"}, {\"type\":\"paragraph\",\"text\":\"Okay, first of all, Sjors, this thing is called Replace By Fee.\\nJust in brief terms, what does it mean?\\nWhat is Replace By Fee?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:03:15\"}, {\"type\":\"paragraph\",\"text\":\"So it means you have a transaction that might be going from A to B, and you're paying a fee to the miners and you decide it's taking too long because miners will mine the biggest fee first generally, and so you can send the new transaction with the same origin, same destination if you like, and you increase the fee, and then that gets propagated to your peers.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:03:39\"}, {\"type\":\"paragraph\",\"text\":\"Now you've already sort of described the use case.\\nIf we want to put it in more abstract terms, it basically means that if there are conflicting transactions, the miner will pick the highest one, right?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:03:54\"}, {\"type\":\"paragraph\",\"text\":\"Exactly.\\nSo conflicting transactions means spending the same input.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:03:57\"}, {\"type\":\"paragraph\",\"text\":\"I said highest one, I mean the transaction with the highest transaction fee.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:04:01\"}, {\"type\":\"paragraph\",\"text\":\"Yes, that's right.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:04:02\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, so you just described one use case, you're sending a transaction and it's taking too long to confirm, so you send a new transaction with a higher fee.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:04:11\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, and that's a very  reasonable use case, you're sending a transaction with maybe one satoshi per byte because you're not in a hurry but then after a couple days you're like okay this is ridiculous and you bump it to 100 satoshi per byte and it goes in the next block.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:04:25\"}, {\"type\":\"paragraph\",\"text\":\"Or after a month.\\nRight now we have transactions in the mempool that have been there for a month that pay one satoshi.\\nThis is the first time ever I think this has happened.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:04:34\"}, {\"type\":\"paragraph\",\"text\":\"Okay.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:04:35\"}, {\"type\":\"paragraph\",\"text\":\"So, fee market is working, which Sjors, is the next point I want to make.\\nThis is another argument in favor of Replace By Fee, is that it actually allows for more effective fee markets to happen?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:04:48\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, that's right.\\nBecause in 2017, what we saw is that because people did not use Replace By Fee, they saw the mempool was quite full.\\nThey thought, OK, currently the fees might be 50 satoshi per byte.\\nBut I can't change it anymore.\\nSo I'm just going to be safe and I'm going to set it to 100 satoshi per byte.\\nAnd then the next person would say - \\\"Oh, well, that looks really expensive, let's make it 200 satoshi per byte.\\\"\\nSo people were really bidding up against each other much more than was necessary.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:05:15\"}, {\"type\":\"paragraph\",\"text\":\"Exactly.\\nWith Replace By Fee, they could have instead paid, say one satoshi and then keep an eye on the mempool maybe and see, okay, you know what, it looks like my one satoshi transaction isn't going to confirm in the next block.\\nSo you know what, I'm going to bump it to five.\\nAnd then sort of keep an eye on the mempool or wait for half an hour or however much in a hurry they are.\\nAnd in that way, sort of make sure that transaction confirms fast enough, but not overpay to make sure.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:05:44\"}, {\"type\":\"paragraph\",\"text\":\"Exactly, yeah.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:05:45\"}, {\"type\":\"paragraph\",\"text\":\"So we've got two benefits already.\\nOne of the benefits is your transaction gets stuck, you want to get it unstuck.\\nThe second benefit is it allows for better fee markets.\\nThere's a third interesting benefit and I think there are more if we want to get into the details.\\nBut one pretty obvious one is that with Replace By Fee, you can make more efficient use of the Bitcoin blockchain.\\nSo for example, I'm paying you, Sjors, and then next I'm paying Ruben, who's not here today, but I'm also paying Ruben.\\nThe way I could do that with Replace By Fee is I send you one transaction first, and after it I decide that I want to send Ruben a transaction. So now I create a transaction that pays you both and then include a good fee in that.\\nSo now instead of using two different transactions, I can use one transaction, which is more efficient block space wise.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:06:42\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, and exchanges can do this at a much larger scale, right?\\nSo they have lots of customers that they need to pay out and so they create one transaction and that's going to be in the mempool for a while, and so every time another user withdraws coins they just expand that transaction, and then whichever gets in the block - gets in the block and the rest will just make a new transaction.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:07:02\"}, {\"type\":\"paragraph\",\"text\":\"Exactly, they can sort of keep updating this transaction by including more and more recipients.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:07:07\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, which also means more efficient use of the blockchain.\\nSo you get more value for your fee bytes.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:07:14\"}, {\"type\":\"paragraph\",\"text\":\"So there are three pretty good benefits.\\nOne of them is getting transactions unstuck.\\nThe second one is allowing for a more effective fee market.\\nAnd the third one is more block space efficiency.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:07:26\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, and I can mention a fourth one that will actually create a nice bridge to the downside.\\nWhich is, let's say you make a one satoshi per byte transaction to an exchange, and that exchange is called Mt. Gox, and you read on Twitter that this is maybe not a very good exchange.\\nSo you're like, okay maybe I don't want to do this anymore, and you can cancel a transaction because you can create a transaction with a higher fee that just goes back to you.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:07:50\"}, {\"type\":\"paragraph\",\"text\":\"So you're describing it as a benefit now, but like you said, this is what critics of Replace By Fee would consider a detriment.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:08:00\"}, {\"type\":\"paragraph\",\"text\":\"And it is, of course.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:08:02\"}, {\"type\":\"paragraph\",\"text\":\"In a way.\\nThere aren't that many critics of RBF anymore I think.\\nBut yeah, the detriment, the downside is that it allows for double spending if the recipient isn't going to wait for confirmations.\\nSo it's easier to double spend unconfirmed transactions with RBF.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:08:20\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, and this was of course a big discussion, say in 2015, 2016, when this, what we're going to talk about was introduced.\\nA lot of merchant applications would like to be able to just have an instant confirmation essentially, but it wouldn't be confirmed.\\nSo that's inherently risky, but as I guess we'll explain, by default, if everybody played reasonably nice, it wasn't very risky.\\nBut of course, in Bitcoin, we think long term and we don't want to rely on something that just requires too much kumbaya.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:08:50\"}, {\"type\":\"paragraph\",\"text\":\"That was indeed a big discussion on whether or not we should allow RBF in the protocol; I'm saying protocol, but to be clear either way it's not actually a consensus rule.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:09:02\"}, {\"type\":\"paragraph\",\"text\":\"There's a difference between consensus as in what is allowed inside of a block.\\nSo if you see a block with something in it that's not consensus compatible, you will not accept the block, and so the miners won't get their reward, and it's really bad.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:09:15\"}, {\"type\":\"paragraph\",\"text\":\"It's just an invalid transaction, invalid block.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:09:17\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, but there's all sorts of rules that pertain to how the network works, rules about which transactions a node will relay or which ones it will reject.\\nAnd those rules are written in the code.\\nSo if you run the code as it comes, it'll do that, but there's not really any enforcement other than that.\\nYou can change the code or change the setting and it will behave differently.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:09:39\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, these are like peer-to-peer layer rules.\\nAnd importantly, this is also for miners.\\nThis is how they decide which transactions they include in blocks.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:09:49\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, but there it's even more important to realize that miners, of course, are very conscious of their revenue.\\nSo they will probably change something if the code does something that's not favorable for them economically, and they can get away with it, they will do it.\\nPresumably, if it's not some edge case.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:10:05\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, so the reason it was sort of controversial at all in the first place is because the discussion was on whether or not RBF was to be included in Bitcoin Core.\\nAnd most Bitcoin nodes on the network are Bitcoin Core.\\nSo if all Bitcoin Core nodes would, for example, reject Replace By Fee transactions, then it would actually be very hard to get your Replace By Fee transaction to a miner because nodes wouldn't relay it over the network.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:10:34\"}, {\"type\":\"paragraph\",\"text\":\"Right, so you'd have to know who the miner is or there would have to be some nodes that would relay it anyway.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:10:39\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, or you'd have to be a miner or something like that.\\nSo by including Replace By Fee in Bitcoin Core, that's how it would become a bit more easy to make an unconfirmed double spend.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:10:53\"}, {\"type\":\"paragraph\",\"text\":\"Yes.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:10:54\"}, {\"type\":\"paragraph\",\"text\":\"Okay, so that's sort of the argument against Replace By Fee.\\nNow let's debunk that argument, Sjors.\\nCan we?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:11:00\"}, {\"type\":\"paragraph\",\"text\":\"Go ahead. Well, we already did it...\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:11:02\"}, {\"type\":\"paragraph\",\"text\":\"Well, I will first mention...\\nDid we?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:11:05\"}, {\"type\":\"paragraph\",\"text\":\"Well, we at least brought up the point that we don't want to rely on people being nice and people using default settings.\"}, {\"type\":\"heading\",\"text\":\"\\\"First-seen-safe\\\" RBF\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:11:11\"}, {\"type\":\"paragraph\",\"text\":\"Sure, that's the most obvious argument that it's possible whether you like it or not.\\nBut like I said, whether it's included in Bitcoin Core kind of makes a difference on how easy it's going to be.\\nWell, I will mention, first of all, there's a thing called \\\"First-seen-safe\\\" RBF, which people were discussing back in like 2015, 2016.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:11:31\"}, {\"type\":\"paragraph\",\"text\":\"Okay, how does that work?\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:11:32\"}, {\"type\":\"paragraph\",\"text\":\"The idea behind \\\"First-seen-safe\\\" RBF is that you can only replace transactions if the output, if the recipients, get at least the same amount of money.\\nSo that way even an unconfirmed transaction is relatively safe under this context that we're talking about.\\nBecause the transaction can be replaced, but only by adding even more recipients.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:11:58\"}, {\"type\":\"paragraph\",\"text\":\"But there's a huge problem with that, which is that the blockchain has no idea who the change address is.\\nSo normally what happens is...\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:12:06\"}, {\"type\":\"paragraph\",\"text\":\"Well, there's no change address at all.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:12:08\"}, {\"type\":\"paragraph\",\"text\":\"Well yeah, but that's already a problem with Replace By Fee.\\nBut let's say I'm sending you 0.1 Bitcoin and I use a coin worth 0.2 Bitcoin.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:12:17\"}, {\"type\":\"paragraph\",\"text\":\"Oh, sorry, there is a change address.\\nThere isn't a fee address.\\nI was confused.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:12:21\"}, {\"type\":\"paragraph\",\"text\":\"Exactly.\\nThat's good to remind the reader, there is no fee address.\\nThere is just how much I'm sending you and then how much I'm sending myself as change.\\nAnd the difference between that is the fee.\\nThe problem is if I send you 0.1 using a 0.2 coin, the change is going to be 0.1.\\nThen if I want to raise the fee, normally what I would do is I would just lower the change amount.\\nBut with this rule that you just explained, you can't lower the change amount because the blockchain doesn't know, they might think I'm actually cheating the intended recipient rather than myself.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:12:53\"}, {\"type\":\"paragraph\",\"text\":\"Right, that's a good point.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:12:54\"}, {\"type\":\"paragraph\",\"text\":\"So that means you have to add another input every time you want to bump the transaction fee.\\nBut that actually uses more block space, so it gets really expensive really fast.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:13:05\"}, {\"type\":\"paragraph\",\"text\":\"Well, it could still work in the situation we described where an exchange adds new recipients in the payout to the rest, for example.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:13:13\"}, {\"type\":\"paragraph\",\"text\":\"No, they would have the same problem.\\nEvery time they add a new recipient, they would have to add a new input.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:13:19\"}, {\"type\":\"paragraph\",\"text\":\"But that's fine.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:13:20\"}, {\"type\":\"paragraph\",\"text\":\"Well, they'd have to have a Sahara Desert of dust to be able to keep doing that.\\nBecause if they want to pay a thousand people, they need a thousand inputs.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:13:29\"}, {\"type\":\"paragraph\",\"text\":\"I guess you're right.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:13:30\"}, {\"type\":\"paragraph\",\"text\":\"So it does not sound very practical.\\nI've never seen this proposal myself.\\nI was not active at all in Bitcoin Core when this played out.\\nSo, maybe this argument has been mentioned, maybe not.\"}, {\"type\":\"heading\",\"text\":\"Opt-in RBF\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:13:41\"}, {\"type\":\"paragraph\",\"text\":\"Maybe I hadn't heard it actually, but you're right.\\nThen there is Opt-in Replace By Fee.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:13:47\"}, {\"type\":\"paragraph\",\"text\":\"Okay.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:13:48\"}, {\"type\":\"paragraph\",\"text\":\"This is what's actually in Bitcoin Core, right?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:13:50\"}, {\"type\":\"paragraph\",\"text\":\"That's right.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:13:51\"}, {\"type\":\"paragraph\",\"text\":\"Well, what Opt-in Replace By Fee means is the only way Bitcoin Core nodes will replace a transaction, if it includes a higher fee, is if the first transaction includes a special flag, so a sign that tells these nodes, it's fine to replace this transaction if it has a higher fee.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:14:15\"}, {\"type\":\"paragraph\",\"text\":\"Right, and so this is still a way to be nice basically, but if you're a merchant and you're relying on this zero confirmation, if you see this flag you know that this thing might disappear from under you and Bitcoin Core nodes won't try to stop that.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:14:31\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, so the most practical sort of use case for this is if you are a merchant like BitKassa in the Netherlands, I think they will accept an unconfirmed transaction.\\nSo if you're at a bar and you're buying a beer, they have a payment terminal and they will accept unconfirmed transactions unless it has a RBF flag because in that case they're just gonna say we're not sure enough that this transaction is not going to be replaced so this is a rejection from us.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:14:59\"}, {\"type\":\"paragraph\",\"text\":\"Yeah and they have to do that in addition to checking the fee because if you're sending a transaction with a very low fee then it might also never get confirmed and you have a lot of time to try and replace it.\\nSo it's still a can of worms I think is emergent to do this.\\nIt's fine for small amounts I guess.\\nBut then if it's fine for small amounts, why worry about RBF?\\nBut also I guess the discussion now is not as critical as it was then, because now we have Lightning and we have pretty user-friendly wallets to the point where if you really want to accept something fast, Lightning is just much safer and better privacy too.\\nSo back then that wasn't ready yet.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:15:38\"}, {\"type\":\"paragraph\",\"text\":\"Right.\\nYeah, there are still some proponents of full RBF as well.\\nI think Peter Todd is an obvious example, I'm sure there are more.\\nI probably would consider myself one.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:15:48\"}, {\"type\":\"paragraph\",\"text\":\"I vaguely remember a mailing list post maybe a year ago where somebody suggested just turning on full RBF.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:15:56\"}, {\"type\":\"paragraph\",\"text\":\"Right.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:15:57\"}, {\"type\":\"paragraph\",\"text\":\"At some point in the future.\\nI think that didn't end up happening.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:16:01\"}, {\"type\":\"paragraph\",\"text\":\"Right, Peter Todd's arguments, I don't know if these arguments have changed because it's been a couple of years since I wrote this article and spoke with him about this.\\nBut his argument was that the way these types of merchants can be relatively sure that a double spend isn't going to happen with an unconfirmed transaction is by monitoring the network.\\nSo having nodes on different parts of the network and see if there are any conflicting transactions going on.\\nAnd this is in itself a problem that they feel the need to do this because for one, it's bad for privacy, arguably.\\nWell, that's his argument anyways, because these nodes now have a better idea of where transactions originated.\\nAnd two, it's requiring resources from nodes on the network because these spying nodes or whatever you want to call them, these double-spend checking nodes, they have to get blocks and transactions from different nodes on network.\\nSo, they're sort of wasting resources.\\nSo it would be better, Peter Todd would argue, to just go for full RBF to make this kind of practices useless.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:17:11\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, but then those practices don't seem to be happening at a scale that's problematic, as far as I know.\\nSo I don't know whether you want to change it or not.\\nThe other thing is now that everybody's running Lightning nodes, those nodes will have pretty much all of the same problems that you just described.\\nThey have to make sure that nobody's trying to close the channel on them or does anything fancy so, I think we're already at the place where you really need to pay attention to what's happening in the mempool.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:17:38\"}, {\"type\":\"paragraph\",\"text\":\"Right, so there is now a version of Opt-in RBF in Bitcoin Core, and by the way mentioning Peter Todd I think he still maintains like a bunch of nodes that do full RBF.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:17:50\"}, {\"type\":\"paragraph\",\"text\":\"Yeah he used to have a separate release that was full RBF and if you were sure that he wasn't trying to hack you, then...\\nI don't know if he released binaries or just code.\\nIt's just a one-line change.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:18:00\"}, {\"type\":\"paragraph\",\"text\":\"Right, so and the idea was there that people could still use full RBF if they want to, and I'm pretty sure that some miners actually do use full RBF.\\nWhich makes sense because it's incentive compatible for them to do so.\\nThey make the most money if they do so.\\nSo anyways, but in Bitcoin Core, there is the Opt-in RBF version, and I think you have some more details about what it actually does.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:18:22\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, so I guess it's fun to describe it in a little bit more detail.\\nSo given a transaction, like I said, I sent you money and I have some change back to myself, there are five rules that Bitcoin Core will check if I want to replace that transaction.\\nAnd this has been the case since 0.12.\\nSo it's quite a while.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:18:39\"}, {\"type\":\"paragraph\",\"text\":\"Five years ago?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:18:41\"}, {\"type\":\"paragraph\",\"text\":\"Something like that.\\nYeah, 2016.\\nSo if a transaction spends one or more of the same inputs, right, that's the first condition...\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:18:50\"}, {\"type\":\"paragraph\",\"text\":\"That's what makes it RBF in the first place.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:18:53\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, because I can spend twice, that's a bad idea.\\nI could send you 0.1 Bitcoin and have a fee and then create a new transaction that uses different inputs, then of course the blockchain will just mine both of them and I have a problem.\\nSo I have to replace the input and if I do that, then first of all I have to opt into this thing with the flag that we talked about.\\nThat's rule number one.\\nAnd then the rule is the replacement transaction may only include an unconfirmed input if that input was included in one of the original transactions.\\nWhich is a kind of a roundabout way of saying the opposite.\\nI can add new inputs to this new transaction because maybe I want to increase the fee, so I need some extra inputs or I want to add other people.\\nBut this input has to be confirmed if it's a new one.\\nAnd my guess is that this is just to prevent a can of worms where I have a transaction that is unconfirmed and I'm sending it across all the nodes and it doesn't depend on any unconfirmed inputs.\\nAnd now I bump it, but now it does depend on all sorts of unconfirmed inputs.\\nAnd now I'm forcing everybody to figure out where those unconfirmed inputs are and maybe they have a super low fee and I guess it's too complicated to implement.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:20:09\"}, {\"type\":\"paragraph\",\"text\":\"Right, yeah, I can see that.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:20:12\"}, {\"type\":\"paragraph\",\"text\":\"Because think about what this code looks like on Bitcoin core. You see this new transaction and what are you going to do?\\nOh now some of these dependencies are unconfirmed, I have to traverse that whole tree, I don't want to think about that, I only want to think about my descendants.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:20:28\"}, {\"type\":\"paragraph\",\"text\":\"Yeah it would basically allow for types of denial of service attacks I guess where you just...\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:20:34\"}, {\"type\":\"paragraph\",\"text\":\"Yeah my guess is it's both for a denial of service but also just to make the code easier to implement for anybody who writes this this kind of node software.\\nThen, rule number three.\\nThe replacement transaction pays an absolute fee of at least the sum of the original transactions.\\nBecause you can replace one transaction plus a bunch of its descendants, the things spending from that, but the absolute fee has to be the same.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:21:02\"}, {\"type\":\"paragraph\",\"text\":\"Or higher.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:21:02\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, the same or higher, exactly.\\nWhich also means that if I paid you and then you paid somebody else and I want to replace my transaction, then the transaction that you paid to somebody else, I have to at least pay the same fee that was in there.\\nIt's kind of a disincentive for me to re-org from under you because that's one of the annoying things with RBF, right?\\nI'm paying you, you're paying somebody else, now I bump the fee.\\nOh, oops, the transaction you paid to somebody else is now gone.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:21:30\"}, {\"type\":\"paragraph\",\"text\":\"Right.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:21:30\"}, {\"type\":\"paragraph\",\"text\":\"And, well, I would have to really deliberately do that because I would have to increase the fee on my own transaction by enough that it also covers that transaction of yours that I just destroyed.\\nSo in practice, this wouldn't happen.\\nWe would either both agree to send the new transaction and somehow package them, or not.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:21:49\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, there are probably very little, if any, real-world examples where an RBF transaction would have a lower fee.\\nSo it's just to prevent weird attacks and complications.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:22:02\"}, {\"type\":\"paragraph\",\"text\":\"It is an annoying rule, and maybe we'll get to it, but it's probably necessary.\\nAnd then the fourth rule is - it has to increase the fee rate by the minimum relay fee.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:22:12\"}, {\"type\":\"paragraph\",\"text\":\"Sure.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:22:13\"}, {\"type\":\"paragraph\",\"text\":\"So usually at least one satoshi per byte, but if a mempool is full then the minimum relay fee is going to be higher.\\nSo if the mempools are very full then you cannot bump by just one satoshi per byte you may have to bump by 10 satoshis per byte.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:22:27\"}, {\"type\":\"paragraph\",\"text\":\"Right, this could differ from node to node. \\nIf they have different mempools for whatever reason then they might have a different idea of what the minimum relay fee is.\\nSo it might make its way through parts of the network, but not others.\\nIt's possible.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:22:41\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, this is a tricky bit, right?\\nBecause you know from your own node how much is in the mempool, and so you have to estimate what the minimum fee rate is that still goes into your mempool.\\nBut if you just start your node after stopping it, the mempool might be incomplete and so you might be more optimistic about how low the fee increment can be, so it's kind of annoying.\\nBut it does make sense that you don't want people to spam the network.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:23:08\"}, {\"type\":\"paragraph\",\"text\":\"Yep.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:23:08\"}, {\"type\":\"paragraph\",\"text\":\"The fifth rule is, the number of original transactions and their descendant transactions to be evicted from mempool, must not exceed a total of 100 transactions.\\nSo I guess a simple way to say this is that if you do something convoluted that touches more than 100 transactions, it's not going to work.\\nAnd another caveat that I don't think is in these rules, but it is there, is that if you replace a transaction, it has to opt into it, right?\\nEvery one of its inputs has to opt into allowing this fee bump, but also for all the descendants, this has to be true.\\nSo if I send a transaction to you and you send to somebody else, but your transaction does not opt into RBF, then I can't replace my own.\\nAnd also I can opt out of RBF.\\nI can bump the fee once and then I can say, now it's final, so I opt out in the last bump.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:24:05\"}, {\"type\":\"paragraph\",\"text\":\"Oh, that's actually possible?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:24:06\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nAnd this is probably also why there's so many problems, because we could talk about problems.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:24:12\"}, {\"type\":\"paragraph\",\"text\":\"Oh, there are problems?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:24:13\"}, {\"type\":\"paragraph\",\"text\":\"There are problems.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:24:13\"}, {\"type\":\"paragraph\",\"text\":\"Darn.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:24:15\"}, {\"type\":\"paragraph\",\"text\":\"Especially, well, let's start with a simple problem that I don't think I've seen a solution for.\\nLet's say I'm sending you a transaction, but I'm also sending Ruben a transaction.\\nI think we mentioned that example.\\nAnd those are two separate transactions.\\nBut now I think, oh my God, what if I combine those transactions?\\nBecause that will be more efficient.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:24:37\"}, {\"type\":\"paragraph\",\"text\":\"It would be.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:24:37\"}, {\"type\":\"paragraph\",\"text\":\"I can use fewer inputs in particular, because I have one input that goes to you, and I have one input that goes to Ruben, and if I combine them, then they go to both of you.\\nSo that saves me a number of bytes.\\nBut we talked about rule number three, so I don't think we can do that.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:24:57\"}, {\"type\":\"paragraph\",\"text\":\"Oh, because it has a lower absolute fee in that case?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:24:59\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:25:00\"}, {\"type\":\"paragraph\",\"text\":\"Right.\\nSo there actually is a normal example where it would be handy.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:25:03\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, exactly.\\nSo because I've increased the fee rate, because I have to increase the fee rate, but unless I double the fee rate, or I don't know what the factor is, because I've made the transaction smaller, the absolute fee is going to be lower.\\nSo generally merging two transactions is not going to work with the current RBF rules.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:25:20\"}, {\"type\":\"paragraph\",\"text\":\"So the way to go then would be my solution to just not make two separate transactions, but the second one needs to already be the RBF one, needs to already combine the two.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:25:32\"}, {\"type\":\"paragraph\",\"text\":\"The downside of that is you need to track a little bit more things of what's going on.\\nBecause in the example I gave you, if one of them confirms, so if the one with the combined one, if it confirms, then you're done.\\nIf one of the original two confirms, then the combined one won't happen.\\nSo it's more clear which one you need to bump.\\nBut if you start combining things, you need to track more, because one of those versions will confirm, you need to remember which ones to add but you probably have to do something like that anyway, and a wallet can automate it.\\nThis is not really a consumer use case that often because you might send more than one transaction per unit of time but usually it'll probably be confirmed before you get to the next one.\\nBut for exchanges, it's irrelevant, they can build the automatic tracking software.\\nSo maybe this is a non-issue, but I just wanted to bring it up to illustrate the rule.\"}, {\"type\":\"paragraph\",\"text\":\"And then there is transaction pinning, which is a problem with Lightning.\\nAnd here, I think the simplest way to say is, is with Lightning, you have two parties that craft a transaction together, but they have to decide in advance what the fee is going to be.\\nAnd that's annoying because fees can go all over the place.\\nSo when two Lightning nodes are connected, they are constantly renegotiating those transactions and creating new ones, just because they want to take into account the fee weather.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:26:58\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, what you mean, I think, to be clear, is in Lightning, you need to create a transaction with your channel partner, but then sometimes you'll only broadcast that transaction months later, while at the time of negotiating the transaction, that's when you're deciding on what the fee is gonna be.\\nWhile months later maybe that fee is not gonna be enough.\\nThat's the problem.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:27:22\"}, {\"type\":\"paragraph\",\"text\":\"Yeah but as your lightning node is running it's talking to the other side and it will renegotiate.\\nSo it's not too bad.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:27:30\"}, {\"type\":\"paragraph\",\"text\":\"Okay.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:27:30\"}, {\"type\":\"paragraph\",\"text\":\"Regardless, if the channel closes, maybe you don't reach each other, and it might be a very unfavorable fee.\\nSo the idea here would be, wouldn't it be nice if you can agree on a very low fee, but you can RBF it yourself later.\\nAnd so there was some complicated thing done with these lightning transactions as well as a rule in Bitcoin Core that would let you add extra outputs to it.\\nAnd then each of the parties could RBF that, if they wanted to.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:27:56\"}, {\"type\":\"paragraph\",\"text\":\"Right.\\nYep.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:27:57\"}, {\"type\":\"paragraph\",\"text\":\"But the weakness in that story is that if I'm evil, I could basically add a transaction to RBF it, and it would say, opt out of RBF, and the fee would be very low.\\nBecause we talked about this rule that all of the descendants have to opt into RBF.\\nDoes that make sense?\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:28:17\"}, {\"type\":\"paragraph\",\"text\":\"Can you repeat the last part?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:28:19\"}, {\"type\":\"paragraph\",\"text\":\"So I'm doing this RBF transaction, but I'm opting out of it in that RBF transaction.\\nI'm using a very low fee.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:28:24\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, yeah.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:28:24\"}, {\"type\":\"paragraph\",\"text\":\"So now you want to bump that.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:28:27\"}, {\"type\":\"paragraph\",\"text\":\"Oh, right.\\nYeah.\\nGot it.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:28:29\"}, {\"type\":\"paragraph\",\"text\":\"You can't even add your own RBF anymore because one of the descendants is now opting out.\\nAnd there's various shenanigans like that.\\nYou could add a chain of 99 transactions to it, so you violate the 100 maximum rule.\\nYou add 99 transactions with a super low fee, now the other side cannot add number 100 or 101.\\nAnd all sorts of annoying shenanigans that if you go to a Lightning Developer mailing list, it is full of this sort of pure headache.\\nI don't think that just going for a full RBF would really solve that, because the other problem we talked about in another episode is just package relay in general.\\nLike, what do you do with these if somebody wants to replace a chain of 100 transactions?\\nThat can of worms, I'm just going to leave it open, just saying that every now and then on the mailing list you'll see threads and people proposing different solutions and then people explaining why that doesn't work.\"}, {\"type\":\"heading\",\"text\":\"The double spend that wasn't.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:29:24\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nOkay, well, that was getting very into the weeds.\\nLet's get back to the beginning.\\nWhat actually happened with this double spend concretely?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:29:32\"}, {\"type\":\"paragraph\",\"text\":\"Back to our amazing adventure that made it all the way to Bloomberg and crashed the market by 7%.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:29:36\"}, {\"type\":\"paragraph\",\"text\":\"Allegedly, maybe.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:29:38\"}, {\"type\":\"paragraph\",\"text\":\"No, I don't actually believe in astrology.\\nSo basically what happened is [forkmonitor.info](https://forkmonitor.info), a site that I also work on, by BitMEX Research, detected two blocks at the same height.\\nIt's called a stale block, or at least one of them is gonna be stale.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:29:54\"}, {\"type\":\"paragraph\",\"text\":\"One of them is definitely gonna be stale, because, well, for obvious reasons.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:29:57\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, because other miners will see two blocks, and then there's some heuristics, like just build on the first one you saw, for example.\\nAlso nodes will do that.\\nThey will, if all things equal, they'll pick the first one they saw.\\nAnd at some point miners will build on one side or the other and that's going to be the final blockchain.\\nBut now what happens is, in one of those blocks is a transaction that sends money to you, and in the other block is the same input but it goes to me.\\nThat would be a double spend.\\nNow in this case what seemed to be happening is that somebody did an RBF fee bump, but the higher fee ended up in the shortest chain and the lower fee ended up in the longest chain.\\nThis probably wasn't any nefarious thing it's just that those transactions and the fee bumps are moving around the mempools all over the Bitcoin network and you find a block just before you see the increased fee and you miss it.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:30:53\"}, {\"type\":\"paragraph\",\"text\":\"Yeah so that's probably what happened is that there was one fee, and then there was a replacement fee, and while the replacement fee was still making its way over the network and reached one miner that mined a block, it hadn't yet reached another miner that also mined a block at the same time.\\nSo now there were conflicting transactions in the two blocks.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:31:13\"}, {\"type\":\"paragraph\",\"text\":\"Right, and if I remember correctly, this particular transaction also had an `OP_RETURN` script.\\nSo it was probably some sort of protocol, like that's doing some sort of token thing.\\nAnd the `OP_RETURN` script was also changing.\\nSo that's why it was marked as a double spend and not as a fee bump.\\nBecause I wrote the detection code for that.\\nAnd one of the rules was, if the fee changes by a little bit, I'll consider it a fee bump with or without the RBF flag, because maybe people use it or they don't.\\nBut if something weird changes, then it says, just manually investigate, this might be double spend.\\nAnd that, you know, crashed the market.\\nBut yeah, there was nothing going on.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:31:50\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, it resolved exactly like you would expect it to resolve, exactly like how Bitcoin is designed.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:31:55\"}, {\"type\":\"paragraph\",\"text\":\"All right.\\nAnything else then?\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum 00:31:57\"}, {\"type\":\"paragraph\",\"text\":\"No. \"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:31:57\"}, {\"type\":\"paragraph\",\"text\":\"All right.\\nThank you for listening to the Van Wirdum Sjorsnado!\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:32:00\"}, {\"type\":\"paragraph\",\"text\":\"There you go.\"}",
    "body": "## Introduction\n\nAaron van Wirdum: 00:01:33\n\nLive from Utrecht, this is the The Van Wirdum Sjorsnado.\nSjors, I heard Bitcoin is broken.\n\nSjors Provoost: 00:01:40\n\nIt is.\nYeah, it was absolutely terrible.\n\nAaron van Wirdum: 00:01:43\n\nA double spend happened.\n\nSjors Provoost: 00:01:44\n\nYep, ruined.\n\nAaron van Wirdum: 00:01:45\n\nAnd this is because - \"a fatal flaw in the Bitcoin protocol.\"\nThat's how it was reported, I think, in Bloomberg?\n\nSjors Provoost: 00:01:54\n\nYeah, I couldn't find the original report by Bloomberg.\nI think Cointelegraph reported it more or less in that way, and then Bloomberg referred to it.\n\nAaron van Wirdum: 00:02:01\n\nOh yeah, I think that's what happened.\n\nSjors Provoost: 00:02:03\n\nBut at least more recent articles I saw from Bloomberg were saying, oh, noobs thought it was broken and they were all googling double spends.\n\nAaron van Wirdum: 00:02:10\n\nOh, they corrected it?\n\nSjors Provoost: 00:02:11\n\nI wouldn't say corrected it.\nThey were more like, you know, going meta on it.\n\nAaron van Wirdum: 00:02:16\n\nOn their own mistake?\n\nSjors Provoost: 00:02:18\n\nSo I don't know if it was their own mistake because I've only seen the haters basically saying that they made that mistake.\n\nAaron van Wirdum: 00:02:25\n\nFair enough.\nOkay so to be clear Bitcoin is not actually broken.\n\nSjors Provoost: 00:02:30\n\nNope it's working as expected.\n\nAaron van Wirdum: 00:02:33\n\nIt's working exactly as expected.\nNow we could get into a discussion on whether or not a double spend happens or not, and that gets into the definition of double spend but we're not going to do that Sjors, instead we're going to explain what was sort of this alleged fatal flaw in the protocol, which was Replace By Fee, RBF.\n\nSjors Provoost: 00:02:53\n\nYes.\n\nAaron van Wirdum: 00:02:53 \n\nThat was sort of why this alleged double spend could have happened?\n\nSjors Provoost: 00:02:58\n\nYeah, it could have happened even without that, but...\n\nAaron van Wirdum: 00:03:00\n\nOh, sure, yeah.\nAnd I guess that's the sort of stuff we're going to discuss in this great podcast today.\n\nSjors Provoost: 00:03:05\n\nExactly, so stay with us and you'll learn more.\n\n## RBF Overview\n\nAaron van Wirdum: 00:03:08\n\nOkay, first of all, Sjors, this thing is called Replace By Fee.\nJust in brief terms, what does it mean?\nWhat is Replace By Fee?\n\nSjors Provoost: 00:03:15\n\nSo it means you have a transaction that might be going from A to B, and you're paying a fee to the miners and you decide it's taking too long because miners will mine the biggest fee first generally, and so you can send the new transaction with the same origin, same destination if you like, and you increase the fee, and then that gets propagated to your peers.\n\nAaron van Wirdum: 00:03:39\n\nNow you've already sort of described the use case.\nIf we want to put it in more abstract terms, it basically means that if there are conflicting transactions, the miner will pick the highest one, right?\n\nSjors Provoost: 00:03:54\n\nExactly.\nSo conflicting transactions means spending the same input.\n\nAaron van Wirdum: 00:03:57\n\nI said highest one, I mean the transaction with the highest transaction fee.\n\nSjors Provoost: 00:04:01\n\nYes, that's right.\n\nAaron van Wirdum: 00:04:02\n\nYeah, so you just described one use case, you're sending a transaction and it's taking too long to confirm, so you send a new transaction with a higher fee.\n\nSjors Provoost: 00:04:11\n\nYeah, and that's a very  reasonable use case, you're sending a transaction with maybe one satoshi per byte because you're not in a hurry but then after a couple days you're like okay this is ridiculous and you bump it to 100 satoshi per byte and it goes in the next block.\n\nAaron van Wirdum: 00:04:25\n\nOr after a month.\nRight now we have transactions in the mempool that have been there for a month that pay one satoshi.\nThis is the first time ever I think this has happened.\n\nSjors Provoost: 00:04:34\n\nOkay.\n\nAaron van Wirdum: 00:04:35\n\nSo, fee market is working, which Sjors, is the next point I want to make.\nThis is another argument in favor of Replace By Fee, is that it actually allows for more effective fee markets to happen?\n\nSjors Provoost: 00:04:48\n\nYeah, that's right.\nBecause in 2017, what we saw is that because people did not use Replace By Fee, they saw the mempool was quite full.\nThey thought, OK, currently the fees might be 50 satoshi per byte.\nBut I can't change it anymore.\nSo I'm just going to be safe and I'm going to set it to 100 satoshi per byte.\nAnd then the next person would say - \"Oh, well, that looks really expensive, let's make it 200 satoshi per byte.\"\nSo people were really bidding up against each other much more than was necessary.\n\nAaron van Wirdum: 00:05:15\n\nExactly.\nWith Replace By Fee, they could have instead paid, say one satoshi and then keep an eye on the mempool maybe and see, okay, you know what, it looks like my one satoshi transaction isn't going to confirm in the next block.\nSo you know what, I'm going to bump it to five.\nAnd then sort of keep an eye on the mempool or wait for half an hour or however much in a hurry they are.\nAnd in that way, sort of make sure that transaction confirms fast enough, but not overpay to make sure.\n\nSjors Provoost: 00:05:44\n\nExactly, yeah.\n\nAaron van Wirdum: 00:05:45\n\nSo we've got two benefits already.\nOne of the benefits is your transaction gets stuck, you want to get it unstuck.\nThe second benefit is it allows for better fee markets.\nThere's a third interesting benefit and I think there are more if we want to get into the details.\nBut one pretty obvious one is that with Replace By Fee, you can make more efficient use of the Bitcoin blockchain.\nSo for example, I'm paying you, Sjors, and then next I'm paying Ruben, who's not here today, but I'm also paying Ruben.\nThe way I could do that with Replace By Fee is I send you one transaction first, and after it I decide that I want to send Ruben a transaction. So now I create a transaction that pays you both and then include a good fee in that.\nSo now instead of using two different transactions, I can use one transaction, which is more efficient block space wise.\n\nSjors Provoost: 00:06:42\n\nYeah, and exchanges can do this at a much larger scale, right?\nSo they have lots of customers that they need to pay out and so they create one transaction and that's going to be in the mempool for a while, and so every time another user withdraws coins they just expand that transaction, and then whichever gets in the block - gets in the block and the rest will just make a new transaction.\n\nAaron van Wirdum: 00:07:02\n\nExactly, they can sort of keep updating this transaction by including more and more recipients.\n\nSjors Provoost: 00:07:07\n\nYeah, which also means more efficient use of the blockchain.\nSo you get more value for your fee bytes.\n\nAaron van Wirdum: 00:07:14\n\nSo there are three pretty good benefits.\nOne of them is getting transactions unstuck.\nThe second one is allowing for a more effective fee market.\nAnd the third one is more block space efficiency.\n\nSjors Provoost: 00:07:26\n\nYeah, and I can mention a fourth one that will actually create a nice bridge to the downside.\nWhich is, let's say you make a one satoshi per byte transaction to an exchange, and that exchange is called Mt. Gox, and you read on Twitter that this is maybe not a very good exchange.\nSo you're like, okay maybe I don't want to do this anymore, and you can cancel a transaction because you can create a transaction with a higher fee that just goes back to you.\n\nAaron van Wirdum: 00:07:50\n\nSo you're describing it as a benefit now, but like you said, this is what critics of Replace By Fee would consider a detriment.\n\nSjors Provoost: 00:08:00\n\nAnd it is, of course.\n\nAaron van Wirdum: 00:08:02\n\nIn a way.\nThere aren't that many critics of RBF anymore I think.\nBut yeah, the detriment, the downside is that it allows for double spending if the recipient isn't going to wait for confirmations.\nSo it's easier to double spend unconfirmed transactions with RBF.\n\nSjors Provoost: 00:08:20\n\nYeah, and this was of course a big discussion, say in 2015, 2016, when this, what we're going to talk about was introduced.\nA lot of merchant applications would like to be able to just have an instant confirmation essentially, but it wouldn't be confirmed.\nSo that's inherently risky, but as I guess we'll explain, by default, if everybody played reasonably nice, it wasn't very risky.\nBut of course, in Bitcoin, we think long term and we don't want to rely on something that just requires too much kumbaya.\n\nAaron van Wirdum: 00:08:50\n\nThat was indeed a big discussion on whether or not we should allow RBF in the protocol; I'm saying protocol, but to be clear either way it's not actually a consensus rule.\n\nSjors Provoost: 00:09:02\n\nThere's a difference between consensus as in what is allowed inside of a block.\nSo if you see a block with something in it that's not consensus compatible, you will not accept the block, and so the miners won't get their reward, and it's really bad.\n\nAaron van Wirdum: 00:09:15\n\nIt's just an invalid transaction, invalid block.\n\nSjors Provoost: 00:09:17\n\nYeah, but there's all sorts of rules that pertain to how the network works, rules about which transactions a node will relay or which ones it will reject.\nAnd those rules are written in the code.\nSo if you run the code as it comes, it'll do that, but there's not really any enforcement other than that.\nYou can change the code or change the setting and it will behave differently.\n\nAaron van Wirdum: 00:09:39\n\nYeah, these are like peer-to-peer layer rules.\nAnd importantly, this is also for miners.\nThis is how they decide which transactions they include in blocks.\n\nSjors Provoost: 00:09:49\n\nYeah, but there it's even more important to realize that miners, of course, are very conscious of their revenue.\nSo they will probably change something if the code does something that's not favorable for them economically, and they can get away with it, they will do it.\nPresumably, if it's not some edge case.\n\nAaron van Wirdum: 00:10:05\n\nYeah, so the reason it was sort of controversial at all in the first place is because the discussion was on whether or not RBF was to be included in Bitcoin Core.\nAnd most Bitcoin nodes on the network are Bitcoin Core.\nSo if all Bitcoin Core nodes would, for example, reject Replace By Fee transactions, then it would actually be very hard to get your Replace By Fee transaction to a miner because nodes wouldn't relay it over the network.\n\nSjors Provoost: 00:10:34\n\nRight, so you'd have to know who the miner is or there would have to be some nodes that would relay it anyway.\n\nAaron van Wirdum: 00:10:39\n\nYeah, or you'd have to be a miner or something like that.\nSo by including Replace By Fee in Bitcoin Core, that's how it would become a bit more easy to make an unconfirmed double spend.\n\nSjors Provoost: 00:10:53\n\nYes.\n\nAaron van Wirdum: 00:10:54\n\nOkay, so that's sort of the argument against Replace By Fee.\nNow let's debunk that argument, Sjors.\nCan we?\n\nSjors Provoost: 00:11:00\n\nGo ahead. Well, we already did it...\n\nAaron van Wirdum: 00:11:02\n\nWell, I will first mention...\nDid we?\n\nSjors Provoost: 00:11:05\n\nWell, we at least brought up the point that we don't want to rely on people being nice and people using default settings.\n\n## \"First-seen-safe\" RBF\n\nAaron van Wirdum: 00:11:11\n\nSure, that's the most obvious argument that it's possible whether you like it or not.\nBut like I said, whether it's included in Bitcoin Core kind of makes a difference on how easy it's going to be.\nWell, I will mention, first of all, there's a thing called \"First-seen-safe\" RBF, which people were discussing back in like 2015, 2016.\n\nSjors Provoost: 00:11:31\n\nOkay, how does that work?\n\nAaron van Wirdum: 00:11:32\n\nThe idea behind \"First-seen-safe\" RBF is that you can only replace transactions if the output, if the recipients, get at least the same amount of money.\nSo that way even an unconfirmed transaction is relatively safe under this context that we're talking about.\nBecause the transaction can be replaced, but only by adding even more recipients.\n\nSjors Provoost: 00:11:58\n\nBut there's a huge problem with that, which is that the blockchain has no idea who the change address is.\nSo normally what happens is...\n\nAaron van Wirdum: 00:12:06\n\nWell, there's no change address at all.\n\nSjors Provoost: 00:12:08\n\nWell yeah, but that's already a problem with Replace By Fee.\nBut let's say I'm sending you 0.1 Bitcoin and I use a coin worth 0.2 Bitcoin.\n\nAaron van Wirdum: 00:12:17\n\nOh, sorry, there is a change address.\nThere isn't a fee address.\nI was confused.\n\nSjors Provoost: 00:12:21\n\nExactly.\nThat's good to remind the reader, there is no fee address.\nThere is just how much I'm sending you and then how much I'm sending myself as change.\nAnd the difference between that is the fee.\nThe problem is if I send you 0.1 using a 0.2 coin, the change is going to be 0.1.\nThen if I want to raise the fee, normally what I would do is I would just lower the change amount.\nBut with this rule that you just explained, you can't lower the change amount because the blockchain doesn't know, they might think I'm actually cheating the intended recipient rather than myself.\n\nAaron van Wirdum: 00:12:53\n\nRight, that's a good point.\n\nSjors Provoost: 00:12:54\n\nSo that means you have to add another input every time you want to bump the transaction fee.\nBut that actually uses more block space, so it gets really expensive really fast.\n\nAaron van Wirdum: 00:13:05\n\nWell, it could still work in the situation we described where an exchange adds new recipients in the payout to the rest, for example.\n\nSjors Provoost: 00:13:13\n\nNo, they would have the same problem.\nEvery time they add a new recipient, they would have to add a new input.\n\nAaron van Wirdum: 00:13:19\n\nBut that's fine.\n\nSjors Provoost: 00:13:20\n\nWell, they'd have to have a Sahara Desert of dust to be able to keep doing that.\nBecause if they want to pay a thousand people, they need a thousand inputs.\n\nAaron van Wirdum: 00:13:29\n\nI guess you're right.\n\nSjors Provoost: 00:13:30\n\nSo it does not sound very practical.\nI've never seen this proposal myself.\nI was not active at all in Bitcoin Core when this played out.\nSo, maybe this argument has been mentioned, maybe not.\n\n## Opt-in RBF\n\nAaron van Wirdum: 00:13:41\n\nMaybe I hadn't heard it actually, but you're right.\nThen there is Opt-in Replace By Fee.\n\nSjors Provoost: 00:13:47\n\nOkay.\n\nAaron van Wirdum: 00:13:48\n\nThis is what's actually in Bitcoin Core, right?\n\nSjors Provoost: 00:13:50\n\nThat's right.\n\nAaron van Wirdum: 00:13:51\n\nWell, what Opt-in Replace By Fee means is the only way Bitcoin Core nodes will replace a transaction, if it includes a higher fee, is if the first transaction includes a special flag, so a sign that tells these nodes, it's fine to replace this transaction if it has a higher fee.\n\nSjors Provoost: 00:14:15\n\nRight, and so this is still a way to be nice basically, but if you're a merchant and you're relying on this zero confirmation, if you see this flag you know that this thing might disappear from under you and Bitcoin Core nodes won't try to stop that.\n\nAaron van Wirdum: 00:14:31\n\nYeah, so the most practical sort of use case for this is if you are a merchant like BitKassa in the Netherlands, I think they will accept an unconfirmed transaction.\nSo if you're at a bar and you're buying a beer, they have a payment terminal and they will accept unconfirmed transactions unless it has a RBF flag because in that case they're just gonna say we're not sure enough that this transaction is not going to be replaced so this is a rejection from us.\n\nSjors Provoost: 00:14:59\n\nYeah and they have to do that in addition to checking the fee because if you're sending a transaction with a very low fee then it might also never get confirmed and you have a lot of time to try and replace it.\nSo it's still a can of worms I think is emergent to do this.\nIt's fine for small amounts I guess.\nBut then if it's fine for small amounts, why worry about RBF?\nBut also I guess the discussion now is not as critical as it was then, because now we have Lightning and we have pretty user-friendly wallets to the point where if you really want to accept something fast, Lightning is just much safer and better privacy too.\nSo back then that wasn't ready yet.\n\nAaron van Wirdum: 00:15:38\n\nRight.\nYeah, there are still some proponents of full RBF as well.\nI think Peter Todd is an obvious example, I'm sure there are more.\nI probably would consider myself one.\n\nSjors Provoost: 00:15:48\n\nI vaguely remember a mailing list post maybe a year ago where somebody suggested just turning on full RBF.\n\nAaron van Wirdum: 00:15:56\n\nRight.\n\nSjors Provoost: 00:15:57\n\nAt some point in the future.\nI think that didn't end up happening.\n\nAaron van Wirdum: 00:16:01\n\nRight, Peter Todd's arguments, I don't know if these arguments have changed because it's been a couple of years since I wrote this article and spoke with him about this.\nBut his argument was that the way these types of merchants can be relatively sure that a double spend isn't going to happen with an unconfirmed transaction is by monitoring the network.\nSo having nodes on different parts of the network and see if there are any conflicting transactions going on.\nAnd this is in itself a problem that they feel the need to do this because for one, it's bad for privacy, arguably.\nWell, that's his argument anyways, because these nodes now have a better idea of where transactions originated.\nAnd two, it's requiring resources from nodes on the network because these spying nodes or whatever you want to call them, these double-spend checking nodes, they have to get blocks and transactions from different nodes on network.\nSo, they're sort of wasting resources.\nSo it would be better, Peter Todd would argue, to just go for full RBF to make this kind of practices useless.\n\nSjors Provoost: 00:17:11\n\nYeah, but then those practices don't seem to be happening at a scale that's problematic, as far as I know.\nSo I don't know whether you want to change it or not.\nThe other thing is now that everybody's running Lightning nodes, those nodes will have pretty much all of the same problems that you just described.\nThey have to make sure that nobody's trying to close the channel on them or does anything fancy so, I think we're already at the place where you really need to pay attention to what's happening in the mempool.\n\nAaron van Wirdum: 00:17:38\n\nRight, so there is now a version of Opt-in RBF in Bitcoin Core, and by the way mentioning Peter Todd I think he still maintains like a bunch of nodes that do full RBF.\n\nSjors Provoost: 00:17:50\n\nYeah he used to have a separate release that was full RBF and if you were sure that he wasn't trying to hack you, then...\nI don't know if he released binaries or just code.\nIt's just a one-line change.\n\nAaron van Wirdum: 00:18:00\n\nRight, so and the idea was there that people could still use full RBF if they want to, and I'm pretty sure that some miners actually do use full RBF.\nWhich makes sense because it's incentive compatible for them to do so.\nThey make the most money if they do so.\nSo anyways, but in Bitcoin Core, there is the Opt-in RBF version, and I think you have some more details about what it actually does.\n\nSjors Provoost: 00:18:22\n\nYeah, so I guess it's fun to describe it in a little bit more detail.\nSo given a transaction, like I said, I sent you money and I have some change back to myself, there are five rules that Bitcoin Core will check if I want to replace that transaction.\nAnd this has been the case since 0.12.\nSo it's quite a while.\n\nAaron van Wirdum: 00:18:39\n\nFive years ago?\n\nSjors Provoost: 00:18:41\n\nSomething like that.\nYeah, 2016.\nSo if a transaction spends one or more of the same inputs, right, that's the first condition...\n\nAaron van Wirdum: 00:18:50\n\nThat's what makes it RBF in the first place.\n\nSjors Provoost: 00:18:53\n\nYeah, because I can spend twice, that's a bad idea.\nI could send you 0.1 Bitcoin and have a fee and then create a new transaction that uses different inputs, then of course the blockchain will just mine both of them and I have a problem.\nSo I have to replace the input and if I do that, then first of all I have to opt into this thing with the flag that we talked about.\nThat's rule number one.\nAnd then the rule is the replacement transaction may only include an unconfirmed input if that input was included in one of the original transactions.\nWhich is a kind of a roundabout way of saying the opposite.\nI can add new inputs to this new transaction because maybe I want to increase the fee, so I need some extra inputs or I want to add other people.\nBut this input has to be confirmed if it's a new one.\nAnd my guess is that this is just to prevent a can of worms where I have a transaction that is unconfirmed and I'm sending it across all the nodes and it doesn't depend on any unconfirmed inputs.\nAnd now I bump it, but now it does depend on all sorts of unconfirmed inputs.\nAnd now I'm forcing everybody to figure out where those unconfirmed inputs are and maybe they have a super low fee and I guess it's too complicated to implement.\n\nAaron van Wirdum: 00:20:09\n\nRight, yeah, I can see that.\n\nSjors Provoost: 00:20:12\n\nBecause think about what this code looks like on Bitcoin core. You see this new transaction and what are you going to do?\nOh now some of these dependencies are unconfirmed, I have to traverse that whole tree, I don't want to think about that, I only want to think about my descendants.\n\nAaron van Wirdum: 00:20:28\n\nYeah it would basically allow for types of denial of service attacks I guess where you just...\n\nSjors Provoost: 00:20:34\n\nYeah my guess is it's both for a denial of service but also just to make the code easier to implement for anybody who writes this this kind of node software.\nThen, rule number three.\nThe replacement transaction pays an absolute fee of at least the sum of the original transactions.\nBecause you can replace one transaction plus a bunch of its descendants, the things spending from that, but the absolute fee has to be the same.\n\nAaron van Wirdum: 00:21:02\n\nOr higher.\n\nSjors Provoost: 00:21:02\n\nYeah, the same or higher, exactly.\nWhich also means that if I paid you and then you paid somebody else and I want to replace my transaction, then the transaction that you paid to somebody else, I have to at least pay the same fee that was in there.\nIt's kind of a disincentive for me to re-org from under you because that's one of the annoying things with RBF, right?\nI'm paying you, you're paying somebody else, now I bump the fee.\nOh, oops, the transaction you paid to somebody else is now gone.\n\nAaron van Wirdum: 00:21:30\n\nRight.\n\nSjors Provoost: 00:21:30\n\nAnd, well, I would have to really deliberately do that because I would have to increase the fee on my own transaction by enough that it also covers that transaction of yours that I just destroyed.\nSo in practice, this wouldn't happen.\nWe would either both agree to send the new transaction and somehow package them, or not.\n\nAaron van Wirdum: 00:21:49\n\nYeah, there are probably very little, if any, real-world examples where an RBF transaction would have a lower fee.\nSo it's just to prevent weird attacks and complications.\n\nSjors Provoost: 00:22:02\n\nIt is an annoying rule, and maybe we'll get to it, but it's probably necessary.\nAnd then the fourth rule is - it has to increase the fee rate by the minimum relay fee.\n\nAaron van Wirdum: 00:22:12\n\nSure.\n\nSjors Provoost: 00:22:13\n\nSo usually at least one satoshi per byte, but if a mempool is full then the minimum relay fee is going to be higher.\nSo if the mempools are very full then you cannot bump by just one satoshi per byte you may have to bump by 10 satoshis per byte.\n\nAaron van Wirdum: 00:22:27\n\nRight, this could differ from node to node. \nIf they have different mempools for whatever reason then they might have a different idea of what the minimum relay fee is.\nSo it might make its way through parts of the network, but not others.\nIt's possible.\n\nSjors Provoost: 00:22:41\n\nYeah, this is a tricky bit, right?\nBecause you know from your own node how much is in the mempool, and so you have to estimate what the minimum fee rate is that still goes into your mempool.\nBut if you just start your node after stopping it, the mempool might be incomplete and so you might be more optimistic about how low the fee increment can be, so it's kind of annoying.\nBut it does make sense that you don't want people to spam the network.\n\nAaron van Wirdum: 00:23:08\n\nYep.\n\nSjors Provoost: 00:23:08\n\nThe fifth rule is, the number of original transactions and their descendant transactions to be evicted from mempool, must not exceed a total of 100 transactions.\nSo I guess a simple way to say this is that if you do something convoluted that touches more than 100 transactions, it's not going to work.\nAnd another caveat that I don't think is in these rules, but it is there, is that if you replace a transaction, it has to opt into it, right?\nEvery one of its inputs has to opt into allowing this fee bump, but also for all the descendants, this has to be true.\nSo if I send a transaction to you and you send to somebody else, but your transaction does not opt into RBF, then I can't replace my own.\nAnd also I can opt out of RBF.\nI can bump the fee once and then I can say, now it's final, so I opt out in the last bump.\n\nAaron van Wirdum: 00:24:05\n\nOh, that's actually possible?\n\nSjors Provoost: 00:24:06\n\nYeah.\nAnd this is probably also why there's so many problems, because we could talk about problems.\n\nAaron van Wirdum: 00:24:12\n\nOh, there are problems?\n\nSjors Provoost: 00:24:13\n\nThere are problems.\n\nAaron van Wirdum: 00:24:13\n\nDarn.\n\nSjors Provoost: 00:24:15\n\nEspecially, well, let's start with a simple problem that I don't think I've seen a solution for.\nLet's say I'm sending you a transaction, but I'm also sending Ruben a transaction.\nI think we mentioned that example.\nAnd those are two separate transactions.\nBut now I think, oh my God, what if I combine those transactions?\nBecause that will be more efficient.\n\nAaron van Wirdum: 00:24:37\n\nIt would be.\n\nSjors Provoost: 00:24:37\n\nI can use fewer inputs in particular, because I have one input that goes to you, and I have one input that goes to Ruben, and if I combine them, then they go to both of you.\nSo that saves me a number of bytes.\nBut we talked about rule number three, so I don't think we can do that.\n\nAaron van Wirdum: 00:24:57\n\nOh, because it has a lower absolute fee in that case?\n\nSjors Provoost: 00:24:59\n\nYeah.\n\nAaron van Wirdum: 00:25:00\n\nRight.\nSo there actually is a normal example where it would be handy.\n\nSjors Provoost: 00:25:03\n\nYeah, exactly.\nSo because I've increased the fee rate, because I have to increase the fee rate, but unless I double the fee rate, or I don't know what the factor is, because I've made the transaction smaller, the absolute fee is going to be lower.\nSo generally merging two transactions is not going to work with the current RBF rules.\n\nAaron van Wirdum: 00:25:20\n\nSo the way to go then would be my solution to just not make two separate transactions, but the second one needs to already be the RBF one, needs to already combine the two.\n\nSjors Provoost: 00:25:32\n\nThe downside of that is you need to track a little bit more things of what's going on.\nBecause in the example I gave you, if one of them confirms, so if the one with the combined one, if it confirms, then you're done.\nIf one of the original two confirms, then the combined one won't happen.\nSo it's more clear which one you need to bump.\nBut if you start combining things, you need to track more, because one of those versions will confirm, you need to remember which ones to add but you probably have to do something like that anyway, and a wallet can automate it.\nThis is not really a consumer use case that often because you might send more than one transaction per unit of time but usually it'll probably be confirmed before you get to the next one.\nBut for exchanges, it's irrelevant, they can build the automatic tracking software.\nSo maybe this is a non-issue, but I just wanted to bring it up to illustrate the rule.\n\nAnd then there is transaction pinning, which is a problem with Lightning.\nAnd here, I think the simplest way to say is, is with Lightning, you have two parties that craft a transaction together, but they have to decide in advance what the fee is going to be.\nAnd that's annoying because fees can go all over the place.\nSo when two Lightning nodes are connected, they are constantly renegotiating those transactions and creating new ones, just because they want to take into account the fee weather.\n\nAaron van Wirdum: 00:26:58\n\nYeah, what you mean, I think, to be clear, is in Lightning, you need to create a transaction with your channel partner, but then sometimes you'll only broadcast that transaction months later, while at the time of negotiating the transaction, that's when you're deciding on what the fee is gonna be.\nWhile months later maybe that fee is not gonna be enough.\nThat's the problem.\n\nSjors Provoost: 00:27:22\n\nYeah but as your lightning node is running it's talking to the other side and it will renegotiate.\nSo it's not too bad.\n\nAaron van Wirdum: 00:27:30\n\nOkay.\n\nSjors Provoost: 00:27:30\n\nRegardless, if the channel closes, maybe you don't reach each other, and it might be a very unfavorable fee.\nSo the idea here would be, wouldn't it be nice if you can agree on a very low fee, but you can RBF it yourself later.\nAnd so there was some complicated thing done with these lightning transactions as well as a rule in Bitcoin Core that would let you add extra outputs to it.\nAnd then each of the parties could RBF that, if they wanted to.\n\nAaron van Wirdum: 00:27:56\n\nRight.\nYep.\n\nSjors Provoost: 00:27:57\n\nBut the weakness in that story is that if I'm evil, I could basically add a transaction to RBF it, and it would say, opt out of RBF, and the fee would be very low.\nBecause we talked about this rule that all of the descendants have to opt into RBF.\nDoes that make sense?\n\nAaron van Wirdum: 00:28:17\n\nCan you repeat the last part?\n\nSjors Provoost: 00:28:19\n\nSo I'm doing this RBF transaction, but I'm opting out of it in that RBF transaction.\nI'm using a very low fee.\n\nAaron van Wirdum: 00:28:24\n\nYeah, yeah.\n\nSjors Provoost: 00:28:24\n\nSo now you want to bump that.\n\nAaron van Wirdum: 00:28:27\n\nOh, right.\nYeah.\nGot it.\n\nSjors Provoost: 00:28:29\n\nYou can't even add your own RBF anymore because one of the descendants is now opting out.\nAnd there's various shenanigans like that.\nYou could add a chain of 99 transactions to it, so you violate the 100 maximum rule.\nYou add 99 transactions with a super low fee, now the other side cannot add number 100 or 101.\nAnd all sorts of annoying shenanigans that if you go to a Lightning Developer mailing list, it is full of this sort of pure headache.\nI don't think that just going for a full RBF would really solve that, because the other problem we talked about in another episode is just package relay in general.\nLike, what do you do with these if somebody wants to replace a chain of 100 transactions?\nThat can of worms, I'm just going to leave it open, just saying that every now and then on the mailing list you'll see threads and people proposing different solutions and then people explaining why that doesn't work.\n\n## The double spend that wasn't.\n\nAaron van Wirdum: 00:29:24\n\nYeah.\nOkay, well, that was getting very into the weeds.\nLet's get back to the beginning.\nWhat actually happened with this double spend concretely?\n\nSjors Provoost: 00:29:32\n\nBack to our amazing adventure that made it all the way to Bloomberg and crashed the market by 7%.\n\nAaron van Wirdum: 00:29:36\n\nAllegedly, maybe.\n\nSjors Provoost: 00:29:38\n\nNo, I don't actually believe in astrology.\nSo basically what happened is [forkmonitor.info](https://forkmonitor.info), a site that I also work on, by BitMEX Research, detected two blocks at the same height.\nIt's called a stale block, or at least one of them is gonna be stale.\n\nAaron van Wirdum: 00:29:54\n\nOne of them is definitely gonna be stale, because, well, for obvious reasons.\n\nSjors Provoost: 00:29:57\n\nYeah, because other miners will see two blocks, and then there's some heuristics, like just build on the first one you saw, for example.\nAlso nodes will do that.\nThey will, if all things equal, they'll pick the first one they saw.\nAnd at some point miners will build on one side or the other and that's going to be the final blockchain.\nBut now what happens is, in one of those blocks is a transaction that sends money to you, and in the other block is the same input but it goes to me.\nThat would be a double spend.\nNow in this case what seemed to be happening is that somebody did an RBF fee bump, but the higher fee ended up in the shortest chain and the lower fee ended up in the longest chain.\nThis probably wasn't any nefarious thing it's just that those transactions and the fee bumps are moving around the mempools all over the Bitcoin network and you find a block just before you see the increased fee and you miss it.\n\nAaron van Wirdum: 00:30:53\n\nYeah so that's probably what happened is that there was one fee, and then there was a replacement fee, and while the replacement fee was still making its way over the network and reached one miner that mined a block, it hadn't yet reached another miner that also mined a block at the same time.\nSo now there were conflicting transactions in the two blocks.\n\nSjors Provoost: 00:31:13\n\nRight, and if I remember correctly, this particular transaction also had an `OP_RETURN` script.\nSo it was probably some sort of protocol, like that's doing some sort of token thing.\nAnd the `OP_RETURN` script was also changing.\nSo that's why it was marked as a double spend and not as a fee bump.\nBecause I wrote the detection code for that.\nAnd one of the rules was, if the fee changes by a little bit, I'll consider it a fee bump with or without the RBF flag, because maybe people use it or they don't.\nBut if something weird changes, then it says, just manually investigate, this might be double spend.\nAnd that, you know, crashed the market.\nBut yeah, there was nothing going on.\n\nAaron van Wirdum: 00:31:50\n\nYeah, it resolved exactly like you would expect it to resolve, exactly like how Bitcoin is designed.\n\nSjors Provoost: 00:31:55\n\nAll right.\nAnything else then?\n\nAaron van Wirdum 00:31:57\n\nNo. \n\nSjors Provoost: 00:31:57\n\nAll right.\nThank you for listening to the Van Wirdum Sjorsnado!\n\nAaron van Wirdum: 00:32:00\n\nThere you go.\n\n",
    "body_type": "markdown",
    "created_at": "2021-02-05T00:00:00.000Z",
    "domain": "https://btctranscripts.com/",
    "url": "https://btctranscripts.com/bitcoin-explained/replace-by-fee-rbf",
    "categories": [
        "podcast"
    ],
    "tags": [
        "rbf"
    ],
    "media": "https://www.youtube.com/watch?v=E9L1CRP3W8k",
    "authors": [
        "Aaron van Wirdum",
        "Sjors Provoost"
    ],
    "indexed_at": "2024-03-21T16:33:36.153Z",
    "transcript_by": "varmur via review.btctranscripts.com",
    "summary": "In a recent episode of The Van Wirdum Sjorsnado, Aaron van Wirdum and Sjors Provoost engaged in a detailed examination of the Replace By Fee (RBF) feature within the Bitcoin network, elucidating its mechanics, benefits, and the controversies it harbors. They initiated their discussion by addressing the panic incited by a misunderstood event that was misconstrued as a double spend, which highlighted not only the technical complexities of Bitcoin transactions but also the susceptibility of the market to misinformation. This instance underscored the importance of understanding Bitcoin's operational principles to prevent unwarranted concerns.\n\nDelving into the specifics of RBF, Provoost explained how this mechanism allows users to amend the fee of an unconfirmed transaction, thereby offering a method to prioritize their transaction within the network. This capability is instrumental for users during periods of high demand on the network, ensuring that transactions can be processed more efficiently without unnecessarily inflating costs. Moreover, RBF aids in optimizing the utilization of block space by allowing the consolidation of multiple payments into a single transaction with an updated fee, presenting a practical solution for entities like exchanges that handle a plethora of customer withdrawals.\n\nHowever, the conversation also ventured into the criticism surrounding RBF, particularly its potential exploitation for conducting double spends in contexts where merchants accept unconfirmed transactions. Despite these concerns, the broader Bitcoin community has generally accepted RBF, recognizing its benefits in enhancing network efficiency and user experience. The dialogue between van Wirdum and Provoost also touched upon the implementation challenges and criticisms of RBF, including the reluctance of nodes to relay RBF transactions due to perceived risks of facilitating unconfirmed double spending.\n\nFurthermore, they discussed \"First-seen-safe\" RBF and Opt-in RBF, distinguishing between their operational mechanisms and implications for transaction security. While \"First-seen-safe\" RBF aims to protect transactions by permitting fee increases without reducing the recipient's amount, Opt-in RBF introduces a flag that signals a transaction's eligibility for replacement under higher fee offers, providing a layer of security for zero confirmation transactions.\n\nThe podcast also referenced Peter Todd's advocacy for full RBF, arguing that it aligns with miners' economic incentives and could render obsolete certain practices that compromise privacy and network efficiency. In exploring the technical intricacies of Opt-in RBF encoded in Bitcoin Core, van Wirdum and Provoost illuminated the nuanced considerations that govern transaction replacements, emphasizing the evolving landscape of Bitcoin transactions amidst developments like the Lightning Network.\n\nLastly, the episode addressed a specific incident of a reported double spend, which was actually a consequence of an RBF fee bump in a scenario involving a stale block. This incident, initially flagged as a concern by forkmonitor.info, was clarified by Provoost as aligning with Bitcoin's design, highlighting the critical role of accurate information dissemination in maintaining market stability.\n\nThrough their comprehensive discussion, Aaron van Wirdum and Sjors Provoost provided invaluable insights into the Replace By Fee feature within Bitcoin, spotlighting its significance in navigating network congestion while balancing flexibility with security. Their analysis underscores the continued evolution of Bitcoin's ecosystem and the necessity of informed discourse to navigate its complexities."
}