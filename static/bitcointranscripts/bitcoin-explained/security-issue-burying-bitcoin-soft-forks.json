{
    "id": "bitcointranscripts+bitcoin-explained+security-issue-burying-bitcoin-soft-forks",
    "title": "Burying Soft Forks",
    "body_formatted": "{\"type\":\"heading\",\"text\":\"Intro\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:00:20\"}, {\"type\":\"paragraph\",\"text\":\"Live from Utrecht, this is Bitcoin Explained.\\nI love it.\\nHere we are again.\\nIt feels very retro.\\nWe just recorded three quarters of an episode before you realized you weren't actually recording anything.\"}, {\"type\":\"heading\",\"text\":\"No Counter\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:00:35\"}, {\"type\":\"paragraph\",\"text\":\"Yep, there's this little device and you have to put the SD card in it.\\nOtherwise you'll press the record button and you'll see all the volume and all that stuff.\\nIt looks very good, but there is no counter.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:00:46\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, I think that used to happen almost every time in the first couple of months.\"}, {\"type\":\"heading\",\"text\":\"Introduction\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:00:50\"}, {\"type\":\"paragraph\",\"text\":\"No, I think we've only done it once.\\nNo, more than a few minutes.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:00:55\"}, {\"type\":\"paragraph\",\"text\":\"What?\\nNo, we did it all the time, George.\\nOh, did you forget about that?\\nMaybe I suppressed the memory.\\nAnyways, so this time I hope you're recording and we're gonna go for take two.\\nI see a clock ticking, so that's good.\\nNice.\\nWe're gonna discuss burying soft forks.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:01:13\"}, {\"type\":\"paragraph\",\"text\":\"All right.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:01:14\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, this is one of these topics that I sort of knew was a thing that was sometimes discussed by developers, but also based on the discussion that I was sort of eyeing on the Bitcoin development mailing list, I could tell that it was kind of a niche, not super important, kind of big deal sort of thing that only developers that are very far into the weeds kind of cared about.\\nSo I never really paid attention to it.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:01:40\"}, {\"type\":\"paragraph\",\"text\":\"But then we were desperate to find a new topic and I found it and you found it interesting.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:01:45\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, I thought it was actually kind of interesting.\\nIt's one of these topics that, you know, it might be niche, but it still has some sort of broader implications about, you know, how do we think about Bitcoin.\\nIn a way, I've always found protocol changes the most interesting part of Bitcoin because it kind of gives you a very existential idea of what Bitcoin actually is.\\nLike if it can change, then you can sort of think about what conditions can you change it then or what is Bitcoin then?\\nYou can get very philosophical about it if you want to.\\nBut I don't think we're really going to do that today, but we are going to discuss worrying stuff for it.\\nSo yeah, we have discussed Taproot and Taproot Activation in multiple episodes\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:02:29\"}, {\"type\":\"paragraph\",\"text\":\"so far.\\nFive episode epic story.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:02:32\"}, {\"type\":\"paragraph\",\"text\":\"It's like a mini-series within our podcast.\\nFrom start to finish, we sort of covered the whole Taproot activation saga.\\nAnd in a way, this is a new entry in that mini-series.\\nSo I like it.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:02:45\"}, {\"type\":\"paragraph\",\"text\":\"That's right.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:02:45\"}, {\"type\":\"paragraph\",\"text\":\"Probably the last one.\\nProbably this will be the last entry because at this point, we're going to discuss, you know, the soft fork happened, activation happened, it all went great.\\nAnd at this point, the question is sort of, how do we move forward from there?\\nHow do we now retroactively kind of deal with the activation code and with taproot?\\nAnd that's what burying softworks is about.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:03:13\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nSo one analogy that can be used, although we'll get to the philosophical discussion about that, is that activation code is a scaffold.\\nIt's like when you have a, you know, when there's a soft fork, it's like building a new house.\\nAnd when you're building a house, there's a scaffold next to it.\\nAnd then the question is, what do you do with the scaffold when the house is done?\\nAnd that's kind of what we're going to talk about.\\nCan we just remove it somehow?\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:03:36\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nSo this has happened before, but soft burying, soft forks, it's not a completely new concept.\\nIt is being discussed again, at least sort of on GitHub, not really on the Bitcoin dev list this time, I think, because I guess Bitcoin Core developers have already sort of agreed that this is kind of the way to go.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:03:55\"}, {\"type\":\"paragraph\",\"text\":\"Well, it's still open, so.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:03:57\"}, {\"type\":\"paragraph\",\"text\":\"All right.\\nSo it is being discussed again, but it has happened before.\\nSo I'll just let you explain, Sjoerd, what does it mean?\\nWhat is burying a soft fork?\"}, {\"type\":\"heading\",\"text\":\"What is a software\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:04:06\"}, {\"type\":\"paragraph\",\"text\":\"Well, I think you wanted to recap first what a soft fork is.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:04:09\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, sure.\\nLet's start with that.\\nYou're right for those listeners that don't know that.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:04:14\"}, {\"type\":\"paragraph\",\"text\":\"It's also relevant to explain how the burying works.\\nSo a soft fork is a tightening of the rules.\\nAnd intuitively you might think, what?\\nHow do you get new features when you have less rules?\\nWell, we've explained this in earlier episodes.\\nBut basically, Bitcoin has a lot of ways to throw away money.\\nAnd so you can make all sorts of addresses, quote unquote, that you can send coins to.\\nAnd then anybody can take the money from those addresses.\\nAnd generally, you don't want to do that.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:04:43\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, you don't even need a signature.\\nThere's just no requirements.\\nYou can just take the money from these outputs or addresses, like you say.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:04:50\"}, {\"type\":\"paragraph\",\"text\":\"So what a soft fork does, in practice, at least some soft forks do, is to say, well, there's now going to be slightly fewer ways to throw away your money.\\nSo if you make this specific type of transaction, we're now going to call that taproot and you can only spend that with a valid Schnorr signature etc.\\nEtc.\\nWhereas before the soft fork you could just take those coins.\\nAnd this ties into the burying of the soft fork Because it turns out that if you look back at the history of the blockchain, and you see how many people have actually thrown away their money in the past, in a way that would now be called taproot, turns out that's only happened once.\\nSo there's only one historical transaction that happened before Taproot activated, where somebody sent money to something that we now call a Taproot address.\\nAnd more importantly, somebody else took that money.\\nAnd that taking of the money would not be compliant with the modern Taproot rules.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:05:46\"}, {\"type\":\"paragraph\",\"text\":\"Yes.\\nWell, actually, I'll have to correct you there a little bit.\\nSo actually several people sent money to a Taproot address before Taproot was active.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:05:56\"}, {\"type\":\"paragraph\",\"text\":\"But only one took it.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:05:57\"}, {\"type\":\"paragraph\",\"text\":\"Yes.\\nIt's only been taken one time.\\nNow Sending to such an address was always okay, of course, and is still okay, and that was never a problem.\\nIt's a taken from that address that since Taproot is active, you cannot do that anymore.\\nBut before Taproot was active, you could just take that money.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:06:15\"}, {\"type\":\"paragraph\",\"text\":\"That's right.\\nOkay.\\nAnd so this presents an opportunity to look at the Bitcoin Core source code, which currently just says, wait, when you see the blockchain for the first time, you think the whole thing, you look at the signaling, and then after a while, you've seen that the speedy trial activated, and now you're going to apply the new rules to the new blocks.\\nWhat you can do instead is say, don't worry about the signaling, just apply the taproot rules from the Genesis block onwards, pretend that taproot has always existed with one exception.\\nAnd that exception would be hard-coded in the source code, saying, well, Zaproot is always active except for this specific block.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:06:53\"}, {\"type\":\"paragraph\",\"text\":\"Yes, and that block would be the block that includes the transaction that I just mentioned that took these coins.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:07:00\"}, {\"type\":\"paragraph\",\"text\":\"And\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:07:00\"}, {\"type\":\"paragraph\",\"text\":\"they were sent to Brink, actually.\\nThere's a blog post that was, while we're discussing it, let me just mention that real quick.\\nSo it was actually taken by, or at least the Bitcoin developer named 0xb10c.\\nHe sort of initiated it and then it was included by F2Pool, and it was sent, so these coins that were sent to Brink at the time.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:07:27\"}, {\"type\":\"paragraph\",\"text\":\"Oh, that's very nice.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:07:27\"}, {\"type\":\"paragraph\",\"text\":\"Not very important in the context of the rest of this episode, but a\"}, {\"type\":\"heading\",\"text\":\"Exception block\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:07:31\"}, {\"type\":\"paragraph\",\"text\":\"little detail.\\nNo, and it turns out Something like this has happened in the past with PIV16 that introduced, back in 2012, that introduced pay-to-script hash.\\nThere was also one exception block.\\nSo there has been, there is precedent of having an exception block in the Bitcoin source code in this way.\\nSo the taproot would just have another exception block.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:07:51\"}, {\"type\":\"paragraph\",\"text\":\"So let me recap that real quick.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:07:54\"}, {\"type\":\"paragraph\",\"text\":\"Okay, and with SegWit, I just add is there is no exception necessary.\\nSo SegWit rules can be applied from the Genesis block perfectly.\\nThere's no exception.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:08:02\"}, {\"type\":\"paragraph\",\"text\":\"Right.\\nYes.\\nOkay.\\nSo if you currently run a Bitcoin core node, better yet, if you sync a Bitcoin core node,\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:08:13\"}, {\"type\":\"paragraph\",\"text\":\"so\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:08:13\"}, {\"type\":\"paragraph\",\"text\":\"if you start from the Genesis block, You start from the very first block that was released by Satoshi, and then you go through the entire blockchain to verify every transaction, every block.\\nThen what your Bitcoin Core node is currently doing is at some point it will check if there is blockchain signaling going on, and then it sees that there is in fact blockchain signaling going on.\\nAnd then from a certain block, it will start to enforce the taproot rules.\\nThat's how a Bitcoin Core node right now works when it comes to taproot.\\nAnd then this proposal, which has been done with other softworks before, is that it will actually start applying the taproot rules from block 0, from the very beginning, with the exception for this one block that has an invalid spend in it under the taproot rules, and we'll just ignore that.\\nRight?\\nThis is the recap.\\nThis is how it would work.\\nSo what are the benefits of implementing this in Bitcoin Core?\\nWhy is it better to start from block zero?\"}, {\"type\":\"heading\",\"text\":\"Benefits\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:09:12\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nSo I think the first thing to say is that this is not a dramatic benefit that we're going to talk about.\\nIt's somewhat marginal.\\nHowever, we're dealing with very critical code.\\nSo the less headache basically for developers, the more likely they spend their time finding real bugs.\\nIt basically, First of all, it makes the code a little bit simpler, but that's very marginal.\\nSo instead of saying, after this block, do X, it says, do X all the time, except for this block.\\nAnd the other side is that it makes testing the code easier.\\nSo Bitcoin Core itself has tests that are run in something called the RegTest framework from regression.\\nAnd these tests, what these tests do is they simulate a fresh blockchain, so with a fresh genesis block or maybe the real genesis block, and then they create very low difficulty blocks.\\nSo they very quickly can build a blockchain with 100 blocks or 200 blocks on it.\\nAnd then they can, you know, check all the rules basically.\\nSo there's a test that says, okay, make sure that before Taproot activates, these rules apply and these blocks are still valid.\\nAnd then after Taproot activates, you wanna, you know, the test might check that the Taproot rules are actually enforced.\\nAnd so if you just pretend that Taproot has always been there, 1984 style, Then basically the test can be simplified because you only need to test for the enforcement of TAPRIC rules.\\nYou don't have to test anymore for pre-activation scenarios.\\nSo that's basically a simplification there.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:10:42\"}, {\"type\":\"paragraph\",\"text\":\"Right.\\nSo you've now mentioned two benefits.\\nOne of them, it cleans up the actual code of the Bitcoin Core codebase.\\nAnd the other way is it simplifies tests that you might run because now there's less scenarios.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:10:56\"}, {\"type\":\"paragraph\",\"text\":\"Well, those tests are in the Bitcoin source code too.\\nSo yeah, there's fewer permutations to test, right?\\nEspecially if you add up multiple soft forks.\\nLike, okay, we have to test before segwit, and then after segwit, but before taproot, those kind of combinations.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:11:11\"}, {\"type\":\"paragraph\",\"text\":\"Okay.\\nSo I think we can actually summarize it as it just cleans up the code.\\nIt's a code cleanup.\"}, {\"type\":\"heading\",\"text\":\"Code Cleanup\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:11:16\"}, {\"type\":\"paragraph\",\"text\":\"And the idea is essentially that the soft fork activated so long ago that it doesn't really make a difference.\\nAm I saying it right?\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:11:28\"}, {\"type\":\"paragraph\",\"text\":\"Well, we'll get to that, I think.\\nThere's a second part to the cleanup that I want to emphasize, and then we can say that analogy.\\nThe second thing is, now that we've said taproot has always existed, as in the 1984 example, we still have these signals that happened in blocks.\\nAnd, well, there's no point in looking at those signals anymore because we've already said segwit is always there or taproot is always there so why do we look at the signals.\\nSo the second cleanup would be to simply not check those signals anymore so to remove the speedy trial essentially in this case and that has again somewhat of a benefit for developers What it allows developers to do is say, hey, we want to change the activation mechanism itself.\\nMaybe we want to change the BIP 9 system to something more like a BIP 8 system.\\nAnd then we can just change the code, basically.\\nWe don't have to copy the code and write a new piece of code.\\nWe can change it entirely because the code is no longer used for anything.\\nSo it's safer to just change it.\\nAgain, that's marginal, but it's still nice.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:12:35\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, and it's also still code cleanup, right?\\nThat's the benefit, essentially.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:12:41\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, so especially if you understand that BIP 8, at least the simple version of BIP 8 with LatticeFalse that we talked about, is essentially simpler than bib9.\\nSo yeah, you can actually maybe remove some code net, but I don't know\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:12:56\"}, {\"type\":\"paragraph\",\"text\":\"if that's a bad thing.\\nWell, that wasn't really the point I was getting at.\\nI was just, in general, just not having to check for the activation signals for this specific software.\"}, {\"type\":\"heading\",\"text\":\"Scaffold\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:13:05\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, it saves, again, a little bit of code.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:13:08\"}, {\"type\":\"paragraph\",\"text\":\"So that makes a lot of sense to me.\\nI can barely think of any downsides to that, and that is sort of what you were getting at earlier, where you mentioned scaffolds, right?\\nI think that was in this recording, not in the one we erased.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:13:24\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, we brought it up in this recording.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:13:26\"}, {\"type\":\"paragraph\",\"text\":\"Or maybe in both.\\nAnyway, so for the second benefit, you're basically removing the scaffolds.\\nIt activated, everyone agreed that it activated on this specific block.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:13:36\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, arguably both are scaffolds because the idea that you're going to start applying rules from a certain block is also a scaffold compared to just applying the rules all the time.\\nWell,\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:13:49\"}, {\"type\":\"paragraph\",\"text\":\"I think that's where the discussion comes in.\\nSo I think we're ready to point out where some of the disagreement stems from, right?\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:13:58\"}, {\"type\":\"paragraph\",\"text\":\"We're ready.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:13:59\"}, {\"type\":\"paragraph\",\"text\":\"Right.\\nSo We've just mentioned that the main benefits are all kind of code cleanup related.\\nThey benefit, you could argue they benefit developers, indirectly anything that benefits developers benefits users because developers work for users, but they are things that benefit developers and they shouldn't affect users.\\nAnd they arguably don't affect users.\"}, {\"type\":\"heading\",\"text\":\"Softfork\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:14:25\"}, {\"type\":\"paragraph\",\"text\":\"But there are some edge cases where it could actually affect users.\\nSo when we were discussing at the beginning of the episode, I think that was this one and not the one we erased.\\nI hope we mentioned anyways that a soft fork can in fact split the blockchain or even a hard fork any...\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:14:49\"}, {\"type\":\"paragraph\",\"text\":\"No, I don't think we've said that in this recording yet.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:14:51\"}, {\"type\":\"paragraph\",\"text\":\"So, yeah.\\nMaybe, do you want to point it out?\\nWell, I'll just point it out.\\nSo basically, either a soft fork or a hard fork can split the blockchain between users that are using the old rules and users that are using new rules.\\nNow the great benefit of soft fork is that if a majority of hash power is enforcing the soft fork rules then the chain should not split and the upgrade should be backwards compatible as they call it.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:15:20\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nAlright now...\\nWhich means that people do not have to upgrade their nodes immediately when there's a soft fork, and that's kind of nice,\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:15:28\"}, {\"type\":\"paragraph\",\"text\":\"because you\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:15:28\"}, {\"type\":\"paragraph\",\"text\":\"don't want to force people to upgrade.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:15:30\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, they can upgrade a bit later if they want or potentially even never.\"}, {\"type\":\"heading\",\"text\":\"Edge Case\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:15:34\"}, {\"type\":\"paragraph\",\"text\":\"Okay.\\nIn this case, a new Bitcoin Core node would assume that the taproot rules have always applied.\\nNow, what this means is that, and this is the edge case, if there is a very big reorg, so someone starts mining on top of a block from a year ago or whatever it is, and that someone, you know, aliens have come to earth, I think is the analogy.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:16:07\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, it's either the aliens or some secret government agency.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:16:13\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, someone has a lot of hash power for whatever reason.\\nThey start mining on a block from a year ago, and they actually claim the longest chain.\"}, {\"type\":\"heading\",\"text\":\"Taproot Rules\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:16:23\"}, {\"type\":\"paragraph\",\"text\":\"Now in that chain, they make a transaction that is...\\nAnd they do this before the original taproot activation block.\\nThey make a transaction that breaks the taproot rules.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:16:37\"}, {\"type\":\"paragraph\",\"text\":\"That's\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:16:37\"}, {\"type\":\"paragraph\",\"text\":\"right.\\nSo all nodes, all Bitcoin Core nodes, for example, will accept this chain because it's the longest valid chain.\\nWhile new Bitcoin Core nodes who are enforcing all their taproot rules, no sorry, who are enforcing taproot rules from the beginning, they will reject this chain because it's an invalid chain.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:16:58\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, so basically when a new chain appears, what the node will do is it will just roll back its blockchain.\\nIt will just like basically do everything in reverse and when all the coins that are spent are recreated until it gets to the forking point and then follows the longest chain all the way up checking the rules for that new longest chain.\\nAnd so if it goes indeed, if it goes before taproot activation, then yeah, taproot rules didn't apply.\\nIf you're an old node, you would say, okay, taproot is no longer active because you've gone back in time.\\nAnd those blocks can just do whatever they want.\\nBut if you're a new node under this this little cleanup you're gonna say no no taproot rules are always active so if if anything violates taproot rules I'm going to complain.\\nSo that means if if the new blocks are written at the low enough, then yeah, it's going to be\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:17:49\"}, {\"type\":\"paragraph\",\"text\":\"a problem.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:17:49\"}, {\"type\":\"paragraph\",\"text\":\"And it could even be worse.\\nLike Taproot could never activate at all, according to the old nodes.\\nBecause if you go back before the speed trial, if the aliens basically re-orc back to 2020, they then, and then replay again, they might just decide to not signal for taproot and say taproot never happened.\\nNow the reason we don't care about that this much is that this scenario is really, really, really bad.\\nSo the analogy might be to say, well, if all of the Netherlands is flooded, are we really going to argue about this street name in Rotterdam that we have issues about?\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:18:25\"}, {\"type\":\"paragraph\",\"text\":\"Right, yes.\\nThe argument, I'll just...\\nYou explained it clearly, I think, but still to reiterate, the argument is that if a reorg happens that is this bad, then Bitcoin is screwed either way and it's not worth considering even essentially, right?\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:18:45\"}, {\"type\":\"paragraph\",\"text\":\"Or maybe at least you probably have to do some human intervention to decide what on earth you're going to do about this situation because it means that probably lots of people's coins won't exist anymore.\\nAll the transactions may or may not be replayed again.\\nSo unless you bought Bitcoin in 2011 and you just huddled and never moved them, you're gonna be impacted by this event.\\nAnd the whole point of a money system, you know, kind of goes away if that much changes.\\nIt's Very similar to in a fiat system, if suddenly your bank account is zero or a million, depending on some random historical glitch, are you really going to just keep on going with the bank balance or are you going to do something else?\\nIt's a big disaster if this happens.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:19:28\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nWell, so On the other side of the debate is, for example, Eric Voskow, who's the lead developer of Libitcoin.\"}, {\"type\":\"heading\",\"text\":\"Eric Fossel\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:19:36\"}, {\"type\":\"paragraph\",\"text\":\"And he argues, or at least one of his arguments is that this threshold that you just...\\nLike at what point is this the case?\\nAt what point doesn't it matter anymore that there's a big reorg?\\nIs it after a day?\\nIs it after two days?\\nIs it after a week, two weeks?\\nWhere is this threshold?\\nAnd I guess he values consistency a lot when it comes to these kinds of things.\\nAnd his argument would be, or is, I think, well, I need to be careful to represent his arguments because he might disagree with my explanation of it.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:20:16\"}, {\"type\":\"paragraph\",\"text\":\"We could say a hypothetical argument could be whether or not somebody makes\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:20:19\"}, {\"type\":\"paragraph\",\"text\":\"the argument.\\nMaybe that's better.\\nYeah.\\nThe only consistent arguments there is that there is no threshold.\\nIt's just for each block, you need to assign a probability that it's going to make reorgs harder.\\nSo the more confirmations you have, it will just make a reorg harder and harder and harder.\\nAnd it's kind of how we apply it already.\\nLike, one confirmation is not as secure as two confirmation is not as secure as three.\\nAnd this change would imply that there's some hard cutoff to that logic, rather than it's just always going to be incrementally safer to wait longer.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:21:01\"}, {\"type\":\"paragraph\",\"text\":\"Now there is actually a real cutoff because very old versions of Bitcoin Core use checkpoints, but that hasn't been done for many, many years.\\nBut a checkpoint basically meant that that specific block had to exist.\\nSo there are a couple of blocks in the source code that say this block must exist, otherwise the chain is not valid.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:21:18\"}, {\"type\":\"paragraph\",\"text\":\"Yes, but that's not, you know, that is itself also controversial.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:21:22\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, I think it's good that those don't exist anymore.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:21:25\"}, {\"type\":\"paragraph\",\"text\":\"Right, exactly.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:21:25\"}, {\"type\":\"paragraph\",\"text\":\"But this is not as strong as a checkpoint.\\nThe only thing you could argue, and I think maybe that's what Voskall was arguing, is that the fact that you're now retroactively, in a certain sense, activating taproot is in a way a hard fork.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:21:41\"}, {\"type\":\"paragraph\",\"text\":\"No it is in a way a checkpoint.\\nA checkpoint says\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:21:46\"}, {\"type\":\"paragraph\",\"text\":\"this specific block has to exist.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:21:48\"}, {\"type\":\"paragraph\",\"text\":\"Yes.\\nThis\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:21:48\"}, {\"type\":\"paragraph\",\"text\":\"just says these rules have to apply,\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:21:50\"}, {\"type\":\"paragraph\",\"text\":\"regardless of what the blocks are.\\nNo, sure.\\nBut it does have sort of the similar implications for it, because you're assuming that before that block, no split could have possibly happened.\\nOtherwise, you would have to check, right?\\nAm I saying that right?\\nI think so.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:22:06\"}, {\"type\":\"paragraph\",\"text\":\"Well, I mean, the problem with checkpoints is you could have almost completely arbitrary rules, right?\\nIt gives too much power to the people who decide what is a checkpoint.\\nBut I think in the case of Taproot, you don't have that discussion because it's not that by having this rule or by not having this rule, that Taproot is always active.\\nIt doesn't really matter that much.\\nIt's like there's not a specific person who stands to benefit from whether or not that rule happens.\\nWe can't predict what the disaster is going to look like.\\nSo that's why I think it's not as bad as a checkpoint.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:22:37\"}, {\"type\":\"paragraph\",\"text\":\"So yeah, whether or not it's a checkpoint or some kind of checkpoint or some kind of subcategory of a checkpoint is maybe not the important part.\\nThe important part here is that one group of developers, I guess mostly in Bitcoin Core, figure that if there's a reorg this big, then Bitcoin is screwed anyways.\\nWhile someone like Foscale will argue, you know, there's no single point where you can make that argument.\\nThere's no point where Bitcoin will be that if the reorg is that bad.\\nIt just, you know, gets incrementally worse for, you know, every extra block that's being reorg.\\nBut there's no objective point you can point to and therefore the only sort of logic that you can apply is simply long as spell chain, that's what will you accept to be Bitcoin.\"}, {\"type\":\"heading\",\"text\":\"What is signaling\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:23:27\"}, {\"type\":\"paragraph\",\"text\":\"So this reminded me of the other argument that you can have here, which is, do we look at only the blockchain?\\nLike should nodes only look at the blockchain or should nodes keep into account sort of the social consensus?\\nAnd that gets back to what signaling means.\\nIs signaling something that must occur on the blockchain and then a soft fork is active?\\nOr is it a way to coordinate the activation of a new set of rules in a point in?\\nAnd so in essence, does a soft fork activate on a chain or does it activate in a chronological point in, you know, the space-time continuum?\\nSo can we say as of November 21 or whatever date it was, 2021, Taproot is active.\\nIf you produce blocks in the future, even no matter what the height of those new blocks is, it's still after November 21, 2022, and therefore you should know that Taproot is active and you should just enforce it.\\nThat is, of course, also a philosophical question you can have.\\nAnd If you agree with the latter, if you say Taproot should be considered active after a chronological point in time, well then this deep re-orker is not a problem because you'll enforce Taproot.\"}, {\"type\":\"heading\",\"text\":\"Two visions\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:26:28\"}, {\"type\":\"paragraph\",\"text\":\"Well, I think there's two issues here.\\nOr, or at least there's one thing to point out, and I think that's what you're getting at.\\nSo there are sort of two visions on what the activation logic is in the first place.\\nSo everyone agrees basically what a soft fork is, and that's, you've explained it a couple minutes ago, and I think everyone will agree on that.\\nBut then there's the activation of the soft fork, sort of the activation logic, like you must signal or the signaling logic itself, which is something some developers will itself consider a soft fork, while other developers will argue that's the word you used before, that's scaffolding, That shouldn't be considered a consensus change.\\nSo I think that the arguments, at least if you hold the second opinion, of removing the signaling logic from the code, that's a much easier argument to make, which I also mentioned before, I think.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:27:30\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, I mean, we presented these two parts of the burying, right?\\nSo the first part is we're going to apply the rules from Genesis, and the second part is we don't check the rules.\\nAnd in that order, that's one way to look at it in that order, but you can look at it in the other order.\\nI guess that's what you're saying now, if you just drop the signaling requirement.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:27:48\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, but you were making a point about social consensus applying to time.\\nBut you can still apply social consensus to the blockchain itself.\\nSo you can still argue that there's no reason for the signaling other than informing people that a soft fork is happening while still applying it to the actual blockchain and therefore accepting that a soft fork didn't happen if there's a big reorg even though we're past a certain date.\"}, {\"type\":\"heading\",\"text\":\"Signaling history\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:28:15\"}, {\"type\":\"paragraph\",\"text\":\"You could, but if you go back to the history of Softworks, you know, we did that in another episode, but basically the reason miners started signaling, that wasn't the case.\\nThe earlier Softworks and Satoshi's code were just activating at a certain height.\\nThat was a problem.\\nSo the idea was to have miners signal for it and there were various ways to do that signaling and eventually we ended up with PIP 9.\\nBut the reason for the signaling is to make sure that miners actually upgrade and are actually ready.\\nAnd there's no reason to assume that with a big reorg they're suddenly unready.\\nThey would have to downgrade their software, basically.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:28:50\"}, {\"type\":\"paragraph\",\"text\":\"That's not something everyone agrees on, Sjoerd.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:28:53\"}, {\"type\":\"paragraph\",\"text\":\"That's fine.\\nThat's sort of the point I'm trying to make.\\nIf that is your interpretation, if the interpretation is we use the signaling in the actual history of Earth, just to say, okay, now all the miners are ready, they have the latest software, they can enforce Taproot, then there's no reason to assume that when there's a deep reorg, they're certainly unready.\\nBut you can also have the blockchain-centric perspective where you say, no, there is no reality outside the blockchain and outside this code.\\nIn that case, you might say, no, if time is undone, it's like real time travel.\\nWe've really changed history and taproot never happened or did or some other time.\\nThat's a potential discussion you can have.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:29:36\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, well that's interesting you bring that up.\\nI think that's right.\\nSo these are sort of two ways of looking at signaling, whether it's informing Miners or whether it really means readiness signaling, which is definitely a term that has been used, but recently during the Taproot debates, there was also sort of this idea that signaling is really for users.\"}, {\"type\":\"heading\",\"text\":\"Weeds\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:29:57\"}, {\"type\":\"paragraph\",\"text\":\"So users know that a certain change will activate, which also allows them to fork off if they disagree with the change, for example.\\nAnd that's really the reason for signaling.\\nSo, I think we're getting really into the weeds at this point.\\nI think it's interesting, but We might be losing some listeners by now.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:30:17\"}, {\"type\":\"paragraph\",\"text\":\"That's fine.\\nWe've shown the listeners where the weed is.\\nRight.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:30:27\"}, {\"type\":\"paragraph\",\"text\":\"Where the weed is?\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:30:28\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, maybe not the best analogy.\\nWe've shown them very deep into the rabbit hole.\\nThey can explore more for themselves by just reading these mailing list threads.\\nWe'll probably put them in the show notes.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:30:38\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, no, there's one other thing we do need to bring up.\\nOkay, we're jumping around now, so the episode's getting confusing.\\nSorry, people.\\nBut there is this other...\\nSort of what it ultimately comes down to this discussion, I think, is whether burying a soft fork, As we've explained throughout this episode, whether that should be considered a consensus change or not, and by extension, whether it should be a BIP, Bitcoin Improvement Proposal.\"}, {\"type\":\"heading\",\"text\":\"Bibs\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:31:15\"}, {\"type\":\"paragraph\",\"text\":\"So if you see it as\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:31:16\"}, {\"type\":\"paragraph\",\"text\":\"a consensus BIP, because you can have an informational BIP that's not a consensus BIP.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:31:20\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, can you though?\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:31:21\"}, {\"type\":\"paragraph\",\"text\":\"You can basically write a BIP that says, hey, if you're writing this type of, if you're writing a full note, you could consider burying the soft fork because it will make your life easier.\\nBut keep in mind that, you know, if this time travel thing happens, you have a problem.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:31:36\"}, {\"type\":\"paragraph\",\"text\":\"It's not really the point of BIPs though, Sjoerd, is it?\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:31:39\"}, {\"type\":\"paragraph\",\"text\":\"Well, we've done an episode about BIPs. There are informational BIPs and there are consensus BIPs.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:31:43\"}, {\"type\":\"paragraph\",\"text\":\"Well, yeah, but they need to be relevant for other nodes.\\nWell, they are.\\nIt's good\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:31:48\"}, {\"type\":\"paragraph\",\"text\":\"to explain to other nodes what you've done in your implementation that, you know, under extreme circumstances can make a difference.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:31:55\"}, {\"type\":\"paragraph\",\"text\":\"Well, you could, you can make a very general informational BIP of this is a thing you can do, but then that BIP doesn't need to include a specific block height, right?\\nThat doesn't require...\\nWell, that's the debate then.\\nIs this a consensus change?\\nIn other words, if there would be this big of a reorg, Should we expect all nodes to accept this reorg or reject it?\\nLike, should they do the same thing?\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:32:23\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, so this comes down to the little street in Rotterdam situation that I was talking about.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:32:27\"}, {\"type\":\"paragraph\",\"text\":\"Hang on, let me finish this sentence.\\nOr is this just a thing that developers can do as a shortcut in their own code.\\nAnd then, essentially, if it does go wrong, that's the wrong problem.\\nThat's a problem of that specific implementation.\\nThat would essentially mean that that specific implementation has forked itself of the network.\\nI think if you really go into this debate, that's sort of ultimately what it's about.\\nAnd that's why I mentioned at the beginning of this episode that, you know, consensus changes are kind of interesting because it sort of says something about how do you define Bitcoin, what is Bitcoin.\\nAnd this is an example where that actually applies.\"}, {\"type\":\"heading\",\"text\":\"What is Bitcoin\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:33:05\"}, {\"type\":\"paragraph\",\"text\":\"Like if in this unlikely scenario would happen, then would the buried version be the real Bitcoin?\\nThat the nodes that have the buried soft fork, would that be the real Bitcoin?\\nOr would they fork themselves off of the real Bitcoin network?\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:33:18\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, so we're talking about a specific deep re-org that actually violates the taproot rule, right?\\nBecause there is a good chance that they don't violate taproot in the deep re-org.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:33:27\"}, {\"type\":\"paragraph\",\"text\":\"So\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:33:27\"}, {\"type\":\"paragraph\",\"text\":\"I think in general, it's a good idea to think about an extreme scenario like this.\\nBut I think if you do that, you'll end up thinking, you'll end up seeing this is a really big problem.\\nThere's all sorts of things we need to solve in such an event.\\nAnd this little thing about buried consensus rules is somewhere on the to-do list of that giant project of okay what are we gonna do?\\nLike is there some threshold that we say if this alien shows up?\\nI guess in general we need a scenario what to do with the aliens.\\nThe aliens might have extreme hash power, They might be able to just completely double spend everyone on the planet because they have some alien ASIC that can double spend any block at any depth and they can create Bjorks out of spite.\\nSo or the secret government agency basically.\\nIt might be useful to have a plan for that.\\nI just think that this won't be the most interesting part of the plan because it's a really bad situation.\\nAnd it probably means Bitcoin would be completely broken in that case.\\nBut maybe not.\\nMaybe there is a rational way to deal with it.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:34:30\"}, {\"type\":\"paragraph\",\"text\":\"That's the difference of opinion, right?\\nSome people like Eric Fosker will say Bitcoin isn't broken, Bitcoin is working as intended, long as valid chain still applies.\\nThere was a long re-org that's part of the Bitcoin consensus system.\"}, {\"type\":\"heading\",\"text\":\"Conclusion\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:34:46\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, but the question is, can you use it for practical transactions if that can happen again and again and again and again?\\nI would probably say no.\\nIt's just the same reason with lots of altcoins that try to use SHA-256 and those altcoins are completely, you know, yeah, technically they're still valid chains.\\nIt's just that nobody uses them anymore.\\nSo I think it's good to have some sort of thought about what to do with the alien invasion.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:35:13\"}, {\"type\":\"paragraph\",\"text\":\"So I want to close off this episode, but I want to ask you then, personally, should this be considered a consensus change?\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:35:23\"}, {\"type\":\"paragraph\",\"text\":\"No, I think this is\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:35:24\"}, {\"type\":\"paragraph\",\"text\":\"sort of...\\nOr is this a developer shortcut at their own risk?\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:35:29\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, I think it's a developer shortcut, but the idea of a one-year re-org is undefined behavior, I think.\\nSo I think there is no consensus rule for a one-year re-org.\\nThat's my opinion.\\nIt's a disaster that's not been worked out.\\nThere's just no contingency plan.\\nIt's like saying what do we do if the 55 nukes go off over Amsterdam?\\nYou know, what's the can you still go into a hospital without a mask?\\nI don't know.\\nIt's undefined But maybe it should be defined.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:35:59\"}, {\"type\":\"paragraph\",\"text\":\"I mean, I guess I disagree with you.\\nI think it's deviant as long as it's ValorChain.\\nThat's it.\\nThat's fine.\\nWell, then I guess that's the episode, Shors.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:36:09\"}, {\"type\":\"paragraph\",\"text\":\"That's\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:36:09\"}, {\"type\":\"paragraph\",\"text\":\"right.\\nWe've reached the point, we've kept pulling the threads to the point where sort of the disagreement emerges, I think, of the broader discussion.\\nYeah.\\nI hope our listeners could follow.\\nI think it was maybe a bit messy because it's a complicated topic, but I thought it was kind of interesting.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:36:29\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, I think so too.\\nYeah, especially the fact that we're talking about hypothetical time machines in a situation where we lost one recording.\\nIn other words, we also have this hypothetical time machine.\\nDid we say this before?\\nWas it really set?\\nBecause we said it without recording it.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 0: 00:36:43\"}, {\"type\":\"paragraph\",\"text\":\"I'm sure that didn't help.\\nYeah.\"}, {\"type\":\"paragraph\",\"text\":\"Speaker 1: 00:36:45\"}, {\"type\":\"paragraph\",\"text\":\"So anyway, thank You\"}",
    "body": "## Intro\n\nSpeaker 0: 00:00:20\n\nLive from Utrecht, this is Bitcoin Explained.\nI love it.\nHere we are again.\nIt feels very retro.\nWe just recorded three quarters of an episode before you realized you weren't actually recording anything.\n\n## No Counter\n\nSpeaker 1: 00:00:35\n\nYep, there's this little device and you have to put the SD card in it.\nOtherwise you'll press the record button and you'll see all the volume and all that stuff.\nIt looks very good, but there is no counter.\n\nSpeaker 0: 00:00:46\n\nYeah, I think that used to happen almost every time in the first couple of months.\n\n## Introduction\n\nSpeaker 1: 00:00:50\n\nNo, I think we've only done it once.\nNo, more than a few minutes.\n\nSpeaker 0: 00:00:55\n\nWhat?\nNo, we did it all the time, George.\nOh, did you forget about that?\nMaybe I suppressed the memory.\nAnyways, so this time I hope you're recording and we're gonna go for take two.\nI see a clock ticking, so that's good.\nNice.\nWe're gonna discuss burying soft forks.\n\nSpeaker 1: 00:01:13\n\nAll right.\n\nSpeaker 0: 00:01:14\n\nYeah, this is one of these topics that I sort of knew was a thing that was sometimes discussed by developers, but also based on the discussion that I was sort of eyeing on the Bitcoin development mailing list, I could tell that it was kind of a niche, not super important, kind of big deal sort of thing that only developers that are very far into the weeds kind of cared about.\nSo I never really paid attention to it.\n\nSpeaker 1: 00:01:40\n\nBut then we were desperate to find a new topic and I found it and you found it interesting.\n\nSpeaker 0: 00:01:45\n\nYeah, I thought it was actually kind of interesting.\nIt's one of these topics that, you know, it might be niche, but it still has some sort of broader implications about, you know, how do we think about Bitcoin.\nIn a way, I've always found protocol changes the most interesting part of Bitcoin because it kind of gives you a very existential idea of what Bitcoin actually is.\nLike if it can change, then you can sort of think about what conditions can you change it then or what is Bitcoin then?\nYou can get very philosophical about it if you want to.\nBut I don't think we're really going to do that today, but we are going to discuss worrying stuff for it.\nSo yeah, we have discussed Taproot and Taproot Activation in multiple episodes\n\nSpeaker 1: 00:02:29\n\nso far.\nFive episode epic story.\n\nSpeaker 0: 00:02:32\n\nIt's like a mini-series within our podcast.\nFrom start to finish, we sort of covered the whole Taproot activation saga.\nAnd in a way, this is a new entry in that mini-series.\nSo I like it.\n\nSpeaker 1: 00:02:45\n\nThat's right.\n\nSpeaker 0: 00:02:45\n\nProbably the last one.\nProbably this will be the last entry because at this point, we're going to discuss, you know, the soft fork happened, activation happened, it all went great.\nAnd at this point, the question is sort of, how do we move forward from there?\nHow do we now retroactively kind of deal with the activation code and with taproot?\nAnd that's what burying softworks is about.\n\nSpeaker 1: 00:03:13\n\nYeah.\nSo one analogy that can be used, although we'll get to the philosophical discussion about that, is that activation code is a scaffold.\nIt's like when you have a, you know, when there's a soft fork, it's like building a new house.\nAnd when you're building a house, there's a scaffold next to it.\nAnd then the question is, what do you do with the scaffold when the house is done?\nAnd that's kind of what we're going to talk about.\nCan we just remove it somehow?\n\nSpeaker 0: 00:03:36\n\nYeah.\nSo this has happened before, but soft burying, soft forks, it's not a completely new concept.\nIt is being discussed again, at least sort of on GitHub, not really on the Bitcoin dev list this time, I think, because I guess Bitcoin Core developers have already sort of agreed that this is kind of the way to go.\n\nSpeaker 1: 00:03:55\n\nWell, it's still open, so.\n\nSpeaker 0: 00:03:57\n\nAll right.\nSo it is being discussed again, but it has happened before.\nSo I'll just let you explain, Sjoerd, what does it mean?\nWhat is burying a soft fork?\n\n## What is a software\n\nSpeaker 1: 00:04:06\n\nWell, I think you wanted to recap first what a soft fork is.\n\nSpeaker 0: 00:04:09\n\nYeah, sure.\nLet's start with that.\nYou're right for those listeners that don't know that.\n\nSpeaker 1: 00:04:14\n\nIt's also relevant to explain how the burying works.\nSo a soft fork is a tightening of the rules.\nAnd intuitively you might think, what?\nHow do you get new features when you have less rules?\nWell, we've explained this in earlier episodes.\nBut basically, Bitcoin has a lot of ways to throw away money.\nAnd so you can make all sorts of addresses, quote unquote, that you can send coins to.\nAnd then anybody can take the money from those addresses.\nAnd generally, you don't want to do that.\n\nSpeaker 0: 00:04:43\n\nYeah, you don't even need a signature.\nThere's just no requirements.\nYou can just take the money from these outputs or addresses, like you say.\n\nSpeaker 1: 00:04:50\n\nSo what a soft fork does, in practice, at least some soft forks do, is to say, well, there's now going to be slightly fewer ways to throw away your money.\nSo if you make this specific type of transaction, we're now going to call that taproot and you can only spend that with a valid Schnorr signature etc.\nEtc.\nWhereas before the soft fork you could just take those coins.\nAnd this ties into the burying of the soft fork Because it turns out that if you look back at the history of the blockchain, and you see how many people have actually thrown away their money in the past, in a way that would now be called taproot, turns out that's only happened once.\nSo there's only one historical transaction that happened before Taproot activated, where somebody sent money to something that we now call a Taproot address.\nAnd more importantly, somebody else took that money.\nAnd that taking of the money would not be compliant with the modern Taproot rules.\n\nSpeaker 0: 00:05:46\n\nYes.\nWell, actually, I'll have to correct you there a little bit.\nSo actually several people sent money to a Taproot address before Taproot was active.\n\nSpeaker 1: 00:05:56\n\nBut only one took it.\n\nSpeaker 0: 00:05:57\n\nYes.\nIt's only been taken one time.\nNow Sending to such an address was always okay, of course, and is still okay, and that was never a problem.\nIt's a taken from that address that since Taproot is active, you cannot do that anymore.\nBut before Taproot was active, you could just take that money.\n\nSpeaker 1: 00:06:15\n\nThat's right.\nOkay.\nAnd so this presents an opportunity to look at the Bitcoin Core source code, which currently just says, wait, when you see the blockchain for the first time, you think the whole thing, you look at the signaling, and then after a while, you've seen that the speedy trial activated, and now you're going to apply the new rules to the new blocks.\nWhat you can do instead is say, don't worry about the signaling, just apply the taproot rules from the Genesis block onwards, pretend that taproot has always existed with one exception.\nAnd that exception would be hard-coded in the source code, saying, well, Zaproot is always active except for this specific block.\n\nSpeaker 0: 00:06:53\n\nYes, and that block would be the block that includes the transaction that I just mentioned that took these coins.\n\nSpeaker 1: 00:07:00\n\nAnd\n\nSpeaker 0: 00:07:00\n\nthey were sent to Brink, actually.\nThere's a blog post that was, while we're discussing it, let me just mention that real quick.\nSo it was actually taken by, or at least the Bitcoin developer named 0xb10c.\nHe sort of initiated it and then it was included by F2Pool, and it was sent, so these coins that were sent to Brink at the time.\n\nSpeaker 1: 00:07:27\n\nOh, that's very nice.\n\nSpeaker 0: 00:07:27\n\nNot very important in the context of the rest of this episode, but a\n\n## Exception block\n\nSpeaker 1: 00:07:31\n\nlittle detail.\nNo, and it turns out Something like this has happened in the past with PIV16 that introduced, back in 2012, that introduced pay-to-script hash.\nThere was also one exception block.\nSo there has been, there is precedent of having an exception block in the Bitcoin source code in this way.\nSo the taproot would just have another exception block.\n\nSpeaker 0: 00:07:51\n\nSo let me recap that real quick.\n\nSpeaker 1: 00:07:54\n\nOkay, and with SegWit, I just add is there is no exception necessary.\nSo SegWit rules can be applied from the Genesis block perfectly.\nThere's no exception.\n\nSpeaker 0: 00:08:02\n\nRight.\nYes.\nOkay.\nSo if you currently run a Bitcoin core node, better yet, if you sync a Bitcoin core node,\n\nSpeaker 1: 00:08:13\n\nso\n\nSpeaker 0: 00:08:13\n\nif you start from the Genesis block, You start from the very first block that was released by Satoshi, and then you go through the entire blockchain to verify every transaction, every block.\nThen what your Bitcoin Core node is currently doing is at some point it will check if there is blockchain signaling going on, and then it sees that there is in fact blockchain signaling going on.\nAnd then from a certain block, it will start to enforce the taproot rules.\nThat's how a Bitcoin Core node right now works when it comes to taproot.\nAnd then this proposal, which has been done with other softworks before, is that it will actually start applying the taproot rules from block 0, from the very beginning, with the exception for this one block that has an invalid spend in it under the taproot rules, and we'll just ignore that.\nRight?\nThis is the recap.\nThis is how it would work.\nSo what are the benefits of implementing this in Bitcoin Core?\nWhy is it better to start from block zero?\n\n## Benefits\n\nSpeaker 1: 00:09:12\n\nYeah.\nSo I think the first thing to say is that this is not a dramatic benefit that we're going to talk about.\nIt's somewhat marginal.\nHowever, we're dealing with very critical code.\nSo the less headache basically for developers, the more likely they spend their time finding real bugs.\nIt basically, First of all, it makes the code a little bit simpler, but that's very marginal.\nSo instead of saying, after this block, do X, it says, do X all the time, except for this block.\nAnd the other side is that it makes testing the code easier.\nSo Bitcoin Core itself has tests that are run in something called the RegTest framework from regression.\nAnd these tests, what these tests do is they simulate a fresh blockchain, so with a fresh genesis block or maybe the real genesis block, and then they create very low difficulty blocks.\nSo they very quickly can build a blockchain with 100 blocks or 200 blocks on it.\nAnd then they can, you know, check all the rules basically.\nSo there's a test that says, okay, make sure that before Taproot activates, these rules apply and these blocks are still valid.\nAnd then after Taproot activates, you wanna, you know, the test might check that the Taproot rules are actually enforced.\nAnd so if you just pretend that Taproot has always been there, 1984 style, Then basically the test can be simplified because you only need to test for the enforcement of TAPRIC rules.\nYou don't have to test anymore for pre-activation scenarios.\nSo that's basically a simplification there.\n\nSpeaker 0: 00:10:42\n\nRight.\nSo you've now mentioned two benefits.\nOne of them, it cleans up the actual code of the Bitcoin Core codebase.\nAnd the other way is it simplifies tests that you might run because now there's less scenarios.\n\nSpeaker 1: 00:10:56\n\nWell, those tests are in the Bitcoin source code too.\nSo yeah, there's fewer permutations to test, right?\nEspecially if you add up multiple soft forks.\nLike, okay, we have to test before segwit, and then after segwit, but before taproot, those kind of combinations.\n\nSpeaker 0: 00:11:11\n\nOkay.\nSo I think we can actually summarize it as it just cleans up the code.\nIt's a code cleanup.\n\n## Code Cleanup\n\nSpeaker 0: 00:11:16\n\nAnd the idea is essentially that the soft fork activated so long ago that it doesn't really make a difference.\nAm I saying it right?\n\nSpeaker 1: 00:11:28\n\nWell, we'll get to that, I think.\nThere's a second part to the cleanup that I want to emphasize, and then we can say that analogy.\nThe second thing is, now that we've said taproot has always existed, as in the 1984 example, we still have these signals that happened in blocks.\nAnd, well, there's no point in looking at those signals anymore because we've already said segwit is always there or taproot is always there so why do we look at the signals.\nSo the second cleanup would be to simply not check those signals anymore so to remove the speedy trial essentially in this case and that has again somewhat of a benefit for developers What it allows developers to do is say, hey, we want to change the activation mechanism itself.\nMaybe we want to change the BIP 9 system to something more like a BIP 8 system.\nAnd then we can just change the code, basically.\nWe don't have to copy the code and write a new piece of code.\nWe can change it entirely because the code is no longer used for anything.\nSo it's safer to just change it.\nAgain, that's marginal, but it's still nice.\n\nSpeaker 0: 00:12:35\n\nYeah, and it's also still code cleanup, right?\nThat's the benefit, essentially.\n\nSpeaker 1: 00:12:41\n\nYeah, so especially if you understand that BIP 8, at least the simple version of BIP 8 with LatticeFalse that we talked about, is essentially simpler than bib9.\nSo yeah, you can actually maybe remove some code net, but I don't know\n\nSpeaker 0: 00:12:56\n\nif that's a bad thing.\nWell, that wasn't really the point I was getting at.\nI was just, in general, just not having to check for the activation signals for this specific software.\n\n## Scaffold\n\nSpeaker 1: 00:13:05\n\nYeah, it saves, again, a little bit of code.\n\nSpeaker 0: 00:13:08\n\nSo that makes a lot of sense to me.\nI can barely think of any downsides to that, and that is sort of what you were getting at earlier, where you mentioned scaffolds, right?\nI think that was in this recording, not in the one we erased.\n\nSpeaker 1: 00:13:24\n\nYeah, we brought it up in this recording.\n\nSpeaker 0: 00:13:26\n\nOr maybe in both.\nAnyway, so for the second benefit, you're basically removing the scaffolds.\nIt activated, everyone agreed that it activated on this specific block.\n\nSpeaker 1: 00:13:36\n\nYeah, arguably both are scaffolds because the idea that you're going to start applying rules from a certain block is also a scaffold compared to just applying the rules all the time.\nWell,\n\nSpeaker 0: 00:13:49\n\nI think that's where the discussion comes in.\nSo I think we're ready to point out where some of the disagreement stems from, right?\n\nSpeaker 1: 00:13:58\n\nWe're ready.\n\nSpeaker 0: 00:13:59\n\nRight.\nSo We've just mentioned that the main benefits are all kind of code cleanup related.\nThey benefit, you could argue they benefit developers, indirectly anything that benefits developers benefits users because developers work for users, but they are things that benefit developers and they shouldn't affect users.\nAnd they arguably don't affect users.\n\n## Softfork\n\nSpeaker 0: 00:14:25\n\nBut there are some edge cases where it could actually affect users.\nSo when we were discussing at the beginning of the episode, I think that was this one and not the one we erased.\nI hope we mentioned anyways that a soft fork can in fact split the blockchain or even a hard fork any...\n\nSpeaker 1: 00:14:49\n\nNo, I don't think we've said that in this recording yet.\n\nSpeaker 0: 00:14:51\n\nSo, yeah.\nMaybe, do you want to point it out?\nWell, I'll just point it out.\nSo basically, either a soft fork or a hard fork can split the blockchain between users that are using the old rules and users that are using new rules.\nNow the great benefit of soft fork is that if a majority of hash power is enforcing the soft fork rules then the chain should not split and the upgrade should be backwards compatible as they call it.\n\nSpeaker 1: 00:15:20\n\nYeah.\nAlright now...\nWhich means that people do not have to upgrade their nodes immediately when there's a soft fork, and that's kind of nice,\n\nSpeaker 0: 00:15:28\n\nbecause you\n\nSpeaker 1: 00:15:28\n\ndon't want to force people to upgrade.\n\nSpeaker 0: 00:15:30\n\nYeah, they can upgrade a bit later if they want or potentially even never.\n\n## Edge Case\n\nSpeaker 0: 00:15:34\n\nOkay.\nIn this case, a new Bitcoin Core node would assume that the taproot rules have always applied.\nNow, what this means is that, and this is the edge case, if there is a very big reorg, so someone starts mining on top of a block from a year ago or whatever it is, and that someone, you know, aliens have come to earth, I think is the analogy.\n\nSpeaker 1: 00:16:07\n\nYeah, it's either the aliens or some secret government agency.\n\nSpeaker 0: 00:16:13\n\nYeah, someone has a lot of hash power for whatever reason.\nThey start mining on a block from a year ago, and they actually claim the longest chain.\n\n## Taproot Rules\n\nSpeaker 0: 00:16:23\n\nNow in that chain, they make a transaction that is...\nAnd they do this before the original taproot activation block.\nThey make a transaction that breaks the taproot rules.\n\nSpeaker 1: 00:16:37\n\nThat's\n\nSpeaker 0: 00:16:37\n\nright.\nSo all nodes, all Bitcoin Core nodes, for example, will accept this chain because it's the longest valid chain.\nWhile new Bitcoin Core nodes who are enforcing all their taproot rules, no sorry, who are enforcing taproot rules from the beginning, they will reject this chain because it's an invalid chain.\n\nSpeaker 1: 00:16:58\n\nYeah, so basically when a new chain appears, what the node will do is it will just roll back its blockchain.\nIt will just like basically do everything in reverse and when all the coins that are spent are recreated until it gets to the forking point and then follows the longest chain all the way up checking the rules for that new longest chain.\nAnd so if it goes indeed, if it goes before taproot activation, then yeah, taproot rules didn't apply.\nIf you're an old node, you would say, okay, taproot is no longer active because you've gone back in time.\nAnd those blocks can just do whatever they want.\nBut if you're a new node under this this little cleanup you're gonna say no no taproot rules are always active so if if anything violates taproot rules I'm going to complain.\nSo that means if if the new blocks are written at the low enough, then yeah, it's going to be\n\nSpeaker 0: 00:17:49\n\na problem.\n\nSpeaker 1: 00:17:49\n\nAnd it could even be worse.\nLike Taproot could never activate at all, according to the old nodes.\nBecause if you go back before the speed trial, if the aliens basically re-orc back to 2020, they then, and then replay again, they might just decide to not signal for taproot and say taproot never happened.\nNow the reason we don't care about that this much is that this scenario is really, really, really bad.\nSo the analogy might be to say, well, if all of the Netherlands is flooded, are we really going to argue about this street name in Rotterdam that we have issues about?\n\nSpeaker 0: 00:18:25\n\nRight, yes.\nThe argument, I'll just...\nYou explained it clearly, I think, but still to reiterate, the argument is that if a reorg happens that is this bad, then Bitcoin is screwed either way and it's not worth considering even essentially, right?\n\nSpeaker 1: 00:18:45\n\nOr maybe at least you probably have to do some human intervention to decide what on earth you're going to do about this situation because it means that probably lots of people's coins won't exist anymore.\nAll the transactions may or may not be replayed again.\nSo unless you bought Bitcoin in 2011 and you just huddled and never moved them, you're gonna be impacted by this event.\nAnd the whole point of a money system, you know, kind of goes away if that much changes.\nIt's Very similar to in a fiat system, if suddenly your bank account is zero or a million, depending on some random historical glitch, are you really going to just keep on going with the bank balance or are you going to do something else?\nIt's a big disaster if this happens.\n\nSpeaker 0: 00:19:28\n\nYeah.\nWell, so On the other side of the debate is, for example, Eric Voskow, who's the lead developer of Libitcoin.\n\n## Eric Fossel\n\nSpeaker 0: 00:19:36\n\nAnd he argues, or at least one of his arguments is that this threshold that you just...\nLike at what point is this the case?\nAt what point doesn't it matter anymore that there's a big reorg?\nIs it after a day?\nIs it after two days?\nIs it after a week, two weeks?\nWhere is this threshold?\nAnd I guess he values consistency a lot when it comes to these kinds of things.\nAnd his argument would be, or is, I think, well, I need to be careful to represent his arguments because he might disagree with my explanation of it.\n\nSpeaker 1: 00:20:16\n\nWe could say a hypothetical argument could be whether or not somebody makes\n\nSpeaker 0: 00:20:19\n\nthe argument.\nMaybe that's better.\nYeah.\nThe only consistent arguments there is that there is no threshold.\nIt's just for each block, you need to assign a probability that it's going to make reorgs harder.\nSo the more confirmations you have, it will just make a reorg harder and harder and harder.\nAnd it's kind of how we apply it already.\nLike, one confirmation is not as secure as two confirmation is not as secure as three.\nAnd this change would imply that there's some hard cutoff to that logic, rather than it's just always going to be incrementally safer to wait longer.\n\nSpeaker 1: 00:21:01\n\nNow there is actually a real cutoff because very old versions of Bitcoin Core use checkpoints, but that hasn't been done for many, many years.\nBut a checkpoint basically meant that that specific block had to exist.\nSo there are a couple of blocks in the source code that say this block must exist, otherwise the chain is not valid.\n\nSpeaker 0: 00:21:18\n\nYes, but that's not, you know, that is itself also controversial.\n\nSpeaker 1: 00:21:22\n\nYeah, I think it's good that those don't exist anymore.\n\nSpeaker 0: 00:21:25\n\nRight, exactly.\n\nSpeaker 1: 00:21:25\n\nBut this is not as strong as a checkpoint.\nThe only thing you could argue, and I think maybe that's what Voskall was arguing, is that the fact that you're now retroactively, in a certain sense, activating taproot is in a way a hard fork.\n\nSpeaker 0: 00:21:41\n\nNo it is in a way a checkpoint.\nA checkpoint says\n\nSpeaker 1: 00:21:46\n\nthis specific block has to exist.\n\nSpeaker 0: 00:21:48\n\nYes.\nThis\n\nSpeaker 1: 00:21:48\n\njust says these rules have to apply,\n\nSpeaker 0: 00:21:50\n\nregardless of what the blocks are.\nNo, sure.\nBut it does have sort of the similar implications for it, because you're assuming that before that block, no split could have possibly happened.\nOtherwise, you would have to check, right?\nAm I saying that right?\nI think so.\n\nSpeaker 1: 00:22:06\n\nWell, I mean, the problem with checkpoints is you could have almost completely arbitrary rules, right?\nIt gives too much power to the people who decide what is a checkpoint.\nBut I think in the case of Taproot, you don't have that discussion because it's not that by having this rule or by not having this rule, that Taproot is always active.\nIt doesn't really matter that much.\nIt's like there's not a specific person who stands to benefit from whether or not that rule happens.\nWe can't predict what the disaster is going to look like.\nSo that's why I think it's not as bad as a checkpoint.\n\nSpeaker 0: 00:22:37\n\nSo yeah, whether or not it's a checkpoint or some kind of checkpoint or some kind of subcategory of a checkpoint is maybe not the important part.\nThe important part here is that one group of developers, I guess mostly in Bitcoin Core, figure that if there's a reorg this big, then Bitcoin is screwed anyways.\nWhile someone like Foscale will argue, you know, there's no single point where you can make that argument.\nThere's no point where Bitcoin will be that if the reorg is that bad.\nIt just, you know, gets incrementally worse for, you know, every extra block that's being reorg.\nBut there's no objective point you can point to and therefore the only sort of logic that you can apply is simply long as spell chain, that's what will you accept to be Bitcoin.\n\n## What is signaling\n\nSpeaker 1: 00:23:27\n\nSo this reminded me of the other argument that you can have here, which is, do we look at only the blockchain?\nLike should nodes only look at the blockchain or should nodes keep into account sort of the social consensus?\nAnd that gets back to what signaling means.\nIs signaling something that must occur on the blockchain and then a soft fork is active?\nOr is it a way to coordinate the activation of a new set of rules in a point in?\nAnd so in essence, does a soft fork activate on a chain or does it activate in a chronological point in, you know, the space-time continuum?\nSo can we say as of November 21 or whatever date it was, 2021, Taproot is active.\nIf you produce blocks in the future, even no matter what the height of those new blocks is, it's still after November 21, 2022, and therefore you should know that Taproot is active and you should just enforce it.\nThat is, of course, also a philosophical question you can have.\nAnd If you agree with the latter, if you say Taproot should be considered active after a chronological point in time, well then this deep re-orker is not a problem because you'll enforce Taproot.\n\n## Two visions\n\nSpeaker 0: 00:26:28\n\nWell, I think there's two issues here.\nOr, or at least there's one thing to point out, and I think that's what you're getting at.\nSo there are sort of two visions on what the activation logic is in the first place.\nSo everyone agrees basically what a soft fork is, and that's, you've explained it a couple minutes ago, and I think everyone will agree on that.\nBut then there's the activation of the soft fork, sort of the activation logic, like you must signal or the signaling logic itself, which is something some developers will itself consider a soft fork, while other developers will argue that's the word you used before, that's scaffolding, That shouldn't be considered a consensus change.\nSo I think that the arguments, at least if you hold the second opinion, of removing the signaling logic from the code, that's a much easier argument to make, which I also mentioned before, I think.\n\nSpeaker 1: 00:27:30\n\nYeah, I mean, we presented these two parts of the burying, right?\nSo the first part is we're going to apply the rules from Genesis, and the second part is we don't check the rules.\nAnd in that order, that's one way to look at it in that order, but you can look at it in the other order.\nI guess that's what you're saying now, if you just drop the signaling requirement.\n\nSpeaker 0: 00:27:48\n\nYeah, but you were making a point about social consensus applying to time.\nBut you can still apply social consensus to the blockchain itself.\nSo you can still argue that there's no reason for the signaling other than informing people that a soft fork is happening while still applying it to the actual blockchain and therefore accepting that a soft fork didn't happen if there's a big reorg even though we're past a certain date.\n\n## Signaling history\n\nSpeaker 1: 00:28:15\n\nYou could, but if you go back to the history of Softworks, you know, we did that in another episode, but basically the reason miners started signaling, that wasn't the case.\nThe earlier Softworks and Satoshi's code were just activating at a certain height.\nThat was a problem.\nSo the idea was to have miners signal for it and there were various ways to do that signaling and eventually we ended up with PIP 9.\nBut the reason for the signaling is to make sure that miners actually upgrade and are actually ready.\nAnd there's no reason to assume that with a big reorg they're suddenly unready.\nThey would have to downgrade their software, basically.\n\nSpeaker 0: 00:28:50\n\nThat's not something everyone agrees on, Sjoerd.\n\nSpeaker 1: 00:28:53\n\nThat's fine.\nThat's sort of the point I'm trying to make.\nIf that is your interpretation, if the interpretation is we use the signaling in the actual history of Earth, just to say, okay, now all the miners are ready, they have the latest software, they can enforce Taproot, then there's no reason to assume that when there's a deep reorg, they're certainly unready.\nBut you can also have the blockchain-centric perspective where you say, no, there is no reality outside the blockchain and outside this code.\nIn that case, you might say, no, if time is undone, it's like real time travel.\nWe've really changed history and taproot never happened or did or some other time.\nThat's a potential discussion you can have.\n\nSpeaker 0: 00:29:36\n\nYeah, well that's interesting you bring that up.\nI think that's right.\nSo these are sort of two ways of looking at signaling, whether it's informing Miners or whether it really means readiness signaling, which is definitely a term that has been used, but recently during the Taproot debates, there was also sort of this idea that signaling is really for users.\n\n## Weeds\n\nSpeaker 0: 00:29:57\n\nSo users know that a certain change will activate, which also allows them to fork off if they disagree with the change, for example.\nAnd that's really the reason for signaling.\nSo, I think we're getting really into the weeds at this point.\nI think it's interesting, but We might be losing some listeners by now.\n\nSpeaker 1: 00:30:17\n\nThat's fine.\nWe've shown the listeners where the weed is.\nRight.\n\nSpeaker 0: 00:30:27\n\nWhere the weed is?\n\nSpeaker 1: 00:30:28\n\nYeah, maybe not the best analogy.\nWe've shown them very deep into the rabbit hole.\nThey can explore more for themselves by just reading these mailing list threads.\nWe'll probably put them in the show notes.\n\nSpeaker 0: 00:30:38\n\nYeah, no, there's one other thing we do need to bring up.\nOkay, we're jumping around now, so the episode's getting confusing.\nSorry, people.\nBut there is this other...\nSort of what it ultimately comes down to this discussion, I think, is whether burying a soft fork, As we've explained throughout this episode, whether that should be considered a consensus change or not, and by extension, whether it should be a BIP, Bitcoin Improvement Proposal.\n\n## Bibs\n\nSpeaker 0: 00:31:15\n\nSo if you see it as\n\nSpeaker 1: 00:31:16\n\na consensus BIP, because you can have an informational BIP that's not a consensus BIP.\n\nSpeaker 0: 00:31:20\n\nYeah, can you though?\n\nSpeaker 1: 00:31:21\n\nYou can basically write a BIP that says, hey, if you're writing this type of, if you're writing a full note, you could consider burying the soft fork because it will make your life easier.\nBut keep in mind that, you know, if this time travel thing happens, you have a problem.\n\nSpeaker 0: 00:31:36\n\nIt's not really the point of BIPs though, Sjoerd, is it?\n\nSpeaker 1: 00:31:39\n\nWell, we've done an episode about BIPs. There are informational BIPs and there are consensus BIPs.\n\nSpeaker 0: 00:31:43\n\nWell, yeah, but they need to be relevant for other nodes.\nWell, they are.\nIt's good\n\nSpeaker 1: 00:31:48\n\nto explain to other nodes what you've done in your implementation that, you know, under extreme circumstances can make a difference.\n\nSpeaker 0: 00:31:55\n\nWell, you could, you can make a very general informational BIP of this is a thing you can do, but then that BIP doesn't need to include a specific block height, right?\nThat doesn't require...\nWell, that's the debate then.\nIs this a consensus change?\nIn other words, if there would be this big of a reorg, Should we expect all nodes to accept this reorg or reject it?\nLike, should they do the same thing?\n\nSpeaker 1: 00:32:23\n\nYeah, so this comes down to the little street in Rotterdam situation that I was talking about.\n\nSpeaker 0: 00:32:27\n\nHang on, let me finish this sentence.\nOr is this just a thing that developers can do as a shortcut in their own code.\nAnd then, essentially, if it does go wrong, that's the wrong problem.\nThat's a problem of that specific implementation.\nThat would essentially mean that that specific implementation has forked itself of the network.\nI think if you really go into this debate, that's sort of ultimately what it's about.\nAnd that's why I mentioned at the beginning of this episode that, you know, consensus changes are kind of interesting because it sort of says something about how do you define Bitcoin, what is Bitcoin.\nAnd this is an example where that actually applies.\n\n## What is Bitcoin\n\nSpeaker 0: 00:33:05\n\nLike if in this unlikely scenario would happen, then would the buried version be the real Bitcoin?\nThat the nodes that have the buried soft fork, would that be the real Bitcoin?\nOr would they fork themselves off of the real Bitcoin network?\n\nSpeaker 1: 00:33:18\n\nYeah, so we're talking about a specific deep re-org that actually violates the taproot rule, right?\nBecause there is a good chance that they don't violate taproot in the deep re-org.\n\nSpeaker 0: 00:33:27\n\nSo\n\nSpeaker 1: 00:33:27\n\nI think in general, it's a good idea to think about an extreme scenario like this.\nBut I think if you do that, you'll end up thinking, you'll end up seeing this is a really big problem.\nThere's all sorts of things we need to solve in such an event.\nAnd this little thing about buried consensus rules is somewhere on the to-do list of that giant project of okay what are we gonna do?\nLike is there some threshold that we say if this alien shows up?\nI guess in general we need a scenario what to do with the aliens.\nThe aliens might have extreme hash power, They might be able to just completely double spend everyone on the planet because they have some alien ASIC that can double spend any block at any depth and they can create Bjorks out of spite.\nSo or the secret government agency basically.\nIt might be useful to have a plan for that.\nI just think that this won't be the most interesting part of the plan because it's a really bad situation.\nAnd it probably means Bitcoin would be completely broken in that case.\nBut maybe not.\nMaybe there is a rational way to deal with it.\n\nSpeaker 0: 00:34:30\n\nThat's the difference of opinion, right?\nSome people like Eric Fosker will say Bitcoin isn't broken, Bitcoin is working as intended, long as valid chain still applies.\nThere was a long re-org that's part of the Bitcoin consensus system.\n\n## Conclusion\n\nSpeaker 1: 00:34:46\n\nYeah, but the question is, can you use it for practical transactions if that can happen again and again and again and again?\nI would probably say no.\nIt's just the same reason with lots of altcoins that try to use SHA-256 and those altcoins are completely, you know, yeah, technically they're still valid chains.\nIt's just that nobody uses them anymore.\nSo I think it's good to have some sort of thought about what to do with the alien invasion.\n\nSpeaker 0: 00:35:13\n\nSo I want to close off this episode, but I want to ask you then, personally, should this be considered a consensus change?\n\nSpeaker 1: 00:35:23\n\nNo, I think this is\n\nSpeaker 0: 00:35:24\n\nsort of...\nOr is this a developer shortcut at their own risk?\n\nSpeaker 1: 00:35:29\n\nYeah, I think it's a developer shortcut, but the idea of a one-year re-org is undefined behavior, I think.\nSo I think there is no consensus rule for a one-year re-org.\nThat's my opinion.\nIt's a disaster that's not been worked out.\nThere's just no contingency plan.\nIt's like saying what do we do if the 55 nukes go off over Amsterdam?\nYou know, what's the can you still go into a hospital without a mask?\nI don't know.\nIt's undefined But maybe it should be defined.\n\nSpeaker 0: 00:35:59\n\nI mean, I guess I disagree with you.\nI think it's deviant as long as it's ValorChain.\nThat's it.\nThat's fine.\nWell, then I guess that's the episode, Shors.\n\nSpeaker 1: 00:36:09\n\nThat's\n\nSpeaker 0: 00:36:09\n\nright.\nWe've reached the point, we've kept pulling the threads to the point where sort of the disagreement emerges, I think, of the broader discussion.\nYeah.\nI hope our listeners could follow.\nI think it was maybe a bit messy because it's a complicated topic, but I thought it was kind of interesting.\n\nSpeaker 1: 00:36:29\n\nYeah, I think so too.\nYeah, especially the fact that we're talking about hypothetical time machines in a situation where we lost one recording.\nIn other words, we also have this hypothetical time machine.\nDid we say this before?\nWas it really set?\nBecause we said it without recording it.\n\nSpeaker 0: 00:36:43\n\nI'm sure that didn't help.\nYeah.\n\nSpeaker 1: 00:36:45\n\nSo anyway, thank You\n\n",
    "body_type": "markdown",
    "created_at": "2022-02-25T00:00:00.000Z",
    "domain": "https://btctranscripts.com/",
    "url": "https://btctranscripts.com/bitcoin-explained/security-issue-burying-bitcoin-soft-forks",
    "categories": [
        "podcast"
    ],
    "tags": [
        "security",
        "taproot"
    ],
    "media": "https://www.youtube.com/watch?v=C7wG2ngayy8",
    "authors": [
        "Sjors Provoost",
        "Aaron van Wirdum"
    ],
    "indexed_at": "2024-03-21T16:33:36.160Z",
    "transcript_by": "kouloumos via tstbtc v1.0.0 --needs-review",
    "summary": "In the insightful dialogue offered by Sjors Provoost and Aaron van Wirdum in their latest episode of Bitcoin Explained, the topic of burying soft forks within the Bitcoin protocol is dissected with a blend of humor and expertise. The conversation sets out to demystify the complex process of integrating soft forks into the Bitcoin network, highlighting how these modifications serve to refine and secure the system by restricting certain transaction types. This foundational knowledge segues into an exploration of the Taproot upgrade, exemplifying the challenges and triumphs associated with activating new features on the blockchain, underscored by the critical role of community consensus and technical meticulousness.\n\nThe core discussion pivots to the nuanced practice of burying soft forks, whereby historical upgrades are treated as inherent elements of the Bitcoin Core code, barring specified exceptions. This methodological shift not only simplifies development efforts but significantly bolsters testing efficiency within the RegTest framework. By simulating a blockchain environment where upgrades like Taproot are perpetually active, developers gain a streamlined avenue for identifying and addressing potential issues, ensuring the network's optimal functionality.\n\nProvoost and van Wirdum delve deeper into the philosophical and technical ramifications of modifying Bitcoin's protocol, articulating the delicate balance between innovation and the preservation of the network's foundational principles. They reflect on the existential queries that emerge from such endeavors, emphasizing the importance of cautious and deliberate evolution within the Bitcoin ecosystem.\n\nThe dialogue further broadens to cover the procedural aspects of code cleanup in the wake of enforcing Taproot rules, emphasizing the substantial benefits of this approach in reducing code complexity and facilitating more straightforward testing processes. This conversation piece transitions into a theoretical exploration of potential challenges, including blockchain splits and the hypothetical scenario of significant blockchain reorganizations (reorgs) instigated by powerful adversaries. Such discussions underscore the resilience of soft forks and the philosophical debates surrounding the validation of blockchain reorganizations, touching upon the contentious use of historical checkpoints and the fluid nature of consensus within the Bitcoin community.\n\nAs the episode concludes, Provoost and van Wirdum revisit the cruciality of ongoing development and maintenance efforts in bolstering Bitcoin's robustness against both theoretical and practical threats. They muse on the intricate balance between advancing technical efficiencies and upholding the decentralized ethos that underpins Bitcoin. Through their comprehensive analysis, the speakers offer listeners a profound understanding of the intricacies involved in the evolution of Bitcoin, inviting further contemplation on the future of this pioneering cryptocurrency amidst an ever-changing technological landscape."
}