{
    "id": "bitcointranscripts+bitcoin-explained+what-is-miniscript",
    "title": "What is Miniscript",
    "body_formatted": "{\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Miniscript.\\nIt's a project, I guess that's how I would describe it.\\nIt's a project by a couple of Blockstream engineers, even though it's not an official Blockstream project, but it's Pieter Wuille, Andrew Poelstra.\\nAnd then, there was a third name that was as well-known, Sanket Kanjalkar.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, I believe he was an intern at Blockstream at the time.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"He may have been an intern, yes.\\nSo they developed this idea called Miniscript.\\nSo let's just get into what it is.\\nOkay.\\nSo to sort of spoil what it is a little bit before we get into that, it's sort of a simplified stripped down version of Bitcoin Script, which is the program language used in Bitcoin.\\nSo far so good?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nOr it's a template, basically.\\nIt's a template of Bitcoin Scripts that you can use.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"A template of Bitcoin Script is how you would describe it.\\nOkay.\\nSo let's get started.\\nFirst things first.\\nscripts, Bitcoin Scripts.\"}, {\"type\":\"heading\",\"text\":\"Bitcoin Script\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"I think, two episodes ago, we explained that it was actually good to add constraints to money.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Right, yes.\\nThis was in the Taproot episode.\\nYou explained how actually putting some restraints to money would be a good thing, in the context of Bitcoin.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Right.\\nSomebody, if you're sending me money, everybody can see the Bitcoin transaction.\\nSo you want to make sure or in particular, I want to make sure that I'm the only one who can spend it.\\nSo I'm telling you, make this transactions such that it can only be spent by my public key.\\nAnd the way that's done is using a script.\\nEven though it's a very simple script and most people use the same script, it is actually a script.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, and Script is actually a programming language.\\nIt's a new programming language.\\nIt was introduced in Bitcoin.\\nLike it didn't exist before, although it resembles something that did exist before, which is called Forth.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Yes.\\nIt basically, it's pretty horrible.\\nI mean, it looks like it was just-\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"It's a horrible programming language.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"I think so, it seems to be cobbled together as an afterthought, but I think it was only later that people realized that you can only change Bitcoin through very carefully grafted soft forks.\\nSo you can't just say, \\\"Oh, let's just start with a draft language,\\\" and then clean it up later.\\nSo it's been a complete nightmare to make sure that language doesn't do anything surprising, anything bad.\\nSo a lot of the operations that were part of the language have been removed almost immediately, because they were all sorts of ways that you could just crash a node or do other things.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Right.\\nThese were removed early on.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"I mean, Ethereum had a similar experience in 2015, right?\\nWhere complex programs could do all sorts of unexpected things, but Bitcoin had that in the beginning too.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"So just to remind our listeners, what kind of restrictions can they put on a transaction?\\nWhat kind of restrictions are we talking about here?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"So the main restriction would be that only the owner of a specific public key can spend this transaction.\\nI think that's the typical pay to public key hash transaction.\\nAnd maybe we want to demonstrate how that works.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Go for it.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"So, it's a stack-based language and a stack like a stack of plates.\\nYou can put plates on it and you can take the top plate off, but generally you don't want to just take a plate out of the middle.\\nAnd this is just easy to implement as a programming language in general.\\nSo when people make early computer processors, it was just easier to have a memory where you could only put things on top of it and take the top element off.\\nYou didn't have addresses, like with memory, you have to say which part of the memory do you want, with a stack you just say, put something on it, take something away from it.\\nSo the standard Bitcoin Script reads as follows, it's very beautiful.\\nIt's `OP_DUP` as in double, duplicate, then `OP_HASH160` as in take the 160 SHA hash.\\nAnd RIPMED hash, then the public key and then `OP_EQUAL_VERIFY`.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"So it's four elements, duplicate, hash, pubKey, and then Equal Verify.\\nAnd if you kind of walk through what that does, let see if where I have it.\\nSo what happens when the blockchain encounters this script, it's going to be in the output of a transaction.\\nSo the output of a transaction shows the script that it's locked with and the amount.\\nNow, if you want to spend that, what you do is you publish what you want to put on the stack, and then you sign it essentially.\\nWell, actually you just publish what you want to put on the stack.\\nAnd that probably includes a signature.\\nSo when-\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"By publish, you mean generated new transaction.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nSo the input of your transaction.\\nWhat that actually looks like is basically, a couple of things that you're putting on the stack.\\nAnd what the Bitcoin interpreter will do is it'll see the stuff you put on the stack, and then it starts running the program from the output.\\nSo given your stack, it starts running the program from the output.\\nSo in this case, what you put on the stack is your signature and your public key, because the original script did not have your public key, it had the hash of your public key.\\nOkay.\\nSo we start with a stack that has two plates.\\nPlate 1 at the bottom is your signature and on top of that is a plate with your public key.\\nAnd then the script says `OP_DUP`.\\nAnd what `OP_DUP` does is takes the top element of the stacks, takes the top plate, the public key and duplicates it.\\nSo now you have two plates with a public key at the top of the stack.\\nAnd your signature's still at the bottom.\\nThen the next code, the next instruction is `OP_HASH160`.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"So what this does is it takes the top thing from the stack, which is one of those public keys, it hashes it and then puts the hash on the stack.\\nSo now the stack is-\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Oh, you want-\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"I'm trying to interrogate you here.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Apparently.\\nNow the stack is a hash and the public key, I didn't keep up.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"So, at the bottom is the six, still the signature, then there's a public key and then there's the hash of the public key, that's what's on the stack.\\nSo the next operation is pubKeyHash.\\nSo that is the hash of your public key again.\\nSo now the top of the stack is two times the hash of your public key.\\nAnd then the next operation is `OP_EQUAL_VERIFY`.\\nSo that basically takes the two things off the top of the stack says, hey, are these the same?\\nYes.\\nSo indeed, did you put the hash of your public key?\\nAnd then, the last thing that's left on the stack is only again, your signature and your public key, and it calls object six.\\nSo it checks the signature using your public key.\\nAnd then, the stack is empty and everything is happy.\\nThat's how the Bitcoin program is run.\\nAnd you can do arbitrarily complicated things.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"I'm very happy Sjors.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nYou can do arbitrarily complicated things that way.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"So yeah, so basically this stuff is telling your computer what to do, what to check, see if stuff matches, if it matches it's okay, if it doesn't match, it's not, depending on whether it should match or not.\\nAnd that's defined by code-\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"But notice that-\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"That's what we're doing here, right?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nBut notice that you don't have to check a signature.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Exactly.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"You could just have a script that says, yeah, it's fine, just take it.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Yes, or you could have a script that says you either need a valid signature or you need 34 invalid signatures.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"You can do very strange things.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"You can do weird things.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Yes, very strange things.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Okay.\\nSo that's kind of the point we're getting at here, I think, right?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Yes.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"The script's language is diverse enough to allow for weird stuff.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nAnd another question is, if you're are just sending money to yourself, you only need this very simple standard script that everybody's seen a million times.\\nBut let's say you're collaborating, you want to do a Multisig.\\nNow there's actually an instruction to do Multisig, but let's say that didn't exist.\\nSo one way you could do a Multisig is say the script we just explained with my public key in it or my public key hash.\\nAnd then, the script we just explained with your public key hash, just in sequence, right?\\nSo that if that's executed, I will not repeat the process we just did before.\\nBut you essentially start with those two public keys and two signatures on the stack and you run both of these scripts in sequence, and then if both people signed, it's all good.\\nSo you have a poor man's Multisig.\"}, {\"type\":\"heading\",\"text\":\"Problems associated with Bitcoin Script\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"But if I'm evil or stupid, I could make this a REKT-man, Multisig, sorry for the joke.\\nAnd that is achieved by, in the middle, inserting an op code called `OP_RETURN`.\\nAnd the `OP_RETURN` code basically says, all right, stop evaluating this program, you're done.\\nNow, if I had an electronic lawyer that wanted to check that this Multisig is what it says it does, or in fact, if you had that lawyer, your lawyer might say, \\\"Well, I see that my signature's being checked and whatever the rest of the script does, I don't care, but my signature's being checked, so I'm happy with this,\\\" but of course, you shouldn't be happy with this.\\nSo your electronic lawyer should see that `OP_RETURN` statement and warn you.\\nBut the problem is there's a trillion ways in which scripts can go wrong and that is why you need a standardized way of dealing with these scripts.\\nAnd that's where Miniscript is-\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"I'll read a little fragment from Andrew Poelstra, who I interviewed a long time ago when I wrote an article on this.\\nSo the example he gave was, and I'm not going to pretend like I understand everything he said in this quote, but that was sort of the point of the quote for me, that it was exemplifying the complexity of potential ways to mess around with script.\\nAnyways, so the quote was, \\\"There are op codes of Bitcoin Script, which do really absurd things like interpret a signature as a true false value, branch on that, convert that Boolean to a number and then index into the stack and rearrange the stack based on that number.\\nAnd the specific rules for how it does this are super-nuts.\\\"\\nYou probably actually follow that perfectly.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"No.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"I don't, oh, you don't either.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"I kind of do, but the analogy would be, you have the stack of plates and you take a hammer and you smash one, and then you confuse two and you paint one red and then it still works, if you do it correctly.\\nIt's completely absurd.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Or another analogy I think you gave before this recording, correct me if this is not the right way of explaining this analogy, but it's like you have a contract and it says, you're buying this house and these are all the conditions.\\nAnd then there's a small letter, which says, unless there's two commas in a row, somewhere in this contract, in which case all your base are belong to us.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Exactly.\\nExcept that this will be like the law, right?\\nSo the contract doesn't say that at all.\\nIt's just that the law that's in this country has that stupid rule.\\nIf there are two commas in a contract, you're giving away your money.\\nOkay, that's the script interpreter of all the consensus rules, which are quite complicated.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Okay.\\nSo I think we've now broken down the problem with scripts.\\nIt's a shitty programming language or at least it's easy to make mistakes or hide bugs in there and make all sorts of complex arrangements that people might or might not notice and then your money goes to places where you don't want it to go.\\nThat's the summary, right?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nAnd we've seen in other projects how bad things can go if you have a very complicated language that does things you're not completely expecting.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Are you referring to a project that rhymes on methereum?\\nI think we're on the same page.\\nYes.\\nOkay, so solutions we're getting to the solution part of the story.\"}, {\"type\":\"heading\",\"text\":\"How Miniscript solves Bitcoin Script's problems\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"So what you're basically doing, what Miniscript is doing is it's taking certain example scripts, so sequence of op codes, and it lists, I think about 20 of them, 20 templates.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"This is Miniscript?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Yes.\\nIt lists a few dozen templates.\\nIt not use all of the available Bitcoin Script, it uses a subset of it.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Right, right.\\nSo let's say Bitcoin Scripts has 100 tools.\\nI have no idea if it's-\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Something like that.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Anyway, close to 100, I'm just throwing out a number.\\nThe Miniscript says, okay, let's throw out 80 of these, because these are just got to cause a mess and let's keep 20, and that way it's going to be a little bit simpler for everyone.\\nIs that right?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Right.\\nSo if Bitcoin Script uses an alphabet essentially, and Miniscript hasn't set of words.\\nSo it's not a subset of the alphabet, but it's a subset of words.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"I see.\\nOkay.\\nThat's a better analogy.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"So there's certain patterns of op codes that you're allowed to use.\\nAnd if you use those patterns in the way they describe.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"So this double comma is removed now.\\nIt's not in here anymore.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nThere's no double comma, or there is-\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"That was [crosstalk 00:12:58] anyways.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"But it is used in a very precise way.\\nSo basically, Miniscript.\\nYeah, it removes some of the foot guns, but it also allows you to do very cool stuff safely.\\nIn particular, it lets you do things like, AND.\\nSo you can say condition A must be true AND condition B must be true and you can do things like, OR.\\nAnd whatever's inside the OR, or inside the AND, can be arbitrarily complex.\\nSo with Bitcoin Script, you have if and else type of statements, but if you're not careful, those if and else statements will not do what you think they're going to do.\\nSo with Miniscript, there is-\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Because there's more complexity hidden after the IF for example.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Yes, exactly.\\nAnd the Miniscript basically, the templates make sure that you're only doing things that are actually like doing what you think they're doing.\\nSo they really contain it.\\nAnd that allows you to do nice things.\\nSo let's say you're a company and you offer semi-custodial wallet solution, where you have one of the keys of the user and the user has the other has two keys, for example.\\nSo you're not, you don't have a majority of the keys and maybe there's a five-year timeout where you do have control in case the user dies, something like that, right?\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nLike a Multisig kind of set-up.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"And so, normally when you set up a Multisig, the way you kind of set it up is everybody gives their key, their master key, their expo, for example, and you create a very simple script that has three keys and three people sign.\\nBut the problem is, because you're a big business that offers a service, you have some really complicated internal accounting department and you maybe want have five different signatures by specific people in God knows what complexity, but you don't want to-\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nYou have five members on the board.\\nYou want three of them to sign.\\nUnless maybe the CEO.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"And especially once we have-\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Get some sort of special right from two of the board members and then-\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"And there's a code hidden in an envelope inside the nuclear suitcase that has an override.\\nExactly.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Exactly.\\nThat's like all sorts of complex stuff you can do with it.\\nAnd all the complex stuff should count as one key, like right, that's where you're getting at.\\nYou don't really care how the complex stuff is solved.\\nThat's up to the company.\\nYou figure it out company.\\nAs long as it's just clear to us that it's only one key, however you do it.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Exactly.\\nNow the problem with that is if I gave you...\\nYou can do that with script or with Taproot, but how do I, as a customer know, I would have to hire my own electronic lawyer to check that script of yours, that it doesn't have any of these double comma, little gimmicks in it.\\nAnd if only there was a way you could check that and Miniscript is done such that you can check that as long as the script that you're getting is compatible with Miniscript, because Miniscript to normal script is two ways.\\nSo you can take any Miniscript, turn it into a normal script.\\nYou can take any normal script and turn it into a Miniscript.\\nWell, unless it doesn't match, right?\\nIf there's codes in it that don't apply, then it just doesn't compile or doesn't translate.\\nSo, and if you can turn something into Miniscript, then you can analyze it using all sorts of tools that can analyze any Miniscript.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"So what you would have is every wallet out there could have a Miniscript interpreter and the interpreter could show you a little pie chart and saying, you are this one piece of the pie, and there's this other piece of the pie that is really complicated, but you don't have to worry about it.\\nIt's not going to do anything sneaky.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Right.\\nThat's good.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"That's excellent.\\nYeah.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"One of the things that I, so, I mean, we're making a podcast, so we can't actually see show this, unfortunately, but Poelstra for example, he's drawn this out.\\nYou can actually draw out what a contract would look like.\\nApparently that's not really possible with this script.\\nAll this was news to me when I-\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"You can, it's just this horrible manual tedious, yeah.\\nI mean, I imagine the people from Liquid, for example, that have a 13 of five Multisig with all sorts of fallbacks.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Okay.\\nSo, that's probably drawn out at some point.\\nBut with Miniscript, it's actually fairly simple to draw it out.\\nAnd you can show this to a CEO who has no idea about scripts or Miniscripts.\\nYou can just look at the picture and figure A, yep, that's sort of what I want the blue and red squares to be.\\nAnd if these keys work out like this then seems like a good idea to me.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Exactly.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"So that's actually possible now.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nWith Miniscript, but wait, there's more.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"There's more.\"}, {\"type\":\"heading\",\"text\":\"Policy Language\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"And that's called the policy language.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"No, I want to get to, I want to ask you something else first.\\nWith Miniscripts, I do think there are strictly, technically speaking, there are some limitations, like there is stuff you can't do with Miniscripts, right?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Yes.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"But as far as I understand, these are stuff, no one actually does anyways.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Well, that's not necessarily true.\\nSo the thing is, but this is, we have to go to policy language before I can explain that.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Oh, we do?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Yes.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Because you have this in mind already.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"So let me just quickly explain-\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"You got this episode planned out way better than I do.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Well to understand why you might want to do really complicated stuff, I need to explain what the policy language is.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Okay.\\nGo for it.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"So a policy language poorly named, or maybe not poorly named is a way to express your intentions.\\nSo for example, say I want two signatures and this can be translated or compiled, I think is the better term too Miniscript.\\nAnd the nice thing is in policy language-\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"So to be clear, the policy language is the stuff like if someone like you Sjors, you're building a wallet.\\nI don't know you're doing something on your computer, improving Bitcoin, then you're typing.\\nAnd the stuff that comes out of your fingers is policy language.\\nAnd then, you actually compile that to script later on.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nI mean, you could just write the script directly or you could write the Miniscript directly, but the nice thing about writing the policy language is that you can have a compiler that can be very smart.\\nSo a simple policy language might be just give me two of two signatures.\\nAnd the policy language would probably convert that to `OP_MULTISIG` or we'll convert that to Multisig in Miniscript and Multisig in Miniscript is just `OP_MULTISIG`.\\nSo that's super-trivial.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Okay.\\nSo whoever wrote the policy language, and I know Pieter Wuille, for example, wrote the policy language for this.\\nIt was him, it was his brain basically.\\nHe figured out all the best ways to compile this policy language into Miniscript, right?\\nHe must have somehow figured it out then.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"He wrote a compiler.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"See, I don't know anything about this stuff.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"That's okay.\\nSo basically, you write a policy language, it's like a higher level programming language.\\nSo if you have a higher level programming language like, I don't know, Basic, you can say go to five.\\nI don't know if you've ever worked with Basic.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Sure.\\nI can't code hello world.\\nIsn't that clear to you by now?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Well, I mean, hello world-\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"I've coded hello world once, but that's pretty much how limited I am.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"What language did you code hello world in?\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"I don't remember.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"That's amazing.\\nAnyway, so what happens is usually when you see a programmer looking at a screen, you see something that looks like English, with words like four and next and yada yada, but eventually the machine is just reading bits and bytes.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Sure.\\nNo, I understand that part.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"So the bits and bytes are very close to what Bitcoin op codes look like.\\nThey're very low level.\\nThey're very instructions like put this on the stack, take that away from the stack.\\nAnd the Miniscript is essentially the same.\\nIt's just only a subset of it, but it's slightly more readable, but it's still extremely low level.\\nThe policy language is slightly higher level.\\nSo what you do is you start at the higher level, which is easier for a programmer to write and then a computer looks at that high level language and says how can I write this into low level machine readable stuff as efficiently as possible?\\nSo in the case of the Multisig thing, I might say, I just want two out of two signatures.\\nI don't care how you do that.\\nThen the compiler knows that there are multiple ways to do that.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"But how does compiler know this?\\nI hope there's listeners out there that knows little about this as I do.\\nSo they might learn something.\\nHow does the compiler know this?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"So disclaimer, I don't think I've ever written a compiler.\\nI'm not that cool.\\nBut generally compilers know, because somebody wrote the compiler.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Well, but that was my point.\\nIt must have come from Pieter Wuille's brain in this case.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Of course.\\nEverything comes out of Pieter Wuille's brain.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"And there we go.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"But basically, the compiler knows, okay, there's maybe two or three ways to do this, this to execute his intention.\\nAnd then, the question is, which of the three of them am I going to pick?\\nWell, then it depends on the transaction weight and the fees that you might be involved, but also you can tell it, okay.\\nI think most of the time it's condition A, but only 10% of the time it's condition B.\\nAnd then the compiler can try condition A nine times, condition B nine one time and then figure out what the expected fee is.\\nSo it can optimize for typical use cases, worst case scenarios, all these things, and it can then spit out a Bitcoin Script or a Miniscript that then becomes a Bitcoin Script.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Yes.\\nThe compiler figures out the best way to do something.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"And in very practical terms, another thing it could do, I don't know if it can already do that is you have SegWit scripts now, but we'll have hopefully half Taproot, which can put things in a Merkle tree.\\nSo your compiler could figure out where to put stuff in the Merkle tree.\\nYou don't have to worry about how to build the Merkle tree.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Right, yes.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"So it can do all sorts of things.\\nSo you started the policy language and then you write Miniscript and that goes into whatever-\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Okay.\\nSo that's what a compiler is.\\nA policy language you use, you put it into the compiler and then Miniscripts comes out of it, which is in a way script.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Yes.\\nI think the technical term for going from Miniscript to script is trans-piling, which basically is like a one-on-one thing you can do in two directions.\\nSo you can go from Miniscript to script, from script to Miniscript, but you cannot go back to a policy language.\\nWell, you can guess the policy language.\"}, {\"type\":\"heading\",\"text\":\"Miniscript Limitations\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"You can.\\nYeah, I guess so.\\nYes.\\nI understand that.\\nAnd then getting back to, are we ready to go back to my question about limitations?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Absolutely.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"So now there are some limitations when you're using, I guess, this policy language or Miniscripts in general.\\nBut these are limitations that no one actually suffers from is, is how I understood it.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Not necessarily.\\nI mean, ideally yes, but in practice, some scripts are, some policies might be very complicated and there would be infinite ways to execute these in Bitcoin Scripts.\\nAnd because of all these weird double comma foot guns that are in Bitcoin Script, sometimes that's an advantage.\\nSometimes you can write something really efficiently in Bitcoin Script, that is just really horrible, if you objectively look at it, but it is really fast or really fee-efficient.\\nAnd in fact, I believe Lightning uses that the way they sometimes deal with time locks or with hashes or nonces.\\nThere's some tricks in Lightning I believe that you cannot do a Miniscript or at least you could not do a Miniscript, maybe you can now.\\nSo there are some optimizations where like what Poelstra said, \\\"Oh, you do some weird switching of the stack and you interpret things, not the way they were,\\\" you put a public key on it, but you interpret it as a number, those kind of weird tricks.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Those might be very hard to reason about, but a human might be able to do it, but the Miniscript compiler would not do it, which means you end up with longer, potentially longer Lightning scripts, if you do not have all the whistles and bells in it.\\nSo it's possible that Miniscript would be expanded if there is some other optimal way to do it.\\nBut you have to be careful, because if you...\\nYou really want to make sure there's nothing in Miniscript that brings back those scary properties of the underlying language.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Well, and to be clear, in cases, this isn't clear to anyone, Miniscripts is an addition to what there is already, like script is going nowhere, Bitcoin still use script, and that's the way it's going to be.\\nIt's just, this is an extra tool for people who want to use that.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"And in fact, it's not a consensus change at all.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"No, it's nothing in that.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"It's a tool that you can use or not use.\\nDon't worry.\\nIt's not Blockstream dominating the scripts here.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Okay.\\nSo we mentioned Pieter Wuille has this policy language.\\nI know this is very fresh and you probably haven't looked at it very much, but [inaudible 00:25:22] also wrote a policy language, you haven't studied that yet, I think not.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"I have not yet.\\nSo I thought that would be a cliffhanger.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"That would be a cliffhanger, you like the cliffhanger.\\nSo that will be a cliffhanger for another episode.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Or never.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Or maybe we will have the one of those [inaudible 00:25:36].\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"But I can tell you from what I know about the policy language is that you're still some steps away from having a practical tool where you and I can set up a very complicated Multisig wallet.\\nThere's all sorts of questions you want to answer like, how exactly do you do this setup?\\nWhat are you emailing to each other?\\nAre you emailing your keys or are you emailing something a little bit more abstract that you agree on first and then you exchange keys?\\nThose very practical things that are not solved inside a Miniscript.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Let me at least mention it's called Minsc.\\nSo it's policy language, it's called Minsc.\\nOkay, I'm afraid we can't give you any more info about Minsc yet.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Well, I know Minsk with a K is a city.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Maybe one day.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"I think it's with a C.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Minsc with a C.\\nYeah, that's some extra info.\\nAll right, Sjors, is this the end of our episode?\\nDid we cover everything we needed to cover from Miniscripts?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"I hope so.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"It was maybe slightly messy.\\nSo let's sum it up.\\nMiniscripts is a subsection.\\nNo, you called it a template.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Yes.\\nIt's a template of script pieces.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Even this summary is getting messy now.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"So basically, Bitcoin Script is like an alphabet essentially, just different letters that have different meanings.\\nAnd you could see Miniscript is a set of words.\\nNot really words, because you can put things between the words, but maybe words and brackets and commas.\\nThat's what Miniscript is.\\nAnd then the policy language is the thing that can be converted to Miniscript.\\nIt's a bit more high level.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"And there are several of those apparently by now.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Yes, because yeah, exactly, because Miniscript, it has to be set in stone, I guess sort of, because you want to do all the safety checks on it, but then just like you can have different programming language, you can have different policy languages.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"Yes.\\nSo if you're into Bitcoin programming, this is what you want to study.\\nThis what you want to look at.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"If you're into Bitcoin programming the rabbit hole is massive and pick something.\\nThere's a talk by Andrew Poelstra.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"That is probably pretty good though, right?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nBut so there's a talk by Andrew Poelstra from Advancing Bitcoin, not the conference, but the meet up before it, the BitDevs London, where he talks for two hours about all the problems with regular script and why he hates things.\\nAnd that's just, he said he was going to do it in 20 minutes and I think he still didn't cover everything.\\nI don't think that's the best place to start.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum:\"}, {\"type\":\"paragraph\",\"text\":\"He's still on stage.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost:\"}, {\"type\":\"paragraph\",\"text\":\"He's still on stage out there just going through it.\"}",
    "body": "Aaron van Wirdum:\n\nMiniscript.\nIt's a project, I guess that's how I would describe it.\nIt's a project by a couple of Blockstream engineers, even though it's not an official Blockstream project, but it's Pieter Wuille, Andrew Poelstra.\nAnd then, there was a third name that was as well-known, Sanket Kanjalkar.\n\nSjors Provoost:\n\nYeah, I believe he was an intern at Blockstream at the time.\n\nAaron van Wirdum:\n\nHe may have been an intern, yes.\nSo they developed this idea called Miniscript.\nSo let's just get into what it is.\nOkay.\nSo to sort of spoil what it is a little bit before we get into that, it's sort of a simplified stripped down version of Bitcoin Script, which is the program language used in Bitcoin.\nSo far so good?\n\nSjors Provoost:\n\nYeah.\nOr it's a template, basically.\nIt's a template of Bitcoin Scripts that you can use.\n\nAaron van Wirdum:\n\nA template of Bitcoin Script is how you would describe it.\nOkay.\nSo let's get started.\nFirst things first.\nscripts, Bitcoin Scripts.\n\n## Bitcoin Script\n\nSjors Provoost:\n\nI think, two episodes ago, we explained that it was actually good to add constraints to money.\n\nAaron van Wirdum:\n\nRight, yes.\nThis was in the Taproot episode.\nYou explained how actually putting some restraints to money would be a good thing, in the context of Bitcoin.\n\nSjors Provoost:\n\nRight.\nSomebody, if you're sending me money, everybody can see the Bitcoin transaction.\nSo you want to make sure or in particular, I want to make sure that I'm the only one who can spend it.\nSo I'm telling you, make this transactions such that it can only be spent by my public key.\nAnd the way that's done is using a script.\nEven though it's a very simple script and most people use the same script, it is actually a script.\n\nAaron van Wirdum:\n\nYeah, and Script is actually a programming language.\nIt's a new programming language.\nIt was introduced in Bitcoin.\nLike it didn't exist before, although it resembles something that did exist before, which is called Forth.\n\nSjors Provoost:\n\nYes.\nIt basically, it's pretty horrible.\nI mean, it looks like it was just-\n\nAaron van Wirdum:\n\nIt's a horrible programming language.\n\nSjors Provoost:\n\nI think so, it seems to be cobbled together as an afterthought, but I think it was only later that people realized that you can only change Bitcoin through very carefully grafted soft forks.\nSo you can't just say, \"Oh, let's just start with a draft language,\" and then clean it up later.\nSo it's been a complete nightmare to make sure that language doesn't do anything surprising, anything bad.\nSo a lot of the operations that were part of the language have been removed almost immediately, because they were all sorts of ways that you could just crash a node or do other things.\n\nAaron van Wirdum:\n\nRight.\nThese were removed early on.\n\nSjors Provoost:\n\nI mean, Ethereum had a similar experience in 2015, right?\nWhere complex programs could do all sorts of unexpected things, but Bitcoin had that in the beginning too.\n\nAaron van Wirdum:\n\nSo just to remind our listeners, what kind of restrictions can they put on a transaction?\nWhat kind of restrictions are we talking about here?\n\nSjors Provoost:\n\nSo the main restriction would be that only the owner of a specific public key can spend this transaction.\nI think that's the typical pay to public key hash transaction.\nAnd maybe we want to demonstrate how that works.\n\nAaron van Wirdum:\n\nGo for it.\n\nSjors Provoost:\n\nSo, it's a stack-based language and a stack like a stack of plates.\nYou can put plates on it and you can take the top plate off, but generally you don't want to just take a plate out of the middle.\nAnd this is just easy to implement as a programming language in general.\nSo when people make early computer processors, it was just easier to have a memory where you could only put things on top of it and take the top element off.\nYou didn't have addresses, like with memory, you have to say which part of the memory do you want, with a stack you just say, put something on it, take something away from it.\nSo the standard Bitcoin Script reads as follows, it's very beautiful.\nIt's `OP_DUP` as in double, duplicate, then `OP_HASH160` as in take the 160 SHA hash.\nAnd RIPMED hash, then the public key and then `OP_EQUAL_VERIFY`.\n\nSjors Provoost:\n\nSo it's four elements, duplicate, hash, pubKey, and then Equal Verify.\nAnd if you kind of walk through what that does, let see if where I have it.\nSo what happens when the blockchain encounters this script, it's going to be in the output of a transaction.\nSo the output of a transaction shows the script that it's locked with and the amount.\nNow, if you want to spend that, what you do is you publish what you want to put on the stack, and then you sign it essentially.\nWell, actually you just publish what you want to put on the stack.\nAnd that probably includes a signature.\nSo when-\n\nAaron van Wirdum:\n\nBy publish, you mean generated new transaction.\n\nSjors Provoost:\n\nYeah.\nSo the input of your transaction.\nWhat that actually looks like is basically, a couple of things that you're putting on the stack.\nAnd what the Bitcoin interpreter will do is it'll see the stuff you put on the stack, and then it starts running the program from the output.\nSo given your stack, it starts running the program from the output.\nSo in this case, what you put on the stack is your signature and your public key, because the original script did not have your public key, it had the hash of your public key.\nOkay.\nSo we start with a stack that has two plates.\nPlate 1 at the bottom is your signature and on top of that is a plate with your public key.\nAnd then the script says `OP_DUP`.\nAnd what `OP_DUP` does is takes the top element of the stacks, takes the top plate, the public key and duplicates it.\nSo now you have two plates with a public key at the top of the stack.\nAnd your signature's still at the bottom.\nThen the next code, the next instruction is `OP_HASH160`.\n\nSjors Provoost:\n\nSo what this does is it takes the top thing from the stack, which is one of those public keys, it hashes it and then puts the hash on the stack.\nSo now the stack is-\n\nAaron van Wirdum:\n\nOh, you want-\n\nSjors Provoost:\n\nI'm trying to interrogate you here.\n\nAaron van Wirdum:\n\nApparently.\nNow the stack is a hash and the public key, I didn't keep up.\n\nSjors Provoost:\n\nSo, at the bottom is the six, still the signature, then there's a public key and then there's the hash of the public key, that's what's on the stack.\nSo the next operation is pubKeyHash.\nSo that is the hash of your public key again.\nSo now the top of the stack is two times the hash of your public key.\nAnd then the next operation is `OP_EQUAL_VERIFY`.\nSo that basically takes the two things off the top of the stack says, hey, are these the same?\nYes.\nSo indeed, did you put the hash of your public key?\nAnd then, the last thing that's left on the stack is only again, your signature and your public key, and it calls object six.\nSo it checks the signature using your public key.\nAnd then, the stack is empty and everything is happy.\nThat's how the Bitcoin program is run.\nAnd you can do arbitrarily complicated things.\n\nAaron van Wirdum:\n\nI'm very happy Sjors.\n\nSjors Provoost:\n\nYeah.\nYou can do arbitrarily complicated things that way.\n\nAaron van Wirdum:\n\nSo yeah, so basically this stuff is telling your computer what to do, what to check, see if stuff matches, if it matches it's okay, if it doesn't match, it's not, depending on whether it should match or not.\nAnd that's defined by code-\n\nSjors Provoost:\n\nBut notice that-\n\nAaron van Wirdum:\n\nThat's what we're doing here, right?\n\nSjors Provoost:\n\nYeah.\nBut notice that you don't have to check a signature.\n\nAaron van Wirdum:\n\nExactly.\n\nSjors Provoost:\n\nYou could just have a script that says, yeah, it's fine, just take it.\n\nAaron van Wirdum:\n\nYes, or you could have a script that says you either need a valid signature or you need 34 invalid signatures.\n\nSjors Provoost:\n\nYou can do very strange things.\n\nAaron van Wirdum:\n\nYou can do weird things.\n\nSjors Provoost:\n\nYes, very strange things.\n\nAaron van Wirdum:\n\nOkay.\nSo that's kind of the point we're getting at here, I think, right?\n\nSjors Provoost:\n\nYes.\n\nAaron van Wirdum:\n\nThe script's language is diverse enough to allow for weird stuff.\n\nSjors Provoost:\n\nYeah.\nAnd another question is, if you're are just sending money to yourself, you only need this very simple standard script that everybody's seen a million times.\nBut let's say you're collaborating, you want to do a Multisig.\nNow there's actually an instruction to do Multisig, but let's say that didn't exist.\nSo one way you could do a Multisig is say the script we just explained with my public key in it or my public key hash.\nAnd then, the script we just explained with your public key hash, just in sequence, right?\nSo that if that's executed, I will not repeat the process we just did before.\nBut you essentially start with those two public keys and two signatures on the stack and you run both of these scripts in sequence, and then if both people signed, it's all good.\nSo you have a poor man's Multisig.\n\n## Problems associated with Bitcoin Script\n\nSjors Provoost:\n\nBut if I'm evil or stupid, I could make this a REKT-man, Multisig, sorry for the joke.\nAnd that is achieved by, in the middle, inserting an op code called `OP_RETURN`.\nAnd the `OP_RETURN` code basically says, all right, stop evaluating this program, you're done.\nNow, if I had an electronic lawyer that wanted to check that this Multisig is what it says it does, or in fact, if you had that lawyer, your lawyer might say, \"Well, I see that my signature's being checked and whatever the rest of the script does, I don't care, but my signature's being checked, so I'm happy with this,\" but of course, you shouldn't be happy with this.\nSo your electronic lawyer should see that `OP_RETURN` statement and warn you.\nBut the problem is there's a trillion ways in which scripts can go wrong and that is why you need a standardized way of dealing with these scripts.\nAnd that's where Miniscript is-\n\nAaron van Wirdum:\n\nI'll read a little fragment from Andrew Poelstra, who I interviewed a long time ago when I wrote an article on this.\nSo the example he gave was, and I'm not going to pretend like I understand everything he said in this quote, but that was sort of the point of the quote for me, that it was exemplifying the complexity of potential ways to mess around with script.\nAnyways, so the quote was, \"There are op codes of Bitcoin Script, which do really absurd things like interpret a signature as a true false value, branch on that, convert that Boolean to a number and then index into the stack and rearrange the stack based on that number.\nAnd the specific rules for how it does this are super-nuts.\"\nYou probably actually follow that perfectly.\n\nSjors Provoost:\n\nNo.\n\nAaron van Wirdum:\n\nI don't, oh, you don't either.\n\nSjors Provoost:\n\nI kind of do, but the analogy would be, you have the stack of plates and you take a hammer and you smash one, and then you confuse two and you paint one red and then it still works, if you do it correctly.\nIt's completely absurd.\n\nAaron van Wirdum:\n\nOr another analogy I think you gave before this recording, correct me if this is not the right way of explaining this analogy, but it's like you have a contract and it says, you're buying this house and these are all the conditions.\nAnd then there's a small letter, which says, unless there's two commas in a row, somewhere in this contract, in which case all your base are belong to us.\n\nSjors Provoost:\n\nExactly.\nExcept that this will be like the law, right?\nSo the contract doesn't say that at all.\nIt's just that the law that's in this country has that stupid rule.\nIf there are two commas in a contract, you're giving away your money.\nOkay, that's the script interpreter of all the consensus rules, which are quite complicated.\n\nAaron van Wirdum:\n\nOkay.\nSo I think we've now broken down the problem with scripts.\nIt's a shitty programming language or at least it's easy to make mistakes or hide bugs in there and make all sorts of complex arrangements that people might or might not notice and then your money goes to places where you don't want it to go.\nThat's the summary, right?\n\nSjors Provoost:\n\nYeah.\nAnd we've seen in other projects how bad things can go if you have a very complicated language that does things you're not completely expecting.\n\nAaron van Wirdum:\n\nAre you referring to a project that rhymes on methereum?\nI think we're on the same page.\nYes.\nOkay, so solutions we're getting to the solution part of the story.\n\n## How Miniscript solves Bitcoin Script's problems\n\nSjors Provoost:\n\nSo what you're basically doing, what Miniscript is doing is it's taking certain example scripts, so sequence of op codes, and it lists, I think about 20 of them, 20 templates.\n\nAaron van Wirdum:\n\nThis is Miniscript?\n\nSjors Provoost:\n\nYes.\nIt lists a few dozen templates.\nIt not use all of the available Bitcoin Script, it uses a subset of it.\n\nAaron van Wirdum:\n\nRight, right.\nSo let's say Bitcoin Scripts has 100 tools.\nI have no idea if it's-\n\nSjors Provoost:\n\nSomething like that.\n\nAaron van Wirdum:\n\nAnyway, close to 100, I'm just throwing out a number.\nThe Miniscript says, okay, let's throw out 80 of these, because these are just got to cause a mess and let's keep 20, and that way it's going to be a little bit simpler for everyone.\nIs that right?\n\nSjors Provoost:\n\nRight.\nSo if Bitcoin Script uses an alphabet essentially, and Miniscript hasn't set of words.\nSo it's not a subset of the alphabet, but it's a subset of words.\n\nAaron van Wirdum:\n\nI see.\nOkay.\nThat's a better analogy.\n\nSjors Provoost:\n\nSo there's certain patterns of op codes that you're allowed to use.\nAnd if you use those patterns in the way they describe.\n\nAaron van Wirdum:\n\nSo this double comma is removed now.\nIt's not in here anymore.\n\nSjors Provoost:\n\nYeah.\nThere's no double comma, or there is-\n\nAaron van Wirdum:\n\nThat was [crosstalk 00:12:58] anyways.\n\nSjors Provoost:\n\nBut it is used in a very precise way.\nSo basically, Miniscript.\nYeah, it removes some of the foot guns, but it also allows you to do very cool stuff safely.\nIn particular, it lets you do things like, AND.\nSo you can say condition A must be true AND condition B must be true and you can do things like, OR.\nAnd whatever's inside the OR, or inside the AND, can be arbitrarily complex.\nSo with Bitcoin Script, you have if and else type of statements, but if you're not careful, those if and else statements will not do what you think they're going to do.\nSo with Miniscript, there is-\n\nAaron van Wirdum:\n\nBecause there's more complexity hidden after the IF for example.\n\nSjors Provoost:\n\nYes, exactly.\nAnd the Miniscript basically, the templates make sure that you're only doing things that are actually like doing what you think they're doing.\nSo they really contain it.\nAnd that allows you to do nice things.\nSo let's say you're a company and you offer semi-custodial wallet solution, where you have one of the keys of the user and the user has the other has two keys, for example.\nSo you're not, you don't have a majority of the keys and maybe there's a five-year timeout where you do have control in case the user dies, something like that, right?\n\nAaron van Wirdum:\n\nYeah.\nLike a Multisig kind of set-up.\n\nSjors Provoost:\n\nAnd so, normally when you set up a Multisig, the way you kind of set it up is everybody gives their key, their master key, their expo, for example, and you create a very simple script that has three keys and three people sign.\nBut the problem is, because you're a big business that offers a service, you have some really complicated internal accounting department and you maybe want have five different signatures by specific people in God knows what complexity, but you don't want to-\n\nAaron van Wirdum:\n\nYeah.\nYou have five members on the board.\nYou want three of them to sign.\nUnless maybe the CEO.\n\nSjors Provoost:\n\nAnd especially once we have-\n\nAaron van Wirdum:\n\nGet some sort of special right from two of the board members and then-\n\nSjors Provoost:\n\nAnd there's a code hidden in an envelope inside the nuclear suitcase that has an override.\nExactly.\n\nAaron van Wirdum:\n\nExactly.\nThat's like all sorts of complex stuff you can do with it.\nAnd all the complex stuff should count as one key, like right, that's where you're getting at.\nYou don't really care how the complex stuff is solved.\nThat's up to the company.\nYou figure it out company.\nAs long as it's just clear to us that it's only one key, however you do it.\n\nSjors Provoost:\n\nExactly.\nNow the problem with that is if I gave you...\nYou can do that with script or with Taproot, but how do I, as a customer know, I would have to hire my own electronic lawyer to check that script of yours, that it doesn't have any of these double comma, little gimmicks in it.\nAnd if only there was a way you could check that and Miniscript is done such that you can check that as long as the script that you're getting is compatible with Miniscript, because Miniscript to normal script is two ways.\nSo you can take any Miniscript, turn it into a normal script.\nYou can take any normal script and turn it into a Miniscript.\nWell, unless it doesn't match, right?\nIf there's codes in it that don't apply, then it just doesn't compile or doesn't translate.\nSo, and if you can turn something into Miniscript, then you can analyze it using all sorts of tools that can analyze any Miniscript.\n\nSjors Provoost:\n\nSo what you would have is every wallet out there could have a Miniscript interpreter and the interpreter could show you a little pie chart and saying, you are this one piece of the pie, and there's this other piece of the pie that is really complicated, but you don't have to worry about it.\nIt's not going to do anything sneaky.\n\nAaron van Wirdum:\n\nRight.\nThat's good.\n\nSjors Provoost:\n\nThat's excellent.\nYeah.\n\nAaron van Wirdum:\n\nOne of the things that I, so, I mean, we're making a podcast, so we can't actually see show this, unfortunately, but Poelstra for example, he's drawn this out.\nYou can actually draw out what a contract would look like.\nApparently that's not really possible with this script.\nAll this was news to me when I-\n\nSjors Provoost:\n\nYou can, it's just this horrible manual tedious, yeah.\nI mean, I imagine the people from Liquid, for example, that have a 13 of five Multisig with all sorts of fallbacks.\n\nAaron van Wirdum:\n\nOkay.\nSo, that's probably drawn out at some point.\nBut with Miniscript, it's actually fairly simple to draw it out.\nAnd you can show this to a CEO who has no idea about scripts or Miniscripts.\nYou can just look at the picture and figure A, yep, that's sort of what I want the blue and red squares to be.\nAnd if these keys work out like this then seems like a good idea to me.\n\nSjors Provoost:\n\nExactly.\n\nAaron van Wirdum:\n\nSo that's actually possible now.\n\nSjors Provoost:\n\nYeah.\nWith Miniscript, but wait, there's more.\n\nAaron van Wirdum:\n\nThere's more.\n\n## Policy Language\n\nSjors Provoost:\n\nAnd that's called the policy language.\n\nAaron van Wirdum:\n\nNo, I want to get to, I want to ask you something else first.\nWith Miniscripts, I do think there are strictly, technically speaking, there are some limitations, like there is stuff you can't do with Miniscripts, right?\n\nSjors Provoost:\n\nYes.\n\nAaron van Wirdum:\n\nBut as far as I understand, these are stuff, no one actually does anyways.\n\nSjors Provoost:\n\nWell, that's not necessarily true.\nSo the thing is, but this is, we have to go to policy language before I can explain that.\n\nAaron van Wirdum:\n\nOh, we do?\n\nSjors Provoost:\n\nYes.\n\nAaron van Wirdum:\n\nBecause you have this in mind already.\n\nSjors Provoost:\n\nSo let me just quickly explain-\n\nAaron van Wirdum:\n\nYou got this episode planned out way better than I do.\n\nSjors Provoost:\n\nWell to understand why you might want to do really complicated stuff, I need to explain what the policy language is.\n\nAaron van Wirdum:\n\nOkay.\nGo for it.\n\nSjors Provoost:\n\nSo a policy language poorly named, or maybe not poorly named is a way to express your intentions.\nSo for example, say I want two signatures and this can be translated or compiled, I think is the better term too Miniscript.\nAnd the nice thing is in policy language-\n\nAaron van Wirdum:\n\nSo to be clear, the policy language is the stuff like if someone like you Sjors, you're building a wallet.\nI don't know you're doing something on your computer, improving Bitcoin, then you're typing.\nAnd the stuff that comes out of your fingers is policy language.\nAnd then, you actually compile that to script later on.\n\nSjors Provoost:\n\nYeah.\nI mean, you could just write the script directly or you could write the Miniscript directly, but the nice thing about writing the policy language is that you can have a compiler that can be very smart.\nSo a simple policy language might be just give me two of two signatures.\nAnd the policy language would probably convert that to `OP_MULTISIG` or we'll convert that to Multisig in Miniscript and Multisig in Miniscript is just `OP_MULTISIG`.\nSo that's super-trivial.\n\nAaron van Wirdum:\n\nOkay.\nSo whoever wrote the policy language, and I know Pieter Wuille, for example, wrote the policy language for this.\nIt was him, it was his brain basically.\nHe figured out all the best ways to compile this policy language into Miniscript, right?\nHe must have somehow figured it out then.\n\nSjors Provoost:\n\nHe wrote a compiler.\n\nAaron van Wirdum:\n\nSee, I don't know anything about this stuff.\n\nSjors Provoost:\n\nThat's okay.\nSo basically, you write a policy language, it's like a higher level programming language.\nSo if you have a higher level programming language like, I don't know, Basic, you can say go to five.\nI don't know if you've ever worked with Basic.\n\nAaron van Wirdum:\n\nSure.\nI can't code hello world.\nIsn't that clear to you by now?\n\nSjors Provoost:\n\nWell, I mean, hello world-\n\nAaron van Wirdum:\n\nI've coded hello world once, but that's pretty much how limited I am.\n\nSjors Provoost:\n\nWhat language did you code hello world in?\n\nAaron van Wirdum:\n\nI don't remember.\n\nSjors Provoost:\n\nThat's amazing.\nAnyway, so what happens is usually when you see a programmer looking at a screen, you see something that looks like English, with words like four and next and yada yada, but eventually the machine is just reading bits and bytes.\n\nAaron van Wirdum:\n\nSure.\nNo, I understand that part.\n\nSjors Provoost:\n\nSo the bits and bytes are very close to what Bitcoin op codes look like.\nThey're very low level.\nThey're very instructions like put this on the stack, take that away from the stack.\nAnd the Miniscript is essentially the same.\nIt's just only a subset of it, but it's slightly more readable, but it's still extremely low level.\nThe policy language is slightly higher level.\nSo what you do is you start at the higher level, which is easier for a programmer to write and then a computer looks at that high level language and says how can I write this into low level machine readable stuff as efficiently as possible?\nSo in the case of the Multisig thing, I might say, I just want two out of two signatures.\nI don't care how you do that.\nThen the compiler knows that there are multiple ways to do that.\n\nAaron van Wirdum:\n\nBut how does compiler know this?\nI hope there's listeners out there that knows little about this as I do.\nSo they might learn something.\nHow does the compiler know this?\n\nSjors Provoost:\n\nSo disclaimer, I don't think I've ever written a compiler.\nI'm not that cool.\nBut generally compilers know, because somebody wrote the compiler.\n\nAaron van Wirdum:\n\nWell, but that was my point.\nIt must have come from Pieter Wuille's brain in this case.\n\nSjors Provoost:\n\nOf course.\nEverything comes out of Pieter Wuille's brain.\n\nAaron van Wirdum:\n\nAnd there we go.\n\nSjors Provoost:\n\nBut basically, the compiler knows, okay, there's maybe two or three ways to do this, this to execute his intention.\nAnd then, the question is, which of the three of them am I going to pick?\nWell, then it depends on the transaction weight and the fees that you might be involved, but also you can tell it, okay.\nI think most of the time it's condition A, but only 10% of the time it's condition B.\nAnd then the compiler can try condition A nine times, condition B nine one time and then figure out what the expected fee is.\nSo it can optimize for typical use cases, worst case scenarios, all these things, and it can then spit out a Bitcoin Script or a Miniscript that then becomes a Bitcoin Script.\n\nAaron van Wirdum:\n\nYes.\nThe compiler figures out the best way to do something.\n\nSjors Provoost:\n\nAnd in very practical terms, another thing it could do, I don't know if it can already do that is you have SegWit scripts now, but we'll have hopefully half Taproot, which can put things in a Merkle tree.\nSo your compiler could figure out where to put stuff in the Merkle tree.\nYou don't have to worry about how to build the Merkle tree.\n\nAaron van Wirdum:\n\nRight, yes.\n\nSjors Provoost:\n\nSo it can do all sorts of things.\nSo you started the policy language and then you write Miniscript and that goes into whatever-\n\nAaron van Wirdum:\n\nOkay.\nSo that's what a compiler is.\nA policy language you use, you put it into the compiler and then Miniscripts comes out of it, which is in a way script.\n\nSjors Provoost:\n\nYes.\nI think the technical term for going from Miniscript to script is trans-piling, which basically is like a one-on-one thing you can do in two directions.\nSo you can go from Miniscript to script, from script to Miniscript, but you cannot go back to a policy language.\nWell, you can guess the policy language.\n\n## Miniscript Limitations\n\nAaron van Wirdum:\n\nYou can.\nYeah, I guess so.\nYes.\nI understand that.\nAnd then getting back to, are we ready to go back to my question about limitations?\n\nSjors Provoost:\n\nAbsolutely.\n\nAaron van Wirdum:\n\nSo now there are some limitations when you're using, I guess, this policy language or Miniscripts in general.\nBut these are limitations that no one actually suffers from is, is how I understood it.\n\nSjors Provoost:\n\nNot necessarily.\nI mean, ideally yes, but in practice, some scripts are, some policies might be very complicated and there would be infinite ways to execute these in Bitcoin Scripts.\nAnd because of all these weird double comma foot guns that are in Bitcoin Script, sometimes that's an advantage.\nSometimes you can write something really efficiently in Bitcoin Script, that is just really horrible, if you objectively look at it, but it is really fast or really fee-efficient.\nAnd in fact, I believe Lightning uses that the way they sometimes deal with time locks or with hashes or nonces.\nThere's some tricks in Lightning I believe that you cannot do a Miniscript or at least you could not do a Miniscript, maybe you can now.\nSo there are some optimizations where like what Poelstra said, \"Oh, you do some weird switching of the stack and you interpret things, not the way they were,\" you put a public key on it, but you interpret it as a number, those kind of weird tricks.\n\nSjors Provoost:\n\nThose might be very hard to reason about, but a human might be able to do it, but the Miniscript compiler would not do it, which means you end up with longer, potentially longer Lightning scripts, if you do not have all the whistles and bells in it.\nSo it's possible that Miniscript would be expanded if there is some other optimal way to do it.\nBut you have to be careful, because if you...\nYou really want to make sure there's nothing in Miniscript that brings back those scary properties of the underlying language.\n\nAaron van Wirdum:\n\nWell, and to be clear, in cases, this isn't clear to anyone, Miniscripts is an addition to what there is already, like script is going nowhere, Bitcoin still use script, and that's the way it's going to be.\nIt's just, this is an extra tool for people who want to use that.\n\nSjors Provoost:\n\nAnd in fact, it's not a consensus change at all.\n\nAaron van Wirdum:\n\nNo, it's nothing in that.\n\nSjors Provoost:\n\nIt's a tool that you can use or not use.\nDon't worry.\nIt's not Blockstream dominating the scripts here.\n\nAaron van Wirdum:\n\nOkay.\nSo we mentioned Pieter Wuille has this policy language.\nI know this is very fresh and you probably haven't looked at it very much, but [inaudible 00:25:22] also wrote a policy language, you haven't studied that yet, I think not.\n\nSjors Provoost:\n\nI have not yet.\nSo I thought that would be a cliffhanger.\n\nAaron van Wirdum:\n\nThat would be a cliffhanger, you like the cliffhanger.\nSo that will be a cliffhanger for another episode.\n\nSjors Provoost:\n\nOr never.\n\nAaron van Wirdum:\n\nOr maybe we will have the one of those [inaudible 00:25:36].\n\nSjors Provoost:\n\nBut I can tell you from what I know about the policy language is that you're still some steps away from having a practical tool where you and I can set up a very complicated Multisig wallet.\nThere's all sorts of questions you want to answer like, how exactly do you do this setup?\nWhat are you emailing to each other?\nAre you emailing your keys or are you emailing something a little bit more abstract that you agree on first and then you exchange keys?\nThose very practical things that are not solved inside a Miniscript.\n\nAaron van Wirdum:\n\nLet me at least mention it's called Minsc.\nSo it's policy language, it's called Minsc.\nOkay, I'm afraid we can't give you any more info about Minsc yet.\n\nSjors Provoost:\n\nWell, I know Minsk with a K is a city.\n\nAaron van Wirdum:\n\nMaybe one day.\n\nSjors Provoost:\n\nI think it's with a C.\n\nAaron van Wirdum:\n\nMinsc with a C.\nYeah, that's some extra info.\nAll right, Sjors, is this the end of our episode?\nDid we cover everything we needed to cover from Miniscripts?\n\nSjors Provoost:\n\nI hope so.\n\nAaron van Wirdum:\n\nIt was maybe slightly messy.\nSo let's sum it up.\nMiniscripts is a subsection.\nNo, you called it a template.\n\nSjors Provoost:\n\nYes.\nIt's a template of script pieces.\n\nAaron van Wirdum:\n\nEven this summary is getting messy now.\n\nSjors Provoost:\n\nSo basically, Bitcoin Script is like an alphabet essentially, just different letters that have different meanings.\nAnd you could see Miniscript is a set of words.\nNot really words, because you can put things between the words, but maybe words and brackets and commas.\nThat's what Miniscript is.\nAnd then the policy language is the thing that can be converted to Miniscript.\nIt's a bit more high level.\n\nAaron van Wirdum:\n\nAnd there are several of those apparently by now.\n\nSjors Provoost:\n\nYes, because yeah, exactly, because Miniscript, it has to be set in stone, I guess sort of, because you want to do all the safety checks on it, but then just like you can have different programming language, you can have different policy languages.\n\nAaron van Wirdum:\n\nYes.\nSo if you're into Bitcoin programming, this is what you want to study.\nThis what you want to look at.\n\nSjors Provoost:\n\nIf you're into Bitcoin programming the rabbit hole is massive and pick something.\nThere's a talk by Andrew Poelstra.\n\nAaron van Wirdum:\n\nThat is probably pretty good though, right?\n\nSjors Provoost:\n\nYeah.\nBut so there's a talk by Andrew Poelstra from Advancing Bitcoin, not the conference, but the meet up before it, the BitDevs London, where he talks for two hours about all the problems with regular script and why he hates things.\nAnd that's just, he said he was going to do it in 20 minutes and I think he still didn't cover everything.\nI don't think that's the best place to start.\n\nAaron van Wirdum:\n\nHe's still on stage.\n\nSjors Provoost:\n\nHe's still on stage out there just going through it.\n\n",
    "body_type": "markdown",
    "created_at": "2020-07-31T00:00:00.000Z",
    "domain": "https://btctranscripts.com/",
    "url": "https://btctranscripts.com/bitcoin-explained/what-is-miniscript",
    "categories": [
        "podcast"
    ],
    "tags": [
        "bitcoin-core",
        "miniscript"
    ],
    "media": "https://www.youtube.com/watch?v=z84_5yhy8fs",
    "authors": [
        "Sjors Provoost",
        "Aaron van Wirdum"
    ],
    "indexed_at": "2024-03-21T16:33:36.177Z",
    "transcript_by": "Sjors, edilmedeiros",
    "summary": "In a detailed exploration of Bitcoin's scripting language, Sjors Provoost and Aaron van Wirdum unpack the complexities and present Miniscript as an innovative solution designed to simplify and secure Bitcoin transactions. The discussion commences with an analogy that underscores how minor syntactical errors in Bitcoin Script can lead to significant, unintended consequences, emphasizing the language's inherent complexity and the strict consensus rules that govern it. This complexity not only makes the script prone to mistakes but also obfuscates bugs, posing challenges for users aiming to secure their transactions.\n\nAs the conversation unfolds, the narrative shifts to Miniscript, conceptualized by Pieter Wuille, Andrew Poelstra, and Sanket Kanjalkar, as a streamlined version of Bitcoin Script that maintains its flexibility while making it more accessible and less error-prone. By reducing the op codes from approximately a hundred to a focused twenty, Miniscript simplifies script creation, enabling users to easily implement sophisticated transaction conditions like multi-signature requirements without the risk of inadvertently introducing errors. This approach is likened to using a subset of words rather than the entire alphabet, significantly lowering the possibility of mistakes while preserving the capability for complex conditions.\n\nA key advantage of Miniscript highlighted in the discussion is its ability to enhance transparency and understandability of scripts, even for those without extensive coding expertise. This is achieved by standardizing operation code patterns, facilitating easier analysis or visualization. Such clarity is particularly beneficial for businesses or services that rely on intricate internal protocols for transaction approvals, promising to streamline the verification process and ensure mutual confidence in transaction terms without the need to decode complex scripts.\n\nFurther delving into the practical applications of Miniscript, the dialogue touches upon its potential to enable semi-custodial wallet solutions and other advanced transaction setups, opening new avenues for Bitcoin's utilization. Additionally, the introduction of a policy language by Pieter Wuille and others offers a higher-level programming layer that abstracts the creation of transaction conditions into a more intuitive format. This development signifies another stride towards making Bitcoin scripting more accessible and versatile, catering to a broader range of applications.\n\nThe podcast culminates in an overview of Miniscript within the broader context of Bitcoin scripting, where it serves as a bridge between high-level policy language and low-level machine code. Despite acknowledging certain limitations, especially for highly intricate scripts, the optimism surrounding Miniscript\u2019s capacity to evolve and cater to sophisticated scripting needs without reverting to the complexities of raw Bitcoin Script is palpable. It positions Miniscript as a pivotal advancement for developers, offering a robust tool for crafting efficient and secure Bitcoin applications and highlighting the ongoing evolution and challenges in this exciting domain of cryptocurrency engineering."
}