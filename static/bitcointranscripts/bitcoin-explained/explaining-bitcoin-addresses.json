{
    "id": "bitcointranscripts+bitcoin-explained+explaining-bitcoin-addresses",
    "title": "Explaining Bitcoin Addresses",
    "body_formatted": "{\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:01:45\"}, {\"type\":\"paragraph\",\"text\":\"Live from Utrecht this is the Van Wirdum Sjorsnado.\\nSo the other day I wanted to send Bitcoin to someone, but I didn't.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:01:52\"}, {\"type\":\"paragraph\",\"text\":\"Why?\\nShouldn't you hodl?\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:01:55\"}, {\"type\":\"paragraph\",\"text\":\"I hodl all I can, but sometimes I need to eat, or I need to pay my rent, or I need to buy a new plant for my living room.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:02:05\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, let's do.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:02:06\"}, {\"type\":\"paragraph\",\"text\":\"So the problem was, the person I wanted to send Bitcoin to, I didn't have their IP address.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:02:11\"}, {\"type\":\"paragraph\",\"text\":\"You did not have their IP address?\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:02:13\"}, {\"type\":\"paragraph\",\"text\":\"I did not have their IP address.\\nLuckily, it turns out there's this trick in Bitcoin called Bitcoin addresses.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:02:21\"}, {\"type\":\"paragraph\",\"text\":\"That's right.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:02:21\"}, {\"type\":\"paragraph\",\"text\":\"Have you heard of this?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:02:23\"}, {\"type\":\"paragraph\",\"text\":\"Yes.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:02:24\"}, {\"type\":\"paragraph\",\"text\":\"Maybe our listener hasn't yet, Sjors, so let's explain what Bitcoin addresses are.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:02:30\"}, {\"type\":\"paragraph\",\"text\":\"Okay, what are Bitcoin addresses?\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:02:33\"}, {\"type\":\"paragraph\",\"text\":\"First of all, so I made a stupid joke about IP addresses, but this was actually an option, wasn't it?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:02:38\"}, {\"type\":\"paragraph\",\"text\":\"In the initial version of Bitcoin, Satoshi announced it on the mailing list and said, well if you want to send somebody some coins, you just enter their IP address and then it'll exchange, I guess, an address to send it to.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:02:51\"}, {\"type\":\"paragraph\",\"text\":\"So it was actually possible to send Bitcoins to people's IP addresses.\\nI don't think that's possible anymore.\\nThat's not in any of the code.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:02:58\"}, {\"type\":\"paragraph\",\"text\":\"I don't think so either.\\nI haven't seen it.\\nbecause the other way is that you just get an address to send to, and then it goes to the blockchain.\\nAnd because the other side is checking the blockchain also, it'll show up.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:03:10\"}, {\"type\":\"paragraph\",\"text\":\"Well, that's actually not how it works at all.\\nBut we're going to explain it now, I think.\\nLet's go.\\nOkay.\\nFirst of all, Sjors, when you send Bitcoin to someone, what do you actually do?\\nWhat happens?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:03:22\"}, {\"type\":\"paragraph\",\"text\":\"Well, you're creating a transaction that has a bunch of inputs, and it has an output.\\nAnd that output describes who can spend it.\\nSo you could say anybody can spend this.\\nThat's not a good idea.\\nWe talked about that in an earlier episode.\\nSo what you do is you put a constraint on it.\\nAnd the very first version of that constraint was he or she who has this public key can spend the coins.\\nSo that's called pay-to-public-key.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:03:49\"}, {\"type\":\"paragraph\",\"text\":\"We just mentioned this IP example.\\nSo what actually happened was you would connect to someone's IP.\\nI don't know the nitty-gritty details, but in general, you would connect to someone's IP and you'd ask for a public public key and that person would give you the public key and I think that's what you send the bitcoins to.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:04:08\"}, {\"type\":\"paragraph\",\"text\":\"Yeah I believe so too but I haven't seen that code in action so we could be slightly wrong there somebody should dig it up, I'd love to see screenshots of like what that used to look like.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:04:14\"}, {\"type\":\"paragraph\",\"text\":\"is there anyone who's ever used this way of paying someone pay to IP address?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:04:23\"}, {\"type\":\"paragraph\",\"text\":\"Yeah we'd love to know.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:04:24\"}, {\"type\":\"paragraph\",\"text\":\"It was technically possible.\\nIf anyone listening has ever actually used this We'd be curious to hear that.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:04:31\"}, {\"type\":\"paragraph\",\"text\":\"I mean, it makes sense to think that way in the first version of Bitcoin.\\nBecause before that, you had all these peer-to-peer applications and they were generally very direct, so with Napster and all these things, or Kazaa, I don't know which one, you would connect to other people and you would download things from them.\\nAnd with Bitcoin, you connect to other peers, but nowadays you just connect to random peers.\\nBut perhaps in the beginning, the idea might've been, okay, you connect to peers you know, and so then you might as well do transactions with them.\\nBut right now you don't really do transactions with the peers you're directly connected to.\\nAt least not in Bitcoin on-chain.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:05:05\"}, {\"type\":\"paragraph\",\"text\":\"So that's one way of paying someone to a public key, is you'd connect to their IP address and you'd get their public key.\\nThe other way is if you mine Bitcoins.\\nSo if you're a miner, then you're actually sending the block rewards to your public key.\\nIs that still the case?\\nIt used to be the case in the beginning.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:05:24\"}, {\"type\":\"paragraph\",\"text\":\"Well, in the beginning, Bitcoin had a piece of mining software built into the software, right?\\nSo if you downloaded the Bitcoin software, it would just start mining.\\nAnd so it would use that mechanism.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:05:35\"}, {\"type\":\"paragraph\",\"text\":\"Well, you just have to press a button.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:05:37\"}, {\"type\":\"paragraph\",\"text\":\"And then later on, you had mining pools and it all became more professional.\\nSo the way they would pay out might be very different.\\nProbably, you know, might go to a multi-sig address from which it's paid back to the individual pool participants, or it could be paid directly to the pool participants, although that's a bit inefficient because you need a long list of addresses in the Coinbase, but I've seen huge Coinbase transactions, so probably people were doing that.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:06:06\"}, {\"type\":\"paragraph\",\"text\":\"Right.\\nWell, anyway, so the point I was making was this pay to public key way of paying someone.\\nI learned this while doing a little bit of research for the show.\\nThat was only ever really used for pay to IP address and for the block reward.\\nIt wasn't actually used for anything other than that.\\nWhat was used other than that was pay-to-public-key-hash. \\nSo you're not sending money to a public key, but you're sending money to the hash of that public key.\\nAnd this is where addresses come in.\\nBecause this type of payment actually used addresses for the first time.\\nNot for the first time, this was always there.\\nAlso something I learned while doing a little bit of research.\\nThis was there since day one.\\nThere were Bitcoin addresses since day one, but they were only there for pay-to-public-key-hash.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:06:58\"}, {\"type\":\"paragraph\",\"text\":\"So the script on the Bitcoin blockchain would in that case say, okay, the person who can spend this must have the public key belonging to this hash.\\nSo the nice thing about that is that you're not saying which public key you have, or at least at the time it was thought that maybe that was safer against quantum attacks.\\nBut the other benefit is that it's a little bit shorter, so it saves a bit on block space, although, of course, that wasn't an issue back then.\\nSo yeah, you pay to the public key hash.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:07:27\"}, {\"type\":\"paragraph\",\"text\":\"I guess in a way, it's slightly more private as well, right?\\nBecause you're only revealing your public key when you're paying?\\nNo, that doesn't make sense.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:07:35\"}, {\"type\":\"paragraph\",\"text\":\"Exactly, (it) doesn't matter.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:07:37\"}, {\"type\":\"paragraph\",\"text\":\"Okay, so that's paying to public key hash.\\nAnd like you said, what you see on the blockchain itself, what's recorded on the blockchain is the actual hash of a public key.\\nHowever, when you're getting paid on a pay-to-pubkey-hash, what you're sharing with someone is not this hash, it's actually an address.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:08:02\"}, {\"type\":\"paragraph\",\"text\":\"Yes, well you are sharing the hash, but you do that using an address.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:08:07\"}, {\"type\":\"paragraph\",\"text\":\"Exactly, so what is an address?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:08:09\"}, {\"type\":\"paragraph\",\"text\":\"So an address essentially is, at least this type of address, is the number one followed by the hash of the public key.\\nBut it is encoded using something called base58.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:08:20\"}, {\"type\":\"paragraph\",\"text\":\"What's base58?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:08:22\"}, {\"type\":\"paragraph\",\"text\":\"Okay so let's go back to base64, I don't know if you've ever seen an email source code like an attachment all these weird characters in there that's base64.\\nbase58 is based on that, but maybe to say what it is, it is all the lowercase letters, all the uppercase letters, and all the numbers, and without any of the signs, and with some ambiguous things removed.\\nSo you do not have the small O, the big O, and the zero.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:08:50\"}, {\"type\":\"paragraph\",\"text\":\"Should we start with base10?\\nI want people to understand what base means.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:08:58\"}, {\"type\":\"paragraph\",\"text\":\"Yeah exactly.\\nSo this is what's in base58, but then the question is what is base?\\nAnd so base10 is you have 10 fingers and so if you want to express say the number 115 you can make three gestures, right?\\nYou show a one and a one and a five and that is base10 because you're using your 10 fingers three times and that's also how you write down numbers but there have been different bases.\\nI think the Babylonians were very much into base 360 that's why we have...\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:09:27\"}, {\"type\":\"paragraph\",\"text\":\"Hang on hang on because we're not actually using fingers most of the time so I want to make this clear that it just means there we have a decimal system so that means we have 10 different symbols that represent a number.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:09:45\"}, {\"type\":\"paragraph\",\"text\":\"This probably not a coincidence that that happens to match.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:09:48\"}, {\"type\":\"paragraph\",\"text\":\"I totally agree, I just want to make it clear that we're not actually using fingers most of the time.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:09:54\"}, {\"type\":\"paragraph\",\"text\":\"Okay, so we have 10 symbols, so that means that once you get by the 11th number, at that point you're going to have to reuse symbols you've already used, so you're now going to use combinations.\\nSo in our case, that would be, well it's going to get confusing because the first number is a zero, so then the 11th number is the one and the zero.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:10:13\"}, {\"type\":\"paragraph\",\"text\":\"Exactly, and there have been different bases in use, right?\\nSo base360 I believe was used by Babylonians, or maybe base60.\\nAnd then for computers we tend to use base2 internally, because chips are either on or off, so it's 0 or 1, so a long series of 0s and 1s.\\nAnd you can express any number of that now in order to read machine code typically you would use hexadecimal which is base16 so that is 0 to 9 and then a to F.\\nSo base58 is basically this 58 possible characters to express something with.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:10:51\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, it's all numbers and there's different ways of expressing a number based on your base.\\nThat determines how many symbols you're using.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:11:02\"}, {\"type\":\"paragraph\",\"text\":\"Right, the trade-off here is readability really, because you could represent machine code as normal characters, so the ASCII alphabet, or the ASCII character set is 256 different characters, so that's base256.\\nBut if you've ever done something like print and then the name of a file, your computer will show complete gibberish on the screen and it will start beeping.\\nAnd the reason it starts beeping is because one of these codes, somewhere in the base256 is a beep, which actually makes your terminal beep.\\nSo it is completely impractical to view a file using base256, even though there is a character for every of the 256 things there.\\nSo that's why you tend to do that in base16.\\nHexadecimal is relatively easy to read, but then it's quite long.\\nIf you take a public key and you write it as hexadecimal it's a rather long thing to write down but and base58 is a little bit shorter so maybe you know it's easier to copy paste perhaps.\\nIt's not even easy to read on the phone, base58 is pretty terrible because it's uppercase, lowercase, uppercase, lowercase.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:12:05\"}, {\"type\":\"paragraph\",\"text\":\"Just to restate that briefly.\\nSo base2 is just you're just using two symbols, which is 1 and 0.\\nAnd base10 is what we use most of the time.\\nIt's 0, 1, 2, 3, 4, up until 9.\\nThen you have hexadecimal, which uses 0 through 9, plus A, B, C, D, E, F.\\nAnd then what we're talking about here is base58, which uses 58 different symbols, which are 0 through 9, and then most of the alphabet in both capital letters and undercase, right?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:12:40\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, I think it's lowercase and uppercase, and then most of the numbers, but there are some letters and numbers that are skipped that are ambiguous.\\nSo the number 0, the letter O, both lowercase and uppercase, or at least uppercase is not in there.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:12:53\"}, {\"type\":\"paragraph\",\"text\":\"I think for example the capital \\\"I\\\" and the lowercase \\\"l\\\" are both not in there because they look too similar.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:13:01\"}, {\"type\":\"paragraph\",\"text\":\"Right, and that's why you get a little bit less than, you know, if you just add 26 letters plus 26 uppercase plus 10 numbers, right?\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:13:09\"}, {\"type\":\"paragraph\",\"text\":\"So I think we finally explained what base58 means.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:13:11\"}, {\"type\":\"paragraph\",\"text\":\"And just as a side step, I talked about email earlier, that's base64.\\nThat is the same, but it also has some characters like underscore and plus and equals and that was mostly used for email attachments and I guess they didn't want to use all 256 characters either because they didn't want the email to start beeping but they did want to squeeze a lot of information into the attachment.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:13:32\"}, {\"type\":\"paragraph\",\"text\":\"Okay, that's base58.\\nNow, why are we talking about this?\\nWhat is an address?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:13:37\"}, {\"type\":\"paragraph\",\"text\":\"So the address is the value 0, I believe, but that's expressed as a 1 because that's the first digit in this character set (base58).\\nSo it starts with a 1 and then it's followed by the public key hash, which is just expressed in base58.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:13:54\"}, {\"type\":\"paragraph\",\"text\":\"Right, is that all it is?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:13:56\"}, {\"type\":\"paragraph\",\"text\":\"Yes, and keep in mind, so that is the information you send to somebody else when you want them to send you Bitcoin.\\nYou could also just send them 00 and then the public key and maybe they would be able to interpret that.\\nProbably not.\\nYou could send them the actual script that's used on the blockchain because on the blockchain there is no like base58 or base64 or anything like that.\\nThe blockchain is just, binary information.\\nSo the blockchain has this script that says, if the person has the right public key hash, has the public key belonging to this public key hash, then you can spend it.\\nAnd we talked about in an earlier episode how Bitcoin scripts work.\\nSo you could send somebody the Bitcoin script in hexadecimal, anything you want.\\nBut the convention is you use this address format.\\nAnd that's why all traditional Bitcoin addresses start with a one.\\nAnd they're all the same, roughly the same length.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:14:45\"}, {\"type\":\"paragraph\",\"text\":\"Okay, so a Bitcoin address is basically just a base58 representation of a version number plus a public key hash.\\nSjors, is base58 used for anything else in Bitcoin?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:15:01\"}, {\"type\":\"paragraph\",\"text\":\"You can also use it to communicate a private key and then that case your version number is - well it's written as 5 - but it actually represents I think 128 and then followed by the private key.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:15:13\"}, {\"type\":\"paragraph\",\"text\":\"So that's why all private keys start with a 5 or at least used to start with a five?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:15:19\"}, {\"type\":\"paragraph\",\"text\":\"In the old days you had paper wallets that you could print and if you generate them actually securely without a backdoor then on one side of the piece of paper you would have something starting with a five and on the other other side of the paper you would have something started with a one and then it would say like show this to other people and don't show this to other people.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:15:36\"}, {\"type\":\"paragraph\",\"text\":\"Right now I happen to know Sjors that there are also addresses that start with a three.\\nWhat's up with that?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:15:44\"}, {\"type\":\"paragraph\",\"text\":\"Well usually those are multi-signature addresses but they don't have to be.They could be single signature addresses.\\nWhat they are are...\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:15:51\"}, {\"type\":\"paragraph\",\"text\":\"They could also be types of segwit addresses.\\nThere could be many things, right?\\nThey could also be single sig, But you already mentioned that.\\nSo let's go on.\\nOkay, three.\\nIt starts with a three, what does it mean?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:16:04\"}, {\"type\":\"paragraph\",\"text\":\"So it basically says pay-to-public-key-hash.\\nSo it is that number.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:16:08\"}, {\"type\":\"paragraph\",\"text\":\"Pay to public script hash.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:16:10\"}, {\"type\":\"paragraph\",\"text\":\"Sorry, public script hash.\\nWell, not even public, just pay-to-script-hash.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:16:14\"}, {\"type\":\"paragraph\",\"text\":\"We're getting there.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:16:15\"}, {\"type\":\"paragraph\",\"text\":\"We're getting there.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:16:16\"}, {\"type\":\"paragraph\",\"text\":\"Eventually, pay-to-script-hash.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:16:17\"}, {\"type\":\"paragraph\",\"text\":\"Yes, and it says basically anybody who has the script belonging to this hash and who can satisfy the script.\\nSo just knowing the script is not enough, you actually have to do whatever the script says you should do.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:16:30\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, so the first version we just described was pay-to-public-key-hash, which required people to offer a valid signature corresponding to the public key.\\nAnd now we're talking about pay-to-script-hash, which means someone needs to present the script and be able to solve the script.\\nSo why do these start with a three?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:16:51\"}, {\"type\":\"paragraph\",\"text\":\"There's just a convention.\\nSo as we said, everything that you communicate through base58 starts with a version number.\\nAnd if it starts with a 1 then you know it's pay-to-public-key-hash if it starts with a 3 you know it's pay-to-script-hash if it starts with a 5 you know it's a private key.\\nSo it's just a convention and has no meaning on the blockchain itself.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:17:13\"}, {\"type\":\"paragraph\",\"text\":\"Once again all this is is a version number plus this hash represented in base58.\\nIs that all it is?\\nThis is all so much simpler than I once thought, Sjors.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:17:26\"}, {\"type\":\"paragraph\",\"text\":\"No, it's really simple.\\nAnd the only mystery that has been solved today, I guess, is, well, what if you only use the public key but that wasn't done using this system so there is no initial letter that would represent trying to do that.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:17:40\"}, {\"type\":\"paragraph\",\"text\":\"Yeah that was never represented in base58\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:17:42\"}, {\"type\":\"paragraph\",\"text\":\"Otherwise probably that would have been version 0 and then all normal addresses might have started with the two, who knows.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:17:48\"}, {\"type\":\"paragraph\",\"text\":\"I think for anyone who already knew this which is probably a good chunk of people this is a very boring episode so far but I think it's gonna get better because Sjors we now have a new type of address since a year or two, which starts with BC1.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:18:09\"}, {\"type\":\"paragraph\",\"text\":\"BC1Q even, usually.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:18:11\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, usually, but not always.\\nAnd we're getting into that, I think.\\nSo what is this all about?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:18:16\"}, {\"type\":\"paragraph\",\"text\":\"Well, that is BECH32 or however you want to pronounce it.\\nAnd it's been used since SegWit, basically.\\nAnd again, it is something that doesn't exist on the blockchain, so it's just a convention that wallets can use.\\nThis is a, as the name suggests, a base32 system.\\nWhich means you have almost all the letters, and almost all the numbers, minus some ambiguous characters that you don't want to have, because they look too much like numbers or letters.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:18:46\"}, {\"type\":\"paragraph\",\"text\":\"I think one of the big differences compared to base58 is that this time there are no longer uppercase and lowercase letters.\\nEvery letter is only in there once.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:18:58\"}, {\"type\":\"paragraph\",\"text\":\"Exactly.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:18:59\"}, {\"type\":\"paragraph\",\"text\":\"I'll mention one benefit of that, which is that if you want to read an address out loud it's going to be a little bit easier now that there's no difference between uppercase and lowercase.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:19:11\"}, {\"type\":\"paragraph\",\"text\":\"The other difference is, I didn't check with base58, but basically it doesn't start with zero or anything like that.\\nIt looks pretty arbitrary.\\nSo the value zero is written as a Q, the value one is written as a P, the value two is written as a Z, etc.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:19:27\"}, {\"type\":\"paragraph\",\"text\":\"Why is the value one just written as a one?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:19:30\"}, {\"type\":\"paragraph\",\"text\":\"Well it's completely arbitrary first of all, right?\\nYou can pick any, you can connect any value to any symbol you want.\\nI f there is a human interpretation that depends on it, then you don't want to do anything confusing.\\nBut if your only goal is to make it easy to copy paste things and if your other goal is for every address to start with BC1Q because you know BC1 sounds cool then maybe there's a reason why you want to do them out of order I haven't read what the rationale is in the order.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:20:02\"}, {\"type\":\"paragraph\",\"text\":\"Okay, now BECH32.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:20:05\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, so there's a set of 32 characters, but it's doing the same thing, right?\\nIt's again saying, okay, here's a pay-to-public-key address.\\nIn this case, a pay-to-witness-public-key-hash because it's using segwit but it's the same idea.\\nSo it says hello, and then followed by the hash of the public key\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:20:30\"}, {\"type\":\"paragraph\",\"text\":\"So BECH32 addresses what are we looking at exactly.\\nBecause what we're seeing for each address, it starts with BC1 and then usually a Q and then a whole bunch of other symbols.\\nSo what does this all mean?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:20:43\"}, {\"type\":\"paragraph\",\"text\":\"That's right, so there is something called the human readable part.\\nAnd that doesn't really have any meaning other than that humans can recognize, okay, if the address starts with BC, then it refers to Bitcoin.\\nAnd the software of course can see this too, but both humans and software can understand this.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:20:58\"}, {\"type\":\"paragraph\",\"text\":\"So if Litecoin would want to use these kinds of addresses.\\nMaybe they do actually, I don't know.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:21:04\"}, {\"type\":\"paragraph\",\"text\":\"Probably, then they might start with LT.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:21:06\"}, {\"type\":\"paragraph\",\"text\":\"Exactly.\\nSo these first two letters just refer to which currency is this about.\\nWhat blockchain is this for.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:21:12\"}, {\"type\":\"paragraph\",\"text\":\"And it can be, I think, a fairly arbitrary number of letters.\\nThe idea is that it's separated by a one.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:21:17\"}, {\"type\":\"paragraph\",\"text\":\"Oh, it could be more than two letters as well?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:21:19\"}, {\"type\":\"paragraph\",\"text\":\"I think initially Bitcoin Cash was using a much longer introduction.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:21:24\"}, {\"type\":\"paragraph\",\"text\":\"So that's pretty arbitrary.\\nObviously, you want to conserve space, so BC is nice and short and a one, that's a separator, has no value.\\nSo if you look at the, what do all the 32 numbers mean, then 1 is not in it.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:21:36\"}, {\"type\":\"paragraph\",\"text\":\"One just means, The human readable part is over, now the fun stuff starts.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:21:43\"}, {\"type\":\"paragraph\",\"text\":\"And the fun stuff, it's a little bit easier actually than with base58, because there's a convention.\\nThe convention is it starts with the SegWit version, so the first version of SegWit is 0, which in BECH32 is written as Q.\\nAnd then it's either followed by 20 bytes or 32 bytes.\\nAnd that is, then it means either it's the public key hash, or it is the script hash.\\nAnd they're different lengths now because SegWit uses the SHA-256 hash of the script, rather than the RIPEMD-160 hash of the script.\\nSo in base58 the script hash is the same length as the public key hash but in segwit they're not the same length.\\nSo simply by looking at how long the address is, you know whether you're paying to a script or you're paying to a public key.\\nSo we don't have to say it.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:22:36\"}, {\"type\":\"paragraph\",\"text\":\"So to reiterate the first two letters, B C, that just means this is about Bitcoin.\\nThen the 1 says, okay, that was the part telling you which currency this is.\\nNow pay attention where you're actually going to pay money to.\\nThen the Q means which version is going to follow, which version of segwit.\\nAnd then what comes after it is actually the BECH32 representation of this hash, which is either pay-to-public-key-hash or pay-to-script-hash.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:23:08\"}, {\"type\":\"paragraph\",\"text\":\"Yeah exactly or pay-to-witness-public-key-hash or pay-to-witness-script-hash.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:23:12\"}, {\"type\":\"paragraph\",\"text\":\"Sjors is there anything else cool about BECH32?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:23:16\"}, {\"type\":\"paragraph\",\"text\":\"Yeah there is and it's about error correction.\\nSo in base58 there is a checksum.\\nSo a checksum basically means you add something to the address at the end and that way if you make a typo then that checksum at the end of the address is not gonna work.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:23:34\"}, {\"type\":\"paragraph\",\"text\":\"They're gonna compute with the rest of the address.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:23:36\"}, {\"type\":\"paragraph\",\"text\":\"So it'll tell you, okay, this address is wrong.\\nNow there is a certain chance...\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:23:40\"}, {\"type\":\"paragraph\",\"text\":\"It doesn't tell you what the correct version would be, it just tells you this is wrong.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:23:44\"}, {\"type\":\"paragraph\",\"text\":\"Exactly.\\nNow there is a chance that you make a typo that happens to have a correct checksum.\\nI don't know what the odds are with base58, they're pretty low.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:23:53\"}, {\"type\":\"paragraph\",\"text\":\"You'd probably have to make several typos.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:23:55\"}, {\"type\":\"paragraph\",\"text\":\"Well, yeah, you'd have to have the unlucky typo.\\nI don't know if the odds are 1 in 10,000 or 100,000 or something.\\nBut there's a lot of Bitcoin users.\\nBut in BECH32 it's actually better because it will not just tell you that there's a typo, it'll tell you where the typo is.\\nAnd that's done differently.\\nSo where we talked about in the base58 system, there is a checksum which basically takes all the bytes from the address and then hashes it.\\nHere there is very sophisticated mathematical magic.\\nI don't think it's super sophisticated, but I can't explain what the actual magic is.\\nBut the magic makes it so that you can actually make a typo and it'll actually tell you where the typo is.\\nAnd you can make about four typos and it'll still know where the typo is and what the real value is.\\nIf you do more than that, it won't.\\nAnd the analogy I like to make with that, as someone once told me, is it's like if you have a wall and you draw a bunch of circles on it, and each circle represents a correct value, and you're throwing a dart at it, and you might hit the bullseye, then you have the right value, or you might just slightly miss the bullseye, but you're still within that big circle, then you know exactly where it should have been.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:25:11\"}, {\"type\":\"paragraph\",\"text\":\"Are you talking about interlocking circles?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:25:13\"}, {\"type\":\"paragraph\",\"text\":\"No, they're not overlapping.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:25:16\"}, {\"type\":\"paragraph\",\"text\":\"So the idea there is you want the circles to be as big as possible, obviously, but you don't want to waste any space.\\nSo that's an optimization problem in general.\\nAnd of course, in the example of a two-dimensional wall with two-dimensional circles, it's pretty simple to visualize, right?\\nYou throw the dart and you see okay it's still within the big circle so it should belong to this dot so that is like saying okay here's your typo and this is how you fix it.\\nBut and in the case of BECH32 the way I think you should imagine it is that instead of a two-dimensional wall you have a 32 dimensional wall and the circles are also probably 32 dimensional hyperspheres.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:25:53\"}, {\"type\":\"paragraph\",\"text\":\"I find that a little bit hard to imagine Sjors but I'm not a wizard like you.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:25:58\"}, {\"type\":\"paragraph\",\"text\":\"Well, if you've studied something like physics or math, you know that anything you can do in two dimensions you know you can see it in three dimensions and you can do it in n dimensions you can abstract all these things out to to as many dimensions as you need but the general intuition is the same so now you're hitting your keyboard and somewhere in that 32 dimensional space you're slightly off, but you're still inside this sphere whatever that might look like and so it knows where that mistake is.\\nBut there's a problem, all this amazing wizardry missed something.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:26:32\\nIt lost me a long time ago but go on.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:26:35\"}, {\"type\":\"paragraph\",\"text\":\"Well basically it turns out that if your BECH32 address ends with a P, then you can add an arbitrary number of Qs to it and it still will match the checksum.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:26:47\"}, {\"type\":\"paragraph\",\"text\":\"That was a bug in BECH32.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:26:51\"}, {\"type\":\"paragraph\",\"text\":\"So I guess the analogy would be that the circles are not entirely separate in some weird way.\\nAnd that's not good.\\nBut that's actually not a problem originally.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:27:01\"}, {\"type\":\"paragraph\",\"text\":\"So any address that ended with a P could have any arbitrary numbers of Q following it.\\nAnd then you wouldn't be told that there's a typo.\\nYour software would think it's right and then you're sending money to the wrong address.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:27:16\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, which means it's unspendable.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:27:18\"}, {\"type\":\"paragraph\",\"text\":\"But the good news is that there's another constraint for the original version of segwit, segwit version 0, which is that an address is either well 20 bytes or 32 bytes.\\nAnd that means that it's constrained because if you add another Q to it then it's too long so you still know it's wrong.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:27:35\"}, {\"type\":\"paragraph\",\"text\":\"Yeah if you have a 20 byte address and you add one Q then it's 21 which is still invalid so you'd have to accidentally add 12 Qs. That's pretty unlikely to happen\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:27:49\"}, {\"type\":\"paragraph\",\"text\":\"I might be confusing bytes and characters, but exactly.\\nThat's very unlikely to happen for SegWit version 0.\\nBut now we would say, okay, we're going to have future versions of SegWit, such as Taproot.\\nWhich would be BC1P, because P is version 1.\\nAnd I believe for Taproot, there's also a constraint in how long these addresses are supposed to be.\\nSo it's still not an acute problem but in the future maybe we want to have addresses that are somewhat more arbitrary in length because maybe you want to add some weird conditions to it or you want to communicate other information not just the address maybe you want to put the amount inside the address.\"}, {\"type\":\"paragraph\",\"text\":\"So this is why there's a new standard proposed BIP350 which is called BECH32m and it's actually a very simple change.\\nI think it adds to the all the math it adds one extra number to that math.\\nAnd then it fixes that particular bug.\\nAnd everybody's happy.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:28:51\"}, {\"type\":\"paragraph\",\"text\":\"So it fixes the bug that the Qs don't matter anymore.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:28:56\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, you can't just add stuff to it without running into problems.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:29:00\"}, {\"type\":\"paragraph\",\"text\":\"But I guess this does mean that wallets that have by now upgraded to support these special SegWit addresses, BECH32 addresses, they now have to upgrade again.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:29:11\"}, {\"type\":\"paragraph\",\"text\":\"That's right.\\nSo that's annoying, because it does mean that if your wallet wants to support sending to a taproot address, then it has to make a small change to the BECH32 implementation.\\nAnd there's some example code on the BIP.\\nIt's not a big change because it just adds one number and if you look at the Bitcoin Core implementation it's a fairly simple change that does it.\\nBut it does mean that moving forward when you see a BECH32 address you have to parse it, then see if it's the version 0 or the version 1 and then do things slightly differently but even that is just a very small change.\\nBut it is annoying, it does mean that especially hardware wallets, you know, with firmware updates could take a while.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:29:51\"}, {\"type\":\"paragraph\",\"text\":\"Right, so we started out with base58 addresses, now we're all starting to use BECH32 addresses.\\nIs this final?\\nAre we going to keep using BECH32 or are you anticipating some other address format somewhere in the future?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:30:07\"}, {\"type\":\"paragraph\",\"text\":\"No, I think this will do for a long time.\\nBECH32 is a way to write addresses.\\nNow, what is actually inside an address, there could be more information in it, right?\\nAnd the most interesting example of that is Lightning Invoices.\\nLightning Invoices uses BECH32, but they're much longer because they contain a lot more information.\\nThey contain the public key, they contain the amount, they contain the deadline, they contain a bunch of secrets, they contain all sorts of stuff, all sorts of routing hints even.\\nIt's like a whole book you're sending over.\\nSo BECH32 is just an alphabet essentially.\\nYou can make it as long as you want with this little caveat in mind that we talked about, but you're probably not going to type, manually type Lightning invoices anyway, because they're too long.\\nSo you tend to copy paste them.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:30:52\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nAnd generally you copy paste any address.\\nI don't retype addresses.\\nDo you, Sjors?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:30:58\"}, {\"type\":\"paragraph\",\"text\":\"Well, you might have some like nuclear cold storage and the addresses for that nuclear cold storage might be written down on a piece of paper because you don't want them ever to touch anything that's on the internet.\\nBut generally people copy paste.\\nBut there was some discussion early on with BECH32, I think, that was explicitly talking about can this be communicated over the phone.\\nEven in your nuclear bunker situation, maybe you need to communicate something to somebody else in another nuclear bunker through smoke signals.\\nAnd then, you know, you could use BECH32 for smoke signals although maybe a base2 system is easier.\\nI don't know I've never done smoke signaling\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:31:37\"}, {\"type\":\"paragraph\",\"text\":\"No, I usually copy paste.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:31:39\"}, {\"type\":\"paragraph\",\"text\":\"Okay that's cool it's also like a smoke signal just a bit more complicated. All right.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:31:43\"}, {\"type\":\"paragraph\",\"text\":\"Was that everything there is to know about addresses Sjors?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:31:47\"}, {\"type\":\"paragraph\",\"text\":\"Well I'm sure there's more but I think this is a nice primer.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:31:50\"}, {\"type\":\"paragraph\",\"text\":\"You're going to call it a day?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors Provoost: 00:31:52\"}, {\"type\":\"paragraph\",\"text\":\"We are.\\nSo thank you for listening to the Van Wirdum Sjorsnado.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron van Wirdum: 00:31:55\"}, {\"type\":\"paragraph\",\"text\":\"There you go.\"}",
    "body": "Aaron van Wirdum: 00:01:45\n\nLive from Utrecht this is the Van Wirdum Sjorsnado.\nSo the other day I wanted to send Bitcoin to someone, but I didn't.\n\nSjors Provoost: 00:01:52\n\nWhy?\nShouldn't you hodl?\n\nAaron van Wirdum: 00:01:55\n\nI hodl all I can, but sometimes I need to eat, or I need to pay my rent, or I need to buy a new plant for my living room.\n\nSjors Provoost: 00:02:05\n\nYeah, let's do.\n\nAaron van Wirdum: 00:02:06\n\nSo the problem was, the person I wanted to send Bitcoin to, I didn't have their IP address.\n\nSjors Provoost: 00:02:11\n\nYou did not have their IP address?\n\nAaron van Wirdum: 00:02:13\n\nI did not have their IP address.\nLuckily, it turns out there's this trick in Bitcoin called Bitcoin addresses.\n\nSjors Provoost: 00:02:21\n\nThat's right.\n\nAaron van Wirdum: 00:02:21\n\nHave you heard of this?\n\nSjors Provoost: 00:02:23\n\nYes.\n\nAaron van Wirdum: 00:02:24\n\nMaybe our listener hasn't yet, Sjors, so let's explain what Bitcoin addresses are.\n\nSjors Provoost: 00:02:30\n\nOkay, what are Bitcoin addresses?\n\nAaron van Wirdum: 00:02:33\n\nFirst of all, so I made a stupid joke about IP addresses, but this was actually an option, wasn't it?\n\nSjors Provoost: 00:02:38\n\nIn the initial version of Bitcoin, Satoshi announced it on the mailing list and said, well if you want to send somebody some coins, you just enter their IP address and then it'll exchange, I guess, an address to send it to.\n\nAaron van Wirdum: 00:02:51\n\nSo it was actually possible to send Bitcoins to people's IP addresses.\nI don't think that's possible anymore.\nThat's not in any of the code.\n\nSjors Provoost: 00:02:58\n\nI don't think so either.\nI haven't seen it.\nbecause the other way is that you just get an address to send to, and then it goes to the blockchain.\nAnd because the other side is checking the blockchain also, it'll show up.\n\nAaron van Wirdum: 00:03:10\n\nWell, that's actually not how it works at all.\nBut we're going to explain it now, I think.\nLet's go.\nOkay.\nFirst of all, Sjors, when you send Bitcoin to someone, what do you actually do?\nWhat happens?\n\nSjors Provoost: 00:03:22\n\nWell, you're creating a transaction that has a bunch of inputs, and it has an output.\nAnd that output describes who can spend it.\nSo you could say anybody can spend this.\nThat's not a good idea.\nWe talked about that in an earlier episode.\nSo what you do is you put a constraint on it.\nAnd the very first version of that constraint was he or she who has this public key can spend the coins.\nSo that's called pay-to-public-key.\n\nAaron van Wirdum: 00:03:49\n\nWe just mentioned this IP example.\nSo what actually happened was you would connect to someone's IP.\nI don't know the nitty-gritty details, but in general, you would connect to someone's IP and you'd ask for a public public key and that person would give you the public key and I think that's what you send the bitcoins to.\n\nSjors Provoost: 00:04:08\n\nYeah I believe so too but I haven't seen that code in action so we could be slightly wrong there somebody should dig it up, I'd love to see screenshots of like what that used to look like.\n\nAaron van Wirdum: 00:04:14\n\nis there anyone who's ever used this way of paying someone pay to IP address?\n\nSjors Provoost: 00:04:23\n\nYeah we'd love to know.\n\nAaron van Wirdum: 00:04:24\n\nIt was technically possible.\nIf anyone listening has ever actually used this We'd be curious to hear that.\n\nSjors Provoost: 00:04:31\n\nI mean, it makes sense to think that way in the first version of Bitcoin.\nBecause before that, you had all these peer-to-peer applications and they were generally very direct, so with Napster and all these things, or Kazaa, I don't know which one, you would connect to other people and you would download things from them.\nAnd with Bitcoin, you connect to other peers, but nowadays you just connect to random peers.\nBut perhaps in the beginning, the idea might've been, okay, you connect to peers you know, and so then you might as well do transactions with them.\nBut right now you don't really do transactions with the peers you're directly connected to.\nAt least not in Bitcoin on-chain.\n\nAaron van Wirdum: 00:05:05\n\nSo that's one way of paying someone to a public key, is you'd connect to their IP address and you'd get their public key.\nThe other way is if you mine Bitcoins.\nSo if you're a miner, then you're actually sending the block rewards to your public key.\nIs that still the case?\nIt used to be the case in the beginning.\n\nSjors Provoost: 00:05:24\n\nWell, in the beginning, Bitcoin had a piece of mining software built into the software, right?\nSo if you downloaded the Bitcoin software, it would just start mining.\nAnd so it would use that mechanism.\n\nAaron van Wirdum: 00:05:35\n\nWell, you just have to press a button.\n\nSjors Provoost: 00:05:37\n\nAnd then later on, you had mining pools and it all became more professional.\nSo the way they would pay out might be very different.\nProbably, you know, might go to a multi-sig address from which it's paid back to the individual pool participants, or it could be paid directly to the pool participants, although that's a bit inefficient because you need a long list of addresses in the Coinbase, but I've seen huge Coinbase transactions, so probably people were doing that.\n\nAaron van Wirdum: 00:06:06\n\nRight.\nWell, anyway, so the point I was making was this pay to public key way of paying someone.\nI learned this while doing a little bit of research for the show.\nThat was only ever really used for pay to IP address and for the block reward.\nIt wasn't actually used for anything other than that.\nWhat was used other than that was pay-to-public-key-hash. \nSo you're not sending money to a public key, but you're sending money to the hash of that public key.\nAnd this is where addresses come in.\nBecause this type of payment actually used addresses for the first time.\nNot for the first time, this was always there.\nAlso something I learned while doing a little bit of research.\nThis was there since day one.\nThere were Bitcoin addresses since day one, but they were only there for pay-to-public-key-hash.\n\nSjors Provoost: 00:06:58\n\nSo the script on the Bitcoin blockchain would in that case say, okay, the person who can spend this must have the public key belonging to this hash.\nSo the nice thing about that is that you're not saying which public key you have, or at least at the time it was thought that maybe that was safer against quantum attacks.\nBut the other benefit is that it's a little bit shorter, so it saves a bit on block space, although, of course, that wasn't an issue back then.\nSo yeah, you pay to the public key hash.\n\nAaron van Wirdum: 00:07:27\n\nI guess in a way, it's slightly more private as well, right?\nBecause you're only revealing your public key when you're paying?\nNo, that doesn't make sense.\n\nSjors Provoost: 00:07:35\n\nExactly, (it) doesn't matter.\n\nAaron van Wirdum: 00:07:37\n\nOkay, so that's paying to public key hash.\nAnd like you said, what you see on the blockchain itself, what's recorded on the blockchain is the actual hash of a public key.\nHowever, when you're getting paid on a pay-to-pubkey-hash, what you're sharing with someone is not this hash, it's actually an address.\n\nSjors Provoost: 00:08:02\n\nYes, well you are sharing the hash, but you do that using an address.\n\nAaron van Wirdum: 00:08:07\n\nExactly, so what is an address?\n\nSjors Provoost: 00:08:09\n\nSo an address essentially is, at least this type of address, is the number one followed by the hash of the public key.\nBut it is encoded using something called base58.\n\nAaron van Wirdum: 00:08:20\n\nWhat's base58?\n\nSjors Provoost: 00:08:22\n\nOkay so let's go back to base64, I don't know if you've ever seen an email source code like an attachment all these weird characters in there that's base64.\nbase58 is based on that, but maybe to say what it is, it is all the lowercase letters, all the uppercase letters, and all the numbers, and without any of the signs, and with some ambiguous things removed.\nSo you do not have the small O, the big O, and the zero.\n\nAaron van Wirdum: 00:08:50\n\nShould we start with base10?\nI want people to understand what base means.\n\nSjors Provoost: 00:08:58\n\nYeah exactly.\nSo this is what's in base58, but then the question is what is base?\nAnd so base10 is you have 10 fingers and so if you want to express say the number 115 you can make three gestures, right?\nYou show a one and a one and a five and that is base10 because you're using your 10 fingers three times and that's also how you write down numbers but there have been different bases.\nI think the Babylonians were very much into base 360 that's why we have...\n\nAaron van Wirdum: 00:09:27\n\nHang on hang on because we're not actually using fingers most of the time so I want to make this clear that it just means there we have a decimal system so that means we have 10 different symbols that represent a number.\n\nSjors Provoost: 00:09:45\n\nThis probably not a coincidence that that happens to match.\n\nAaron van Wirdum: 00:09:48\n\nI totally agree, I just want to make it clear that we're not actually using fingers most of the time.\n\nAaron van Wirdum: 00:09:54\n\nOkay, so we have 10 symbols, so that means that once you get by the 11th number, at that point you're going to have to reuse symbols you've already used, so you're now going to use combinations.\nSo in our case, that would be, well it's going to get confusing because the first number is a zero, so then the 11th number is the one and the zero.\n\nSjors Provoost: 00:10:13\n\nExactly, and there have been different bases in use, right?\nSo base360 I believe was used by Babylonians, or maybe base60.\nAnd then for computers we tend to use base2 internally, because chips are either on or off, so it's 0 or 1, so a long series of 0s and 1s.\nAnd you can express any number of that now in order to read machine code typically you would use hexadecimal which is base16 so that is 0 to 9 and then a to F.\nSo base58 is basically this 58 possible characters to express something with.\n\nAaron van Wirdum: 00:10:51\n\nYeah, it's all numbers and there's different ways of expressing a number based on your base.\nThat determines how many symbols you're using.\n\nSjors Provoost: 00:11:02\n\nRight, the trade-off here is readability really, because you could represent machine code as normal characters, so the ASCII alphabet, or the ASCII character set is 256 different characters, so that's base256.\nBut if you've ever done something like print and then the name of a file, your computer will show complete gibberish on the screen and it will start beeping.\nAnd the reason it starts beeping is because one of these codes, somewhere in the base256 is a beep, which actually makes your terminal beep.\nSo it is completely impractical to view a file using base256, even though there is a character for every of the 256 things there.\nSo that's why you tend to do that in base16.\nHexadecimal is relatively easy to read, but then it's quite long.\nIf you take a public key and you write it as hexadecimal it's a rather long thing to write down but and base58 is a little bit shorter so maybe you know it's easier to copy paste perhaps.\nIt's not even easy to read on the phone, base58 is pretty terrible because it's uppercase, lowercase, uppercase, lowercase.\n\nAaron van Wirdum: 00:12:05\n\nJust to restate that briefly.\nSo base2 is just you're just using two symbols, which is 1 and 0.\nAnd base10 is what we use most of the time.\nIt's 0, 1, 2, 3, 4, up until 9.\nThen you have hexadecimal, which uses 0 through 9, plus A, B, C, D, E, F.\nAnd then what we're talking about here is base58, which uses 58 different symbols, which are 0 through 9, and then most of the alphabet in both capital letters and undercase, right?\n\nSjors Provoost: 00:12:40\n\nYeah, I think it's lowercase and uppercase, and then most of the numbers, but there are some letters and numbers that are skipped that are ambiguous.\nSo the number 0, the letter O, both lowercase and uppercase, or at least uppercase is not in there.\n\nAaron van Wirdum: 00:12:53\n\nI think for example the capital \"I\" and the lowercase \"l\" are both not in there because they look too similar.\n\nSjors Provoost: 00:13:01\n\nRight, and that's why you get a little bit less than, you know, if you just add 26 letters plus 26 uppercase plus 10 numbers, right?\n\nAaron van Wirdum: 00:13:09\n\nSo I think we finally explained what base58 means.\n\nSjors Provoost: 00:13:11\n\nAnd just as a side step, I talked about email earlier, that's base64.\nThat is the same, but it also has some characters like underscore and plus and equals and that was mostly used for email attachments and I guess they didn't want to use all 256 characters either because they didn't want the email to start beeping but they did want to squeeze a lot of information into the attachment.\n\nAaron van Wirdum: 00:13:32\n\nOkay, that's base58.\nNow, why are we talking about this?\nWhat is an address?\n\nSjors Provoost: 00:13:37\n\nSo the address is the value 0, I believe, but that's expressed as a 1 because that's the first digit in this character set (base58).\nSo it starts with a 1 and then it's followed by the public key hash, which is just expressed in base58.\n\nAaron van Wirdum: 00:13:54\n\nRight, is that all it is?\n\nSjors Provoost: 00:13:56\n\nYes, and keep in mind, so that is the information you send to somebody else when you want them to send you Bitcoin.\nYou could also just send them 00 and then the public key and maybe they would be able to interpret that.\nProbably not.\nYou could send them the actual script that's used on the blockchain because on the blockchain there is no like base58 or base64 or anything like that.\nThe blockchain is just, binary information.\nSo the blockchain has this script that says, if the person has the right public key hash, has the public key belonging to this public key hash, then you can spend it.\nAnd we talked about in an earlier episode how Bitcoin scripts work.\nSo you could send somebody the Bitcoin script in hexadecimal, anything you want.\nBut the convention is you use this address format.\nAnd that's why all traditional Bitcoin addresses start with a one.\nAnd they're all the same, roughly the same length.\n\nAaron van Wirdum: 00:14:45\n\nOkay, so a Bitcoin address is basically just a base58 representation of a version number plus a public key hash.\nSjors, is base58 used for anything else in Bitcoin?\n\nSjors Provoost: 00:15:01\n\nYou can also use it to communicate a private key and then that case your version number is - well it's written as 5 - but it actually represents I think 128 and then followed by the private key.\n\nAaron van Wirdum: 00:15:13\n\nSo that's why all private keys start with a 5 or at least used to start with a five?\n\nSjors Provoost: 00:15:19\n\nIn the old days you had paper wallets that you could print and if you generate them actually securely without a backdoor then on one side of the piece of paper you would have something starting with a five and on the other other side of the paper you would have something started with a one and then it would say like show this to other people and don't show this to other people.\n\nAaron van Wirdum: 00:15:36\n\nRight now I happen to know Sjors that there are also addresses that start with a three.\nWhat's up with that?\n\nSjors Provoost: 00:15:44\n\n\nWell usually those are multi-signature addresses but they don't have to be.They could be single signature addresses.\nWhat they are are...\n\nAaron van Wirdum: 00:15:51\n\nThey could also be types of segwit addresses.\nThere could be many things, right?\nThey could also be single sig, But you already mentioned that.\nSo let's go on.\nOkay, three.\nIt starts with a three, what does it mean?\n\nSjors Provoost: 00:16:04\n\nSo it basically says pay-to-public-key-hash.\nSo it is that number.\n\nAaron van Wirdum: 00:16:08\n\nPay to public script hash.\n\nSjors Provoost: 00:16:10\n\nSorry, public script hash.\nWell, not even public, just pay-to-script-hash.\n\nAaron van Wirdum: 00:16:14\n\nWe're getting there.\n\nSjors Provoost: 00:16:15\n\nWe're getting there.\n\nAaron van Wirdum: 00:16:16\n\nEventually, pay-to-script-hash.\n\nSjors Provoost: 00:16:17\n\nYes, and it says basically anybody who has the script belonging to this hash and who can satisfy the script.\nSo just knowing the script is not enough, you actually have to do whatever the script says you should do.\n\nAaron van Wirdum: 00:16:30\n\nYeah, so the first version we just described was pay-to-public-key-hash, which required people to offer a valid signature corresponding to the public key.\nAnd now we're talking about pay-to-script-hash, which means someone needs to present the script and be able to solve the script.\nSo why do these start with a three?\n\nSjors Provoost: 00:16:51\n\nThere's just a convention.\nSo as we said, everything that you communicate through base58 starts with a version number.\nAnd if it starts with a 1 then you know it's pay-to-public-key-hash if it starts with a 3 you know it's pay-to-script-hash if it starts with a 5 you know it's a private key.\nSo it's just a convention and has no meaning on the blockchain itself.\n\nAaron van Wirdum: 00:17:13\n\nOnce again all this is is a version number plus this hash represented in base58.\nIs that all it is?\nThis is all so much simpler than I once thought, Sjors.\n\nSjors Provoost: 00:17:26\n\nNo, it's really simple.\nAnd the only mystery that has been solved today, I guess, is, well, what if you only use the public key but that wasn't done using this system so there is no initial letter that would represent trying to do that.\n\nAaron van Wirdum: 00:17:40\n\nYeah that was never represented in base58\n\nSjors Provoost: 00:17:42\n\nOtherwise probably that would have been version 0 and then all normal addresses might have started with the two, who knows.\n\nAaron van Wirdum: 00:17:48\n\nI think for anyone who already knew this which is probably a good chunk of people this is a very boring episode so far but I think it's gonna get better because Sjors we now have a new type of address since a year or two, which starts with BC1.\n\nSjors Provoost: 00:18:09\n\nBC1Q even, usually.\n\nAaron van Wirdum: 00:18:11\n\nYeah, usually, but not always.\nAnd we're getting into that, I think.\nSo what is this all about?\n\nSjors Provoost: 00:18:16\n\nWell, that is BECH32 or however you want to pronounce it.\nAnd it's been used since SegWit, basically.\nAnd again, it is something that doesn't exist on the blockchain, so it's just a convention that wallets can use.\nThis is a, as the name suggests, a base32 system.\nWhich means you have almost all the letters, and almost all the numbers, minus some ambiguous characters that you don't want to have, because they look too much like numbers or letters.\n\nAaron van Wirdum: 00:18:46\n\nI think one of the big differences compared to base58 is that this time there are no longer uppercase and lowercase letters.\nEvery letter is only in there once.\n\nSjors Provoost: 00:18:58\n\nExactly.\n\nAaron van Wirdum: 00:18:59\n\nI'll mention one benefit of that, which is that if you want to read an address out loud it's going to be a little bit easier now that there's no difference between uppercase and lowercase.\n\nSjors Provoost: 00:19:11\n\nThe other difference is, I didn't check with base58, but basically it doesn't start with zero or anything like that.\nIt looks pretty arbitrary.\nSo the value zero is written as a Q, the value one is written as a P, the value two is written as a Z, etc.\n\nAaron van Wirdum: 00:19:27\n\nWhy is the value one just written as a one?\n\nSjors Provoost: 00:19:30\n\nWell it's completely arbitrary first of all, right?\nYou can pick any, you can connect any value to any symbol you want.\nI f there is a human interpretation that depends on it, then you don't want to do anything confusing.\nBut if your only goal is to make it easy to copy paste things and if your other goal is for every address to start with BC1Q because you know BC1 sounds cool then maybe there's a reason why you want to do them out of order I haven't read what the rationale is in the order.\n\nAaron van Wirdum: 00:20:02\n\nOkay, now BECH32.\n\nSjors Provoost: 00:20:05\n\nYeah, so there's a set of 32 characters, but it's doing the same thing, right?\nIt's again saying, okay, here's a pay-to-public-key address.\nIn this case, a pay-to-witness-public-key-hash because it's using segwit but it's the same idea.\nSo it says hello, and then followed by the hash of the public key\n\nAaron van Wirdum: 00:20:30\n\nSo BECH32 addresses what are we looking at exactly.\nBecause what we're seeing for each address, it starts with BC1 and then usually a Q and then a whole bunch of other symbols.\nSo what does this all mean?\n\nSjors Provoost: 00:20:43\n\nThat's right, so there is something called the human readable part.\nAnd that doesn't really have any meaning other than that humans can recognize, okay, if the address starts with BC, then it refers to Bitcoin.\nAnd the software of course can see this too, but both humans and software can understand this.\n\nAaron van Wirdum: 00:20:58\n\nSo if Litecoin would want to use these kinds of addresses.\nMaybe they do actually, I don't know.\n\nSjors Provoost: 00:21:04\n\nProbably, then they might start with LT.\n\nAaron van Wirdum: 00:21:06\n\nExactly.\nSo these first two letters just refer to which currency is this about.\nWhat blockchain is this for.\n\nSjors Provoost: 00:21:12\n\nAnd it can be, I think, a fairly arbitrary number of letters.\nThe idea is that it's separated by a one.\n\nAaron van Wirdum: 00:21:17\n\nOh, it could be more than two letters as well?\n\nSjors Provoost: 00:21:19\n\nI think initially Bitcoin Cash was using a much longer introduction.\n\nSjors Provoost: 00:21:24\n\nSo that's pretty arbitrary.\nObviously, you want to conserve space, so BC is nice and short and a one, that's a separator, has no value.\nSo if you look at the, what do all the 32 numbers mean, then 1 is not in it.\n\nAaron van Wirdum: 00:21:36\n\nOne just means, The human readable part is over, now the fun stuff starts.\n\nSjors Provoost: 00:21:43\n\nAnd the fun stuff, it's a little bit easier actually than with base58, because there's a convention.\nThe convention is it starts with the SegWit version, so the first version of SegWit is 0, which in BECH32 is written as Q.\nAnd then it's either followed by 20 bytes or 32 bytes.\nAnd that is, then it means either it's the public key hash, or it is the script hash.\nAnd they're different lengths now because SegWit uses the SHA-256 hash of the script, rather than the RIPEMD-160 hash of the script.\nSo in base58 the script hash is the same length as the public key hash but in segwit they're not the same length.\nSo simply by looking at how long the address is, you know whether you're paying to a script or you're paying to a public key.\nSo we don't have to say it.\n\nAaron van Wirdum: 00:22:36\n\nSo to reiterate the first two letters, B C, that just means this is about Bitcoin.\nThen the 1 says, okay, that was the part telling you which currency this is.\nNow pay attention where you're actually going to pay money to.\nThen the Q means which version is going to follow, which version of segwit.\nAnd then what comes after it is actually the BECH32 representation of this hash, which is either pay-to-public-key-hash or pay-to-script-hash.\n\nSjors Provoost: 00:23:08\n\nYeah exactly or pay-to-witness-public-key-hash or pay-to-witness-script-hash.\n\nAaron van Wirdum: 00:23:12\n\nSjors is there anything else cool about BECH32?\n\nSjors Provoost: 00:23:16\n\nYeah there is and it's about error correction.\nSo in base58 there is a checksum.\nSo a checksum basically means you add something to the address at the end and that way if you make a typo then that checksum at the end of the address is not gonna work.\n\nAaron van Wirdum: 00:23:34\n\nThey're gonna compute with the rest of the address.\n\nSjors Provoost: 00:23:36\n\nSo it'll tell you, okay, this address is wrong.\nNow there is a certain chance...\n\nAaron van Wirdum: 00:23:40\n\nIt doesn't tell you what the correct version would be, it just tells you this is wrong.\n\nSjors Provoost: 00:23:44\n\nExactly.\nNow there is a chance that you make a typo that happens to have a correct checksum.\nI don't know what the odds are with base58, they're pretty low.\n\nAaron van Wirdum: 00:23:53\n\nYou'd probably have to make several typos.\n\nSjors Provoost: 00:23:55\n\nWell, yeah, you'd have to have the unlucky typo.\nI don't know if the odds are 1 in 10,000 or 100,000 or something.\nBut there's a lot of Bitcoin users.\nBut in BECH32 it's actually better because it will not just tell you that there's a typo, it'll tell you where the typo is.\nAnd that's done differently.\nSo where we talked about in the base58 system, there is a checksum which basically takes all the bytes from the address and then hashes it.\nHere there is very sophisticated mathematical magic.\nI don't think it's super sophisticated, but I can't explain what the actual magic is.\nBut the magic makes it so that you can actually make a typo and it'll actually tell you where the typo is.\nAnd you can make about four typos and it'll still know where the typo is and what the real value is.\nIf you do more than that, it won't.\nAnd the analogy I like to make with that, as someone once told me, is it's like if you have a wall and you draw a bunch of circles on it, and each circle represents a correct value, and you're throwing a dart at it, and you might hit the bullseye, then you have the right value, or you might just slightly miss the bullseye, but you're still within that big circle, then you know exactly where it should have been.\n\nAaron van Wirdum: 00:25:11\n\nAre you talking about interlocking circles?\n\nSjors Provoost: 00:25:13\n\nNo, they're not overlapping.\n\nSjors Provoost: 00:25:16\n\nSo the idea there is you want the circles to be as big as possible, obviously, but you don't want to waste any space.\nSo that's an optimization problem in general.\nAnd of course, in the example of a two-dimensional wall with two-dimensional circles, it's pretty simple to visualize, right?\nYou throw the dart and you see okay it's still within the big circle so it should belong to this dot so that is like saying okay here's your typo and this is how you fix it.\nBut and in the case of BECH32 the way I think you should imagine it is that instead of a two-dimensional wall you have a 32 dimensional wall and the circles are also probably 32 dimensional hyperspheres.\n\nAaron van Wirdum: 00:25:53\n\nI find that a little bit hard to imagine Sjors but I'm not a wizard like you.\n\nSjors Provoost: 00:25:58\n\nWell, if you've studied something like physics or math, you know that anything you can do in two dimensions you know you can see it in three dimensions and you can do it in n dimensions you can abstract all these things out to to as many dimensions as you need but the general intuition is the same so now you're hitting your keyboard and somewhere in that 32 dimensional space you're slightly off, but you're still inside this sphere whatever that might look like and so it knows where that mistake is.\nBut there's a problem, all this amazing wizardry missed something.\n\nAaron van Wirdum: 00:26:32\nIt lost me a long time ago but go on.\n\nSjors Provoost: 00:26:35\n\nWell basically it turns out that if your BECH32 address ends with a P, then you can add an arbitrary number of Qs to it and it still will match the checksum.\n\nAaron van Wirdum: 00:26:47\n\nThat was a bug in BECH32.\n\nSjors Provoost: 00:26:51\n\nSo I guess the analogy would be that the circles are not entirely separate in some weird way.\nAnd that's not good.\nBut that's actually not a problem originally.\n\nAaron van Wirdum: 00:27:01\n\nSo any address that ended with a P could have any arbitrary numbers of Q following it.\nAnd then you wouldn't be told that there's a typo.\nYour software would think it's right and then you're sending money to the wrong address.\n\nSjors Provoost: 00:27:16\n\nYeah, which means it's unspendable.\n\nSjors Provoost: 00:27:18\n\nBut the good news is that there's another constraint for the original version of segwit, segwit version 0, which is that an address is either well 20 bytes or 32 bytes.\nAnd that means that it's constrained because if you add another Q to it then it's too long so you still know it's wrong.\n\nAaron van Wirdum: 00:27:35\n\nYeah if you have a 20 byte address and you add one Q then it's 21 which is still invalid so you'd have to accidentally add 12 Qs. That's pretty unlikely to happen\n\nSjors Provoost: 00:27:49\n\nI might be confusing bytes and characters, but exactly.\nThat's very unlikely to happen for SegWit version 0.\nBut now we would say, okay, we're going to have future versions of SegWit, such as Taproot.\nWhich would be BC1P, because P is version 1.\nAnd I believe for Taproot, there's also a constraint in how long these addresses are supposed to be.\nSo it's still not an acute problem but in the future maybe we want to have addresses that are somewhat more arbitrary in length because maybe you want to add some weird conditions to it or you want to communicate other information not just the address maybe you want to put the amount inside the address.\n\nSo this is why there's a new standard proposed BIP350 which is called BECH32m and it's actually a very simple change.\nI think it adds to the all the math it adds one extra number to that math.\nAnd then it fixes that particular bug.\nAnd everybody's happy.\n\nAaron van Wirdum: 00:28:51\n\nSo it fixes the bug that the Qs don't matter anymore.\n\nSjors Provoost: 00:28:56\n\nYeah, you can't just add stuff to it without running into problems.\n\nAaron van Wirdum: 00:29:00\n\nBut I guess this does mean that wallets that have by now upgraded to support these special SegWit addresses, BECH32 addresses, they now have to upgrade again.\n\nSjors Provoost: 00:29:11\n\nThat's right.\nSo that's annoying, because it does mean that if your wallet wants to support sending to a taproot address, then it has to make a small change to the BECH32 implementation.\nAnd there's some example code on the BIP.\nIt's not a big change because it just adds one number and if you look at the Bitcoin Core implementation it's a fairly simple change that does it.\nBut it does mean that moving forward when you see a BECH32 address you have to parse it, then see if it's the version 0 or the version 1 and then do things slightly differently but even that is just a very small change.\nBut it is annoying, it does mean that especially hardware wallets, you know, with firmware updates could take a while.\n\nAaron van Wirdum: 00:29:51\n\nRight, so we started out with base58 addresses, now we're all starting to use BECH32 addresses.\nIs this final?\nAre we going to keep using BECH32 or are you anticipating some other address format somewhere in the future?\n\nSjors Provoost: 00:30:07\n\nNo, I think this will do for a long time.\nBECH32 is a way to write addresses.\nNow, what is actually inside an address, there could be more information in it, right?\nAnd the most interesting example of that is Lightning Invoices.\nLightning Invoices uses BECH32, but they're much longer because they contain a lot more information.\nThey contain the public key, they contain the amount, they contain the deadline, they contain a bunch of secrets, they contain all sorts of stuff, all sorts of routing hints even.\nIt's like a whole book you're sending over.\nSo BECH32 is just an alphabet essentially.\nYou can make it as long as you want with this little caveat in mind that we talked about, but you're probably not going to type, manually type Lightning invoices anyway, because they're too long.\nSo you tend to copy paste them.\n\nAaron van Wirdum: 00:30:52\n\nYeah.\nAnd generally you copy paste any address.\nI don't retype addresses.\nDo you, Sjors?\n\nSjors Provoost: 00:30:58\n\nWell, you might have some like nuclear cold storage and the addresses for that nuclear cold storage might be written down on a piece of paper because you don't want them ever to touch anything that's on the internet.\nBut generally people copy paste.\nBut there was some discussion early on with BECH32, I think, that was explicitly talking about can this be communicated over the phone.\nEven in your nuclear bunker situation, maybe you need to communicate something to somebody else in another nuclear bunker through smoke signals.\nAnd then, you know, you could use BECH32 for smoke signals although maybe a base2 system is easier.\nI don't know I've never done smoke signaling\n\nAaron van Wirdum: 00:31:37\n\nNo, I usually copy paste.\n\nSjors Provoost: 00:31:39\n\nOkay that's cool it's also like a smoke signal just a bit more complicated. All right.\n\nAaron van Wirdum: 00:31:43\n\nWas that everything there is to know about addresses Sjors?\n\nSjors Provoost: 00:31:47\n\nWell I'm sure there's more but I think this is a nice primer.\n\nAaron van Wirdum: 00:31:50\n\nYou're going to call it a day?\n\nSjors Provoost: 00:31:52\n\nWe are.\nSo thank you for listening to the Van Wirdum Sjorsnado.\n\nAaron van Wirdum: 00:31:55\n\nThere you go.\n",
    "body_type": "markdown",
    "created_at": "2021-02-19T00:00:00.000Z",
    "domain": "https://btctranscripts.com/",
    "url": "https://btctranscripts.com/bitcoin-explained/explaining-bitcoin-addresses",
    "categories": [
        "podcast"
    ],
    "tags": [
        "scripts-addresses",
        "bech32"
    ],
    "media": "https://www.youtube.com/watch?v=R1kF1rnLvM8",
    "authors": [
        "Sjors Provoost",
        "Aaron van Wirdum"
    ],
    "indexed_at": "2024-03-21T16:33:36.121Z",
    "transcript_by": "mubarak23 via review.btctranscripts.com",
    "summary": "In a recent episode of the Van Wirdum Sjorsnado, co-hosts Aaron van Wirdum and Sjors Provoost embarked on a deep dive into the world of Bitcoin addresses, tracing their evolution and unpacking the technical underpinnings that make these addresses an integral part of the cryptocurrency landscape. The discussion initiated with a personal anecdote from Aaron van Wirdum, setting the stage for a broader exploration of how Bitcoin transactions have transitioned from being sent to IP addresses to utilizing more secure and user-friendly methods.\n\nThe early days of Bitcoin, as highlighted by the co-hosts, saw transactions being directly sent to recipients' IP addresses, a method originally mentioned by Bitcoin's creator, Satoshi Nakamoto. This approach has gradually been phased out due to security concerns and practicality issues, marking a significant shift towards enhancing the Bitcoin network's adaptability and security measures. The podcast delves into the fundamental components of a Bitcoin transaction, including inputs, outputs, and the constraints that determine the eligibility to spend the output, providing listeners with foundational knowledge of how Bitcoin operates.\n\nA notable evolution in the realm of Bitcoin transactions is the transition from \"pay-to-public-key\" (P2PK) to \"pay-to-public-key-hash\" (P2PKH) transactions. The former, primarily used in the network's nascent stages for direct transactions and miner rewards, involved sending bitcoins directly to a recipient's public key. On the other hand, P2PKH transactions, which became the standard, involve sending bitcoins to the hash of the recipient's public key, thereby introducing the concept of Bitcoin addresses for the first time. This shift not only added a layer of security but also marked a pivotal moment in Bitcoin's development by making transactions more efficient and secure.\n\nFurther enriching the discussion, Provoost and van Wirdum touch upon the encoding system known as base58. This system is designed to enhance readability and reduce confusion by excluding visually similar characters, showcasing the thoughtful design considerations behind Bitcoin's infrastructure aimed at making the system accessible and secure for users. Their conversation seamlessly transitions into a technical yet accessible examination of numerical bases used in computing and cryptography, with a special focus on their application within the Bitcoin protocol. By comparing base256, hexadecimal (base16), and base58, the co-hosts elucidate the rationale behind employing base58 for Bitcoin addresses, emphasizing its efficiency in encoding binary data into shorter, more manageable strings while maintaining user-friendliness.\n\nAs the podcast progresses, attention is drawn to the advent of BECH32 and BECH32m address formats, marking further advancements in the domain of cryptocurrency addresses. Initially focusing on the significance of the first two letters in a cryptocurrency address, Provoost and van Wirdum explore the advantages of BECH32 over base58, particularly in terms of error correction capabilities. They discuss how BECH32, through sophisticated mathematical operations, improves user experience by reducing transaction errors. The subsequent introduction of BECH32m under BIP350, developed to rectify a notable flaw in the BECH32 format, underscores the continuous efforts to enhance accuracy and security in transaction processing.\n\nConcluding their insightful dialogue, the co-hosts delve into the practicalities and challenges of managing Bitcoin addresses, touching upon common practices such as copying and pasting addresses. They also entertain the possibility of using Bitcoin addresses in unconventional communication methods, illustrating the adaptability and ingenuity behind the cryptographic designs of Bitcoin's address formats. Through this comprehensive and engaging exchange, Aaron van Wirdum and Sjors Provoost shed light on the intricacies, innovations, and ongoing evolution of Bitcoin addresses, offering listeners a profound understanding of the operational framework and technological advancements shaping the digital currency landscape."
}