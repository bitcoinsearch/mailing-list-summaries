{
    "id": "bitcointranscripts+bitcoin-explained+bitcoin-core-v22-explained",
    "title": "Bitcoin Core 22.0 Explained",
    "body_formatted": "{\"type\":\"heading\",\"text\":\"Intro\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:00:20\"}, {\"type\":\"paragraph\",\"text\":\"Welcome to Bitcoin Explained, the podcast with the most boring name in Bitcoin.\\nHey Sjors.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:00:27\"}, {\"type\":\"paragraph\",\"text\":\"What's up?\\nWhat's with the new name?\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:00:29\"}, {\"type\":\"paragraph\",\"text\":\"So We've rebranded our podcast.\\nWhat do you think?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:00:33\"}, {\"type\":\"paragraph\",\"text\":\"Well, I think, you know, especially if you read it correctly, Bitcoin, explained.\\nI think it's an amazing name.\\nI think the problem was that a lot of people have no idea what the hell a Van Weerdam Shores Nado is.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:00:46\"}, {\"type\":\"paragraph\",\"text\":\"Apparently, no one had any idea what Van Weerdam and Shoresnado means or even how to pronounce it so we decided to go for a new name.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:00:54\"}, {\"type\":\"paragraph\",\"text\":\"Though I think if people listen to it long enough they'll know how to pronounce it but I think the problem is people who are not listening don't know how to pronounce it.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:01:02\"}, {\"type\":\"paragraph\",\"text\":\"So from now on, we're Bitcoin, Explained.\\nWhy is the comma so important for you?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:01:07\"}, {\"type\":\"paragraph\",\"text\":\"It makes it sound more profound.\\nSo if you just say, oh, I'm going to explain Bitcoin, whereas Bitcoin, Explained, you know, really says, okay, now You truly understand it.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:01:16\"}, {\"type\":\"paragraph\",\"text\":\"Very profound.\\nSo the first episode, we're just going to keep counting.\\nSo this is episode 45 of Bitcoin Explained, previously known as Defend William Shures NATO.\\nAnd we're going to start off with the new Bitcoin Core release, Bitcoin Core 22.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:01:33\"}, {\"type\":\"paragraph\",\"text\":\"That's right.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:01:34\"}, {\"type\":\"paragraph\",\"text\":\"From now on it's not 0.22 anymore, it's just Bitcoin Core 22, right?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:01:40\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, highly undemocratically decided at some point to just change the numbering because people were asking when is version 1 coming of Bitcoin?\\nAnd we're like yeah we're just gonna skip it because it's always bad luck when you do that.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:01:53\"}, {\"type\":\"paragraph\",\"text\":\"Right so from now on it's does this mean we're not in beta anymore Sjors?\\nIs that the big announcement?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:01:59\"}, {\"type\":\"paragraph\",\"text\":\"No I think it means nothing I think it just means that we stopped having this zero prefix.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:02:05\"}, {\"type\":\"paragraph\",\"text\":\"Basically, Bitcoin Core changed the name for the same reasons that we did, just to avoid annoying questions and make it more clear.\\nIs that it?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:02:14\"}, {\"type\":\"paragraph\",\"text\":\"I guess.\\nI wasn't really there at the decision.\\nIt just happened and nobody wanted to undo it.\\nSo there we are.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:02:22\"}, {\"type\":\"paragraph\",\"text\":\"Got it.\\nWell, at the point that we're recording this, the new Bitcoin Core release has not actually been released yet.\\nBitcoin Core 22 has not actually been released yet.\\nBut by the time this episode is released, then maybe Bitcoin Core 22 is released as well.\\nAnd otherwise, it will be released very soon, right?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:02:41\"}, {\"type\":\"paragraph\",\"text\":\"That's right.\\nThere's now a third release candidate out.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:02:44\"}, {\"type\":\"paragraph\",\"text\":\"So that means basically any day now, at the point of recording at least.\\nAnd maybe, like I said, maybe it's out by the time this episode is released.\\nSo anyways, we're going to highlight some of the improvements compared to Bitcoin core 21 essentially and bitcoin core 21.1. Was there a bitcoin core 21.2 as well?\\nI don't think so.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:03:09\"}, {\"type\":\"paragraph\",\"text\":\"I think there's one in progress.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:03:11\"}, {\"type\":\"paragraph\",\"text\":\"Right exactly yeah there's one coming as well.\\nSo we're gonna give a short overview of the most notable changes, right?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:03:22\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, exactly.\\nSo usually the last version digit, those changes are very small.\\nThey're usually bug fixes and those kind of things.\\nSo the release we're talking about now is a big one.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:03:32\"}, {\"type\":\"paragraph\",\"text\":\"They're either very small or they're a protocol upgrade.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:03:36\"}, {\"type\":\"paragraph\",\"text\":\"Right.\\nSo in this case, it's a bit more complicated because it's small fixes and taproot that go into 0.21.1 and also probably in 0.21.2.\"}, {\"type\":\"heading\",\"text\":\"Hardware Wallet Support in the GUI\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:03:47\"}, {\"type\":\"paragraph\",\"text\":\"So let's get to Bitcoin Core 22.\\nThat's what the episode is about.\\nI think the main, the most notable change, the biggest change, and I think you'll agree with that because you worked on it, so you're biased, is hardware wallet support, the HWI, right?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:04:06\"}, {\"type\":\"paragraph\",\"text\":\"I think that's a pretty cool change.\\nI don't know if it's the biggest change.\\nI'm definitely very happy with it.\\nYeah, so basically if you download Bitcoin Core 22 and then also download HWI, which we talked about in episode 30, which is just a Python script that connects to all sorts of different hardware wallets essentially using their drivers.\\nThen I think you just have to change one setting which is to tell it where you put the HWI script and then once you've done that you just insert your hardware wallet you say to Bitcoin core give me a new wallet and it'll say \\\"oh do you want to use a trezor, ledger whatever you've just inserted\\\" and it'll just work to him like any other wallet except that your wallet your hardware device will now show on screen \\\"hey do you want to prove this transaction\\\" so that's pretty cool I think.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:05:01\"}, {\"type\":\"paragraph\",\"text\":\"Right, but am I understanding you correctly that it does not work out of the box?\\nYou can't only download Bitcoin Core 22, you also need to download the HWI.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:05:11\"}, {\"type\":\"paragraph\",\"text\":\"Correct.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:05:12\"}, {\"type\":\"paragraph\",\"text\":\"Which is a separate software package.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:05:14\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, It's a Python library and you know because it contains all the stuff from the hardware manufacturers and it communicates with USB so it is potentially a can of worms and so we don't want to put it in Bitcoin Core for everybody.\\nMaybe one day will be but I think it'll be a while because just including USB drivers into Bitcoin Core sounds a bit scary.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:05:35\"}, {\"type\":\"paragraph\",\"text\":\"Right.\\nSo for now it's like an add-on.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:05:38\"}, {\"type\":\"paragraph\",\"text\":\"Yes.\\nBut like I said, pretty easy to install.\\nYou download it, put it somewhere, point to it, and that's it.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:05:44\"}, {\"type\":\"paragraph\",\"text\":\"Hardware wallets were already supported by Bitcoin Core though, right?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:05:48\"}, {\"type\":\"paragraph\",\"text\":\"Indirectly, yes.\\nYou could use HWI already, but you had to use it from the command line yourself.\\nAnd actually HWI also came with a graphical tool, so you could actually use it somewhat you know reasonably, but I think this is much easier now.\\nIt's just right into the Bitcoin Core interface.\"}, {\"type\":\"heading\",\"text\":\"Bitcoin Core Interface\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:06:08\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, no one uses the command line, sure.\\nSo only a couple of Bitcoin Core developers themselves use that stuff.\\nRegular people.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:06:16\"}, {\"type\":\"paragraph\",\"text\":\"A surprising number of Bitcoin Core developers use the graphical interface too and it's especially because coin selection is just a lot easier to do if you want to decide which coins you want to spend using a graphical interface you just click on them whereas with a command line it's horrible, you have to copy paste the transaction hash and the identifier, etc.\"}, {\"type\":\"heading\",\"text\":\"Which Hardware Wallets are Supported\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:06:37\"}, {\"type\":\"paragraph\",\"text\":\"Right.\\nSo, which hardware wallets are supported?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:06:41\"}, {\"type\":\"paragraph\",\"text\":\"Off the top of my head, whatever HWI supports.\\nSo, that is the Trezor, the Ledger, the KeepKey, Coldcard.\\nI don't know.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:06:55\"}, {\"type\":\"paragraph\",\"text\":\"Maybe some more.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:06:57\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, I was just opening the support matrix.\\nThere's a whole list of it.\\nBitbox.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:07:04\"}, {\"type\":\"paragraph\",\"text\":\"Okay.\\nIs that the only hardware wallet related change in the Bitcoin Core 22?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:07:11\"}, {\"type\":\"paragraph\",\"text\":\"I mean, that's a big enough one, right?\\nAnd I'm sure in next versions, there'll be some more incremental improvements, like being able to bump the fee for example would be nice, that sort of stuff.\\nMulti-sig would be very nice if it was possible to do that directly.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:07:26\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, and for now I think it's just one hardware wallet per Bitcoin Core wallet, right?\\nYou can't do two out of three or that kind of nifty stuff yet.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:07:37\"}, {\"type\":\"paragraph\",\"text\":\"No, exactly.\\nMulti-signature support is not there yet.\\nAnd that just is a whole can of worms in general, right?\\nMulti-signature support with Bitcoin Core is still not very easy.\\nIt does, it's all possible, but it's, it requires some manual work.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:07:51\"}, {\"type\":\"paragraph\",\"text\":\"Let me think.\\nShould we say something else about hardware wallets?\\nOr is that about it?\\nBut there is also RPC.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:08:00\"}, {\"type\":\"paragraph\",\"text\":\"No, right?\\nBut yes, that is indeed that you can do it via the GUI or the command line.\\nI don't know how important it is to do that.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:08:09\"}, {\"type\":\"paragraph\",\"text\":\"Right, so hardware wallet integration into Bitcoin Core has been a long process, has been an incremental process And now for the first time with Bitcoin Core 22, we have hardware wallet support in the GUI, which basically means we for the first time have hardware wallet support for regular users.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:08:26\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, exactly.\\nI think it's still marked experimental.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:08:29\"}, {\"type\":\"paragraph\",\"text\":\"Great.\"}, {\"type\":\"heading\",\"text\":\"I2P Search\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:11:56\"}, {\"type\":\"paragraph\",\"text\":\"Next up, I2P.\\nWhat is I2P?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:12:01\"}, {\"type\":\"paragraph\",\"text\":\"I don't know.\\nThere's a lot of articles on the internet that say what is the difference between I2P and Tor and then those articles start by saying many people ask what the difference is between I2P and Tor and then they proceed in some really convoluted language.\\nBut basically, it is a Tor-like system that is somehow different.\\nBut the good news is that Bitcoin Core can now use it.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:12:24\"}, {\"type\":\"paragraph\",\"text\":\"Exactly.\\nIt's a privacy layer on top of the internet, a lot like Tor.\\nTor uses onion routing, so messages are encrypted and routed across different users that all have a sort of encryption step on the way.\\nAnd therefore you gain privacy.\\nI2P is similar and the differences are pretty subtle.\\nIt seems that I2P has a more distributed way of mapping the network.\\nI don't think either of us knows the details of how that works exactly, but it's more distributed than with Tor.\\nAnd somehow, I2P is more dedicated to...\\nWhat's it called?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:13:20\"}, {\"type\":\"paragraph\",\"text\":\"Well, it's internal, so it's more difficult to get out of I2P, whereas in Tor, it's very easy to use the original internet in addition to dedicated darknet, or not darknet, but onion sites.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:13:33\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, that's what I was going to say.\\nI2P is more dedicated to hidden services.\\nSo if you stay within the network I2P is sort of specialized for that, where Tor is more usable if you want to you know send stuff to the regular internet to the web.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:13:52\"}, {\"type\":\"paragraph\",\"text\":\"That's what we've read in random Google searches, so we wouldn't know.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:13:57\"}, {\"type\":\"paragraph\",\"text\":\"These appear to be the subtle differences.\\nSo what does this have to do with Bitcoin Core?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:14:00\"}, {\"type\":\"paragraph\",\"text\":\"Well, so this kind of ties back into an earlier episode.\\nSo first of all, Bitcoin Core 22 supports that network.\\nSo if you are interested in using it, you can.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:14:11\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, so you can now connect to the Bitcoin network through I2P.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:14:15\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, and so what we talked about in episode 13, back when it was still called the Van Wirdum Sjorsnado, what we talked about then is that Bitcoin Core added support for Tor version 3.\\nAnd the other aspect we talked about then was more generally how does Bitcoin Core tell other nodes which nodes to consider.\\nSo there's basically a message where you can say, hey, here's a bunch of addresses for other nodes.\\nAnd what we explained in an episode is that there's now a new message that makes it easier to announce nodes of various kinds to other nodes including to say okay here's a list of Tor version 3 nodes or here's a list of IPv6 nodes or here's a list of I2P nodes.\\nAnd this mechanism is now more generic, which means that in the future if other networks like this come about, some other anonymity network, maybe internet over the lightning network, who knows, it'll be much easier to add support for that, because we'll have a way to gossip those nodes around.\"}, {\"type\":\"heading\",\"text\":\"Tor Version 3\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:15:23\"}, {\"type\":\"paragraph\",\"text\":\"Speaking of these kinds of topics, you already mentioned Tor version 3.\\nTor version 2 has now been fully deprecated, right?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:15:33\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, it was essentially already the case because in the previous version of Bitcoin Core, if it started up, it would immediately switch to Tor v3 and would just not use your Tor v2 settings.\\nBut you could still go back if you did something manually.\\nAnd now I think all that code has been stripped out because I think Tor version 2 is more or less shut down.\\nBecause remember, Tor is centralized in that way.\\nThere's somebody out there that can say, okay, this thing no longer works.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:16:01\"}, {\"type\":\"paragraph\",\"text\":\"Right.\\nYeah.\\nWe've discussed this in one of the previous Bitcoin Core release episodes, I think, where the switch from Tor version 2 to version 3 was happening.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:16:12\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, we did that in the same episode, episode 13.\"}, {\"type\":\"heading\",\"text\":\"Taproot\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:16:15\"}, {\"type\":\"paragraph\",\"text\":\"Right, got it.\\nAll right, so these are two changes we've mentioned, hardware wallet and I2P support.\\nYou've also mentioned at the start of this episode this difference between major releases and minor releases, where minor releases are usually either bug fixes or they include protocol upgrades.\\nNow, the last minor release did include a protocol upgrade, namely Taproot, which also means that this is the first major Bitcoin Core release that has taproot support.\\nYep.\\nAnd we can find this taproot support in a couple of places in this upgrade, right?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:16:51\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nOf course, the most important part is all the taproot consensus stuff is in here.\\nObviously, the activation code, the speedy trial, all that sort of stuff.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:17:01\"}, {\"type\":\"paragraph\",\"text\":\"If you haven't upgraded the minor release yet, Taproot is going to activate in November, so this would be a good opportunity to actually upgrade if you want to enforce the new Taproot rules, which you should do if you want to, you know get the maximum security that a full node promises to offer.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:17:18\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, but the good news is that if you, you know, if you really, really liked version, say 0.21.0, and you don't want to change too much, then you could just go to 0.21.1 and you'll enforce taproot.\\nBut as we'll talk about now, I think version 22 has a few more things on top of this, the consensus enforcement.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:17:39\"}, {\"type\":\"paragraph\",\"text\":\"Yes.\\nSo what does Bitcoin Core 22 include taproot wise?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:17:44\"}, {\"type\":\"paragraph\",\"text\":\"Well, it includes some very rudimentary support for wallet, taproot wallets.\\nBasically you're just a single public key type of wallet, which doesn't make taproot that interesting.\\nAnd slightly more generic things where you can have one private one yeah one key per taproot branch so remember in taproot you have a main key and you also have scripts that are sitting in a tree.\\nAnd so there's now support for those scripts in a tree.\\nHowever, as far as I understand it, those scripts can only be of the super simple type, namely a public key.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:18:27\"}, {\"type\":\"paragraph\",\"text\":\"Right.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:18:28\"}, {\"type\":\"paragraph\",\"text\":\"So, they're not very interesting yet, but this is how it goes with Bitcoin Core.\\nWe add little increments at a time.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:18:35\"}, {\"type\":\"paragraph\",\"text\":\"Yes, we've mentioned that a couple of times.\\nBitcoin Core is improved slowly but surely.\\nEvery half year there's a new release, so it's not necessarily that all the taproot stuff comes at the same time.\\nIt's just step by step.\\nAnd now the first step is to have very basic taproot support, which essentially comes down to taproot support for regular transactions.\\nYeah.\\nSo none of the fancy smart contract stuff, but you can use a Taproot type of address and transaction to receive funds.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:19:07\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, in principle, but again, it's not even on by default.\\nYou actually have to manually make it happen.\\nSo probably for version 23, it'll automatically do the Taproot things.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:19:19\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nI think another way to put it short, if you, if you agree with me, is that there's no actual benefit yet in using Taproot in this Bitcoin Core release, but it's possible to use it for sort of regular transactions, right?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:19:31\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, exactly.\\nSo you can if you really know what you're doing.\\nAnd other than that, it's probably useful to have it in there anyway for people who want to test things on signet or testnet or you know that sort of stuff.\\nBecause we want other developers to keep working on Taproot.\"}, {\"type\":\"heading\",\"text\":\"Taproot descriptors\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:19:44\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, so this was basically Taproot addresses we were discussing.\\nA little bit deeper under the hood, you have the taproot descriptors.\\nWhat are taproot descriptors?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:19:55\"}, {\"type\":\"paragraph\",\"text\":\"Yes, so a descriptor is a way to say I want to generate a series of addresses, basically.\\nSo instead of saying, okay, our wallet is one address, you say, okay, our wallet starts with the root private key, and then it does a bunch of BIP32 style derivations, and then it says, okay, give me the address number 15 or 16 or 17.\\nAnd descriptors allow you to describe that.\\nAnd now they also let you do that for Taproot.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:20:25\"}, {\"type\":\"paragraph\",\"text\":\"I think descriptors also allow you to sort of categorize your funds into specific types of funds, right?\\nSo you can say, these are all my Taproot funds, locked in Taproot stuff, and these are all my Multisig funds, like the Multisig stuff, sorry, Multisig addresses.\\nAnd the descriptors sort of let you label these, right?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:20:48\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, because they describe in a sort of a human readable form, what your addresses are, how to get to your addresses.\\nYeah.\\nYou can say, I have one descriptor for my SegWit addresses.\\nI have one descriptor for my Taproot addresses.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:21:00\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nSo now there's a Taproot descriptor.\\nSo that's another sort of small step in the Taproot process for Bitcoin Core.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:21:07\"}, {\"type\":\"paragraph\",\"text\":\"Well, in fact, that is what the wallet has support for.\\nSo you can add Taproot descriptors to the wallet now, but you have to do it yourself.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:21:15\"}, {\"type\":\"paragraph\",\"text\":\"Right.\\nSo, hardware wallet support in the GUI, I2P support, Taproot.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:21:23\"}, {\"type\":\"paragraph\",\"text\":\"The other thing is there's a little safety measure there.\\nWell, two things.\\nSo there's a little safety measure there that you cannot add Taproot to a wallet on mainnet before it activates.\\nJust to make sure you don't have people sent to your taproot address before it activates because then you lose all the coins.\\nAnd the other thing is that there's now some...\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:21:45\"}, {\"type\":\"paragraph\",\"text\":\"Wait, wait, Wait, why would you lose the coins?\\nIt just means you can't spend the coins, right?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:21:48\"}, {\"type\":\"paragraph\",\"text\":\"No, if you're receiving money on a Taproot address before Taproot activates, then that's anyone can spend.\\nSo yeah, that's a bad idea.\\nSo this is a little basically anti-food gun measure.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:22:03\"}, {\"type\":\"paragraph\",\"text\":\"Got it.\"}, {\"type\":\"heading\",\"text\":\"Support for bech32 Addresses\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:22:04\"}, {\"type\":\"paragraph\",\"text\":\"And the other upgrade is that there's now some support for BECH32M.\\nWe talked about, I think, BECH32 addresses in general and that for Taproot there's a small change to it.\\nThe episode 28 we talked about addresses.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:22:21\"}, {\"type\":\"paragraph\",\"text\":\"I remember that.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:22:22\"}, {\"type\":\"paragraph\",\"text\":\"And that's, yeah, so to the human eye, they'll look identical.\\nThey start with \\\"BC1\\\", but there's some subtle changes in the checksum that you can safely ignore, but it does have to be built.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:22:34\"}, {\"type\":\"paragraph\",\"text\":\"Right.\\nThat's also included in this release and also related to Taproot.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:22:39\"}, {\"type\":\"paragraph\",\"text\":\"Exactly.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:22:40\"}, {\"type\":\"paragraph\",\"text\":\"All right.\\nWas that all Taproot?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:22:42\"}, {\"type\":\"paragraph\",\"text\":\"I think so.\"}, {\"type\":\"heading\",\"text\":\"Update to `testmempoolaccept` RPC\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:25:25\"}, {\"type\":\"paragraph\",\"text\":\"So yeah, hardware wallet support, I2P, Taproot.\\nAnd then The fourth notable change that we're going to discuss is there's an update to `testmempoolaccept`.\\nOr is `testmempoolaccept` newly included?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:25:43\"}, {\"type\":\"paragraph\",\"text\":\"No, `testmempoolaccept` has been around.\\nSo `testmempoolaccept` is an RPC method.\\nThe RPC is a way to programmatically talk to a node, maybe from a Python script or just manually.\\nAnd what `testmempoolaccept` does is it takes a transaction, and it says, yeah, If you were to broadcast this transaction, it would be valid.\\nOr it would say, no, this transaction is invalid because the signature is wrong.\\nSo it's just a way to check if a transaction is correct before actually sending it.\\nAnd one of the things I believe it checks against is whether the fee is high enough to even make it into your mempool, because your mempool might be very full and if it's too low it'll say no fee is not high enough.\\nBut one of the restrictions that comes with that, and we talked about this in episode 19, about package relay and other things.\\nOne of the restrictions is that it evaluates these transactions one at a time.\\nSo you might have one transaction that pays a very low fee and then the next transaction actually spends that first transaction and pays a huge fee but you won't get through because the first transaction is immediately tossed away.\\nAnd so the longer-term goal that we talked about in this episode is that these transactions can be analyzed as a package in various places so by the mempool itself and in the peer-to-peer messaging protocol.\\nAnd so this adds a tiny, tiny, tiny step, which is that now you can give this command multiple transactions.\\nIt's still going to evaluate them one by one.\\nBut again, this is baby steps.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:27:20\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, if I have to jog my memory, the point here was that for some protocols like the Lightning Network, you might need to use a trick called child pays for parent, which means that you create a new transaction that has a high enough fee to essentially pay for a previous transaction.\\nThat a transaction is sort of stuck in the mempool or whatever.\\nWell, that's where it will be stuck.\\nTo speed it up, you create a new transaction that spends the same funds, include an extra high transaction there, and that's how you sort of get them both unstuck.\\nThat's how you get the first transaction unstuck, which you sometimes actually really need to do with some, you might be in a rush, in a hurry to actually do that in context of protocols of the Lightning Network, because sometimes you actually need transactions to confirm before some kind of time lock runs out.\\nAnd then the problem is that while this works for getting a transaction actually included in a block, it doesn't necessarily work for getting a transaction into a mempool.\\nSometimes you need to get a transaction unstuck, but that transaction doesn't even make it into the mempool, which means you also can't get it unstuck with child pays for parent (CPFP).\\nAnd then the solution there would be to have the network to broadcast packages of transactions over a network.\\nSo in the same way that a package of transactions can sort of be confirmed by a miner all at once because the miner calculates the total fee, that sort of same calculation, the total fee calculation, would come to apply for what regular nodes put in the mempool.\\nThat's sort of the long-term upgrade that's being worked on, and this is a very small step in that process, right?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:29:17\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, and for Lightning, it's a way to reduce fees, right?\\nBecause right now when you, well, to reduce fees in some cases.\\nSo right now with Lightning, you have to pre-sign a transaction, which means you have to decide in advance what the fee is going to be for that transaction.\\nAnd so these fees have to be taken some sort of worst case scenario into account.\\nWhereas with this change, eventually the hope is that you just set no fee on it, on the conflicting, on the backup transaction that you have in Lightning, and you just send it on the blockchain and then some, you know, whoever really needs this transaction will just pay the extra fee that is needed right then as a child pays for a parent.\\nSo it's a useful feature, but yeah, there's some problems with relay when the mempool is very full.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:30:07\"}, {\"type\":\"paragraph\",\"text\":\"Got it.\\nYeah, that makes sense.\\nSo this `testmempoolaccept` is a small step in improving that process.\\nAnother incremental improvement.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:30:17\"}, {\"type\":\"paragraph\",\"text\":\"Exactly.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:30:18\"}, {\"type\":\"paragraph\",\"text\":\"Alright, so one more to go, Sjors.\"}, {\"type\":\"heading\",\"text\":\"Update to `addmultisigaddress` RPC\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:30:21\"}, {\"type\":\"paragraph\",\"text\":\"Maybe two actually.\\nI have some other amount.\\nOne small one is `addmultisigaddress`.\\nI think we talked about that.\\nWell, basically the multi-signature support inside the RPC.\\nYou can now use it for 20 public keys instead of 16.\\nWhich is something that SegWit supports.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:30:43\"}, {\"type\":\"paragraph\",\"text\":\"Right.\\nThis is for Bitcore Core users that want to receive a transaction, right now you can create a multi-sig, but it's limited to 16 public keys, is that right?\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:30:57\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, and I think the reason is that the legacy addresses could only do 16 P2SH and SegWit can do 20, but the Bitcoin Core couldn't support it yet.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:31:08\"}, {\"type\":\"paragraph\",\"text\":\"Right.\\nSo now Bitcoin Core users can receive transactions on 20 key multisigs.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:31:15\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, it's not a consensus change.\\nNone of the rules changed.\\nIt's just that the Bitcoin Core wallet can now do a little bit more.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:31:21\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, it was always possible according to the consensus rules, but not according to Bitcoin Core yet, until now.\"}, {\"type\":\"heading\",\"text\":\"Support for NAT-PMP\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:31:27\"}, {\"type\":\"paragraph\",\"text\":\"Yeah.\\nSo another thing we can mention that is, I think, fun is support for NAT-PMP.\\nBasically when you have a router like if you're running a node at home and you usually have a router that will cause your node to not listen to anything else.\\nYour node can connect outbound but other nodes can't connect to you because they can't see you.\\nAnd the way you solve that is by opening a port on the router, forwarding that port to your node.\\nWhich you can do manually, like you go to 192.168.0.2 and then you log in and you say port forwarding and you say send port 8333 to this device that runs my node.\\nBut nobody wants to do that.\\nSo there are libraries that are often used by games and by programs like BitTorrent and all these things that will do it for you automatically.\\nThat will just, you know, from your computer ping your router and say please route this port to me.\\nAnd that was done using UPnP, but apparently that's very insecure and very bad, so it was turned off by default in Bitcoin Core, so nobody was using it.\\nAnd now there's another library called NAT-PMP that apparently is a bit safer, a bit easier, and that's now added.\\nSo if you open Bitcoin Core in the settings in the GUI there's a button that says NAT-PMP.\\nI think you can click on it and it'll try and then it'll try to open the port on the router to listen.\\nI don't know if it gives any useful feedback, if it doesn't work.\\nI haven't tried it.\\nI don't think it works on my router.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:33:11\"}, {\"type\":\"paragraph\",\"text\":\"And then other than that, what we haven't mentioned, of course, every Bitcoin Core upgrade has a ton of smaller improvements.\\nBug fixes, these kinds of things.\\nBut I think we agree that these were, what we've mentioned now, were the six most notable changes in this new Bitcoin core release.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:33:30\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, there's one meta change I think we forgot to mention, which is not inside the build itself, but is that the deterministic builds for this release are being made using GUIX for the first time.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:33:43\"}, {\"type\":\"paragraph\",\"text\":\"Right, yeah, I do think we've mentioned that, but maybe you can explain real quick what that is.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:33:48\"}, {\"type\":\"paragraph\",\"text\":\"Well, I think we talked about, I think we talked about reproducibility in an earlier episode, why open source matters, episode 21.\\nWe talked about, it's important for Bitcoin Core to be open source but also that the thing you're downloading from bitcoincore.org is actually related to that source that's out there.\\nBecause we could just say hey look at this beautiful source code and then give you some binary that's just ransomware.\\nWe spent the whole episode 21 explaining how to prevent that and GUIX is a new project, relatively new, that makes that process of verifiability better.\\nWe're now using that for the release.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:34:34\"}, {\"type\":\"paragraph\",\"text\":\"Great.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:34:35\"}, {\"type\":\"paragraph\",\"text\":\"Yeah I think that's that's basically it.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:34:38\"}, {\"type\":\"paragraph\",\"text\":\"Yeah so the main changes were hardware wallet hardware wallet supported in the GUI, I2P support, first release to have taproot which includes receiving very basic taproot transactions, `testmempoolaccept` was updated as an incremental step towards package relay.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:34:58\"}, {\"type\":\"paragraph\",\"text\":\"I mean, I don't even know if you want to call it the main changes, it's the changes we discussed and that are maybe the most visible and make sense.\\nBut you know, I can list a few other things.\\nThere's a `CoinStatsIndex`, which has been on my to-do list for a long time to see.\\nUTXO snapshots., we talked about UTXO snapshots, I think, along another episode and there's another little piece of progress in there.\\nYeah, hundreds of things.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:35:28\"}, {\"type\":\"paragraph\",\"text\":\"Extended multi-sig support is what I forgot to mention.\\nNAT-PMP.\\nIt's amazing.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:35:34\"}, {\"type\":\"paragraph\",\"text\":\"It's awesome.\\nIt's going to be available in a store near you.\\nOh no, it's free.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:35:38\"}, {\"type\":\"paragraph\",\"text\":\"Oh, even better.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:35:40\"}, {\"type\":\"paragraph\",\"text\":\"All right.\\nI think that's all, right?\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:35:42\"}, {\"type\":\"paragraph\",\"text\":\"Yeah, that's it for me, Sjors.\"}, {\"type\":\"paragraph\",\"text\":\"Sjors: 00:35:44\"}, {\"type\":\"paragraph\",\"text\":\"Okay, then thank you for listening to Bitcoin Explained, formerly known as the Van Wirdum Sjorsnado.\"}, {\"type\":\"paragraph\",\"text\":\"Aaron: 00:35:50\"}, {\"type\":\"paragraph\",\"text\":\"There you go.\"}",
    "body": "## Intro\n\nAaron: 00:00:20\n\nWelcome to Bitcoin Explained, the podcast with the most boring name in Bitcoin.\nHey Sjors.\n\nSjors: 00:00:27\n\nWhat's up?\nWhat's with the new name?\n\nAaron: 00:00:29\n\nSo We've rebranded our podcast.\nWhat do you think?\n\nSjors: 00:00:33\n\nWell, I think, you know, especially if you read it correctly, Bitcoin, explained.\nI think it's an amazing name.\nI think the problem was that a lot of people have no idea what the hell a Van Weerdam Shores Nado is.\n\nAaron: 00:00:46\n\nApparently, no one had any idea what Van Weerdam and Shoresnado means or even how to pronounce it so we decided to go for a new name.\n\nSjors: 00:00:54\n\nThough I think if people listen to it long enough they'll know how to pronounce it but I think the problem is people who are not listening don't know how to pronounce it.\n\nAaron: 00:01:02\n\nSo from now on, we're Bitcoin, Explained.\nWhy is the comma so important for you?\n\nSjors: 00:01:07\n\nIt makes it sound more profound.\nSo if you just say, oh, I'm going to explain Bitcoin, whereas Bitcoin, Explained, you know, really says, okay, now You truly understand it.\n\nAaron: 00:01:16\n\nVery profound.\nSo the first episode, we're just going to keep counting.\nSo this is episode 45 of Bitcoin Explained, previously known as Defend William Shures NATO.\nAnd we're going to start off with the new Bitcoin Core release, Bitcoin Core 22.\n\nSjors: 00:01:33\n\nThat's right.\n\nAaron: 00:01:34\n\nFrom now on it's not 0.22 anymore, it's just Bitcoin Core 22, right?\n\nSjors: 00:01:40\n\nYeah, highly undemocratically decided at some point to just change the numbering because people were asking when is version 1 coming of Bitcoin?\nAnd we're like yeah we're just gonna skip it because it's always bad luck when you do that.\n\nAaron: 00:01:53\n\nRight so from now on it's does this mean we're not in beta anymore Sjors?\nIs that the big announcement?\n\nSjors: 00:01:59\n\nNo I think it means nothing I think it just means that we stopped having this zero prefix.\n\nAaron: 00:02:05\n\nBasically, Bitcoin Core changed the name for the same reasons that we did, just to avoid annoying questions and make it more clear.\nIs that it?\n\nSjors: 00:02:14\n\nI guess.\nI wasn't really there at the decision.\nIt just happened and nobody wanted to undo it.\nSo there we are.\n\nAaron: 00:02:22\n\nGot it.\nWell, at the point that we're recording this, the new Bitcoin Core release has not actually been released yet.\nBitcoin Core 22 has not actually been released yet.\nBut by the time this episode is released, then maybe Bitcoin Core 22 is released as well.\nAnd otherwise, it will be released very soon, right?\n\nSjors: 00:02:41\n\nThat's right.\nThere's now a third release candidate out.\n\nAaron: 00:02:44\n\nSo that means basically any day now, at the point of recording at least.\nAnd maybe, like I said, maybe it's out by the time this episode is released.\nSo anyways, we're going to highlight some of the improvements compared to Bitcoin core 21 essentially and bitcoin core 21.1. Was there a bitcoin core 21.2 as well?\nI don't think so.\n\nSjors: 00:03:09\n\nI think there's one in progress.\n\nAaron: 00:03:11\n\nRight exactly yeah there's one coming as well.\nSo we're gonna give a short overview of the most notable changes, right?\n\nSjors: 00:03:22\n\nYeah, exactly.\nSo usually the last version digit, those changes are very small.\nThey're usually bug fixes and those kind of things.\nSo the release we're talking about now is a big one.\n\nAaron: 00:03:32\n\nThey're either very small or they're a protocol upgrade.\n\nSjors: 00:03:36\n\nRight.\nSo in this case, it's a bit more complicated because it's small fixes and taproot that go into 0.21.1 and also probably in 0.21.2.\n\n## Hardware Wallet Support in the GUI\n\nAaron: 00:03:47\n\nSo let's get to Bitcoin Core 22.\nThat's what the episode is about.\nI think the main, the most notable change, the biggest change, and I think you'll agree with that because you worked on it, so you're biased, is hardware wallet support, the HWI, right?\n\nSjors: 00:04:06\n\nI think that's a pretty cool change.\nI don't know if it's the biggest change.\nI'm definitely very happy with it.\nYeah, so basically if you download Bitcoin Core 22 and then also download HWI, which we talked about in episode 30, which is just a Python script that connects to all sorts of different hardware wallets essentially using their drivers.\nThen I think you just have to change one setting which is to tell it where you put the HWI script and then once you've done that you just insert your hardware wallet you say to Bitcoin core give me a new wallet and it'll say \"oh do you want to use a trezor, ledger whatever you've just inserted\" and it'll just work to him like any other wallet except that your wallet your hardware device will now show on screen \"hey do you want to prove this transaction\" so that's pretty cool I think.\n\nAaron: 00:05:01\n\nRight, but am I understanding you correctly that it does not work out of the box?\nYou can't only download Bitcoin Core 22, you also need to download the HWI.\n\nSjors: 00:05:11\n\nCorrect.\n\nAaron: 00:05:12\n\nWhich is a separate software package.\n\nSjors: 00:05:14\n\nYeah, It's a Python library and you know because it contains all the stuff from the hardware manufacturers and it communicates with USB so it is potentially a can of worms and so we don't want to put it in Bitcoin Core for everybody.\nMaybe one day will be but I think it'll be a while because just including USB drivers into Bitcoin Core sounds a bit scary.\n\nAaron: 00:05:35\n\nRight.\nSo for now it's like an add-on.\n\nSjors: 00:05:38\n\nYes.\nBut like I said, pretty easy to install.\nYou download it, put it somewhere, point to it, and that's it.\n\nAaron: 00:05:44\n\nHardware wallets were already supported by Bitcoin Core though, right?\n\nSjors: 00:05:48\n\nIndirectly, yes.\nYou could use HWI already, but you had to use it from the command line yourself.\nAnd actually HWI also came with a graphical tool, so you could actually use it somewhat you know reasonably, but I think this is much easier now.\nIt's just right into the Bitcoin Core interface.\n\n### Bitcoin Core Interface\n\nAaron: 00:06:08\n\nYeah, no one uses the command line, sure.\nSo only a couple of Bitcoin Core developers themselves use that stuff.\nRegular people.\n\nSjors: 00:06:16\n\nA surprising number of Bitcoin Core developers use the graphical interface too and it's especially because coin selection is just a lot easier to do if you want to decide which coins you want to spend using a graphical interface you just click on them whereas with a command line it's horrible, you have to copy paste the transaction hash and the identifier, etc.\n\n### Which Hardware Wallets are Supported\n\nAaron: 00:06:37\n\nRight.\nSo, which hardware wallets are supported?\n\nSjors: 00:06:41\n\nOff the top of my head, whatever HWI supports.\nSo, that is the Trezor, the Ledger, the KeepKey, Coldcard.\nI don't know.\n\nAaron: 00:06:55\n\nMaybe some more.\n\nSjors: 00:06:57\n\nYeah, I was just opening the support matrix.\nThere's a whole list of it.\nBitbox.\n\nAaron: 00:07:04\n\nOkay.\nIs that the only hardware wallet related change in the Bitcoin Core 22?\n\nSjors: 00:07:11\n\nI mean, that's a big enough one, right?\nAnd I'm sure in next versions, there'll be some more incremental improvements, like being able to bump the fee for example would be nice, that sort of stuff.\nMulti-sig would be very nice if it was possible to do that directly.\n\nAaron: 00:07:26\n\nYeah, and for now I think it's just one hardware wallet per Bitcoin Core wallet, right?\nYou can't do two out of three or that kind of nifty stuff yet.\n\nSjors: 00:07:37\n\nNo, exactly.\nMulti-signature support is not there yet.\nAnd that just is a whole can of worms in general, right?\nMulti-signature support with Bitcoin Core is still not very easy.\nIt does, it's all possible, but it's, it requires some manual work.\n\nAaron: 00:07:51\n\nLet me think.\nShould we say something else about hardware wallets?\nOr is that about it?\nBut there is also RPC.\n\nSjors: 00:08:00\n\nNo, right?\nBut yes, that is indeed that you can do it via the GUI or the command line.\nI don't know how important it is to do that.\n\nAaron: 00:08:09\n\nRight, so hardware wallet integration into Bitcoin Core has been a long process, has been an incremental process And now for the first time with Bitcoin Core 22, we have hardware wallet support in the GUI, which basically means we for the first time have hardware wallet support for regular users.\n\nSjors: 00:08:26\n\nYeah, exactly.\nI think it's still marked experimental.\n\nAaron: 00:08:29\n\nGreat.\n\n## I2P Search\n\nAaron: 00:11:56\n\nNext up, I2P.\nWhat is I2P?\n\nSjors: 00:12:01\n\nI don't know.\nThere's a lot of articles on the internet that say what is the difference between I2P and Tor and then those articles start by saying many people ask what the difference is between I2P and Tor and then they proceed in some really convoluted language.\nBut basically, it is a Tor-like system that is somehow different.\nBut the good news is that Bitcoin Core can now use it.\n\nAaron: 00:12:24\n\nExactly.\nIt's a privacy layer on top of the internet, a lot like Tor.\nTor uses onion routing, so messages are encrypted and routed across different users that all have a sort of encryption step on the way.\nAnd therefore you gain privacy.\nI2P is similar and the differences are pretty subtle.\nIt seems that I2P has a more distributed way of mapping the network.\nI don't think either of us knows the details of how that works exactly, but it's more distributed than with Tor.\nAnd somehow, I2P is more dedicated to...\nWhat's it called?\n\nSjors: 00:13:20\n\nWell, it's internal, so it's more difficult to get out of I2P, whereas in Tor, it's very easy to use the original internet in addition to dedicated darknet, or not darknet, but onion sites.\n\nAaron: 00:13:33\n\nYeah, that's what I was going to say.\nI2P is more dedicated to hidden services.\nSo if you stay within the network I2P is sort of specialized for that, where Tor is more usable if you want to you know send stuff to the regular internet to the web.\n\nSjors: 00:13:52\n\nThat's what we've read in random Google searches, so we wouldn't know.\n\nAaron: 00:13:57\n\nThese appear to be the subtle differences.\nSo what does this have to do with Bitcoin Core?\n\nSjors: 00:14:00\n\nWell, so this kind of ties back into an earlier episode.\nSo first of all, Bitcoin Core 22 supports that network.\nSo if you are interested in using it, you can.\n\nAaron: 00:14:11\n\nYeah, so you can now connect to the Bitcoin network through I2P.\n\nSjors: 00:14:15\n\nYeah, and so what we talked about in episode 13, back when it was still called the Van Wirdum Sjorsnado, what we talked about then is that Bitcoin Core added support for Tor version 3.\nAnd the other aspect we talked about then was more generally how does Bitcoin Core tell other nodes which nodes to consider.\nSo there's basically a message where you can say, hey, here's a bunch of addresses for other nodes.\nAnd what we explained in an episode is that there's now a new message that makes it easier to announce nodes of various kinds to other nodes including to say okay here's a list of Tor version 3 nodes or here's a list of IPv6 nodes or here's a list of I2P nodes.\nAnd this mechanism is now more generic, which means that in the future if other networks like this come about, some other anonymity network, maybe internet over the lightning network, who knows, it'll be much easier to add support for that, because we'll have a way to gossip those nodes around.\n\n## Tor Version 3\n\nAaron: 00:15:23\n\nSpeaking of these kinds of topics, you already mentioned Tor version 3.\nTor version 2 has now been fully deprecated, right?\n\nSjors: 00:15:33\n\nYeah, it was essentially already the case because in the previous version of Bitcoin Core, if it started up, it would immediately switch to Tor v3 and would just not use your Tor v2 settings.\nBut you could still go back if you did something manually.\nAnd now I think all that code has been stripped out because I think Tor version 2 is more or less shut down.\nBecause remember, Tor is centralized in that way.\nThere's somebody out there that can say, okay, this thing no longer works.\n\nAaron: 00:16:01\n\nRight.\nYeah.\nWe've discussed this in one of the previous Bitcoin Core release episodes, I think, where the switch from Tor version 2 to version 3 was happening.\n\nSjors: 00:16:12\n\nYeah, we did that in the same episode, episode 13.\n\n## Taproot \n\nAaron: 00:16:15\n\nRight, got it.\nAll right, so these are two changes we've mentioned, hardware wallet and I2P support.\nYou've also mentioned at the start of this episode this difference between major releases and minor releases, where minor releases are usually either bug fixes or they include protocol upgrades.\nNow, the last minor release did include a protocol upgrade, namely Taproot, which also means that this is the first major Bitcoin Core release that has taproot support.\nYep.\nAnd we can find this taproot support in a couple of places in this upgrade, right?\n\nSjors: 00:16:51\n\nYeah.\nOf course, the most important part is all the taproot consensus stuff is in here.\nObviously, the activation code, the speedy trial, all that sort of stuff.\n\nAaron: 00:17:01\n\nIf you haven't upgraded the minor release yet, Taproot is going to activate in November, so this would be a good opportunity to actually upgrade if you want to enforce the new Taproot rules, which you should do if you want to, you know get the maximum security that a full node promises to offer.\n\nSjors: 00:17:18\n\nYeah, but the good news is that if you, you know, if you really, really liked version, say 0.21.0, and you don't want to change too much, then you could just go to 0.21.1 and you'll enforce taproot.\nBut as we'll talk about now, I think version 22 has a few more things on top of this, the consensus enforcement.\n\nAaron: 00:17:39\n\nYes.\nSo what does Bitcoin Core 22 include taproot wise?\n\nSjors: 00:17:44\n\nWell, it includes some very rudimentary support for wallet, taproot wallets.\nBasically you're just a single public key type of wallet, which doesn't make taproot that interesting.\nAnd slightly more generic things where you can have one private one yeah one key per taproot branch so remember in taproot you have a main key and you also have scripts that are sitting in a tree.\nAnd so there's now support for those scripts in a tree.\nHowever, as far as I understand it, those scripts can only be of the super simple type, namely a public key.\n\nAaron: 00:18:27\n\nRight.\n\nSjors: 00:18:28\n\nSo, they're not very interesting yet, but this is how it goes with Bitcoin Core.\nWe add little increments at a time.\n\nAaron: 00:18:35\n\nYes, we've mentioned that a couple of times.\nBitcoin Core is improved slowly but surely.\nEvery half year there's a new release, so it's not necessarily that all the taproot stuff comes at the same time.\nIt's just step by step.\nAnd now the first step is to have very basic taproot support, which essentially comes down to taproot support for regular transactions.\nYeah.\nSo none of the fancy smart contract stuff, but you can use a Taproot type of address and transaction to receive funds.\n\nSjors: 00:19:07\n\nYeah, in principle, but again, it's not even on by default.\nYou actually have to manually make it happen.\nSo probably for version 23, it'll automatically do the Taproot things.\n\nAaron: 00:19:19\n\nYeah.\nI think another way to put it short, if you, if you agree with me, is that there's no actual benefit yet in using Taproot in this Bitcoin Core release, but it's possible to use it for sort of regular transactions, right?\n\nSjors: 00:19:31\n\nYeah, exactly.\nSo you can if you really know what you're doing.\nAnd other than that, it's probably useful to have it in there anyway for people who want to test things on signet or testnet or you know that sort of stuff.\nBecause we want other developers to keep working on Taproot.\n\n### Taproot descriptors\n\nAaron: 00:19:44\n\nYeah, so this was basically Taproot addresses we were discussing.\nA little bit deeper under the hood, you have the taproot descriptors.\nWhat are taproot descriptors?\n\nSjors: 00:19:55\n\nYes, so a descriptor is a way to say I want to generate a series of addresses, basically.\nSo instead of saying, okay, our wallet is one address, you say, okay, our wallet starts with the root private key, and then it does a bunch of BIP32 style derivations, and then it says, okay, give me the address number 15 or 16 or 17.\nAnd descriptors allow you to describe that.\nAnd now they also let you do that for Taproot.\n\nAaron: 00:20:25\n\nI think descriptors also allow you to sort of categorize your funds into specific types of funds, right?\nSo you can say, these are all my Taproot funds, locked in Taproot stuff, and these are all my Multisig funds, like the Multisig stuff, sorry, Multisig addresses.\nAnd the descriptors sort of let you label these, right?\n\nSjors: 00:20:48\n\nYeah, because they describe in a sort of a human readable form, what your addresses are, how to get to your addresses.\nYeah.\nYou can say, I have one descriptor for my SegWit addresses.\nI have one descriptor for my Taproot addresses.\n\nAaron: 00:21:00\n\nYeah.\nSo now there's a Taproot descriptor.\nSo that's another sort of small step in the Taproot process for Bitcoin Core.\n\nSjors: 00:21:07\n\nWell, in fact, that is what the wallet has support for.\nSo you can add Taproot descriptors to the wallet now, but you have to do it yourself.\n\nAaron: 00:21:15\n\nRight.\nSo, hardware wallet support in the GUI, I2P support, Taproot.\n\nSjors: 00:21:23\n\nThe other thing is there's a little safety measure there.\nWell, two things.\nSo there's a little safety measure there that you cannot add Taproot to a wallet on mainnet before it activates.\nJust to make sure you don't have people sent to your taproot address before it activates because then you lose all the coins.\nAnd the other thing is that there's now some...\n\nAaron: 00:21:45\n\nWait, wait, Wait, why would you lose the coins?\nIt just means you can't spend the coins, right?\n\nSjors: 00:21:48\n\nNo, if you're receiving money on a Taproot address before Taproot activates, then that's anyone can spend.\nSo yeah, that's a bad idea.\nSo this is a little basically anti-food gun measure.\n\nAaron: 00:22:03\n\nGot it.\n\n### Support for bech32 Addresses\n\nSjors: 00:22:04\n\nAnd the other upgrade is that there's now some support for BECH32M.\nWe talked about, I think, BECH32 addresses in general and that for Taproot there's a small change to it.\nThe episode 28 we talked about addresses.\n\nAaron: 00:22:21\n\nI remember that.\n\nSjors: 00:22:22\n\nAnd that's, yeah, so to the human eye, they'll look identical.\nThey start with \"BC1\", but there's some subtle changes in the checksum that you can safely ignore, but it does have to be built.\n\nAaron: 00:22:34\n\nRight.\nThat's also included in this release and also related to Taproot.\n\nSjors: 00:22:39\n\nExactly.\n\nAaron: 00:22:40\n\nAll right.\nWas that all Taproot?\n\nSjors: 00:22:42\n\nI think so.\n\n## Update to `testmempoolaccept` RPC\n\nAaron: 00:25:25\n\nSo yeah, hardware wallet support, I2P, Taproot.\nAnd then The fourth notable change that we're going to discuss is there's an update to `testmempoolaccept`.\nOr is `testmempoolaccept` newly included?\n\nSjors: 00:25:43\n\nNo, `testmempoolaccept` has been around.\nSo `testmempoolaccept` is an RPC method.\nThe RPC is a way to programmatically talk to a node, maybe from a Python script or just manually.\nAnd what `testmempoolaccept` does is it takes a transaction, and it says, yeah, If you were to broadcast this transaction, it would be valid.\nOr it would say, no, this transaction is invalid because the signature is wrong.\nSo it's just a way to check if a transaction is correct before actually sending it.\nAnd one of the things I believe it checks against is whether the fee is high enough to even make it into your mempool, because your mempool might be very full and if it's too low it'll say no fee is not high enough.\nBut one of the restrictions that comes with that, and we talked about this in episode 19, about package relay and other things.\nOne of the restrictions is that it evaluates these transactions one at a time.\nSo you might have one transaction that pays a very low fee and then the next transaction actually spends that first transaction and pays a huge fee but you won't get through because the first transaction is immediately tossed away.\nAnd so the longer-term goal that we talked about in this episode is that these transactions can be analyzed as a package in various places so by the mempool itself and in the peer-to-peer messaging protocol.\nAnd so this adds a tiny, tiny, tiny step, which is that now you can give this command multiple transactions.\nIt's still going to evaluate them one by one.\nBut again, this is baby steps.\n\nAaron: 00:27:20\n\nYeah, if I have to jog my memory, the point here was that for some protocols like the Lightning Network, you might need to use a trick called child pays for parent, which means that you create a new transaction that has a high enough fee to essentially pay for a previous transaction.\nThat a transaction is sort of stuck in the mempool or whatever.\nWell, that's where it will be stuck.\nTo speed it up, you create a new transaction that spends the same funds, include an extra high transaction there, and that's how you sort of get them both unstuck.\nThat's how you get the first transaction unstuck, which you sometimes actually really need to do with some, you might be in a rush, in a hurry to actually do that in context of protocols of the Lightning Network, because sometimes you actually need transactions to confirm before some kind of time lock runs out.\nAnd then the problem is that while this works for getting a transaction actually included in a block, it doesn't necessarily work for getting a transaction into a mempool.\nSometimes you need to get a transaction unstuck, but that transaction doesn't even make it into the mempool, which means you also can't get it unstuck with child pays for parent (CPFP).\nAnd then the solution there would be to have the network to broadcast packages of transactions over a network.\nSo in the same way that a package of transactions can sort of be confirmed by a miner all at once because the miner calculates the total fee, that sort of same calculation, the total fee calculation, would come to apply for what regular nodes put in the mempool.\nThat's sort of the long-term upgrade that's being worked on, and this is a very small step in that process, right?\n\nSjors: 00:29:17\n\nYeah, and for Lightning, it's a way to reduce fees, right?\nBecause right now when you, well, to reduce fees in some cases.\nSo right now with Lightning, you have to pre-sign a transaction, which means you have to decide in advance what the fee is going to be for that transaction.\nAnd so these fees have to be taken some sort of worst case scenario into account.\nWhereas with this change, eventually the hope is that you just set no fee on it, on the conflicting, on the backup transaction that you have in Lightning, and you just send it on the blockchain and then some, you know, whoever really needs this transaction will just pay the extra fee that is needed right then as a child pays for a parent.\nSo it's a useful feature, but yeah, there's some problems with relay when the mempool is very full.\n\nAaron: 00:30:07\n\nGot it.\nYeah, that makes sense.\nSo this `testmempoolaccept` is a small step in improving that process.\nAnother incremental improvement.\n\nSjors: 00:30:17\n\nExactly.\n\nAaron: 00:30:18\n\nAlright, so one more to go, Sjors.\n\n## Update to `addmultisigaddress` RPC\n\nSjors: 00:30:21\n\nMaybe two actually.\nI have some other amount.\nOne small one is `addmultisigaddress`.\nI think we talked about that.\nWell, basically the multi-signature support inside the RPC.\nYou can now use it for 20 public keys instead of 16.\nWhich is something that SegWit supports.\n\nAaron: 00:30:43\n\nRight.\nThis is for Bitcore Core users that want to receive a transaction, right now you can create a multi-sig, but it's limited to 16 public keys, is that right?\n\nSjors: 00:30:57\n\nYeah, and I think the reason is that the legacy addresses could only do 16 P2SH and SegWit can do 20, but the Bitcoin Core couldn't support it yet.\n\nAaron: 00:31:08\n\nRight.\nSo now Bitcoin Core users can receive transactions on 20 key multisigs.\n\nSjors: 00:31:15\n\nYeah, it's not a consensus change.\nNone of the rules changed.\nIt's just that the Bitcoin Core wallet can now do a little bit more.\n\nAaron: 00:31:21\n\nYeah, it was always possible according to the consensus rules, but not according to Bitcoin Core yet, until now.\n\n## Support for NAT-PMP\n\nSjors: 00:31:27\n\nYeah.\nSo another thing we can mention that is, I think, fun is support for NAT-PMP.\nBasically when you have a router like if you're running a node at home and you usually have a router that will cause your node to not listen to anything else.\nYour node can connect outbound but other nodes can't connect to you because they can't see you.\nAnd the way you solve that is by opening a port on the router, forwarding that port to your node.\nWhich you can do manually, like you go to 192.168.0.2 and then you log in and you say port forwarding and you say send port 8333 to this device that runs my node.\nBut nobody wants to do that.\nSo there are libraries that are often used by games and by programs like BitTorrent and all these things that will do it for you automatically.\nThat will just, you know, from your computer ping your router and say please route this port to me.\nAnd that was done using UPnP, but apparently that's very insecure and very bad, so it was turned off by default in Bitcoin Core, so nobody was using it.\nAnd now there's another library called NAT-PMP that apparently is a bit safer, a bit easier, and that's now added.\nSo if you open Bitcoin Core in the settings in the GUI there's a button that says NAT-PMP.\nI think you can click on it and it'll try and then it'll try to open the port on the router to listen.\nI don't know if it gives any useful feedback, if it doesn't work.\nI haven't tried it.\nI don't think it works on my router.\n\nAaron: 00:33:11\n\nAnd then other than that, what we haven't mentioned, of course, every Bitcoin Core upgrade has a ton of smaller improvements.\nBug fixes, these kinds of things.\nBut I think we agree that these were, what we've mentioned now, were the six most notable changes in this new Bitcoin core release.\n\nSjors: 00:33:30\n\nYeah, there's one meta change I think we forgot to mention, which is not inside the build itself, but is that the deterministic builds for this release are being made using GUIX for the first time.\n\nAaron: 00:33:43\n\nRight, yeah, I do think we've mentioned that, but maybe you can explain real quick what that is.\n\nSjors: 00:33:48\n\nWell, I think we talked about, I think we talked about reproducibility in an earlier episode, why open source matters, episode 21.\nWe talked about, it's important for Bitcoin Core to be open source but also that the thing you're downloading from bitcoincore.org is actually related to that source that's out there.\nBecause we could just say hey look at this beautiful source code and then give you some binary that's just ransomware.\nWe spent the whole episode 21 explaining how to prevent that and GUIX is a new project, relatively new, that makes that process of verifiability better.\nWe're now using that for the release.\n\nAaron: 00:34:34\n\nGreat.\n\nSjors: 00:34:35\n\nYeah I think that's that's basically it.\n\nAaron: 00:34:38\n\nYeah so the main changes were hardware wallet hardware wallet supported in the GUI, I2P support, first release to have taproot which includes receiving very basic taproot transactions, `testmempoolaccept` was updated as an incremental step towards package relay.\n\nSjors: 00:34:58\n\nI mean, I don't even know if you want to call it the main changes, it's the changes we discussed and that are maybe the most visible and make sense.\nBut you know, I can list a few other things.\nThere's a `CoinStatsIndex`, which has been on my to-do list for a long time to see.\nUTXO snapshots., we talked about UTXO snapshots, I think, along another episode and there's another little piece of progress in there.\nYeah, hundreds of things.\n\nAaron: 00:35:28\n\nExtended multi-sig support is what I forgot to mention.\nNAT-PMP.\nIt's amazing.\n\nSjors: 00:35:34\n\nIt's awesome.\nIt's going to be available in a store near you.\nOh no, it's free.\n\nAaron: 00:35:38\n\nOh, even better.\n\nSjors: 00:35:40\n\nAll right.\nI think that's all, right?\n\nAaron: 00:35:42\n\nYeah, that's it for me, Sjors.\n\nSjors: 00:35:44\n\nOkay, then thank you for listening to Bitcoin Explained, formerly known as the Van Wirdum Sjorsnado.\n\nAaron: 00:35:50\n\nThere you go.\n\n",
    "body_type": "markdown",
    "created_at": "2021-09-13T00:00:00.000Z",
    "domain": "https://btctranscripts.com/",
    "url": "https://btctranscripts.com/bitcoin-explained/bitcoin-core-v22-explained",
    "categories": [
        "podcast"
    ],
    "tags": [
        "bitcoin-core",
        "hwi",
        "anonymity-networks",
        "bech32"
    ],
    "media": "https://www.youtube.com/watch?v=xm3BjAKjCXM",
    "authors": [
        "Sjors Provoost",
        "Aaron van Wirdum"
    ],
    "indexed_at": "2024-03-21T16:33:36.088Z",
    "transcript_by": "satstacker21 via review.btctranscripts.com",
    "summary": "In a recent episode of \"Bitcoin Explained,\" co-hosts Sjors Provoost and Aaron van Wirdum embarked on an insightful journey into the latest developments surrounding Bitcoin Core, emphasizing the project's continuous evolution aimed at enhancing user experience, privacy, and security. The podcast commenced with a discussion on the rebranding of the show to ensure clarity and accessibility for listeners, reflecting a broader intent to demystify Bitcoin technology for a wider audience.\n\nA pivotal update, as explored by Provoost and van Wirdum, is the transition of Bitcoin Core to version 22, a move designed to avoid confusion about the software's maturity by bypassing the expectation of a version 1 release. This change, though primarily nominal, signals a commitment to clear communication regarding the software's development status. Alongside this, the integration of hardware wallet support through the Hardware Wallet Interface (HWI) in Bitcoin Core 22 was highlighted as a significant step towards simplifying user interactions with Bitcoin. This feature allows for a seamless connection between Bitcoin Core and various hardware wallets, enhancing the transaction approval process despite the need for an additional HWI download.\n\nMoreover, the inclusion of I2P support in Bitcoin Core 22 marks a notable advancement in bolstering user privacy. This addition, providing an alternative to Tor, showcases a deepened commitment to offering users robust options for maintaining privacy within the network. Such enhancements are part of a concerted effort to make Bitcoin more secure and private, aligning with the cryptocurrency's foundational principles.\n\nThe conversation then shifted to the implementation of Taproot, a major protocol upgrade that introduces smarter contracts while enhancing privacy. Although currently supported at a basic level, the integration of Taproot paves the way for more complex applications in future releases, underscoring a gradual yet purposeful approach to development. Additionally, the update to `testmempoolaccept` RPC, allowing for more efficient transaction processing, and the expansion of multi-signature support were discussed as critical to improving the network's functionality and user flexibility.\n\nAddressing the technical challenges inherent in managing Bitcoin transactions, particularly within the Lightning Network, Provoost proposed a long-term solution involving the broadcast of transaction packages. This strategy aims to alleviate issues related to mempool entry and fee adjustments, further optimizing the transaction process. Moreover, the introduction of NAT-PMP support represents a significant leap forward in enhancing node connectivity, solving the common issue of node invisibility due to router configurations.\n\nThe episode concluded with an overview of the myriad incremental improvements and bug fixes introduced in the latest Bitcoin Core release, including the adoption of GUIX for deterministic builds. This change enhances the verifiability of the software\u2019s integrity, reinforcing trust in the Bitcoin Core distribution process.\n\nThrough their comprehensive analysis, Provoost and van Wirdum not only shed light on the technical advancements and updates within the Bitcoin ecosystem but also illustrated the ongoing efforts by developers to refine the platform's infrastructure. Their discussion encapsulates the dynamic nature of Bitcoin's development, highlighting both the challenges faced and the innovative solutions proposed, ultimately painting a promising picture of the cryptocurrency's future trajectory."
}