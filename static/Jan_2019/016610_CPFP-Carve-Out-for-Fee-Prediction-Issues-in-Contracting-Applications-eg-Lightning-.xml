<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>mailing-list-bitcoin-2019-January-016610</id>
  <title>CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)</title>
  <updated>2023-05-09T22:34:06.206117+00:00</updated>
  <author>
    <name>Matt Corallo</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>mailing-list-bitcoin-2019-January-016610</id>
    <title>CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)</title>
    <updated>2023-05-09T22:34:06.206117+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-January/016610.html" rel="alternate"/>
    <summary>The discussion is about an alternative proposal that does not guarantee the ability to RBF as fees change. The problem of a counterparty announcing a bogus package and leaving you unable to add a new transaction to it still exists, but it may be more expensive to do so. Defining a "near the top of the mempool" criteria is difficult, especially for Lightning's requirements. Lightning's operators need certainty that transactions will confirm by some deadline, which is different from large batched transactions. A steady-state mempool growth assumption does not hold up because of block time variance. Rusty Russell defines "top of mempool" as "in the first 4 MSipa", which is next block, and assumed that RBF would only be allowed if the old package was not in the top and the replacement would be. However, even this criteria does not hold up because of block variance within a 12 block window. An attacker can make you pay next-block high fees, but it is still better than the current "*always* overpay and hope!"</summary>
    <published>2019-01-08T14:46:45+00:00</published>
  </entry>
</feed>
