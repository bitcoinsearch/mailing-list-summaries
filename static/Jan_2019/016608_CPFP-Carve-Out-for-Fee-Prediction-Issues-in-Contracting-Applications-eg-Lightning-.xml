<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>mailing-list-bitcoin-2019-January-016608</id>
  <title>CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)</title>
  <updated>2023-05-04T21:16:01.273595+00:00</updated>
  <author>
    <name>Matt Corallo</name>
  </author>
  <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-January/016608.html" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-January/016608.html</id>
    <title>CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)</title>
    <updated>2023-05-04T21:16:01.273595+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-January/016608.html" rel="alternate"/>
    <summary>The conversation discusses the proposal of "RBF-pinning" problem in Bitcoin transactions. The proposal suggests a relay policy where children of marked transactions as "likely-to-be-RBF'ed" would be rejected unless the resulting package would be "near the top of the mempool". However, this could still fail to confirm within a handful of blocks given block time variance. It also restricts the ability to RBF/CPFP more than once in case the fee moves away from us, which is a significant limitation. The original proposal was considered a hack, but it works on the boundary condition where packages meet local anti-DoS rules in violation of the "incentive compatible" goal. Matt Corallo suggested an alternative proposal, which Rusty Russell found interesting and incentive-compatible. It reduces the problem that the current lightning proposal adds to the UTXO set with two anyone-can-spend txs for 1000 satoshis. However, it relies on some form of package relay, which comes with its own challenges.</summary>
    <published>2019-01-07T15:18:52+00:00</published>
  </entry>
</feed>
