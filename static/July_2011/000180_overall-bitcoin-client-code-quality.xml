<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>overall bitcoin client code quality</title>
  <updated>2023-05-12T04:44:49.399771+00:00</updated>
  <author>
    <name>Matt Corallo</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>overall bitcoin client code quality</title>
    <updated>2023-05-12T04:44:49.399771+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-July/000180.html" rel="alternate"/>
    <summary>In a mailing list discussion, Michael Offel suggested creating a branch to start 'libbtc' by implementing a small module like irc or p2p connection handling and use the new lib in the client. He proposed that this would be a proper start for a new clean code base without having a non-functional client for some time and it also provides some kind of red line between libbtc (cleaned up code) and the old code base, making it easy to maintain order. However, Gavin Andresen responded that they cannot just stop using Bitcoin so much for six months while they implement a much better client. Instead, they need to focus on quick extendibility and therefore more feature-rich secure code which would help the official code base and improve trust and result in better external Bitcoin related projects. The discussion also included the debate on hardcoded values for the official and testnet blockchain, and the advantages and disadvantages of BDB compared to an SQL interface.</summary>
    <published>2011-07-13T00:17:59+00:00</published>
  </entry>
</feed>
