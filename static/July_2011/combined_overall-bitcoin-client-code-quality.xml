<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - overall bitcoin client code quality</title>
  <updated>2023-05-12T04:44:49.402807+00:00</updated>
  <author>
    <name>Gregory Maxwell 2011-07-12 23:40:46</name>
  </author>
  <author>
    <name>Matt Corallo 2011-07-10 23:36:53</name>
  </author>
  <author>
    <name>Matt Corallo 2011-07-13 00:17:59</name>
  </author>
  <link href="July_2011/000179_overall-bitcoin-client-code-quality.xml" rel="alternate"/>
  <link href="July_2011/000170_overall-bitcoin-client-code-quality.xml" rel="alternate"/>
  <link href="July_2011/000180_overall-bitcoin-client-code-quality.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - overall bitcoin client code quality</title>
    <updated>2023-05-12T04:44:49.403769+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-July/000179.html" rel="alternate"/>
    <summary>In July 2011, Michael Offel initiated a discussion about code quality and suggested creating a cleanup plan for the Bitcoin codebase. He pointed out issues such as lack of code documentation, poor use of threads, long build times, and hardcoded values. In response, another developer argued that while these issues were important, there were more pressing matters to attend to, such as modularization and blockchain validation logic. The developer also noted that Bitcoin is a small piece of software that can be read and understood by someone competent in a day or two. Despite this, the suggestion was made to rewrite parts of the code as libraries and create automatic testing shims to find inconsistencies between implementations. It was acknowledged that the current code quality was prone to bugs, but it was also noted that the code had been written by Satoshi Nakamoto, who was not particularly concerned with code cleanliness.
The Bitcoin codebase is messy in terms of global usage and poorly-implemented RPC/net/etc., but it is relatively fine. It just needs to be thrown into clearly-defined methods and classes, which would make it more readable and less prone to mistakes. Satoshi's decision to use Berkeley DB (BDB) offers a good mix, compared to sql-driven libraries; it has a much lighter-weight footprint and is simpler to use the existing code that people have spent years writing/optimizing/fixing/etc. Also, BDB provides good Database transactioning which Bitcoin does depend on some circumstances. There is no reason to encourage improperly-implemented alternate chains. Alternate chains should share the main chain's difficulty as described by Mike on the forum. Although it is much higher priority to clean up the code than comment it better, the official Bitcoin client should be extra clean and well documented. The possibility of having all adjustable parameters in one place and being able to quickly build an internal testnet without crazy firewalling to prevent it from dying is important. The first would allow detecting problematic ddos protection settings early and giving the average user the possibility to adjust all important settings if he knows what he does. The important improvement is more about quick extendibility and therefore more feature-rich secure code. This would not only help the official code base, it would also improve trust and result in better external bitcoin related projects.</summary>
    <published>2011-07-12T23:40:46+00:00</published>
  </entry>
</feed>
