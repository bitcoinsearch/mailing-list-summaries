<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - overall bitcoin client code quality</title>
  <updated>2023-05-15T18:53:00.221968+00:00</updated>
  <author>
    <name>Gregory Maxwell 2011-07-12 23:40:46</name>
  </author>
  <author>
    <name>Matt Corallo 2011-07-10 23:36:53</name>
  </author>
  <author>
    <name>Matt Corallo 2011-07-13 00:17:59</name>
  </author>
  <link href="July_2011/000179_overall-bitcoin-client-code-quality.xml" rel="alternate"/>
  <link href="July_2011/000170_overall-bitcoin-client-code-quality.xml" rel="alternate"/>
  <link href="July_2011/000180_overall-bitcoin-client-code-quality.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - overall bitcoin client code quality</title>
    <updated>2023-05-15T18:53:00.221968+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-July/000179.html" rel="alternate"/>
    <summary>The first email exchange discusses the issue of code quality in Bitcoin's source code. The writer points out the lack of documentation and a clear hierarchy within the code, with examples given of unclear functions and comments. They suggest creating a well-defined interface between modules to improve clarity. Additionally, the poor use of threads is mentioned as a cause of bugs that are difficult to detect and can cause performance issues. The writer suggests removing threads and critical sections to build a sequential model. Other issues mentioned include long build times due to the use of Boost and hardcoded values.In the second email exchange, one member of the discussion suggests a complete rewrite inspired by the old code rather than moving known functional code around. However, another member argues that most of the code is fine and just needs to be organized into clearly-defined methods and classes. They suggest slowly changing poorly-implemented features over time instead of rewriting massive chunks at once. The official Bitcoin client should serve as a reference project for other clients and must, therefore, be extra clean and well-documented. Another topic discussed in the email is the possibility of creating a branch and starting libbtc by implementing a small module like IRC or P2P connection handling, using the new library in the client. The use of db4 is also debated, with one member agreeing with its use due to its lighter-weight footprint and good database transactioning but acknowledging its difficulty compared to writing and understanding an stl map lookup. There is also discussion about the possibility of hardcoded values for the official and testnet block chain and whether to move all chain-related settings to a chain description file.Finally, one member of the discussion suggests telling everyone to stop using Bitcoin so much for six months while they implement a much better client. However, others disagree and believe that fixing bugs on the old codebase while rewriting a new one is worthless and creates more effort than necessary. The goal should be to have a quick extensible and feature-rich secure code, which would not only help the official code base but also improve trust and result in better external Bitcoin-related projects. The email concludes with the acknowledgement that while there are issues with the current code, it is still in beta and has been necessary to bring out a working version to attract more developers. The email also encourages anyone with the time to comment up the code, as it would be much appreciated.</summary>
    <published>2011-07-12T23:40:46+00:00</published>
  </entry>
</feed>
