<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - overall bitcoin client code quality</title>
  <updated>2023-05-11T16:00:35.176246+00:00</updated>
  <author>
    <name>Gregory Maxwell</name>
  </author>
  <author>
    <name>Matt Corallo</name>
  </author>
  <author>
    <name>Matt Corallo</name>
  </author>
  <link href="July_2011/000179_overall-bitcoin-client-code-quality.xml" rel="alternate"/>
  <link href="July_2011/000170_overall-bitcoin-client-code-quality.xml" rel="alternate"/>
  <link href="July_2011/000180_overall-bitcoin-client-code-quality.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - overall bitcoin client code quality</title>
    <updated>2023-05-11T16:00:35.176246+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-July/000179.html" rel="alternate"/>
    <summary>In a discussion about code quality, Michael Offel suggests that every class should be able to stand on its own for reusability in other projects or situations. However, it is pointed out that objective opinions only matter when coding and that talk is cheap. The proposal to reimplement parts as libraries and switch to them after validation is agreed upon. The critical logic for Bitcoin is the blockchain validation logic, which requires good automatic testing shims to find inconsistencies between implementations. The lack of documentation, poor use of threads, long build times, and hardcoded values are all cited as issues with the current code quality. However, it is noted that code cleanup has to be done in chunks due to time constraints. While some suggestions are made for improvement, it is acknowledged that Bitcoin's widespread use and transfer of millions of dollars make it necessary to have high-quality code.
The code for the Bitcoin client is messy in terms of global usage and poorly-implemented RPC/net/etc, but most of the code is fine if thrown into clearly-defined methods and classes. There is no need to rewrite the entire codebase, as the current code is cleaner than it first appears. Instead, poorly-implemented features can be slowly changed over time in a clean and independent fashion. The priority should be cleaning up the code rather than commenting it better. However, some suggest creating a new library called 'libbtc' by implementing a small module like IRC or P2P connection handling, which would allow for a new clean code base without having a non-functional client for some time. Additionally, there are hardcoded values for the official and testnet block chains that could be moved to a chain description file, allowing custom chains and cleaning up the code. However, there is no reason to encourage improperly-implemented alternate chains, and alternate chains should be designed in such a way as to share the main chain's difficulty. The transaction fees are there for a reason much more than just for the hell of it, and offering each user the option to just relay every transaction off the wire is not an option. Finally, it is suggested that the official Bitcoin client should be some kind of reference project for other clients and must therefore be extra clean and well documented, but it is much higher priority to clean up the code than comment it better.</summary>
    <published>2011-07-12T23:40:46+00:00</published>
  </entry>
</feed>
