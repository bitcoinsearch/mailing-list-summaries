<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>mailing-list-bitcoin-2016-January-012265</id>
  <title>Combined summary - Capacity increases for the Bitcoin system.</title>
  <updated>2023-05-09T22:27:14.131088+00:00</updated>
  <author>
    <name>Anthony Towns</name>
  </author>
  <author>
    <name>Anthony Towns</name>
  </author>
  <link href="Jan_2016/012265_Capacity-increases-for-the-Bitcoin-system-.xml" rel="alternate"/>
  <link href="Jan_2016/012248_Capacity-increases-for-the-Bitcoin-system-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>mailing-list-bitcoin-2016-January-012265</id>
    <title>Combined summary - Capacity increases for the Bitcoin system.</title>
    <updated>2023-05-09T22:27:14.131088+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-January/012265.html" rel="alternate"/>
    <summary>The discussion in the bitcoin-dev mailing list revolves around the effective block size that can be achieved by using Segregated Witness (SegWit) technology. Initially, it was believed that the maximum capacity would be 1.6MB, but after further research, it is estimated that the actual data limit for real transactions would be 1.7 MB and 2 MB for p2pkh and 2/2 multisig respectively. It is also mentioned that additional post-SegWit soft forked script improvements that are being developed, such as ecdsa public key recovery and schnorr signatures, will further increase the effective block size for p2pkh to 1.9MB and 2.5MB/3MB for 2/2 multisig. The post provides mathematical calculations to support these estimates while keeping input and output numbers constant. Furthermore, the latest SegWit code has version 0 witness format, treating a 32-byte push as the sha256 of a script and a 20-byte push as the hash of the pub key. The witness scriptPubKey format uses "OP_0 [hash]" to push the version and hash to the script separately, allowing SegWit transactions to be encoded backwards compatibly as a p2sh payment. The post also provides details on the current and SegWit transaction sizes for p2pkh and 2/2 multisig. Finally, the author suggests that p2pkh with SegWit-via-p2sh could be interesting and provides calculations to support this claim.
The context provided is related to various scenarios and their impact on the number of transactions per block in Bitcoin blockchain. The table shows the percentage increase in transaction capacity for different scenarios, including segwit with various discounts and key recovery mechanisms. The author assumes that people are mostly interested in the number of transactions per block. They also discuss the impact of a 2MB hard fork and suggest that a smaller discount or no discount may be applied to ensure total data per block remains at 4MB or less. The author also mentions that a monetary incentive to limit UTXO sizes is indirectly provided by discounting. The caveat is mentioned that additional metadata such as the length of each witness signature or the value of the input should be accounted for. The author provides details on different soft forks and how they can improve transaction capacity, including schnorr signatures and merkle-ised abstract syntax trees. Finally, the author suggests that multisig for escrow payments could benefit from ecdsa key recovery combined with 1/4 discounting.</summary>
    <published>2016-01-22T09:46:18+00:00</published>
  </entry>
</feed>
