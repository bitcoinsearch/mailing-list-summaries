<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>mailing-list-bitcoin-2016-January-012218</id>
  <title>Time to worry about 80-bit collision attacks or not?</title>
  <updated>2023-05-04T21:13:46.511817+00:00</updated>
  <author>
    <name>Anthony Towns</name>
  </author>
  <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-January/012218.html" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-January/012218.html</id>
    <title>Time to worry about 80-bit collision attacks or not?</title>
    <updated>2023-05-04T21:13:46.511817+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-January/012218.html" rel="alternate"/>
    <summary>In this communication, Gavin Andresen is requesting clarification on a collision attack scenario involving a payment channel. The attacker creates two scripts with different values that hash to the same result and can use them to make payments without alerting the victim. Ethan Heilman provides a procedure for creating such scripts using a function of the attacker's private key. Using a weakened hash function, Heilman demonstrates how to find a "useful" collision in under 15*2**80 work.</summary>
    <published>2016-01-08T15:33:29+00:00</published>
  </entry>
</feed>
