<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Mempool Based Fee Estimation on Bitcoin Core</title>
  <updated>2024-03-22T01:59:10.590344+00:00</updated>
  <author>
    <name>ClaraShk 2024-03-21 20:55:55.854000+00:00</name>
  </author>
  <author>
    <name>harding 2024-03-21 17:33:00.972000+00:00</name>
  </author>
  <author>
    <name>ismaelsadeeq 2024-03-21 16:27:09.262000+00:00</name>
  </author>
  <link href="delvingbitcoin/March_2024/1985_Mempool-Based-Fee-Estimation-on-Bitcoin-Core.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1982_Mempool-Based-Fee-Estimation-on-Bitcoin-Core.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1980_Mempool-Based-Fee-Estimation-on-Bitcoin-Core.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Mempool Based Fee Estimation on Bitcoin Core</title>
    <updated>2024-03-22T01:59:10.590398+00:00</updated>
    <link href="https://delvingbitcoin.org/t/mempool-based-fee-estimation-on-bitcoin-core/703/3" rel="alternate"/>
    <summary>The exploration of mempool-based fee estimation in Bitcoin Core introduces an innovative approach to aligning transaction fees with the dynamic conditions of the Bitcoin network. By generating a block template from mempool transactions and using the 50th percentile fee rate of the generated block weight, nodes can estimate the appropriate fee for the next block. This method assumes most miners generate their next block templates from their node's mempool, making mempool-based fee estimation a reliable predictor for transaction inclusion in upcoming blocks. The strategy swiftly adapts to changes such as high demand for block space or variations in the mempool's depth, offering a real-time solution to fee estimation.

However, challenges arise when a node's mempool diverges significantly from that of the network's miners due to differences in policy rules or connectivity issues. Such discrepancies can lead to inaccurate fee estimates, particularly for transactions intended to confirm in more than one block. To mitigate this, the proposal includes sanity checks based on the comparison of transactions in previously mined blocks with those in the node's mempool at the time of mining. These checks aim to prevent fee estimates from being generated when a node's mempool is not reflective of the wider network activity.

Despite these safeguards, the implementation of mempool-based fee estimation faces hurdles, notably the computational expense involved in generating block templates immediately after a new block connects. The development of a Cluster Mempool, which organizes the mempool more efficiently, could alleviate these concerns by enabling faster generation of block templates.

The concept of combining confirmed and mempool estimates for replace-by-fee (RBF) transactions is also discussed, drawing on Kalle Alm's research presented at Scaling Bitcoin 2017. By selecting the minimum of the confirmed and mempool estimates, users can adjust fees downwards without risk, ensuring transactions remain competitive while avoiding overpayment. These insights underscore the potential for mempool-based fee estimation to enhance the accuracy and efficiency of transaction fee calculations in Bitcoin Core.

For further understanding, Alm's work, including his [Slides](https://scalingbitcoin.org/stanford2017/Day2/Scaling-2017-Optimizing-fee-estimation-via-the-mempool-state.pdf), [Transcript](https://btctranscripts.com/scalingbitcoin/stanford-2017/optimizing-fee-estimation-via-mempool-state/), and [Video](https://www.youtube.com/watch?v=QkYXPJMqBNk&amp;t=2052s), offers valuable insights into optimizing fee estimation through mempool analysis. This body of knowledge supports ongoing efforts to refine Bitcoin's fee estimation mechanisms, contributing to the cryptocurrency's scalability and user experience.</summary>
    <published>2024-03-21T20:55:55.854000+00:00</published>
  </entry>
</feed>
