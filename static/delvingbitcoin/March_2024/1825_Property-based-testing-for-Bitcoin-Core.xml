<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Property-based testing for Bitcoin Core</title>
  <updated>2024-03-08T02:00:41.980864+00:00</updated>
  <author>
    <name>Chris_Stewart_5 2024-03-07 14:50:32.548000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Property-based testing for Bitcoin Core</title>
    <updated>2024-03-08T02:00:41.980895+00:00</updated>
    <link href="https://delvingbitcoin.org/t/property-based-testing-for-bitcoin-core/640/6" rel="alternate"/>
    <summary>In the realm of software testing within the cryptocurrency space, particularly regarding [bitcoin-s](https://github.com/bitcoin-s/bitcoin-s), an emphasis is placed on direct access to data structures rather than incorporating property-based testing through networking layers. This approach stems from a consideration of efficiency and the desire to avoid the potential for flaky tests that could arise from testing the entire networking stack. Additionally, there's a recognition of the higher maintenance burden such testing could impose. However, it's noted that this might not be as significant for Bitcoin Core, given the existing test suites in C++ and Python.

A comparison between the Python and C++ testing frameworks reveals a preference for the latter, attributed to its perceived completeness. This perspective is further exemplified by experiences working on specific projects like the [64-bit arithmetic PR](https://delvingbitcoin.org/t/64-bit-arithmetic-soft-fork/397), where the Python framework's handling of value correctness was found wanting. Specifically, instances were identified where the [Python test framework](https://github.com/bitcoin/bitcoin/blob/c2c6a7d1dc162945fa56deb6eaf2bdd7f84999e8/test/functional/test_framework/script.pyL410) seemingly assumes the correctness of provided values without thorough validation, raising concerns about its reliability.

The discussion acknowledges the potential need to address these shortcomings to unearth bugs but cautions against the implications of doing so. The concern is that such efforts might inadvertently lead to a secondary consensus implementation in Python, which poses its own set of challenges and considerations. Despite the diverging views on this matter, the discourse underscores the importance of rigorous testing in ensuring the integrity and reliability of cryptocurrency systems.</summary>
    <published>2024-03-07T14:50:32.548000+00:00</published>
  </entry>
</feed>
