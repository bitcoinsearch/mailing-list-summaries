<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Improving transaction sponsor blockspace efficiency</title>
  <updated>2024-03-27T01:52:10.048598+00:00</updated>
  <author>
    <name>sdaftuar 2024-03-26 18:46:13.288000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Improving transaction sponsor blockspace efficiency</title>
    <updated>2024-03-27T01:52:10.048627+00:00</updated>
    <link href="https://delvingbitcoin.org/t/improving-transaction-sponsor-blockspace-efficiency/696/6" rel="alternate"/>
    <summary>The discussion revolves around the potential of soft fork proposals to significantly expand Bitcoin's scripting capabilities, particularly by enabling scripts to verify Simplified Payment Verification (SPV) proofs. This advancement could introduce functionalities such as transaction sponsorship and `OP_EXPIRE`, alongside other features not currently safe from blockchain reorganizations. However, these innovations are not without their challenges. The implementation of `OP_EXPIRE` is complicated by the need for a new mempool design that can handle transactions potentially becoming invalid in the future. This raises concerns about denial-of-service (DoS) attacks, which, while addressable, demand substantial engineering efforts.

Transaction sponsorship also presents considerable difficulties, primarily in adapting mempool policy to accommodate it. Many problems transaction sponsorship aims to solve might be more efficiently addressed at the policy level rather than through complex engineering solutions. An opinion shared in a mailing list post suggests that if transaction sponsorship were pursued, it would be prudent to allow transactions to opt into being sponsorable. This approach would align with consensus changes while mitigating unintended consequences on the network's operation.

A critical concern with allowing any third party to attach to the transaction graph is the potential for DoS attacks related to mempool policy. For instance, in a clustered mempool scenario, third-party attachments could create large clusters, blocking other transactions from being chained due to cluster size limits. Although there may be workarounds, thoroughly addressing these issues requires significant thought and effort. Therefore, when considering consensus changes, it's essential to design them in a way that they do not adversely affect existing use cases or usage patterns, ensuring that the network remains robust and functional for all users.</summary>
    <published>2024-03-26T18:46:13.288000+00:00</published>
  </entry>
</feed>
