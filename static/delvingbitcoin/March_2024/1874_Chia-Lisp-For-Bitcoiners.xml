<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Chia Lisp For Bitcoiners</title>
  <updated>2024-03-14T01:59:42.655114+00:00</updated>
  <author>
    <name>ajtowns 2024-03-13 14:58:33.260000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Chia Lisp For Bitcoiners</title>
    <updated>2024-03-14T01:59:42.655141+00:00</updated>
    <link href="https://delvingbitcoin.org/t/chia-lisp-for-bitcoiners/636/7" rel="alternate"/>
    <summary>In the realm of blockchain programming, particularly within the Chia Lisp solutions framework, a novel approach to handling softforks has been introduced. This method diverges from traditional practices by mandating that softforked opcodes are executed within a subprogram that is designed to either return a null value or abort entirely. This design choice allows these opcodes considerable flexibility within the confines of the subprogram, enabling them to perform various operations as long as the overall subprogram adheres to the "verify" behavior criterion.

A specific example that illustrates this concept involves the new `(coinid P H A)` operation, which is capable of calculating and returning a hash value. However, the utilization of this operation prior to an official hardfork is restricted. It can only be employed within a program structured to ensure verification, such as through a specific pattern like: 
``` 
(softfork COST 0 (q a (i (= (coinid P H A) X) (q q nil) (q x))) 1 ) 
```
Within this structure, parameters `P H A X` are derived from the external environment. The enclosed code within the `softfork` construct validates whether `X` has been accurately calculated, manually aborting if discrepancies are found through a designated pattern. Subsequently, code external to the `softfork` can safely interact with the `X` value, now verified to accurately match `P H A`, thus incorporating an element of trust into otherwise untrusted data. This methodology underscores a significant evolution in softfork management, emphasizing security and verification within blockchain operations.</summary>
    <published>2024-03-13T14:58:33.260000+00:00</published>
  </entry>
</feed>
