<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>State minimization in MuSig2 signing sessions</title>
  <updated>2024-03-08T01:58:38.897222+00:00</updated>
  <author>
    <name>real-or-random 2024-03-07 10:44:57.418000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>State minimization in MuSig2 signing sessions</title>
    <updated>2024-03-08T01:58:38.897269+00:00</updated>
    <link href="https://delvingbitcoin.org/t/state-minimization-in-musig2-signing-sessions/626/7" rel="alternate"/>
    <summary>The discussion revolves around a specific vulnerability concerning the handling of Partially Signed Bitcoin Transactions (PSBTs). This vulnerability emerges when a PSBT is manipulated by introducing mutations that do not affect the output of the NonceGen function. The core of this issue lies in how nonce generation for signing transactions can be exploited under certain conditions. 

An attacker initiates the exploit by sending a PSBT to the victim. Upon receiving this, the victim generates a secondary nonce (`secnonce`) and proceeds to sign the transaction with it. The attacker then claims that there was an error and resends the same PSBT, albeit with some mutations that crucially do not alter the outcome of the NonceGen function. Consequently, the victim unknowingly generates the identical `secnonce` as before and signs the transaction again.

This scenario underscores a critical security flaw because the re-generation of the same `secnonce` for different versions of the same PSBT—assuming these versions are perceived distinct due to their mutations—can compromise the integrity of the transaction process. This method of attack highlights the need for robust mechanisms to detect and mitigate such vulnerabilities, ensuring that nonce generation processes are secure against manipulation attempts that aim to exploit the predictability of nonce outcomes based on unchanged parameters.</summary>
    <published>2024-03-07T10:44:57.418000+00:00</published>
  </entry>
</feed>
