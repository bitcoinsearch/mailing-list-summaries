<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Chia Lisp For Bitcoiners</title>
  <updated>2024-03-05T01:52:32.518466+00:00</updated>
  <author>
    <name>ajtowns 2024-03-04 20:37:46.561000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Chia Lisp For Bitcoiners</title>
    <updated>2024-03-05T01:52:32.518507+00:00</updated>
    <link href="https://delvingbitcoin.org/t/chia-lisp-for-bitcoiners/636/3" rel="alternate"/>
    <summary>The inquiry revolves around the potential applicability of Formal Verification tools, traditionally used for LISP, to a variant of LISP mentioned as "lisp-variant." This raises questions about compatibility and effectiveness given the specific characteristics of the programming language in question. The conversation shifts towards highlighting Simplicity as a notable example where formal verification efforts have been concentrated. Simplicity is identified as having received significant attention in the realm of formal verification, suggesting its methodologies and accomplishments could offer valuable insights or frameworks for applying similar principles to other languages or systems.

Furthermore, the discussion delves into the challenges associated with matching the "chia lisp" against established formal verification frameworks such as Coq, Lean, and Isabelle. Despite the foundational elements of byte vectors and pairs being relatively straightforward, the addition of cryptographic security assumptions significantly complicates the verification process. Specifically, the difficulty lies in proving statements under the condition that generating a valid signature without access to the private key remains below a certain probability threshold (less than $2^{128}$). This highlights a crucial intersection between theoretical computer science and practical cryptographic implementation, underscoring the complexities involved in ensuring software reliability and security through formal verification methods.</summary>
    <published>2024-03-04T20:37:46.561000+00:00</published>
  </entry>
</feed>
