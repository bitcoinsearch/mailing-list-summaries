<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - BIP324 Proxy: easy integration of v2 transport protocol for light clients (PoC)</title>
  <updated>2024-06-18T02:04:32.669821+00:00</updated>
  <author>
    <name>Liz.Lightning 2024-06-17 05:35:05.498000+00:00</name>
  </author>
  <author>
    <name>Liz.Lightning  . 2024-06-04 05:19:44.817000+00:00</name>
  </author>
  <author>
    <name>theStack  . 2024-06-03 18:01:35.559000+00:00</name>
  </author>
  <author>
    <name>Liz.Lightning  . 2024-06-03 04:55:43.903000+00:00</name>
  </author>
  <author>
    <name>yonson  . 2024-04-15 17:35:23.952000+00:00</name>
  </author>
  <author>
    <name>theStack  . 2024-04-15 17:12:42.714000+00:00</name>
  </author>
  <author>
    <name>yonson  . 2024-04-14 22:05:16.859000+00:00</name>
  </author>
  <author>
    <name>rustaceanrob  . 2024-03-17 20:37:32.907000+00:00</name>
  </author>
  <author>
    <name>theStack  . 2024-03-17 19:48:10.014000+00:00</name>
  </author>
  <author>
    <name>rustaceanrob  . 2024-03-17 18:40:09.301000+00:00</name>
  </author>
  <author>
    <name>theStack  . 2024-03-16 08:46:33.962000+00:00</name>
  </author>
  <author>
    <name>josibake  . 2024-03-15 15:20:27.262000+00:00</name>
  </author>
  <author>
    <name>theStack  . 2024-03-14 12:55:53.397000+00:00</name>
  </author>
  <author>
    <name>xBC  . 2024-03-14 10:57:55.218000+00:00</name>
  </author>
  <author>
    <name>theStack  . 2024-03-14 02:20:39.181000+00:00</name>
  </author>
  <author>
    <name>xBC  . 2024-03-14 01:28:33.503000+00:00</name>
  </author>
  <author>
    <name>theStack  . 2024-03-13 17:32:11.483000+00:00</name>
  </author>
  <link href="delvingbitcoin/June_2024/2722_BIP324-Proxy-easy-integration-of-v2-transport-protocol-for-light-clients-PoC-.xml" rel="alternate"/>
  <link href="delvingbitcoin/June_2024/2624_BIP324-Proxy-easy-integration-of-v2-transport-protocol-for-light-clients-PoC-.xml" rel="alternate"/>
  <link href="delvingbitcoin/June_2024/2616_BIP324-Proxy-easy-integration-of-v2-transport-protocol-for-light-clients-PoC-.xml" rel="alternate"/>
  <link href="delvingbitcoin/June_2024/2607_BIP324-Proxy-easy-integration-of-v2-transport-protocol-for-light-clients-PoC-.xml" rel="alternate"/>
  <link href="delvingbitcoin/April_2024/2235_BIP324-Proxy-easy-integration-of-v2-transport-protocol-for-light-clients-PoC-.xml" rel="alternate"/>
  <link href="delvingbitcoin/April_2024/2234_BIP324-Proxy-easy-integration-of-v2-transport-protocol-for-light-clients-PoC-.xml" rel="alternate"/>
  <link href="delvingbitcoin/April_2024/2226_BIP324-Proxy-easy-integration-of-v2-transport-protocol-for-light-clients-PoC-.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1922_BIP324-Proxy-easy-integration-of-v2-transport-protocol-for-light-clients-PoC-.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1921_BIP324-Proxy-easy-integration-of-v2-transport-protocol-for-light-clients-PoC-.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1920_BIP324-Proxy-easy-integration-of-v2-transport-protocol-for-light-clients-PoC-.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1912_BIP324-Proxy-easy-integration-of-v2-transport-protocol-for-light-clients-PoC-.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1906_BIP324-Proxy-easy-integration-of-v2-transport-protocol-for-light-clients-PoC-.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1888_BIP324-Proxy-easy-integration-of-v2-transport-protocol-for-light-clients-PoC-.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1885_BIP324-Proxy-easy-integration-of-v2-transport-protocol-for-light-clients-PoC-.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1882_BIP324-Proxy-easy-integration-of-v2-transport-protocol-for-light-clients-PoC-.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1881_BIP324-Proxy-easy-integration-of-v2-transport-protocol-for-light-clients-PoC-.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1877_BIP324-Proxy-easy-integration-of-v2-transport-protocol-for-light-clients-PoC-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - BIP324 Proxy: easy integration of v2 transport protocol for light clients (PoC)</title>
    <updated>2024-06-18T02:04:32.670040+00:00</updated>
    <link href="https://delvingbitcoin.org/t/bip324-proxy-easy-integration-of-v2-transport-protocol-for-light-clients-poc/678/17" rel="alternate"/>
    <summary>The release of the initial version of a Bitcoin BIP324 proxy is announced, providing a solution that, while operational, invites improvements and feedback. The journey to this point underscores the challenges encountered in integrating secure cryptographic operations into programming projects, notably the search for appropriate secp256k1 bindings. Despite exploring various libraries, the decision to translate a Python reference implementation into Golang was made, reflecting the complexities of implementing cryptographic standards and the necessity for accessible, reliable libraries.

Addressing the configuration of light clients, especially the ability to add multiple peers sharing the same IP address, is discussed, emphasizing the importance of utilizing both IP address and port number for identification. The selection process of remote peers for light clients, suggesting reliance on DNS seed peers for optimal configurations, indicates broader issues within decentralized networks regarding the straightforward method for end users to identify and configure reliable peers.

A discussion about the bip324-proxy's implementation in Go highlights the exploration of the Go language ecosystem for its cryptographic primitives and the concept of static configuration for light clients as opposed to patching them. This method, which avoids modifying the client directly, raises questions about the feasibility of adding multiple peers with the same IP but different ports and how users would identify which remote peers to configure.

An optimistic outlook is shared about making the bip324 implementation available as a library, aiming to simplify integration without altering client software. This initiative suggests configuring a proxy to listen on different ports corresponding to specific peers, thereby enabling direct sending of bip324 messages to respective peers. However, this introduces a challenge concerning peer discovery, contemplating the use of DNS-seed for on-the-fly peer discovery as a potential solution.

Exploring asynchronous operations emphasizes the use of "spawning" as a method to create new threads of work, contrasting green threads with traditional operating system threads. This discussion navigates through the trade-offs between using green threads for asynchronous programming and shifting towards a more traditional threading model based on operating system threads.

Significant progress in developing a Rust-based version 2 proxy for BIP324 is noted, drawing from an existing Python implementation and leveraging the asynchronous programming capabilities of the Tokio runtime. This development adopts a "sans I/O" approach, aimed at making the library independent of any specific runtime environment, indicating a commitment to creating a versatile and efficient solution for the BIP324 protocol.

Resources and practices in Rust programming are discussed, highlighting effective coding techniques, asynchronous TCP examples, and cryptography with a particular fondness for the book titled [Effective Rust](https://www.lurklurk.org/effective-rust/). Concerns about the auditability of `RustCrypto` crates due to `unsafe` code blocks are raised, leading to an interaction with the `rust-bitcoin` maintainers and a recommendation for reducing dependencies for better integration within the `rust-bitcoin` community.

The conversation then shifts to the specifics of inbound and outbound connections in Bitcoin Core, focusing on address serialization and the use of reverse proxies. It details the limitations currently faced by Bitcoin Core in implementing BIP-155 address serialization for TorV3, I2P, CJDNS, and reflects on the practical utility of a reverse proxy for inbound connections. This part of the discussion also touches upon the anticipation of relevant alternative node implementations adopting BIP324, potentially before widespread adoption among light clients.

Finally, the potential development of a Rust library for BIP324 and its utility in enhancing privacy for Bitcoin light-client implementations is broached. The dialogue suggests transforming the tool into a Rust library, recognizing the value it could bring to projects like Nakamoto. An offer of collaboration, despite a self-admitted lack of fluency in Rust, showcases a willingness to contribute to small-scale projects and foster partnership within the developer community.</summary>
    <published>2024-06-17T05:35:05.498000+00:00</published>
  </entry>
</feed>
