<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - BIP324 Proxy: easy integration of v2 transport protocol for light clients (PoC)</title>
  <updated>2024-03-15T01:59:58.194657+00:00</updated>
  <author>
    <name>theStack 2024-03-14 12:55:53.397000+00:00</name>
  </author>
  <author>
    <name>0xB10C 2024-03-14 10:57:55.218000+00:00</name>
  </author>
  <author>
    <name>theStack 2024-03-14 02:20:39.181000+00:00</name>
  </author>
  <author>
    <name>0xB10C 2024-03-14 01:28:33.503000+00:00</name>
  </author>
  <author>
    <name>theStack  . 2024-03-13 17:32:11.483000+00:00</name>
  </author>
  <link href="delvingbitcoin/March_2024/1888_BIP324-Proxy-easy-integration-of-v2-transport-protocol-for-light-clients-PoC-.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1885_BIP324-Proxy-easy-integration-of-v2-transport-protocol-for-light-clients-PoC-.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1882_BIP324-Proxy-easy-integration-of-v2-transport-protocol-for-light-clients-PoC-.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1881_BIP324-Proxy-easy-integration-of-v2-transport-protocol-for-light-clients-PoC-.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1877_BIP324-Proxy-easy-integration-of-v2-transport-protocol-for-light-clients-PoC-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - BIP324 Proxy: easy integration of v2 transport protocol for light clients (PoC)</title>
    <updated>2024-03-15T01:59:58.194736+00:00</updated>
    <link href="https://delvingbitcoin.org/t/bip324-proxy-easy-integration-of-v2-transport-protocol-for-light-clients-poc/678/5" rel="alternate"/>
    <summary>The development of a peer-to-peer (P2P) encryption tool is in progress, aimed at facilitating Bitcoin clients' compatibility with BIP324. This tool, essentially a local process translator, bridges the gap between P2P versions 1 and 2 by initiating a server socket on the local TCP port 1324 and creating a new thread for each incoming v1 connection. The process identifies the remote peer's address through the `addr_recv` field in the initial VERSION message, as outlined in the [Bitcoin Protocol documentation](https://en.bitcoin.it/wiki/Protocol_documentationversion). Following this identification, a v2 handshake is conducted, allowing for the relay of the initial VERSION message to the remote node. The proxy serves the function of mediating messages between the nodes, translating them to the appropriate P2P version format. This setup requires P2P connections to be redirected to localhost:1324, necessitating minor adjustments to the client's codebase, possibly via a command-line option. The current implementation is in Python3, leveraging cryptographic elements from Bitcoin Core's BIP324 implementation within the functional test framework.

The project, still in the proof-of-concept stage, exhibits slow performance and vulnerability to side-channel attacks, making it unsuitable for practical use outside testing environments. Currently, it supports signet, though extending this support to other networks could be accomplished by modifying the `NET_MAGIC` constant. Plans are underway for an efficient rewrite in Rust to improve performance and security, although the timeline is uncertain due to the developer's unfamiliarity with the language. For those interested in contributing or learning more about the project, additional information and resources can be found on the GitHub repository and a presentation delivered during a Brink engineering call, available [here](https://github.com/theStack/bip324-proxy) and [here](https://github.com/theStack/bip324-proxy/raw/master/doc/bip324-proxy_presentation.pdf), respectively. The presentation details examples of light clients tested with the BIP324 proxy, including necessary patches for redirection. Feedback and innovative contributions are welcomed to further advance the project's development.

In the realm of inbound and outbound connections, it was observed that all inbound LinkingLion connections default to `127.0.0.1`, while inbound i2p and tor connections, presumably for Bitcoin Core, set to `0.0.0.0`. The discussed "BIP324 proxy scenario" indicates the proxy's limitation to only outbound connections currently, with an investigation into inbound connections support via reverse proxy noted as a future task. However, the utility of a reverse proxy in practice is questioned given the existing capability to run a listening node with BIP324 now via Bitcoin Core v26.0+. It's anticipated that relevant alternative node implementations will adopt this standard well before most light clients. A notable limitation is the exclusive possibility of version 1 address serialization in version messages, preventing the serialization of addresses such as TorV3, I2P, CJDNS through [BIP-155](https://github.com/bitcoin/bips/blob/b3701faef2bdb98a0d7ace4eedbeefa2da4c89ed/bip-0155.mediawiki), which will invariably be recognized as `0.0.0.0`. The document reflects on the technical challenges and considerations surrounding P2P client compatibility and the strategic direction for implementing BIP324, emphasizing the need for correct setting of the `addr_recv` field to ensure successful proxy connections.</summary>
    <published>2024-03-14T12:55:53.397000+00:00</published>
  </entry>
</feed>
