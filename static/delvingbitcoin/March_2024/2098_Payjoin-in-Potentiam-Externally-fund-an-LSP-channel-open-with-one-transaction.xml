<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Payjoin-in-Potentiam: Externally fund an LSP channel open with one transaction</title>
  <updated>2024-03-31T02:04:44.565888+00:00</updated>
  <author>
    <name>bitgould 2024-03-30 17:02:46.714000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Payjoin-in-Potentiam: Externally fund an LSP channel open with one transaction</title>
    <updated>2024-03-31T02:04:44.565920+00:00</updated>
    <link href="https://delvingbitcoin.org/t/payjoin-in-potentiam-externally-fund-an-lsp-channel-open-with-one-transaction/749/4" rel="alternate"/>
    <summary>The correspondence highlights significant advancements in the realm of cryptocurrency transactions, particularly focusing on enhancing the efficiency and reducing the costs associated with lightning network onboarding. It introduces an innovative protocol named payjoin-in-potentiam, which augments the existing swap-in-potentiam by incorporating an optimistic scenario that potentially halves the on-chain footprint for channel openings. This protocol leverages a unique mechanism where if Alice is not found to be inactive (asleep) before the expiration of the payjoin protocol, a single transaction can combine channel opening with external input from the source of funds, thanks to Bob's initiative. This approach contrasts with the traditional method where funds must first confirm into a swap address before proceeding to channel opening, thereby streamlining the process significantly.

Furthermore, the discussion delves into the technical aspect of fetching Bob's public key by Alice, an essential step for transaction security and integrity. It then transitions into a detailed exploration of MuSig2, highlighting its role in removing the hard input requirement when Alice comes online before the payjoin window expires. The interaction-based nature of this setup allows for a seamless creation of the channel output and incorporation of external funds into a single transaction, thus optimizing the efficiency of fund transfers.

Notably, the conversation also touches upon the potential integration of MuSig2 with PSBT (Partially Signed Bitcoin Transactions), suggesting that embracing a PSBT extension could facilitate broader support for the swap-in-potentiam protocol. A specific mention of the [MuSig2 PSBT extension draft by Sanket](https://gist.github.com/sanket1729/4b525c6049f4d9e034d27368c49f28a6) and its deployment by BitGo ([BitGo's deployment](https://bitcoinops.org/en/bitgo-musig2/)) exemplifies practical steps towards this integration. This consideration underscores the importance of compatibility and extensibility in protocol design, especially in the rapidly evolving landscape of cryptocurrency transactions. The dialogue concludes by acknowledging the complexities involved in protocol design and the continuous exploration required to enhance the efficacy and accessibility of lightning network onboarding.</summary>
    <published>2024-03-30T17:02:46.714000+00:00</published>
  </entry>
</feed>
