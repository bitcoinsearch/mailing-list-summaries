<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Chia Lisp For Bitcoiners</title>
  <updated>2024-03-06T01:52:51.085097+00:00</updated>
  <author>
    <name>ProofOfKeags 2024-03-05 21:08:41.406000+00:00</name>
  </author>
  <author>
    <name>bramcohen  . 2024-03-04 22:45:13.618000+00:00</name>
  </author>
  <author>
    <name>ajtowns  . 2024-03-04 20:37:46.561000+00:00</name>
  </author>
  <author>
    <name>josibake  . 2024-03-04 12:51:37.350000+00:00</name>
  </author>
  <author>
    <name>ajtowns  . 2024-03-04 02:46:38.231000+00:00</name>
  </author>
  <link href="delvingbitcoin/March_2024/1795_Chia-Lisp-For-Bitcoiners.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1787_Chia-Lisp-For-Bitcoiners.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1784_Chia-Lisp-For-Bitcoiners.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1779_Chia-Lisp-For-Bitcoiners.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1777_Chia-Lisp-For-Bitcoiners.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Chia Lisp For Bitcoiners</title>
    <updated>2024-03-06T01:52:51.085155+00:00</updated>
    <link href="https://delvingbitcoin.org/t/chia-lisp-for-bitcoiners/636/5" rel="alternate"/>
    <summary>The dialogue emphasizes the potential for integrating Simplicity with state-of-the-art (SOTA) proof assistants and its relation to programming languages like Idris/Agda, noting the use of Chez Scheme code-generators in Idris/Idris2. It discusses the trade-offs involved in erasing structural information during compilation and the benefits of formally verifying compiler target languages to ensure desired properties regardless of the source language. It also addresses the costs associated with preserving structural information and suggests exploring LISP-like target languages for their flexibility and the possibility of avoiding full formal verification down to distributive categories.

Chialisp's approach to reducing the complexities and costs of script execution on blockchains is highlighted through its introduction of templates for code reuse and the extraction of code from earlier blocks. This results in significant cost efficiency. Chialisp's unique conditions language and coin format are compared to Bitcoin's transaction format, suggesting that Bitcoin could benefit from incorporating additional opcodes for transaction handling, similar to those in Chialisp. A cost mechanism in Chialisp aims to prevent string growing attacks by scaling costs linearly with string length, ensuring the feasibility of block validation within practical resource limits.

The conversation then shifts to the applicability of Formal Verification tools to a Lisp variant, underscoring the challenges of matching the security assumptions of cryptographic elements within formal verification frameworks such as Coq, Lean, and Isabelle. The emphasis is on the difficulty of proving security properties under cryptographic constraints, highlighting the intersection between theoretical computer science and cryptographic implementation.

The inherent nature of Lisp, treating code and data equally, is discussed as beneficial for transactions requiring unexpected code execution. The existing development tools and understanding of known bugs in ChiaLisp are seen as advantageous for development and troubleshooting. The discussion touches upon whether formal verification tools designed for standard Lisp could be applicable to a Lisp variant, considering the potential for enhancing security and reliability.

Lastly, the integration of a Lisp variant into Bitcoin scripting is motivated by overcoming limitations in looping and structured data handling. The adoption of Lisp principles, such as recursion and sophisticated data management, could significantly enhance script capabilities and programmer productivity. Chialisp's design philosophy, focusing on ease of upgradeability and network upgrades, along with its comprehensive costing model, addresses denial-of-service risks effectively. The updates and new operational codes introduced in [CHIP-11](https://github.com/Chia-Network/chips/blob/b096b5735989b243f7c2dec8533aa0080d084dc8/CHIPs/chip-0011.md) and [CHIP-14](https://github.com/Chia-Network/chips/blob/b096b5735989b243f7c2dec8533aa0080d084dc8/CHIPs/chip-0014.md) demonstrate the platform's adaptability and expanding functionality. The adaptation of Lisp principles in the Chia blockchain presents a blueprint for enhancing Bitcoin scripting, indicating the relevance of Lisp paradigms in modern computational contexts and the potential for innovation within blockchain scripting languages.</summary>
    <published>2024-03-05T21:08:41.406000+00:00</published>
  </entry>
</feed>
