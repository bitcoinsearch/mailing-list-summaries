<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Great Consensus Cleanup Revival</title>
  <updated>2024-03-25T02:04:46.539945+00:00</updated>
  <author>
    <name>1440000bytes 2024-03-24 23:52:07.826000+00:00</name>
  </author>
  <author>
    <name>AntoineP 2024-03-24 19:53:27.073000+00:00</name>
  </author>
  <link href="delvingbitcoin/March_2024/2020_Great-Consensus-Cleanup-Revival.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1996_Great-Consensus-Cleanup-Revival.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Great Consensus Cleanup Revival</title>
    <updated>2024-03-25T02:04:46.539987+00:00</updated>
    <link href="https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/2" rel="alternate"/>
    <summary>The discussion highlights significant vulnerabilities within the Bitcoin protocol, particularly emphasizing the timewarp attack and the risks posed by maliciously crafted blocks that require excessive validation times. The timewarp attack leverages the non-overlapping difficulty adjustment periods to potentially decrease mining difficulty and accelerate block mining, compromising network security. To counter this, an adjustment in the consensus mechanism is suggested to make retarget periods overlap, preventing the exploitation of the difficulty adjustment algorithm.

Malicious blocks that take an extended period to validate threaten the network by providing attackers with unfair advantages, slowing down block propagation, and destabilizing dependent software. The "Great Consensus Cleanup" proposal aims to mitigate these risks by introducing constraints on legacy Script usage, thereby significantly reducing worst-case block validation times. Additionally, it addresses merkle tree attacks by proposing the invalidation of transactions 64 bytes or less in length to neutralize fraud and erroneous block rejection, though it calls for a nuanced approach to only target transactions posing genuine risks.

The blog post further discusses addressing other Bitcoin protocol bugs, such as the SIGHASH_SINGLE bug, and suggests modifications like bypassing BIP30 verification after a certain block height and limiting legacy transaction sizes. It advocates for a comprehensive cleanup through a potential soft fork, inviting community feedback to fortify the protocol against existing and future vulnerabilities.

Regarding coinbase transaction uniqueness beyond block height 1,983,702, two solutions are proposed: mandating the `nLockTime` field in coinbase transactions to match the block height or requiring a witness commitment in all coinbase transactions, a suggestion by Greg Sanders. This aims at making coinbase transactions uniquely identifiable, with a call for community suggestions focusing on resolving uncontroversial, longstanding bugs.

The document underscores the balance between innovation and stability in blockchain protocol adjustments, illustrating the complexity of implementing changes. It delineates both broadly supported fixes and contentious propositions, illustrating the nuanced considerations required in the evolving landscape of blockchain technology.</summary>
    <published>2024-03-24T23:52:07.826000+00:00</published>
  </entry>
</feed>
