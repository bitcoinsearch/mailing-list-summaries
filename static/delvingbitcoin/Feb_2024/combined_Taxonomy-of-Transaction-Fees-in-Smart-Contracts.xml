<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Taxonomy of Transaction Fees in Smart Contracts</title>
  <updated>2024-02-02T02:05:42.099868+00:00</updated>
  <author>
    <name>rustyrussell 2024-02-01 21:06:42.717000+00:00</name>
  </author>
  <author>
    <name>instagibbs 2024-02-01 16:52:08.683000+00:00</name>
  </author>
  <link href="delvingbitcoin/Feb_2024/1408_Taxonomy-of-Transaction-Fees-in-Smart-Contracts.xml" rel="alternate"/>
  <link href="delvingbitcoin/Feb_2024/1406_Taxonomy-of-Transaction-Fees-in-Smart-Contracts.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Taxonomy of Transaction Fees in Smart Contracts</title>
    <updated>2024-02-02T02:05:42.099911+00:00</updated>
    <link href="https://delvingbitcoin.org/t/taxonomy-of-transaction-fees-in-smart-contracts/512/2" rel="alternate"/>
    <summary>In an environment where transaction fees are on the rise, compactness in transaction design is becoming a primary focus, sometimes even taking precedence over security concerns. This leads to strategies that aim to minimize exogenous fees and maximize the use of endogenous fee structures within Bitcoin transactions. The discussion urges the need for designing covenants with this reality in mind, considering their potential for Bitcoin scaling and efficiency.

The concept of using endogenous fees within a single transaction RBF (Replace-By-Fee) is highlighted as the most elementary setup, which encompasses simple wallet transactions to more complex smart contracts like non-anchor ln-penalty channels. These setups are noted for their compact nature, ensuring minimal fee-sizing while maintaining transaction compactness.

On the other hand, exogenous fees within a single transaction RBF suggest the addition of external inputs and possibly outputs to cover transaction costs. Common instances of this approach include HTLC presigned transactions and various update transactions in the Lightning Network (LN), among others. Although it saves overhead compared to alternative strategies, it can be more complex due to additional inputs and outputs.

Child-Pays-for-Parent (CPFP) is another method where endogenous fees come from the parent transaction without any conflict resolution required from the parent's inputs. This method suits scenarios where the user cannot control the parent transaction or replacing it would be too costly. It applies to cases such as fee bumping in LN remote transactions.

Exogenous fees paired with CPFP are used similarly but are necessary when certain outputs in the smart contract are restricted, for instance, by locktimes. This pattern is observed in modern LN anchor channels to prevent pinning scenarios.

Package RBF refers to a combination of CPFP and RBF, where the child transaction covers the parent's fees. While endogenous fees in Package RBF allow for a streamlined process if the smart contract's outputs are unencumbered, exogenous fees in Package RBF are employed in today's LN anchor channels.

Moreover, not all smart contract paradigms follow the parent and child transaction structure. Some involve pre-signed or CheckTemplateVerify (CTV)-encumbered transaction trees, which fit into different buckets depending on factors such as relay capability, immediate spendability of UTXOs for endogenous fees, and requirements for sibling eviction to sidestep cluster limits.

Considering these paradigms, a Timeout Tree is proposed where leaf nodes use endogenous fees with single transaction RBF-compatible channels. In case of on-chain actions, they compose to support CPFP, utilizing package RBF if sibling eviction becomes necessary or if thereâ€™s a conflicted ancestor input. This mechanism could also facilitate payment for separate smart contracts settled with exogenous fees upon failure.</summary>
    <published>2024-02-01T21:06:42.717000+00:00</published>
  </entry>
</feed>
