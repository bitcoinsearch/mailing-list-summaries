<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>V3 transaction policy for anti-pinning</title>
  <updated>2024-02-14T01:52:56.079960+00:00</updated>
  <author>
    <name>sdaftuar 2024-02-13 16:12:15.312000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>V3 transaction policy for anti-pinning</title>
    <updated>2024-02-14T01:52:56.080050+00:00</updated>
    <link href="https://delvingbitcoin.org/t/v3-transaction-policy-for-anti-pinning/340/40" rel="alternate"/>
    <summary>The discussion revolves around the challenges associated with large commitment transactions in the context of lightning network operations, specifically when they are filled with pending Hashed Timelock Contracts (HTLCs). The lightning network daemon (lnd) permits up to 483 HTLCs in each direction within a commitment transaction. This configuration can lead to situations where, at full capacity with 2 * 483 HTLCs, the transaction fees could exceed 800,000 satoshis at a rate of 20 sat/byte. Such high fees imply that multiple wallet inputs might be necessary for a Child Pays for Parent (CPFP) action, considering the unknown nature of node operators' unspent transaction output (UTXO) sets.

There is a specific concern if a commitment transaction grows very large, potentially reaching sizes between 30,000 to 40,000 virtual bytes (vbytes). In such cases, the number of required UTXOs for CPFP could be substantial. However, the suggestion is made that consolidating UTXOs into a single one through a separate transaction before executing CPFP might not significantly impact overall costs. The estimation indicates that the consolidation process would add approximately 110 vbytes to the transaction size, factoring in the overhead for one additional transaction along with the creation of an extra output and the spending of an extra input. While this approach may not be ideal as a long-term solution, it presents a trade-off by possibly reducing the risk of pinning while accommodating smaller child transaction sizes.</summary>
    <published>2024-02-13T16:12:15.312000+00:00</published>
  </entry>
</feed>
