<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>64 bit arithmetic soft fork</title>
  <updated>2024-02-13T01:52:54.650913+00:00</updated>
  <author>
    <name>Chris_Stewart_5 2024-02-12 15:02:02.103000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>64 bit arithmetic soft fork</title>
    <updated>2024-02-13T01:52:54.650950+00:00</updated>
    <link href="https://delvingbitcoin.org/t/64-bit-arithmetic-soft-fork/397/44" rel="alternate"/>
    <summary>The recent discussion on the potential applications of `OP_INOUT_AMOUNT` in Bitcoin's scripting language has been further elaborated upon in a new post available at [Delving into Bitcoin](https://delvingbitcoin.org/t/op-inout-amount/549). This proposal, if accepted and implemented, opens up numerous possibilities for more intricate and secure transaction types within the Bitcoin network. The post not only explores theoretical uses but also provides practical examples to illustrate how these changes could influence Bitcoin's functionality.

Additionally, for those interested in the technical specifics and seeking to delve deeper into the practical side of this proposal, a set of test scripts have been made available. These scripts are part of the Python test framework and can be accessed through a commit on GitHub. The detailed code and its implications can be reviewed at [Christewart's Bitcoin GitHub repository](https://github.com/Christewart/bitcoin/commit/c617c5c3b0d21499b196184b5279b45627060cb5diff-2e2556d1d2e3a75b547bbb86bd68567f275ba6d17b9bf4541facef9f2b1cfb30R124), providing a hands-on look at how `OP_INOUT_AMOUNT` could be integrated and tested within the existing Bitcoin codebase. This practical example serves as a valuable resource for developers and enthusiasts alike, offering a glimpse into the future possibilities of Bitcoin scripting enhancements.</summary>
    <published>2024-02-12T15:02:02.103000+00:00</published>
  </entry>
</feed>
