<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>An overview of the cluster mempool proposal</title>
  <updated>2024-02-22T01:51:13.191688+00:00</updated>
  <author>
    <name>sdaftuar 2024-02-21 13:59:55.418000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>An overview of the cluster mempool proposal</title>
    <updated>2024-02-22T01:51:13.191722+00:00</updated>
    <link href="https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393/20" rel="alternate"/>
    <summary>The discussion on whether a wallet can construct a Replace-By-Fee (RBF) transaction candidate without knowing the mempool ordering and ensure its acceptance reveals complexities inherent in Bitcoin's RBF rules. Initially, when RBF was implemented in Bitcoin Core back in 2015, there was a suggestion to document the replacement rules in a Bitcoin Improvement Proposal (BIP 125). This documentation would theoretically enable wallets to understand and comply with these rules. However, the actual application of these rules is complicated by the need for detailed information about the mempool, specifically the feerates and total fees of all conflicting transactions, including their descendants. This complexity has led to a practical approach where wallets generally attempt to increase a transaction's fee until it is accepted by a mempool or confirmed, assuming they have access to full node mempool data.

There is curiosity about whether any wallets actively calculate BIP 125 requirements independently and how they accomplish this, given the intricate knowledge needed about the mempool's state. For a wallet to effectively construct a new transaction that could replace existing ones in the mempool, it would need comprehensive data on the current and potential future orderings of transaction clusters within the mempool, as well as the total fees involved in both the new and existing transactions. Despite these theoretical requirements, recent draft proposals and functional test adjustments suggest that the practical impact and changes to the RBF rules might align closely with user expectations and real-world use cases. This perspective is supported by the minimal substantive changes required in the `feature_rbf.py` tests, as observed in a draft PR available at [https://github.com/bitcoin/bitcoin/pull/28676](https://github.com/bitcoin/bitcoin/pull/28676).</summary>
    <published>2024-02-21T13:59:55.418000+00:00</published>
  </entry>
</feed>
