<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>An overview of the cluster mempool proposal</title>
  <updated>2024-02-04T01:57:03.630860+00:00</updated>
  <author>
    <name>ajtowns 2024-02-03 11:29:09.208000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>An overview of the cluster mempool proposal</title>
    <updated>2024-02-04T01:57:03.630900+00:00</updated>
    <link href="https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393/12" rel="alternate"/>
    <summary>When assessing the potential eviction of transaction B to accommodate transaction C, it is observed that even if making space for C by removing B and its descendants is a valid move under the fee rate checks, there's a possibility that B could be immediately re-accepted into the mempool. This scenario arises because B, without its descendant D, might no longer exceed the cluster size limits. This process leads to a progression through various mempool states, each improving the fee rate diagram, which is generally seen as a positive outcome.

However, concerns arise regarding the efficiency and security implications. Specifically, the transaction B may end up being relayed and validated twice, leading to unnecessary redundancy and potential waste of resources. This inefficiency could potentially be exploited for denial-of-service attacks if an adversary can easily create many such pairs of transactions like C and D. 

To mitigate this issue, it has been suggested that a more direct transition from the state "[E, B, D] [A]" to "[E, A, C, B]" would be ideal, bypassing the intermediate stage where B is temporarily evicted. One possible solution could involve leveraging the existing linear order of transactions slated for eviction, for instance, "[..B, D]", and attempting to re-add these transactions back to the mempool in their original sequence without delay. This approach could streamline the process and prevent the double handling of transaction B.</summary>
    <published>2024-02-03T11:29:09.208000+00:00</published>
  </entry>
</feed>
