<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Ecash and lightning via ZKCP</title>
  <updated>2024-02-20T01:56:32.342789+00:00</updated>
  <author>
    <name>calle 2024-02-19 14:12:47.774000+00:00</name>
  </author>
  <author>
    <name>ajtowns 2024-02-19 11:57:37.421000+00:00</name>
  </author>
  <link href="delvingbitcoin/Feb_2024/1616_Ecash-and-lightning-via-ZKCP.xml" rel="alternate"/>
  <link href="delvingbitcoin/Feb_2024/1615_Ecash-and-lightning-via-ZKCP.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Ecash and lightning via ZKCP</title>
    <updated>2024-02-20T01:56:32.342839+00:00</updated>
    <link href="https://delvingbitcoin.org/t/ecash-and-lightning-via-zkcp/586/2" rel="alternate"/>
    <summary>The intricate process of integrating ecash systems with the Lightning Network, while maintaining anonymity and minimizing trust, presents a complex but solvable challenge. The discussion revolves around how to issue new ecash tokens and redeem existing ones without compromising on privacy or security, leveraging cryptographic techniques and protocols to achieve seamless interoperability between these two distinct systems.

Issuing new ecash involves a user sending bitcoin over the Lightning Network and receiving ecash in return. This process requires the user to generate a random blinded challenge for the mint, which is sent out of band. The mint then computes a series of cryptographic operations, culminating in a Zero-Knowledge Proof (ZKP) that it knows a specific value related to the blinded challenge. Upon the user paying a Lightning invoice, they receive the preimage needed to unblind the signature, thus obtaining their ecash. It's noted that while the mint is inherently trusted in this setup, eliminating the need for a trusted setup in the ZKP could further reduce the reliance on this trust, particularly concerning the mint's use of its private key for blind signatures.

Redeeming ecash for bitcoin over the Lightning Network involves the user providing a unique identifier and signature for their ecash token. The mint verifies this information, calculates the correct signature, and initiates an HTLC with the user. The user then claims the funds by revealing the preimage of the signature. This process ensures that the ecash is marked as spent only after the transaction is complete, preventing double-spending.

A critical aspect highlighted is the challenge of ensuring the transferability of ecash tokens between users without allowing the mint to link the transfer to specific Lightning invoices, thereby preserving the anonymity inherent in ecash systems. Although this presents significant hurdles, solutions are being explored that would enable such transfers while maintaining the desired privacy levels.

Furthermore, the integration of Zero-Knowledge Proofs (ZKP), specifically a proof of knowledge of a discrete logarithm equality (DLEQ) provided in a [Cashu implementation](https://github.com/cashubtc/nuts/blob/94a621d1014a8687269f58ecadc5ef167dce546f/12.md), showcases the ongoing efforts to enhance the security and privacy of transactions between ecash systems and the Lightning Network. These developments indicate a promising direction for achieving the goal of secure, anonymous, and interoperable financial transactions in the digital age.</summary>
    <published>2024-02-19T14:12:47.774000+00:00</published>
  </entry>
</feed>
