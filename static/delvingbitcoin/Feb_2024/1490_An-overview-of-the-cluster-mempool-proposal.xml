<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>An overview of the cluster mempool proposal</title>
  <updated>2024-02-09T02:05:22.785819+00:00</updated>
  <author>
    <name>instagibbs 2024-02-08 15:23:54.319000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>An overview of the cluster mempool proposal</title>
    <updated>2024-02-09T02:05:22.785845+00:00</updated>
    <link href="https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393/16" rel="alternate"/>
    <summary>When analyzing the mempool and transaction management, a scenario is presented where transactions A, B, and C are in the mempool at the cluster size limit. Upon the arrival of D, a situation occurs where the mempool must chunk into [AB, C] to accommodate the new transactions. The algorithm suggests evicting C, followed by B, which frees up enough space for D. If D's feerate is high, it gets priority, potentially allowing C to be re-added subsequently. This highlights that while current pruning methods may not be optimal, they can create opportunities for improvement.

There's an acknowledgment that the current reliance on existing behavior could delay the deployment of more effective solutions. Nevertheless, the aim is to empower wallets, which might not perceive when cluster limits are reached, with tools to enhance the mempool and ensure their transactions are confirmed. The discourse suggests openness to adopting superior strategies if discovered later on.

Further discussion pivots towards motivating the need for such improvements with practical use cases. Two critical use cases presented are: 1) zero-confirmation (0-conf) funding transactions in Lightning Network (LN), where additional descendant transactions can prevent the primary transaction from entering the cluster, and 2) Ark/Timeout trees, which may require logarithmic nodes to be published with a single anchor, but encounter difficulties when multiple branches fill up the mempool, impeding further inclusion attempts. While adding anchors at each step could mitigate these issues, the cost of added bytes to address unseen scenarios remains a challenging proposition to justify. The concern here is to strike a balance between efficiency and the potential overhead introduced by such protective measures. For more detailed information on cluster sizes and their implications, one can refer to the discussions on [delvingbitcoin.org](https://delvingbitcoin.org/t/v3-and-some-possible-futures/523).</summary>
    <published>2024-02-08T15:23:54.319000+00:00</published>
  </entry>
</feed>
