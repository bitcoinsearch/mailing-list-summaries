<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Op_inout_amount</title>
  <updated>2024-02-13T02:02:05.813296+00:00</updated>
  <author>
    <name>Chris_Stewart_5 2024-02-12 15:05:39.857000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Op_inout_amount</title>
    <updated>2024-02-13T02:02:05.813330+00:00</updated>
    <link href="https://delvingbitcoin.org/t/op-inout-amount/549" rel="alternate"/>
    <summary>The `OP_INOUT_AMOUNT` is a proposed addition aimed at enhancing the functionality of Bitcoin's Script interpreter by introducing the ability to push input values and a set of output values onto the stack. The draft for this Bitcoin Improvement Proposal (BIP) can be found [here](https://github.com/Christewart/bips/blob/92c108136a0400b3a2fd66ea6c291ec317ee4a01/bip-op-inout-amount.mediawiki), along with its implementation in this [GitHub repository](https://github.com/Christewart/bitcoin/tree/op-inout-amount). This proposal is part of an effort to explore its integration with a 64bit op code, detailed further in a pull request ([PR](https://github.com/bitcoin/bitcoin/pull/29221)) and discussed extensively on [Delving Bitcoin](https://delvingbitcoin.org/t/64bit%20arithmetic%20soft%20fork/397/25).

One of the main design considerations highlighted pertains to the current limitation where only the input and output amounts at the index being verified by the Script interpreter are pushed. This approach, while straightforward to implement, raises questions about whether it would be more beneficial to verify beyond the immediate input and output at the current index, drawing parallels with the functionality of `SIGHASH` flags. Feedback and thoughts from the community are sought to explore potential enhancements in this area.

From an implementation standpoint, modifications were made to the `BaseTransactionSignatureChecker`, introducing two new methods: `GetNIn()`, which identifies the input index currently under verification, and `GetTransactionData()`, providing access to both the funding output and the set of outputs being spent. These additions, though positioned as a convenient solution, prompt a discussion around whether there might be a more suitable structural placement for these functionalities within the existing framework. The broader ambition guiding these developments is to leverage these innovations for the eventual support of `[OP_TLUV](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-September/019419.html)`.</summary>
    <published>2024-02-12T15:05:39.857000+00:00</published>
  </entry>
</feed>
