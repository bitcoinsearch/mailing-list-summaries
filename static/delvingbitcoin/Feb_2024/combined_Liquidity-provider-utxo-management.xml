<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Liquidity provider utxo management</title>
  <updated>2024-03-03T01:54:45.287808+00:00</updated>
  <author>
    <name>remyers 2024-03-02 13:03:49.806000+00:00</name>
  </author>
  <author>
    <name>remyers  . 2024-02-22 14:49:27.076000+00:00</name>
  </author>
  <link href="delvingbitcoin/March_2024/1766_Liquidity-provider-utxo-management.xml" rel="alternate"/>
  <link href="delvingbitcoin/Feb_2024/1672_Liquidity-provider-utxo-management.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Liquidity provider utxo management</title>
    <updated>2024-03-03T01:54:45.287851+00:00</updated>
    <link href="https://delvingbitcoin.org/t/liquidity-provider-utxo-management/600/2" rel="alternate"/>
    <summary>The conversation delves into the complexities encountered by liquidity providers, particularly those running Lightning nodes, in effectively managing their wallets for facilitating liquidity transactions. These entities often face challenges including the regular expenditure of Unspent Transaction Outputs (UTXOs) on liquidity transactions, infrequent wallet top-ups, and the perils associated with unconfirmed transactions stemming from concurrent spending or unsafe change. The proposed ideal scenario advocates for funding each liquidity transaction with a single input while avoiding the generation of a change output to minimize transaction weight, fees, and the risk tied to funds in change outputs which may experience delays in becoming spendable or might fail to confirm.

To enhance UTXO management, the proposal outlines several strategies starting with the importation of user-defined target UTXOs designated for liquidity transactions funding. This strategy is tailored to meet various fee rates and accommodate multiple concurrent transactions, aiming to select UTXOs that either exactly meet or slightly exceed the necessary fee payments, thereby eliminating the need for additional inputs and change outputs. Moreover, it introduces preventive measures for replenishing UTXO buckets particularly during instances of low fee rates or significant depletion. This involves generating change outputs that can subsequently be divided to refill these buckets.

Regarding coin selection methods, the proposal posits that in scenarios where a single input solution is impractical, any generated change output should, wherever possible, aid in refilling targeted buckets according to established criteria. This approach underwent testing using a modified version of the [coin_selection_simulation](https://github.com/achow101/coin-selection-simulation) and alterations to Bitcoin Core as detailed in draft PR [29422](https://github.com/bitcoin/bitcoin/pull/29442). Initial findings suggested a potential decrease in on-chain fees by about 15% compared to conventional coin selection techniques, indicating opportunities for further refinement and enhancements of this strategy.

The discussion concludes by inviting feedback and suggestions for optimizing the proposed strategy. It raises several inquiries aimed at improving the strategy, such as the potential benefits of pre and post-processing coin selection parameters, the feasibility of exclusively employing certain algorithms like branch-and-bound and [CoinGrinder](https://github.com/bitcoin/bitcoin/pull/27877) for fee reduction, and propositions for a more effective algorithm for input addition and change splitting. Additionally, it explores other potential applications that could benefit from this functionality, including users of coin join.</summary>
    <published>2024-03-02T13:03:49.806000+00:00</published>
  </entry>
</feed>
