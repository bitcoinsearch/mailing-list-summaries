<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>V3 and some possible futures</title>
  <updated>2024-02-07T01:52:51.809410+00:00</updated>
  <author>
    <name>instagibbs 2024-02-06 18:11:07.655000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>V3 and some possible futures</title>
    <updated>2024-02-07T01:52:51.809446+00:00</updated>
    <link href="https://delvingbitcoin.org/t/v3-and-some-possible-futures/523" rel="alternate"/>
    <summary>The discussion revolves around the evaluation of transactional topologies and policies in a post-cluster mempool environment, examining the utility of V3 policy in light of new mempool configurations. The focus is on how to evolve transaction policies to be more flexible, incentive-compatible, and useful while maintaining backward compatibility.

The current V3 policy allows for one parent and up to one child transaction with a size limit, leading to a significant reduction in pinning possibilities. However, there are drawbacks, such as limited support for batched Child Pays for Parent (CPFP) and chains larger than two transactions, and potential issues with ANYONCANPAY transactions. Despite these limitations, V3 is operational today without requiring a cluster mempool, presenting a known quantity regarding its pinning bounds.

Looking forward, the V3.0.5 proposal suggests deploying V3 followed by a cluster mempool. This approach would require the child transaction of a V3 pair to be within the "top block" fee range while relaxing the child size restrictions. This slight modification aims to reduce guesswork regarding CPFP size requirements and maintain sibling eviction simplicity yet could increase susceptibility to sophisticated goldfinger attacks.

V3.1 further relaxes topology constraints, allowing more flexibility for wallet systems to integrate with the new policies. This version requires any cluster of size two or more to meet the "top block" criterion, facilitating multi-transaction constructs resistant to pinning, and allowing less aggressive fee strategies for single transactions that might later be bumped.

The V4 series proposes different policy iterations. V4a removes topological restrictions except for a lower vbyte bound, supports ANYONCANPAY, and makes single tx RBF pin resistant. V4b maintains these features but highlights concerns about propagation of "normal" transactions that don't meet the "top block" requirement. V4c explores a hybrid of V3.1 and V4, suggesting relaxations that allow non-top block transactions under certain conditions, aiming to balance pin risk with user experience.

The deployment strategies consider various paths, noting that apart from the cluster mempool, no strict sequence must be followed. The diagrams illustrate possible progressions from V3 to other versions, indicating that sibling eviction—specifically associated with V3 styles—might not be necessary with some future policies.

In summary, while V3 offers immediate benefits with known trade-offs, the proposed evolution of these policies seeks to address existing limitations by incorporating the cluster mempool's capabilities, exploring more flexible transaction structures, and better aligning incentives. The goal is to create a more robust, adaptable, and user-friendly transaction policy framework that can withstand the demands of a dynamic mempool landscape.</summary>
    <published>2024-02-06T18:11:07.655000+00:00</published>
  </entry>
</feed>
