<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Add a SIGHASH_DOUBE flag</title>
  <updated>2024-02-29T01:57:06.463716+00:00</updated>
  <author>
    <name>moonsettler 2024-02-29 00:19:03.927000+00:00</name>
  </author>
  <author>
    <name>cmd 2024-02-28 22:34:45.217000+00:00</name>
  </author>
  <link href="delvingbitcoin/Feb_2024/1735_Add-a-SIGHASH-DOUBE-flag.xml" rel="alternate"/>
  <link href="delvingbitcoin/Feb_2024/1733_Add-a-SIGHASH-DOUBE-flag.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Add a SIGHASH_DOUBE flag</title>
    <updated>2024-02-29T01:57:06.463771+00:00</updated>
    <link href="https://delvingbitcoin.org/t/add-a-sighash-doube-flag/619/2" rel="alternate"/>
    <summary>The discussion revolves around the proposition of introducing a new SIGHASH flag, specifically SIGHASH_DOUBLE, to the Bitcoin protocol. This feature aims to allow for the signing of two outputs within a transaction, facilitating the creation of Partially Signed Bitcoin Transactions (PSBTs) that can be combined with others in a non-interactive manner. The concept draws inspiration from the existing SIGHASH_SINGLE, but extends its utility by encompassing both a payout and a change output.

To understand how transactions with the SIGHASH_DOUBLE flag would be verified, consider a transaction with four inputs and six outputs, configured with various SIGHASH flags. The verification process involves scanning all signature flags within the transaction to identify the presence of SIGHASH_DOUBLE. If found, the system counts two indices in the output index: one starting at zero and another commencing from the vin_count plus one. This method ensures that each SIGHASH_DOUBLE input is paired with its adjacent output, as well as with an additional output determined by the second index. This proposal suggests a straightforward approach to consensus on validating signatures for transactions employing the SIGHASH_DOUBLE flag.

Several considerations arise with this proposal, including the handling of inputs without corresponding outputs under the SIGHASH_DOUBLE flag and the compatibility of consolidating PSBTs with varying input-output ratios. A potential soft-fork implementation could extend the SIGHASH_NONE flag, allowing older nodes to skip validation, possibly leveraging methods introduced by taproot for extending signature validation.

Moreover, the SIGHASH_DOUBLE flag, when used in conjunction with ANYONECANPAY, presents an innovative use case. It allows for a mempool of single-spend PSBTs, aiming not at coin laundering but at reducing transaction overhead. This feature underscores a broader intent to enhance the flexibility and efficiency of transaction signing within the Bitcoin network. Feedback and further analysis from the community are sought to refine and assess the viability of this proposition.

For further details, reference the initial proposal and discussion at [Bitcoin Dev Mailing List](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-April/015862.html).</summary>
    <published>2024-02-29T00:19:03.927000+00:00</published>
  </entry>
</feed>
