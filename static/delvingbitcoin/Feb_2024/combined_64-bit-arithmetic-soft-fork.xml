<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - 64 bit arithmetic soft fork</title>
  <updated>2024-02-03T01:55:31.609685+00:00</updated>
  <author>
    <name>EthanHeilman 2024-02-02 18:46:32.187000+00:00</name>
  </author>
  <author>
    <name>dgpv 2024-02-02 16:50:27.200000+00:00</name>
  </author>
  <author>
    <name>dgpv 2024-02-02 05:25:46.309000+00:00</name>
  </author>
  <author>
    <name>EthanHeilman  . 2024-02-01 22:23:40.258000+00:00</name>
  </author>
  <author>
    <name>halseth  . 2024-01-23 20:36:15.253000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-23 16:23:25.319000+00:00</name>
  </author>
  <author>
    <name>dgpv  . 2024-01-20 14:36:06.211000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-20 13:16:16.585000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-20 12:57:31.799000+00:00</name>
  </author>
  <author>
    <name>dgpv  . 2024-01-20 05:01:16.940000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-19 21:27:03.245000+00:00</name>
  </author>
  <author>
    <name>Davidson  . 2024-01-17 22:31:06.270000+00:00</name>
  </author>
  <author>
    <name>jamesob  . 2024-01-16 17:43:34.637000+00:00</name>
  </author>
  <author>
    <name>ajtowns  . 2024-01-15 04:22:58.226000+00:00</name>
  </author>
  <author>
    <name>dgpv  . 2024-01-13 15:12:01.617000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-13 15:03:10.677000+00:00</name>
  </author>
  <author>
    <name>dgpv  . 2024-01-13 15:00:18.287000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-13 14:59:37.726000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-13 14:53:41.807000+00:00</name>
  </author>
  <author>
    <name>dgpv  . 2024-01-13 14:26:46.385000+00:00</name>
  </author>
  <author>
    <name>rustyrussell  . 2024-01-12 16:22:29.735000+00:00</name>
  </author>
  <author>
    <name>halseth  . 2024-01-12 13:20:15.414000+00:00</name>
  </author>
  <author>
    <name>ProofOfKeags  . 2024-01-11 21:01:22.448000+00:00</name>
  </author>
  <author>
    <name>moonsettler  . 2024-01-11 20:57:27.933000+00:00</name>
  </author>
  <author>
    <name>sipa  . 2024-01-11 20:40:26.242000+00:00</name>
  </author>
  <author>
    <name>ProofOfKeags  . 2024-01-11 17:55:35.883000+00:00</name>
  </author>
  <author>
    <name>ajtowns  . 2024-01-11 17:42:51.731000+00:00</name>
  </author>
  <author>
    <name>ajtowns  . 2024-01-11 17:39:55.430000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-11 17:19:48.085000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-11 17:19:08.767000+00:00</name>
  </author>
  <author>
    <name>ProofOfKeags  . 2024-01-11 16:46:12.669000+00:00</name>
  </author>
  <author>
    <name>sipa  . 2024-01-11 15:23:39.480000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-11 15:08:42.326000+00:00</name>
  </author>
  <author>
    <name>sipa  . 2024-01-11 14:54:55.887000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-11 14:24:52.280000+00:00</name>
  </author>
  <author>
    <name>sipa  . 2024-01-11 14:11:33.795000+00:00</name>
  </author>
  <author>
    <name>halseth  . 2024-01-11 14:07:42.305000+00:00</name>
  </author>
  <author>
    <name>moonsettler  . 2024-01-10 23:10:38.930000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-10 16:11:01.778000+00:00</name>
  </author>
  <link href="delvingbitcoin/Feb_2024/1449_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Feb_2024/1448_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Feb_2024/1423_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Feb_2024/1410_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1318_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1313_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1247_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1245_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1243_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1241_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1228_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1173_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1146_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1112_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1101_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1105_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1104_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1103_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1102_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1099_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1093_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1088_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1086_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1085_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1084_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1083_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1082_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1081_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1078_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1080_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1079_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1076_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1075_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1074_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1073_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1072_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1071_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1061_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1057_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - 64 bit arithmetic soft fork</title>
    <updated>2024-02-03T01:55:31.609972+00:00</updated>
    <link href="https://delvingbitcoin.org/t/64-bit-arithmetic-soft-fork/397/39" rel="alternate"/>
    <summary>The email discussions delve into technical aspects of Bitcoin scripting, focusing on the efficiency and functionality of arithmetic operations and encoding systems. The programmers acknowledge the elegance of variable-length integers in Bitcoin scripting but note the computational intensity of certain opcodes like HASH160 or CHECKSIG.

An implementation of Rusty Russell's idea to use only positive, variable-length integers is proposed by introducing new opcodes such as `FIXNUM`, `TOFIXNUM`, `FROMFIXNUM`, and `BYTEREV`. These would enable conversions between variable and fixed encodings and handle endianness. It is suggested to push both the result and overflow amount onto the stack during 64-bit additions to aid in managing larger numbers.

Memory consumption versus disk space in Bitcoin Script is a concern, especially with literals expanding in memory when pushed onto the stack. For numbers greater than 16, an 8-byte representation is required, keeping variable length encoding as the default. Additionally, integrating RISC-V emulation within Bitcoin Script could benefit script execution without full arithmetic support for another format, as demonstrated by [Eltrace](https://github.com/halseth/elftrace).

Transitioning to 8-byte encodings for `ScriptNums` is predicted to increase the blockchain size by about 1GB, or 0.17%. This impact and specific transaction examples are further explored through a JSON file and source code at [this GitHub repository](https://github.com/Christewart/bitcoin-s-core/tree/2024-01-19-count-scriptnums).

Rusty Russell's article, [Arithmetic Opcodes: What Could They Look Like?](https://rusty.ozlabs.org/2023/12/30/arithmetic-opcodes.html), proposes simplifying arithmetic opcodes by dealing with non-negative numbers and removing normalization from shift operations. The community debates whether to require existing opcodes to accept 8-byte inputs or add new ones for handling 64-bit numbers with conversion opcodes for compatibility.

There is ongoing discussion regarding `SCRIPT_VERIFY_MINIMAL_DATA` and its enforcement as a consensus rule, addressing misconceptions about opcode impacts on memory and disk space. Future soft fork proposals may simplify `interpreter.cpp` and eliminate `SCRIPT_VERIFY_MINIMALDATA`.

The recent debates reflect a push towards standardizing encodings and operation sets, aiming to simplify programming while considering the broader implications for users and developers. Proposals include transitioning to fixed-length 64-bit numbers and reactivating certain arithmetic operations with additional sigops costs for complex cryptographic operations.

Confusion around `CScriptNum` endianness has been clarified as little endian, with considerations of how encoding method and negative number handling affect script processing efficiency.

Discussions also cover the potential need for hard forks when modifying consensus rules like tapscript leaf versions and reconsideration of the `SCRIPT_VERIFY_MINIMALIF` flag within script verifications.

Programmers debate adding extra encoding for numbers in Script, the benefits of uniform encoding standards for covenant scripts, and the introduction of new opcodes for unsigned numbers and increased precision. Building upon `CScriptNum` for 64-bit arithmetic is preferred over new formats, citing compactness and feasibility.

The community is assessing the optimization of number encoding systems and the balance between innovation and existing protocols. Proposals aim to standardize operations by potentially phasing out specific arithmetic and comparison operations in favor of unified 64-bit versions. There is interest in extending the capabilities of existing opcodes through solutions like `OP_ENABLE64BIT` to conserve opcode namespace and maintain clarity without duplicating current opcodes.

In cryptocurrency programming, covenant opcodes that enable arithmetic on satoshi values are viewed positively for enhancing smart contract functionality. The adoption of 64-bit arithmetic across various programming applications is acknowledged as beneficial, particularly for detailed introspection in transaction hash operations and concatenation functions.

Finally, a Bitcoin Improvement Proposal (BIP) draft focused on 64-bit arithmetic is available for review at [BIP proposal link](https://github.com/Christewart/bips/pull/1), with an associated implementation at [implementation link](https://github.com/Christewart/bitcoin/pull/2). The author seeks early feedback, indicative of a proactive approach to collaboration before wider dissemination.</summary>
    <published>2024-02-02T18:46:32.187000+00:00</published>
  </entry>
</feed>
