<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Lightning Hardware Wallet</title>
  <updated>2024-02-16T01:55:57.011479+00:00</updated>
  <author>
    <name>edouard 2024-02-15 11:23:59.626000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Lightning Hardware Wallet</title>
    <updated>2024-02-16T01:55:57.011511+00:00</updated>
    <link href="https://delvingbitcoin.org/t/lightning-hardware-wallet/555/5" rel="alternate"/>
    <summary>The development and application of hardware wallets for Bitcoin's new layers have led to innovative advancements, notably through contributions by Salvatore Ingala and the Ledger engineering team. The introduction of [Vanadium](https://github.com/LedgerHQ/vanadium) marks a significant leap in how information, including states and policies, is managed within these devices. Utilizing Merkle Tree root commitments alongside hardware wallet signatures, Vanadium ensures that all critical data is stored on the client side, bolstering security and integrity.

Unlike the current approach in Bitcoin's ledger application, where miniscript descriptors are temporarily loaded into the device's memory from the client upon request, Vanadium adopts a more sophisticated strategy. It abstracts the computing processes into a RISC VM (Reduced Instruction Set Computing Virtual Machine), enabling the seamless operation of various applications directly utilizing the client's memory resources. This method not only enhances operational efficiency but also extends the capability of hardware wallets beyond traditional constraints.

The Rust programming language, particularly with its Lightning SDK, emerges as a powerful tool in this context. The continuous improvements in Rust tooling facilitate the development of applications that once compiled using RISC V architecture can run on any hardware wallet equipped with the Vanadium VM. This compatibility further benefits from the ability to incorporate Rust's standard library, effectively overcoming previous limitations related to memory usage. This advancement demonstrates a promising direction for the future of hardware wallets, highlighting the potential for broader application support and improved user experiences.</summary>
    <published>2024-02-15T11:23:59.626000+00:00</published>
  </entry>
</feed>
