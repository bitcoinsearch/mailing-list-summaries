<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>64 bit arithmetic soft fork</title>
  <updated>2024-02-03T01:52:14.230280+00:00</updated>
  <author>
    <name>EthanHeilman 2024-02-02 18:46:32.187000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>64 bit arithmetic soft fork</title>
    <updated>2024-02-03T01:52:14.230311+00:00</updated>
    <link href="https://delvingbitcoin.org/t/64-bit-arithmetic-soft-fork/397/39" rel="alternate"/>
    <summary>Variable-length numbers in programming can lead to elegant solutions, but concerns may arise about the computational costs associated with processing larger numbers, especially in the context of fee pricing for operations. It's noted that bigger numbers necessitate more computation than smaller ones; however, there are ways to streamline this process. For instance, large numbers can be efficiently placed on a stack with compact opcodes such as HASH256. Using 64-bit chunks is suggested as an effective method to account for the increased cost associated with operating on larger numbers, as it would require additional opcodes.

Upon reflection, the initial concern regarding the cost of operations seems less significant. In Bitcoin, allowing operations on very large numbers appears to be acceptable, since there are more efficient methods to utilize computational resources than arithmetic operations when aiming to reduce code fees. It's hypothesized that the computational burden of arithmetic operations on significantly large numbers, like those consisting of 520 bytes, is likely lower than the cost incurred by executing certain single-opcode instructions, including HASH160 or CHECKSIG. However, concrete performance data to support this claim is not provided. This suggests that the efficiency of arithmetic operations on large numbers might not substantially impact overall computational costs within certain programming environments.</summary>
    <published>2024-02-02T18:46:32.187000+00:00</published>
  </entry>
</feed>
