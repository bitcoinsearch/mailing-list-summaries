<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Lightning Hardware Wallet</title>
  <updated>2024-02-14T02:01:07.670828+00:00</updated>
  <author>
    <name>t-bast 2024-02-13 12:49:23.227000+00:00</name>
  </author>
  <author>
    <name>pgrange 2024-02-13 10:50:39.817000+00:00</name>
  </author>
  <link href="delvingbitcoin/Feb_2024/1530_Lightning-Hardware-Wallet.xml" rel="alternate"/>
  <link href="delvingbitcoin/Feb_2024/1529_Lightning-Hardware-Wallet.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Lightning Hardware Wallet</title>
    <updated>2024-02-14T02:01:07.670869+00:00</updated>
    <link href="https://delvingbitcoin.org/t/lightning-hardware-wallet/555/2" rel="alternate"/>
    <summary>The integration of hardware security into Lightning wallets represents a significant advancement in the realm of Bitcoin transactions, particularly for handling larger amounts of Bitcoin through the Lightning Network. The primary objective of this initiative is to develop a desktop and/or mobile Lightning wallet that communicates with a hardware device like Ledger to secure transaction keys. This approach is based on the premise that while Lightning wallets are generally used for smaller transactions, the growing adoption of Bitcoin necessitates a more secure method for managing larger sums. The project aims to validate the technical feasibility and user experience of combining a Lightning wallet with a hardware wallet, leveraging the source code from the [Phoenix](https://github.com/ACINQ/phoenix) project and the capabilities of Ledger devices.

One of the unique challenges addressed by this project involves the operational complexity of executing payments through Lightning wallets. Typically, these wallets select multiple candidate payment paths and attempt them sequentially until success. However, incorporating hardware security means that each payment path attempt would require cryptographic validation by the user via the hardware device, potentially complicating the process. Additionally, receiving payments introduces its own set of challenges, including delays due to the need for user authorization prior to completion, thus affecting the overall network payment processing time. The project also anticipates difficulties with multi-path payments, as splitting a single payment into several smaller ones could necessitate multiple validations for each sub-payment.

Despite these hurdles, the project distinguishes itself from existing solutions by focusing on securing larger transactions through hardware validation, contrary to other offerings that may prioritize convenience over security. For instance, Bitbox's approach to Lightning payments does not include hardware signing for Lightning transactions, opting instead for a balance between security and ease of use suitable for smaller amounts. Similarly, Electrum's lightning implementation allows channel openings and closings through hardware-secured wallets but reverts to less secure methods for in-channel operations. This project seeks to explore and address the technical and user experience challenges inherent in integrating hardware security without unduly compromising convenience.

The call for feedback on this open-source project targets Bitcoin holders who prefer self-custody and are interested in enhancing the security of their Layer 2 transactions. This initiative not only reflects the developer's personal interest but also resonates with a broader audience concerned about the current limitations of Lightning wallets in terms of security for larger transactions. While acknowledging other existing issues within the Lightning Network, such as liquidity constraints, this project specifically focuses on improving security aspects to make users feel more confident and in control of their transactions.</summary>
    <published>2024-02-13T12:49:23.227000+00:00</published>
  </entry>
</feed>
