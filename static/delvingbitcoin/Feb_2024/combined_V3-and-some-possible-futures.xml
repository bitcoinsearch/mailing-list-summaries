<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - V3 and some possible futures</title>
  <updated>2024-02-09T02:09:57.245337+00:00</updated>
  <author>
    <name>instagibbs 2024-02-08 14:18:46.962000+00:00</name>
  </author>
  <author>
    <name>glozow  . 2024-02-07 17:16:12.397000+00:00</name>
  </author>
  <author>
    <name>instagibbs  . 2024-02-06 18:11:07.655000+00:00</name>
  </author>
  <link href="delvingbitcoin/Feb_2024/1487_V3-and-some-possible-futures.xml" rel="alternate"/>
  <link href="delvingbitcoin/Feb_2024/1475_V3-and-some-possible-futures.xml" rel="alternate"/>
  <link href="delvingbitcoin/Feb_2024/1467_V3-and-some-possible-futures.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - V3 and some possible futures</title>
    <updated>2024-02-09T02:09:57.245388+00:00</updated>
    <link href="https://delvingbitcoin.org/t/v3-and-some-possible-futures/523/3" rel="alternate"/>
    <summary>The evolution of programming frameworks has been an ongoing process with significant attention given to enhancing system topology constraints and transactional policies. The transition from earlier versions such as 3.1 to more recent iterations like 4.1c has allowed for increased complexity within the systems without compromising on performance. However, there remain challenges such as the handling of sibling eviction in version 3.1, which is particularly problematic when dealing with configurations that include more than two clusters.

The framework's design continues to evolve with a focus on improving transaction policies to accommodate new mempool configurations post-cluster mempool implementation. The aim is to make these policies more flexible, incentive-compatible, and useful while also ensuring backward compatibility. The current V3 policy has its limitations, only allowing one parent and one child transaction with strict size limits, thus reducing pinning possibilities. Despite being operational today without needing a cluster mempool, issues persist, including limited support for batched CPFP and larger transaction chains, as well as complications with ANYONCANPAY transactions.

The proposed V3.0.5 aims to address some of these concerns by introducing relaxed child size restrictions and requiring child transactions to fall within the "top block" fee range. This change would simplify CPFP size requirements and maintain sibling eviction simplicity, albeit at the risk of increasing vulnerability to goldfinger attacks. V3.1 goes further in reducing topology constraints, offering wallet systems more integration flexibility with new policies and providing strategies for fee bumping that are less aggressive.

Subsequent versions under the V4 series introduce different policy changes. V4a lifts topological restrictions apart from a lower vbyte limit, allows for ANYONCANPAY transactions, and improves single transaction replace-by-fee (RBF) resistance to pinning. V4b retains these features but raises issues regarding the propagation of normal transactions not meeting the "top block" criteria. V4c considers a hybrid approach, potentially allowing non-top block transactions in specific scenarios to balance pin risk against user experience.

The deployment of these versions is not mandated to follow a strict order beyond implementing a cluster mempool. Diagrams indicating possible progressions from V3 to other versions suggest that with certain future policies, sibling eviction might become obsolete. Ultimately, the goal of the evolving policies is to utilize the cluster mempool's capabilities effectively, enabling more flexible transaction structures and better-aligned incentives, thereby creating a transaction policy framework capable of adapting to the changing dynamics of mempool landscapes.</summary>
    <published>2024-02-08T14:18:46.962000+00:00</published>
  </entry>
</feed>
