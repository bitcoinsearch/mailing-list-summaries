<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Lightning Hardware Wallet</title>
  <updated>2024-02-15T01:55:33.866116+00:00</updated>
  <author>
    <name>t-bast 2024-02-14 14:57:01.333000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Lightning Hardware Wallet</title>
    <updated>2024-02-15T01:55:33.866144+00:00</updated>
    <link href="https://delvingbitcoin.org/t/lightning-hardware-wallet/555/4" rel="alternate"/>
    <summary>The discussion begins with the concern about handling payment technical processes, especially in scenarios where complications arise due to hardware device issues, akin to situations when a user's phone is off during a payment reception. The current approach by the Lightning Service Provider (LSP) involves attempting to wake the user's device and, failing that after a set timeout, results in the failure of the Hash Time Locked Contract (HTLC). The suggestion made for addressing hardware device complications involves holding the HTLC for a significantly longer duration than currently practiced to prevent automatic failures. However, this approach faces challenges as it keeps the HTLC pending across all nodes in the payment path and is further constrained by the HTLC expiry delta, typically ranging between 24 and 144 blocks.

The potential solution to these challenges lies in the adoption of asynchronous payments, as discussed in an article on the Linux Foundation's mailing list ([link](https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-October/003307.html)). This method is posited as being more compatible with the described use-case by allowing for more flexible handling of payment timings.

Moreover, the conversation touches upon the current practice of involving users actively in the Lightning payment process, particularly noting how payers and recipients often coordinate to share and pay invoices immediately. Questions are raised regarding the security improvements and practicality of requiring users to validate transactions on their hardware devices, particularly when the information may not be easily comprehensible. It emphasizes the necessity for a ledger application capable of translating the technical details of what is being signed (e.g., commitment and HTLC transactions) into understandable terms for the user. This includes informing the user about the specifics of the transactions, such as the amount of satoshis sent and received for particular payment hashes. Converting the complex technicalities of force-close events into user-friendly information also presents a significant challenge, highlighting the need for comprehensive design and communication strategies to ensure users can effectively authorize and understand the transactions they are involved in.</summary>
    <published>2024-02-14T14:57:01.333000+00:00</published>
  </entry>
</feed>
