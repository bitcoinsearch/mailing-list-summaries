<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>64 bit arithmetic soft fork</title>
  <updated>2024-02-28T01:57:57.291531+00:00</updated>
  <author>
    <name>halseth 2024-02-27 14:12:41.868000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>64 bit arithmetic soft fork</title>
    <updated>2024-02-28T01:57:57.291558+00:00</updated>
    <link href="https://delvingbitcoin.org/t/64-bit-arithmetic-soft-fork/397/45" rel="alternate"/>
    <summary>In discussing the modification of the `IN_OUT` opcode to accommodate a 64-bit `ScriptNum` type encoding rather than the little-endian (LE) variant, it's highlighted that the transition would not be significantly complex. The core adjustment involves pushing a `ScriptNum` encoded integer onto the stack, as exemplified in the provided code snippet. This method utilizes the `CScriptNum` constructor to encode the funding amount before appending it to the stack with the `stack.push_back(bn.getvch());` function call. This approach underlines a straightforward adaptation process for the opcode, focusing on efficiently managing numeric data types within the scripting environment.</summary>
    <published>2024-02-27T14:12:41.868000+00:00</published>
  </entry>
</feed>
