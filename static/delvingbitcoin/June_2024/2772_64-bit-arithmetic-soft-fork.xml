<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>64 bit arithmetic soft fork</title>
  <updated>2024-06-21T02:00:54.317558+00:00</updated>
  <author>
    <name>ajtowns 2024-06-20 16:25:30.164000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>64 bit arithmetic soft fork</title>
    <updated>2024-06-21T02:00:54.317597+00:00</updated>
    <link href="https://delvingbitcoin.org/t/64-bit-arithmetic-soft-fork/397/53" rel="alternate"/>
    <summary>Implementing an alternative to `__int128_t` for certain computational functions could be approached by considering the use of a combination of `uint64_t absval; bool negated;`. This method would involve manual checks to ensure values do not exceed their intended bounds, thereby potentially offering a more controlled environment for handling large numbers. Alternatively, adopting a big number class, similar to `arith_uint256`, presents itself as another viable option. This approach would encapsulate the complexities of managing large numerical values within a class structure, providing a more straightforward interface for operations requiring extended numeric ranges beyond standard data types. 

Exploring these options highlights the ongoing quest for efficiency and accuracy in computational processes, especially in areas such as cryptography where precision and the ability to handle large numbers are paramount. The conditional use of `__int128_t` within `crypto/muhash.h` serves as a reference point for this discussion, suggesting that while existing implementations may rely on this data type, there is room for innovation and improvement through alternative methods. The proposition of using a dual-component system comprising an absolute value and a negation flag, or shifting towards a dedicated big number class, reflects a thoughtful consideration of both performance implications and the practicalities of software development.</summary>
    <published>2024-06-20T16:25:30.164000+00:00</published>
  </entry>
</feed>
