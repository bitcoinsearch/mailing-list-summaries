<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP324 Proxy: easy integration of v2 transport protocol for light clients (PoC)</title>
  <updated>2024-06-04T02:03:14.650401+00:00</updated>
  <author>
    <name>theStack 2024-06-03 18:01:35.559000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP324 Proxy: easy integration of v2 transport protocol for light clients (PoC)</title>
    <updated>2024-06-04T02:03:14.650460+00:00</updated>
    <link href="https://delvingbitcoin.org/t/bip324-proxy-easy-integration-of-v2-transport-protocol-for-light-clients-poc/678/15" rel="alternate"/>
    <summary>The discussion revolves around the implementation of bip324-proxy in a new programming language, with particular interest in the Go language's ecosystem regarding its cryptographic primitives. There is curiosity about whether Go has suitable secp256k1 bindings necessary for EllSwift pubkey encoding. It is noted that the btcd library, a project by [decred](https://github.com/btcsuite/btcd/blob/de4182589bfe0d1e2a6b45348ce283e7035b5d3d/btcec/btcec.goL22-L24), employs a custom secp256k1 library. However, questions are raised about the library's currency, performance, and quality.

Another significant point of discussion is the concept of static configuration for light clients as opposed to patching them. This method avoids modifying the light client directly, which is advantageous. Nonetheless, concerns are expressed regarding this approach. One issue is whether light clients can handle adding multiple peers with the same IP address but different ports, given that proposed patches for light clients work at the socket level, making the proxy use transparent to the client's higher-level logic. Another question is how users would identify which remote peers to configure, considering the variance in peer requirements across different light clients. Despite these challenges, there's an acknowledgment of the value in experimenting with this idea.</summary>
    <published>2024-06-03T18:01:35.559000+00:00</published>
  </entry>
</feed>
