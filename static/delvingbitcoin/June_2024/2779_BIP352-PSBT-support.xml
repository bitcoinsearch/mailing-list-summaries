<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP352: PSBT support</title>
  <updated>2024-06-23T02:05:42.837631+00:00</updated>
  <author>
    <name>andrewtoth 2024-06-22 14:51:45.345000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP352: PSBT support</title>
    <updated>2024-06-23T02:05:42.837663+00:00</updated>
    <link href="https://delvingbitcoin.org/t/bip352-psbt-support/877/28" rel="alternate"/>
    <summary>The discussion revolves around a technical aspect of handling group proofs in programming, specifically when these proofs are duplicated across each input within a group. This approach ensures protection against the reordering of inputs, which is essential for maintaining the integrity of data sequences in programming constructs. However, this method does not safeguard against the potential issue where a constructor might substitute an input with another. Such an action would invalidate the proof attached to that particular input, leading to failures during the verification process. The challenge here lies in the fact that, to prevent such occurrences, one would have to restrict any modifications to the inputs once shares and proofs have been appended and before the final signing process. This constraint, however, poses a dilemma as it may not align with the desired flexibility in handling inputs within programming frameworks.</summary>
    <published>2024-06-22T14:51:45.345000+00:00</published>
  </entry>
</feed>
