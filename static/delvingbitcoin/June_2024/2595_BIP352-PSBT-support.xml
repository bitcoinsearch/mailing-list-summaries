<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP352: PSBT support</title>
  <updated>2024-06-03T02:05:08.479246+00:00</updated>
  <author>
    <name>andrewtoth 2024-06-02 01:44:13.210000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP352: PSBT support</title>
    <updated>2024-06-03T02:05:08.479281+00:00</updated>
    <link href="https://delvingbitcoin.org/t/bip352-psbt-support/877/10" rel="alternate"/>
    <summary>In the exploration of enhancing security within elliptic curve Diffie-Hellman (ECDH) transactions, particularly concerning silent payment codes, it's highlighted that there is a necessity for specific cryptographic proofs. These proofs are essential to establish that the secret key used in generating the ECDH share is consistent across different computations. Specifically, the focus is on proving that the same secret key that creates the ECDH share for \(a \cdot B_{scan}\) is utilized for \(a \cdot G = A\), ensuring integrity and trust in the transaction process.

Moreover, the discussion brings up an interesting point about the variability of the ECDH share, \(a \cdot B_{scan}\), in scenarios involving silent payment codes. It's noted that since each output associated with a silent payment code potentially has a distinct \(B_{scan}\), this introduces complexity into the system. The key takeaway is the realization that for each silent payment code, which corresponds to each output, a unique proof must be computed and attached. This requirement implies that in a situation where each input is signed by a unique signer and each output is associated with a unique \(B_{scan}\), the system could necessitate a substantial number of proofs, scaling as input multiplied by output in the worst-case scenario. This insight underscores the challenges and considerations in designing secure and efficient cryptographic protocols for silent payment systems.</summary>
    <published>2024-06-02T01:44:13.210000+00:00</published>
  </entry>
</feed>
