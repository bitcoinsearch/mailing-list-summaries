<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP352: PSBT support</title>
  <updated>2024-06-15T02:01:20.647586+00:00</updated>
  <author>
    <name>andrewtoth 2024-06-14 19:24:15.806000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP352: PSBT support</title>
    <updated>2024-06-15T02:01:20.647621+00:00</updated>
    <link href="https://delvingbitcoin.org/t/bip352-psbt-support/877/16" rel="alternate"/>
    <summary>In the discussion of cryptographic protocols, particularly in the context of Bitcoin transactions, the combination of SIGHASH_ALL with ANYONECANPAY presents a nuanced scenario. Normally, transactions signed with SIGHASH_ALL indicate that all inputs and outputs are finalized, meaning no alterations can be made to the transaction without invalidating the signature. However, when a transaction is signed using BOTH SIGHASH_ALL and ANYONECANPAY, an interesting situation arises. The ANYONECANPAY flag allows for the addition of new inputs to the transaction even after it has been initially signed. 

This flexibility could potentially lead to security vulnerabilities. Specifically, if a new input is added by a party not fully aware of the transaction's original intent, this could inadvertently modify what was supposed to be a locked-in aspect of the transaction - such as a shared secret - thereby invalidating previously agreed upon outputs. This issue underscores the importance of fully understanding the implications of combining these two flags in transaction signatures, especially for developers working on Bitcoin or similar blockchain technologies where transaction malleability and integrity are of utmost concern.</summary>
    <published>2024-06-14T19:24:15.806000+00:00</published>
  </entry>
</feed>
