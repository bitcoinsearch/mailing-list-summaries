<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>bLIP: BOLT 11 Invoice Blinded Path Tagged Field</title>
  <updated>2024-06-28T02:03:08.554706+00:00</updated>
  <author>
    <name>t-bast 2024-06-27 07:06:39.378000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>bLIP: BOLT 11 Invoice Blinded Path Tagged Field</title>
    <updated>2024-06-28T02:03:08.554736+00:00</updated>
    <link href="https://delvingbitcoin.org/t/blip-bolt-11-invoice-blinded-path-tagged-field/991/5" rel="alternate"/>
    <summary>The current discourse around the implementation and exposure of BOLT12 invoices versus adding blinded paths to BOLT11 invoices reveals a preference within the community. The inclination towards exposing BOLT12 invoices stems from considerations of code simplicity and reduced specification work. It presents an easier path than integrating blinded paths into the existing BOLT11 framework. The error handling benefits of using BOLT12 invoices are acknowledged; however, there is skepticism about its effectiveness in encouraging user-driven demand for wallet updates. This skepticism is rooted in concerns over user experience, particularly the scenario where users are confronted with error messages upon scanning incompatible QR codes, which might not sufficiently motivate them to seek enhancements from wallet developers.

On the other hand, the potential of blinded paths, especially in the context of sub-swap services like the L402 protocol or similar offerings, is highlighted. Blinded paths offer significant advantages for these services, such as enabling the receiver to influence the routing of transactions to optimize for lower fees or reliability. Despite these benefits, there's an underlying belief that retrofitting blinded paths onto BOLT11 invoices would ultimately be counterproductive. The argument posits that such short-term fixes lead to higher long-term maintenance costs and complexity, suggesting a more holistic adoption of offers (as facilitated by BOLT12) could provide a cleaner solution. This perspective underscores a broader preference for forward-looking solutions that address underlying structural needs rather than temporary workarounds.

For further details, the discussion can be found in the GitHub pull request comments [here](https://github.com/ACINQ/eclair/pull/2843discussion_r1544662941), which provide insights into the evolving viewpoints on this technical matter.</summary>
    <published>2024-06-27T07:06:39.378000+00:00</published>
  </entry>
</feed>
