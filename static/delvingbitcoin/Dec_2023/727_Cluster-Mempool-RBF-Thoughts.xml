<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Cluster Mempool RBF Thoughts</title>
  <updated>2023-12-29T18:54:30.608652+00:00</updated>
  <author>
    <name>instagibbs 2023-12-13 16:10:42.425000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Cluster Mempool RBF Thoughts</title>
    <updated>2023-12-29T18:54:30.608652+00:00</updated>
    <link href="https://delvingbitcoin.org/t/cluster-mempool-rbf-thoughts/156/25" rel="alternate"/>
    <summary>The third issue discussed revolves around the challenges faced when implementing a new cluster mempool system, particularly concerning transaction packages and Replace-by-Fee (RBF) attempts. In scenarios where a transaction package is composed of two transactions—A and B—the feerate diagram might initially appear to be satisfactory. However, complications arise if transaction A is already present in a peer's mempool. When transaction B attempts an RBF, and its validity is assessed based on the feerate diagram rules, it may fail because the peer's starting diagram includes transaction A. This situation points towards a nuanced form of "parent pays for child RBF," where the presence of a parent transaction influences the success of its child's RBF attempt.

Moreover, the approach of evaluating transactions per chunk has its own implications. While it offers some leeway for "parent pays for child RBF," it also leads to a discrepancy between the processing of individual child-pays-for-parent (CPFP) chains and the simultaneous broadcast of entire transaction packages. As developers consider integrating solutions akin to proposal 26711, they are confronted with the trade-off between reducing this asymmetry and the added complexity that such solutions introduce. Furthermore, these complex solutions do not always address the issue of chunk processing, highlighting the ongoing challenges in refining the cluster mempool system for efficient transaction relaying.</summary>
    <published>2023-12-13T16:10:42.425000+00:00</published>
  </entry>
</feed>
