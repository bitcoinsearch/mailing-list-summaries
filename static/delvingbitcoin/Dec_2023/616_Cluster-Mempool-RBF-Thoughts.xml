<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Cluster Mempool RBF Thoughts</title>
  <updated>2023-12-29T19:02:25.630990+00:00</updated>
  <author>
    <name>sdaftuar 2023-12-05 14:05:54.908000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Cluster Mempool RBF Thoughts</title>
    <updated>2023-12-29T19:02:25.630990+00:00</updated>
    <link href="https://delvingbitcoin.org/t/cluster-mempool-rbf-thoughts/156/7" rel="alternate"/>
    <summary>In the development of a feerate diagram comparison for Replace-by-Fee (RBF) implementations, we are examining the impact of constant factors on performance. A significant consideration is the number of clusters with which a single transaction can conflict; this determines the volume of chunks in the feerate diagram. Theoretically, the upper bound for chunk count is the product of the number of clusters and the number of transactions in each cluster. When we consider allowing a transaction to conflict with up to 100 transactions within the memory pool and each cluster containing as many as 100 transactions, this results in a potential 10,000 chunks for iteration during feerate diagram comparisons.

This figure raises concerns about efficiency, suggesting that such a process may be slow. Previously, there was a discussion around removing the limit on the number of conflicts and instead focusing on the number of clusters requiring relinearization. However, with the introduction of new validation logic, the feasibility of this approach is now in question. The challenge lies in identifying strategies to reduce the number of chunks that need to be considered without compromising the integrity of the feerate comparison test. This would require a more efficient method to handle the complexity arising from multiple potential transaction conflicts within the network's mempool.</summary>
    <published>2023-12-05T14:05:54.908000+00:00</published>
  </entry>
</feed>
