<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>How to linearize your cluster</title>
  <updated>2023-12-22T19:17:57.435947+00:00</updated>
  <author>
    <name>sipa 2023-12-20 03:59:33.881000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>How to linearize your cluster</title>
    <updated>2023-12-22T19:17:57.435947+00:00</updated>
    <link href="https://delvingbitcoin.org/t/how-to-linearize-your-cluster/303" rel="alternate"/>
    <summary>Optimizing transaction clusters in cryptocurrency networks is essential for effectively processing transactions, particularly with larger clusters. Efficient linearization algorithms sort transactions by fee rates while adhering to topological order, and they may employ post-processing to enhance results. Identifying high-fee-rate subsets is complex; although simple methods exist, more advanced techniques are beneficial for smaller, more common clusters.

Advanced linearization strategies address connected components within a cluster, optimizing the process by handling separable groups individually. Bottleneck splitting targets transactions central to the cluster's structure, enabling the remainder to be processed piecemeal. The crux of linearization lies in finding the highest-feerate subsets, an NP-hard problem that iterative search approaches aim to solve by evaluating potential subsets and refining them through branching paths.

Efficiency is further improved by bounding the evaluation of subsets with conservative upper bounds on their quality and using the 'jump ahead' technique to expedite the inclusion of certain transactions based on their ancestry. This method aims to maximize feerate, considering included, excluded, and undecided transactions. To streamline the algorithm, transactions are chosen for their individual feerate or their impact on reducing the search space, and work items are processed using a Last-In-First-Out stack approach.

Caching strategies minimize recalculations, and early comparisons between the potential set's feerate and the current best subset prevent unnecessary computations. Initializing the algorithm with the best ancestor set ensures at least equal performance compared to simpler linearization methods and informs further optimizations.

The [current implementation](https://github.com/sipa/bitcoin/blob/wip_memepool_fuzz/src/cluster_linearize.h) of this sophisticated selection algorithm diverges slightly from its theoretical basis by not implementing connected-component splitting universally but still benefits from the proposed ideas, such as managing work items across multiple LIFO stacks and strategically selecting transactions to minimize search space.</summary>
    <published>2023-12-20T03:59:33.881000+00:00</published>
  </entry>
</feed>
