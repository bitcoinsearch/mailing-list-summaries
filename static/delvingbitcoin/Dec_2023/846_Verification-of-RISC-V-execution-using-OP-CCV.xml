<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Verification of RISC-V execution using OP_CCV</title>
  <updated>2023-12-22T19:21:14.651015+00:00</updated>
  <author>
    <name>halseth 2023-12-21 13:59:05.005000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Verification of RISC-V execution using OP_CCV</title>
    <updated>2023-12-22T19:21:14.651015+00:00</updated>
    <link href="https://delvingbitcoin.org/t/verification-of-risc-v-execution-using-op-ccv/313" rel="alternate"/>
    <summary>A new proof of concept tool has been introduced which allows for the tracing of RISCV-32 binaries' execution and generates Bitcoin script for on-chain verification. This innovative tool, available at [Bitcoin Elftrace](https://github.com/halseth/elftrace), utilizes the OP_CHECKCONTRACTVERIFY (OP_CCV) covenant opcode as outlined in the MATT proposal found [here](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021182.html). The tool's mechanism commits to a single 32-bit hash—specifically, a merkle root—in the output of a transaction. When this transaction is spent, the spender modifies this root based on certain rules and commits the updated root in a new output. Essentially, all that is needed is a covenant opcode capable of enforcing the inclusion of a dynamic data element in the output, alongside a static taptree; capabilities that are provided by OP_CCV. Although OP_CCV serves this function effectively, it is suggested that other covenant proposals might also be suitable for similar purposes. The tool's creator welcomes feedback on this development, and a concise overview can be found via a Twitter post: https://twitter.com/johanth/status/1737778712987287990.</summary>
    <published>2023-12-21T13:59:05.005000+00:00</published>
  </entry>
</feed>
