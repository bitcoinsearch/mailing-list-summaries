<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Lamport signatures and other CAT tricks</title>
  <updated>2023-12-30T10:35:36.216089+00:00</updated>
  <author>
    <name>moonsettler 2023-12-05 15:06:11.870000+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-12-05 12:33:44.469000+00:00</name>
  </author>
  <author>
    <name>moonsettler 2023-12-03 15:52:18.925000+00:00</name>
  </author>
  <author>
    <name>moonsettler 2023-12-03 15:24:03.158000+00:00</name>
  </author>
  <author>
    <name>sipa 2023-12-03 15:09:21.396000+00:00</name>
  </author>
  <author>
    <name>moonsettler 2023-12-03 14:55:34.004000+00:00</name>
  </author>
  <author>
    <name>ajtowns 2023-12-03 12:14:11.259000+00:00</name>
  </author>
  <author>
    <name>moonsettler 2023-12-03 10:33:10.074000+00:00</name>
  </author>
  <author>
    <name>ajtowns 2023-12-03 07:39:02.642000+00:00</name>
  </author>
  <author>
    <name>moonsettler 2023-12-03 00:47:43.909000+00:00</name>
  </author>
  <link href="delvingbitcoin/Dec_2023/619_Lamport-signatures-and-other-CAT-tricks.xml" rel="alternate"/>
  <link href="delvingbitcoin/Dec_2023/615_Lamport-signatures-and-other-CAT-tricks.xml" rel="alternate"/>
  <link href="delvingbitcoin/Dec_2023/554_Lamport-signatures-and-other-CAT-tricks.xml" rel="alternate"/>
  <link href="delvingbitcoin/Dec_2023/553_Lamport-signatures-and-other-CAT-tricks.xml" rel="alternate"/>
  <link href="delvingbitcoin/Dec_2023/552_Lamport-signatures-and-other-CAT-tricks.xml" rel="alternate"/>
  <link href="delvingbitcoin/Dec_2023/551_Lamport-signatures-and-other-CAT-tricks.xml" rel="alternate"/>
  <link href="delvingbitcoin/Dec_2023/550_Lamport-signatures-and-other-CAT-tricks.xml" rel="alternate"/>
  <link href="delvingbitcoin/Dec_2023/549_Lamport-signatures-and-other-CAT-tricks.xml" rel="alternate"/>
  <link href="delvingbitcoin/Dec_2023/548_Lamport-signatures-and-other-CAT-tricks.xml" rel="alternate"/>
  <link href="delvingbitcoin/Dec_2023/546_Lamport-signatures-and-other-CAT-tricks.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Lamport signatures and other CAT tricks</title>
    <updated>2023-12-30T10:35:36.216089+00:00</updated>
    <link href="https://delvingbitcoin.org/t/lamport-signatures-and-other-cat-tricks/236/10" rel="alternate"/>
    <summary>Programmers are discussing improvements to Bitcoin's scripting capabilities to address quantum computing threats and enhance script flexibility. There is a proposal for a new script variant, P2XSH, which would integrate features of tapscript. This includes enabling previously disabled opcodes like `OP_CAT` for creating quantum-resistant scripts.

A soft fork is considered to redefine `OP_NOP` into `OP_SUCCESS` within the P2XSH encoding, using `OP_HASH256` instead of `OP_HASH160`, following a `0xC0` version as seen in tapleaf structures. The focus is on ensuring script executions avoid quantum vulnerabilities.

The security of key path spends, which use BIP340 signatures, is debated. To guard against quantum attacks, disabling key path spends is proposed, leaving script path spends that rely on SHA256's preimage resistance. An alternative measure discussed is to optionally disable key path spends but this poses risks as adversaries might exploit discrete logarithm vulnerabilities.

Another suggestion seeks feedback on prohibiting the use of the generator point G as an internal pubkey in taproot outputs, opting instead for quantum-resistant script-only P2TR outputs or specific NUMS points.

Efficiency in script operations is also explored, specifically through the potential use of `DIVMOD` to optimize Merkle tree navigation and a contract structure designed to handle a significant amount of signature data efficiently. Advice is sought to refine this process with the aim of future-proofing against script limitations or enhancements.

Moreover, there is a detailed description of a cryptographic verification process involving an 18-step and then a 19-step cycle, which is part of a larger merkle verification procedure. This involves manipulating two separate stacks with conditional swaps, concatenations, and hash160 computations. The user generates a private key via BIP-32 technology, leading to a deterministic "root hash" that acts as a public key.

Post-contract execution requires transaction introspection to affirm conformity with the expected sighash, which should remain on top of the stack as the final output of the contract operations. These efforts collectively aim to prepare Bitcoin for quantum advancements while improving security and script versatility.</summary>
    <published>2023-12-05T15:06:11.870000+00:00</published>
  </entry>
</feed>
