<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Exploding Keys - Covenant construction</title>
  <updated>2024-05-01T01:59:35.807171+00:00</updated>
  <author>
    <name>ajtowns 2024-04-30 02:28:23.087000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Exploding Keys - Covenant construction</title>
    <updated>2024-05-01T01:59:35.807210+00:00</updated>
    <link href="https://delvingbitcoin.org/t/exploding-keys-covenant-construction/832/2" rel="alternate"/>
    <summary>The discussion revolves around the concept of a cryptographic mechanism that involves private key holders, labeled as A, B, and C, having the capability to collaboratively sign off on transactions using what is referred to as an "explodable key." This mechanism allows these key holders to transfer the key under certain conditions. However, the effectiveness of such a setup is questioned due to the lack of a timeout enforcement mechanism for the exploding path, which significantly reduces its utility in adversarial scenarios. In situations where there is no opposition, the direct use of the key path for transactions is preferred, bypassing the need for an intermediate exploding transaction, especially when transaction fees are low.

The proposed solution aims to enhance the design by incorporating a commitment mechanism that binds the action of the key holders to specific transaction parameters such as `nLockTime`, `nSequence`, and `annex`. These parameters are derived from the conditions of the exploding spend. The modification suggests that the private key holders have a finite window, determined by the locktime and sequence number, to execute a key path spend collaboratively. Failing to do so within this timeframe results in the execution of the exploding transaction, essentially returning the funds to the participants.

This approach introduces the possibility of creating a one-time payment pool, enabling a more flexible handling of transactions among participants. Nonetheless, it also highlights a limitation in achieving a dual-path transaction model that includes both an exploding spend path and a script spend path simultaneously. The necessity to disclose the script (or its hash) in the exploding path undermines the potential benefits of having a separate script path, suggesting that in practice, choosing one path over the other might be more pragmatic than attempting to maintain both.</summary>
    <published>2024-04-30T02:28:23.087000+00:00</published>
  </entry>
</feed>
