<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Second Look at Weak Blocks</title>
  <updated>2024-04-20T01:55:04.361193+00:00</updated>
  <author>
    <name>ajtowns 2024-04-19 12:39:23.818000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Second Look at Weak Blocks</title>
    <updated>2024-04-20T01:55:04.361228+00:00</updated>
    <link href="https://delvingbitcoin.org/t/second-look-at-weak-blocks/805/10" rel="alternate"/>
    <summary>The proposal aims to enhance the efficiency of block relay in blockchain networks, especially when there are discrepancies between the mempool policies of nodes and miners. Traditionally, the process of reconstructing a block locally after receiving a `cmpctblock` message is slowed down by the necessity of round-trips. These round-trips are required to request transactions that were either not included in a node's mempool due to policy restrictions or had expired from the mempool and were not present in the extra transactions cache.

To address this inefficiency, the suggestion is for miners to also send weak blocks that they find. The rationale behind this approach is that transactions missing from a recent block due to mempool policy are likely to be included in a recent weak block. This would significantly reduce the need for round-trips by allowing nodes to request missing transactions directly from these weak blocks, thus expediting the entire block reconstruction process.

This method not only speeds up the time it takes for a node to reconstruct a block upon hearing about it but also benefits the network at large. By enabling quicker block relay, nodes can disseminate blocks to their peers more rapidly. This improvement in block relay efficiency could lead to enhanced overall performance and reduced latency in the transmission of blocks across the network.</summary>
    <published>2024-04-19T12:39:23.818000+00:00</published>
  </entry>
</feed>
