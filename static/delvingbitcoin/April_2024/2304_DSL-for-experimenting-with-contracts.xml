<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>DSL for experimenting with contracts</title>
  <updated>2024-04-24T01:55:30.042629+00:00</updated>
  <author>
    <name>jungly 2024-04-23 13:53:27.996000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>DSL for experimenting with contracts</title>
    <updated>2024-04-24T01:55:30.042660+00:00</updated>
    <link href="https://delvingbitcoin.org/t/dsl-for-experimenting-with-contracts/748/15" rel="alternate"/>
    <summary>The Domain Specific Language (DSL) for Bitcoin scripting has seen significant updates, including support for taproot outputs. This enhancement allows for the creation and spending of taproot outputs, marking a step forward in the functionality offered by the DSL. Alongside this, the release of a new version has been announced, notable for its reduced docker image size and fixes to several bugs affecting notebooks. This update is accessible through the provided [release link](https://github.com/pool2win/bitcoin-dsl/pkgs/container/bitcoin-dsl).

Further improvements include the ability to reorganize the blockchain to a specific height, block hash, or to a point that unconfirms a particular transaction. This feature is critical for testing and development purposes, allowing users more flexibility and control over the blockchain state for their experimental setups. Instructions for performing such reorganizations are detailed, emphasizing commands like `reorg_chain` with parameters for height, blockhash, or unconfirming transactions.

Issues with broken links in the documentation have been addressed, ensuring that users have uninterrupted access to necessary resources and guides. The documentation now includes a new section dedicated to taproot transactions, providing examples and explanations on how to utilize object notation for specifying taproot outputs and script signatures. This addition is particularly beneficial for developers looking to implement or understand taproot transactions within their projects.

An example included in the update showcases the process of generating and spending taproot outputs on a regtest network. Creating a taproot output involves specifying the transaction inputs and outputs, including the internal key and leaves for the taproot, and broadcasting the transaction. Similarly, spending a taproot output is demonstrated through another code snippet, outlining the necessary steps to specify the input from the taproot output transaction and how to broadcast the spend. This practical illustration serves as a valuable guide for developers interested in working with taproot transactions, providing clear examples of the syntax and structure required.</summary>
    <published>2024-04-23T13:53:27.996000+00:00</published>
  </entry>
</feed>
