<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[WITHDRAWN] Alternate script design for LNHANCE-Symmetry</title>
  <updated>2024-04-28T02:00:28.874641+00:00</updated>
  <author>
    <name>reardencode 2024-04-27 14:14:25.572000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[WITHDRAWN] Alternate script design for LNHANCE-Symmetry</title>
    <updated>2024-04-28T02:00:28.874674+00:00</updated>
    <link href="https://delvingbitcoin.org/t/withdrawn-alternate-script-design-for-lnhance-symmetry/839" rel="alternate"/>
    <summary>The discussion revolves around the innovative approaches to Lightning Symmetry channel scripts, particularly focusing on their design when used with LNHANCE in contrast to APO. It highlights the script structures for both LNHANCE and APO variants, detailing their specific components like the musig2 for LNHANCE versus musig for APO and the different approaches to tapleaves and OP_IF constructions. The essence of these constructions is how they manage settlement transactions and updates, with LNHANCE leveraging the CTV hash as an internal key for taproot outputs, which streamlines the update process by making tapscripts consistent across updates. This method allows for storage and spending efficiency, requiring minimal data storage for either party involved.

Greg's [thread](https://delvingbitcoin.org/t/ln-symmetry-project-recap/359) provides essential background information, highlighting the technical nuances of each approach. For example, the APO-Symmetry design utilizes a taproot annex to store the hash of the settlement transaction, facilitating the recovery of the necessary taproot sibling hash for spending Alice's update if Bob has a later update. In contrast, LNHANCE-Symmetry's use of the settlement transaction's CTV hash as an internal key offers a unique advantage by ensuring tapscripts remain identical from one update to the next, enhancing efficiency and reducing the complexity involved in managing updates.

Witness sizes for both APO and LNHANCE Symmetry variants are compared, showcasing the differences in weight units (WU) across initial updates, subsequent updates, and settlements. The comparison demonstrates that LNHANCE-Symmetry, especially in its OP_IF variant, tends to favor non-challenged closes significantly more than APO-Symmetry, leading to substantial weight savings in certain scenarios. However, it is noted that these savings are somewhat reduced when including the CTV hash in the update witness stack, revealing the nuanced trade-offs between the two approaches.

In conclusion, the choice between APO-Symmetry and LNHANCE-Symmetry for building production Lightning Symmetry channels may depend on the value placed on minimizing the weight of unchallenged force closes versus the cost and complexity of handling challenges when they arise. The detailed analysis underscores the potential benefits of integrating the settlement hash into the taproot internal key within LNHANCE-Symmetry channels, suggesting significant implications for the efficiency and practicality of future Lightning Network enhancements.</summary>
    <published>2024-04-27T14:14:25.572000+00:00</published>
  </entry>
</feed>
