<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP324 Proxy: easy integration of v2 transport protocol for light clients (PoC)</title>
  <updated>2024-04-16T01:55:59.533133+00:00</updated>
  <author>
    <name>yonson 2024-04-15 17:35:23.952000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP324 Proxy: easy integration of v2 transport protocol for light clients (PoC)</title>
    <updated>2024-04-16T01:55:59.533166+00:00</updated>
    <link href="https://delvingbitcoin.org/t/bip324-proxy-easy-integration-of-v2-transport-protocol-for-light-clients-poc/678/13" rel="alternate"/>
    <summary>The discussion revolves around the implementation of asynchronous operations, specifically highlighting the use of ["spawning"](https://tokio.rs/tokio/tutorial/spawning) as a method to create new threads of work. These aren't traditional threads directly mapped to the operating system's threads but are instead "green threads," which are managed by the language runtime rather than the operating system. This distinction is crucial for understanding how concurrency is achieved in this context without the direct overhead associated with operating system threads.

Moreover, there is an exploration of transitioning towards an operating system thread implementation. This approach is contrasted with the asynchronous model, where the emphasis is on utilizing standard library wrappers that are compatible with the `std::io::Read/Write` traits. Such traits typically face compatibility issues within asynchronous environments, suggesting a trade-off when considering this implementation strategy. The advantage of moving towards an OS thread implementation lies in its simplicity and straightforward coding model. However, this comes at the expense of increased resource consumption per connection, indicating a significant cost associated with this simplicity. The narrative thus navigates through the complexities and trade-offs between using green threads for asynchronous programming and the potential shift towards a more traditional threading model based on operating system threads.</summary>
    <published>2024-04-15T17:35:23.952000+00:00</published>
  </entry>
</feed>
