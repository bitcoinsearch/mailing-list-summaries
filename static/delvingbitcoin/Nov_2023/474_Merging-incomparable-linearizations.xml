<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Merging incomparable linearizations</title>
  <updated>2024-05-31T02:04:46.712313+00:00</updated>
  <author>
    <name>ajtowns 2023-11-24 01:27:38.455000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Merging incomparable linearizations</title>
    <updated>2024-05-31T02:04:46.712345+00:00</updated>
    <link href="https://delvingbitcoin.org/t/merging-incomparable-linearizations/209/8" rel="alternate"/>
    <summary>The concept of chunking an ordered set of transactions, denoted as $T = t_1, t_2, ..., t_n$, involves dividing this list into subsequences while preserving the original order. For instance, if we consider a set of transactions $T$, it can be segmented into chunks such as $C_1 = t_1, t_2$, $C_2 = t_3$, and $C_3 = t_4, ..., t_n$. This process ensures that the sum of these chunks reconstitutes the original set $T$, adhering to a specific condition where $s(C_1) \ge s(C_2) \ge s(C_3)$. This criterion maintains a non-increasing sequence of chunks based on a defined parameter 's'.

Furthermore, the method posits that if the chunking of a transaction set $T$ results in a single chunk, labeled as $C$, then any permutation of the transactions within $T$ will yield a chunk diagram that is either equivalent or superior to the initial diagram generated for $T$. This assertion stems from the fact that both the starting and ending points of the diagram remain constant across different arrangements of $T$, with the original representation of $T$ forming a linear diagram. The stipulation that chunk diagrams are concave due to the inequality condition inherent in chunking further supports this claim. This approach underscores the flexibility and efficiency of chunking in maintaining or improving the structural integrity of transaction sequences through various reorderings.</summary>
    <published>2023-11-24T01:27:38.455000+00:00</published>
  </entry>
</feed>
