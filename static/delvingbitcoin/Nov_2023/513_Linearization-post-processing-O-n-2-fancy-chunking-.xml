<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Linearization post-processing (O(n^2) fancy chunking)</title>
  <updated>2023-12-29T19:25:22.118680+00:00</updated>
  <author>
    <name>sipa 2023-11-30 04:25:45.567000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Linearization post-processing (O(n^2) fancy chunking)</title>
    <updated>2023-12-29T19:25:22.118680+00:00</updated>
    <link href="https://delvingbitcoin.org/t/linearization-post-processing-o-n-2-fancy-chunking/201/7" rel="alternate"/>
    <summary>An experimental evaluation of the ancestor sort algorithm reveals its limitations in optimally sorting transaction clusters. Specifically, the algorithm is successful in sorting clusters containing up to four transactions. However, when applied to a more complex cluster configuration as illustrated by the provided mermaid graph, the algorithm fails to achieve an optimal sort.

The complexity arises with a cluster structured such that one transaction (B: 5) precedes another (A: 1), with two additional transactions (C: 5 and D: 3) also leading into A: 1. A further complication is introduced by a transaction (E: 4) pointing to both C: 5 and D: 3. This particular structure challenges the ancestor sort algorithm. When the algorithm is applied, it produces a sorted sequence of [A,C,D,E,B] with all transactions being grouped together ([ACDEB]). The optimal sorting sequence for this structure, however, differs and is identified as [A,B,C,D,E], which should be divided into two chunks: [ABC,DE].

The discovery of this sorting discrepancy indicates that while the ancestor sort algorithm can handle simpler transaction clusters effectively, it lacks the sophistication required for certain complex structures. As such, there may be a need to develop or refine existing algorithms to account for these more intricate scenarios to ensure transaction clusters are sorted most efficiently.</summary>
    <published>2023-11-30T04:25:45.567000+00:00</published>
  </entry>
</feed>
