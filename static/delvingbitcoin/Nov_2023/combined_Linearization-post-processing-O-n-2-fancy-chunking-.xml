<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Linearization post-processing (O(n^2) fancy chunking)</title>
  <updated>2023-12-29T19:26:28.359985+00:00</updated>
  <author>
    <name>sipa 2023-11-30 04:25:45.567000+00:00</name>
  </author>
  <author>
    <name>sipa 2023-11-29 22:52:59.338000+00:00</name>
  </author>
  <link href="delvingbitcoin/Nov_2023/513_Linearization-post-processing-O-n-2-fancy-chunking-.xml" rel="alternate"/>
  <link href="delvingbitcoin/Nov_2023/515_Linearization-post-processing-O-n-2-fancy-chunking-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Linearization post-processing (O(n^2) fancy chunking)</title>
    <updated>2023-12-29T19:26:28.359985+00:00</updated>
    <link href="https://delvingbitcoin.org/t/linearization-post-processing-o-n-2-fancy-chunking/201/7" rel="alternate"/>
    <summary>In an experimental analysis, it was observed that the ancestor sort algorithm effectively organized clusters of up to four transactions. However, its efficiency diminished with larger clusters. A specific cluster example demonstrated the limitation of the algorithm:

A complex transaction graph involving five transactions labeled from 'A' to 'E' with their respective weights was presented in a Mermaid graph format. This graph illustrated the suboptimal sorting result produced by the ancestor sort algorithm. The algorithm sorted the transactions as [A,C,D,E,B], which resulted in them being grouped into a single chunk [ACDEB]. This occurs because the algorithm first selects [ACDE] and then appends 'B' to this initial chunk.

In contrast, the optimal sorting for this cluster should be [A,B,C,D,E], which would ideally be chunked as [ABC, DE], maintaining a separation between the two subsets based on their transaction ordering.

Additionally, it was noted that the gathering theorem, found within the context of prefix-intersection merging, is relevant here as well. This theorem explains why swapping adjacent unconnected transaction sequences—where each sequence would typically be chunked together—in favor of a sequence with a higher fee rate results in improved sorting. This improvement holds true even when the swapped sequences are not directly related within the linearization. This concept supports the notion that tweaking the order of independent transaction groups can lead to more optimal sorting outcomes when considering the fee rates. The gathering theorem's principles can be further explored through the links provided to delve deeper into the strategies for merging incomparable linearizations.</summary>
    <published>2023-11-30T04:25:45.567000+00:00</published>
  </entry>
</feed>
