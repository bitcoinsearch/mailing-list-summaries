<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - OP_CHECKSIGFROMSTACKVERIFY ECDSA useful?</title>
  <updated>2024-01-20T02:11:26.113721+00:00</updated>
  <author>
    <name>reardencode 2024-01-19 17:36:46.423000+00:00</name>
  </author>
  <author>
    <name>reardencode 2024-01-19 14:30:14.659000+00:00</name>
  </author>
  <author>
    <name>moonsettler 2024-01-19 13:45:27.207000+00:00</name>
  </author>
  <author>
    <name>reardencode 2024-01-19 05:50:24.893000+00:00</name>
  </author>
  <link href="delvingbitcoin/Jan_2024/1225_OP-CHECKSIGFROMSTACKVERIFY-ECDSA-useful-.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1222_OP-CHECKSIGFROMSTACKVERIFY-ECDSA-useful-.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1220_OP-CHECKSIGFROMSTACKVERIFY-ECDSA-useful-.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1216_OP-CHECKSIGFROMSTACKVERIFY-ECDSA-useful-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - OP_CHECKSIGFROMSTACKVERIFY ECDSA useful?</title>
    <updated>2024-01-20T02:11:26.113776+00:00</updated>
    <link href="https://delvingbitcoin.org/t/op-checksigfromstackverify-ecdsa-useful/438/4" rel="alternate"/>
    <summary>The ongoing dialogue among programmers regarding the use of ECDSA signatures in various script types has brought forth some interesting viewpoints. A tweet from Super Testnet on X highlighted the discussion around DER encoded ECDSA signature lengths being used as proof of work, suggesting the inclusion of ECDSA signing in all script types. This argument was acknowledged by a user named @moonsettler, who noted that it mainly applies to legacy scripts since entrenched systems would require upgrades for any signing operation on Tapscript.

Delving deeper into the intricacies of cryptographic practices, the conversation addressed situations where existing custody operations may rely on an ECDSA Threshold Signature Scheme (TSS) which they trust, and might want to leverage protocols such as post-signed vaults or delegation that use CheckSigFromStackVerify (CSFSV). These entities have the means to implement new protocols but might not have the resources to audit newer schemes like FROST or MuSig2 and transition to Tapscript. Despite this, there's a leaning towards making CSFS(V) BIP340 Schnorr only, with potential future upgrades to accommodate non-32-byte keys if necessary.

Further exploration into the topic considers the practical realities of organizations that depend on ECDSA Multi-Party Computation (MPC) as an established practice. Given that these processes, along with their associated libraries and tools, have been audited and trusted, entities such as Coinbase and other large custodians may be hesitant to switch to new cryptographic methods like Schnorr signatures, despite their proven security. The example cited includes the slow adoption of P2TR outputs by exchanges, indicating a general reluctance to rapidly adopt new technologies.

Finally, the discussion turned to a question raised by @ajtowns on whether ECDSA should be included for OP_CHECKSIGFROMSTACKVERIFY in legacy scripts. This topic was briefly reviewed during an optech review session. The specific question was whether OP_CHECKSIGFROMSTACKVERIFY should support only BIP340 Schnorr signing with 32-byte keys or also include ECDSA signing with 33-byte keys prefixed by `0x02` or `0x03`. Further consideration revolved around whether this support should extend only to legacy/witnessv0 scripts or also include tapscript `0xc0`. The consensus among most participants, except for @JeremyRubin who didn't provide a strong justification, leaned towards not including ECDSA.</summary>
    <published>2024-01-19T17:36:46.423000+00:00</published>
  </entry>
</feed>
