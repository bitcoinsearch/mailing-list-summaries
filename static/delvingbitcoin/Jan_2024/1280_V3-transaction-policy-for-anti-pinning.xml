<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>V3 transaction policy for anti-pinning</title>
  <updated>2024-01-23T02:04:17.902727+00:00</updated>
  <author>
    <name>instagibbs 2024-01-22 13:34:33.453000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>V3 transaction policy for anti-pinning</title>
    <updated>2024-01-23T02:04:17.902764+00:00</updated>
    <link href="https://delvingbitcoin.org/t/v3-transaction-policy-for-anti-pinning/340/34" rel="alternate"/>
    <summary>The discussion focuses on the design considerations for a transaction protocol within the constraints of version 3 (v3). The suggested approach is to structure the protocol in such a manner that parent transactions have only one output that can be spent immediately. This configuration ensures that any Child Pays for Parent (CPFP) transaction would naturally conflict with each other, thereby triggering the Replace-By-Fee (RBF) rules. However, if the goal is to enable conflicts with parent transactions, this single-output requirement may not be necessary.

For instance, an exchange conducting batched payouts might create several versions of withdrawal transactions at varying fee rates. Such an exchange could confidently execute replacements up to an overhead of 1 kilobyte virtual size (kvB) if customers initiate sweeps. It is mentioned that it is not feasible to lock customer addresses using `1 CheckSequenceVerify` (CSV), implying that this method cannot be used to control spending from those addresses.</summary>
    <published>2024-01-22T13:34:33.453000+00:00</published>
  </entry>
</feed>
