<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>OP_CHECKSIGFROMSTACKVERIFY ECDSA useful?</title>
  <updated>2024-01-26T02:08:16.349023+00:00</updated>
  <author>
    <name>harding 2024-01-25 22:41:35.294000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>OP_CHECKSIGFROMSTACKVERIFY ECDSA useful?</title>
    <updated>2024-01-26T02:08:16.349064+00:00</updated>
    <link href="https://delvingbitcoin.org/t/op-checksigfromstackverify-ecdsa-useful/438/5" rel="alternate"/>
    <summary>Implementing ECDSA as proof of work via DER encoding might appear as a straightforward solution, but it is fraught with potential issues that could undermine its security and effectiveness. It is crucial to note that any simplistic approach could encounter multiple 'gotchas', which are intricately explained in the resources like "Half a Puzzle" and discussions on forums such as BitcoinTalk. These sources provide critical insights into the complexities involved in such an implementation.

Given these potential risks, it is recommended to engage a serious cryptographer who can dedicate a substantial amount of time to evaluate and refine the feature before it is integrated into any high-stake contracts. Their expertise would be invaluable in ensuring that the proof of work system is robust against vulnerabilities and secure for transactions involving significant amounts of money.

In light of the demand for proof of work-based contracts in tapscript, a more reliable and preferable alternative would be the introduction of opcodes that support SHA2-based proof of work verification. This method is deemed superior due to its established security profile and widespread acceptance within the cryptographic community. By opting for SHA2-based PoW, developers and users can leverage a tried-and-tested approach that offers better security assurances for their contracts.</summary>
    <published>2024-01-25T22:41:35.294000+00:00</published>
  </entry>
</feed>
