<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>64 bit arithmetic soft fork</title>
  <updated>2024-01-17T02:13:10.047765+00:00</updated>
  <author>
    <name>jamesob 2024-01-16 17:43:34.637000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>64 bit arithmetic soft fork</title>
    <updated>2024-01-17T02:13:10.047794+00:00</updated>
    <link href="https://delvingbitcoin.org/t/64-bit-arithmetic-soft-fork/397/27" rel="alternate"/>
    <summary>The discussion opens with a consideration of the implications of transitioning from minimally encoded numbers to fixed-length 64-bit numbers within a certain programming context. The primary concern expressed is the potential inefficiency and wastefulness of such a change, given that minimal encodings, despite their complexity, serve a purpose in conserving chainspace. The argument suggests that while minimal encodings can be awkward to manage, they are utilized intentionally to optimize the use of space.

Furthermore, the conversation highlights the complications that arise when multiple encoding standards coexist. The introduction of another encoding system to work in conjunction with an existing one, such as `CScriptNum`, may compound the complexity for wallet software developers. It is recognized that parsing `CScriptNum` is likely an enduring necessity, especially for the purpose of validating legacy scripts. This underscores the importance of maintaining compatibility with historical data structures while acknowledging the challenges it imposes on current systems. The need for careful consideration of these technical trade-offs is evident, as they impact both the efficiency of storage and the ease of implementation in wallet software development.</summary>
    <published>2024-01-16T17:43:34.637000+00:00</published>
  </entry>
</feed>
