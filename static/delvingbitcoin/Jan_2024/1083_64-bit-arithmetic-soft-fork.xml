<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>64 bit arithmetic soft fork</title>
  <updated>2024-01-12T02:11:26.638694+00:00</updated>
  <author>
    <name>ProofOfKeags 2024-01-11 17:55:35.883000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>64 bit arithmetic soft fork</title>
    <updated>2024-01-12T02:11:26.638721+00:00</updated>
    <link href="https://delvingbitcoin.org/t/64-bit-arithmetic-soft-fork/397/14" rel="alternate"/>
    <summary>The complexity of script interpreters is a significant concern, particularly when it comes to ensuring exact matches between them to prevent consensus splits. There's an ongoing debate about the best approach to evolve scripting capabilities. On one hand, there's recognition of the importance of conserving opcode space; on the other hand, introducing new features like a hypothetical `OP_ENABLE64BIT` could complicate things further. The suggestion here is that instead of adding such features that alter the interpreter's behavior invisibly, it would be more prudent to focus on formal specifications for the Script Virtual Machine (VM) and integrate new 64-bit opcodes directly into the VM. This perspective warns against opening what is referred to as "Pandora's box" by adopting changes that might introduce unforeseen complexities in the scripting environment.</summary>
    <published>2024-01-11T17:55:35.883000+00:00</published>
  </entry>
</feed>
