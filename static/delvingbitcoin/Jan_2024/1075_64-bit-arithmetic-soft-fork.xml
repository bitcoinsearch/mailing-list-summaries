<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>64 bit arithmetic soft fork</title>
  <updated>2024-01-12T02:13:10.679908+00:00</updated>
  <author>
    <name>Chris_Stewart_5 2024-01-11 15:08:42.326000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>64 bit arithmetic soft fork</title>
    <updated>2024-01-12T02:13:10.679935+00:00</updated>
    <link href="https://delvingbitcoin.org/t/64-bit-arithmetic-soft-fork/397/7" rel="alternate"/>
    <summary>The email delves into a discussion on potential changes to encoding and arithmetic support in the context of script execution for blockchain systems. The sender expresses apprehension regarding the proposal to adopt a strict 64-bit little-endian encoding, which could lead to an increase in witness sizes. There is also concern about the confusion that might arise from switching from big-endian to little-endian formats, given that minimal encoding is currently employed as indicated by the `fRequireMinimal` flag found in the `interpreter.cpp` file.

Additionally, there seems to be clarification sought on the stance towards enhancing arithmetic operation support from 51 bits to 64 bits. Questions are raised about how such an expansion could be implemented alongside existing version 1 tapscripts without redefining the semantics of the arithmetic opcodes. The sender acknowledges the design intention behind `OP_SUCCESSx` to permit state modifications of the stack but seeks to understand how compatibility with already deployed version 1 Scripts would be maintained, considering the implications of such changes.</summary>
    <published>2024-01-11T15:08:42.326000+00:00</published>
  </entry>
</feed>
