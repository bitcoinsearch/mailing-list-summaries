<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>64 bit arithmetic soft fork</title>
  <updated>2024-01-14T02:08:03.842386+00:00</updated>
  <author>
    <name>Chris_Stewart_5 2024-01-13 14:59:37.726000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>64 bit arithmetic soft fork</title>
    <updated>2024-01-14T02:08:03.842418+00:00</updated>
    <link href="https://delvingbitcoin.org/t/64-bit-arithmetic-soft-fork/397/23" rel="alternate"/>
    <summary>In the discussion, there's an acknowledgement of a critique regarding the handling of literals in a programming context, specifically referencing `OP_1, OP_2`, etc. The issue at hand concerns the necessity to differentiate between literals such as `OP_1` and a variant like `OP_1_64`, which indicates a difference in byte value sizeâ€”8 bytes versus 1 byte. This differentiation is significant because it ensures that numeric values remain consistent in size when pushed onto the stack during code execution. However, within the script, exceptions are made where literals do not adhere to this 8-byte standard, as exemplified by `OP_0, OP_1`. This conversation illustrates the complexity in managing data types and sizes within a programming language or framework, emphasizing the importance of maintaining consistency while allowing for necessary exceptions.</summary>
    <published>2024-01-13T14:59:37.726000+00:00</published>
  </entry>
</feed>
