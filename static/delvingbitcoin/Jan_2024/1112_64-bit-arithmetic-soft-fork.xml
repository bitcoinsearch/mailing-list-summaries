<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>64 bit arithmetic soft fork</title>
  <updated>2024-01-16T02:03:31.068473+00:00</updated>
  <author>
    <name>ajtowns 2024-01-15 04:22:58.226000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>64 bit arithmetic soft fork</title>
    <updated>2024-01-16T02:03:31.068507+00:00</updated>
    <link href="https://delvingbitcoin.org/t/64-bit-arithmetic-soft-fork/397/26" rel="alternate"/>
    <summary>In the realm of Bitcoin script encoding, there appears to be some confusion regarding the endianness of `CScriptNum`. The individual raising the concern suggests that the current encoding system is minimal-length big-endian, which offers the benefit of a more compact representation for literals within scripts compared to a fixed-length constant. However, this perspective is challenged by another view that points out `CScriptNum` is actually little endian. Supporting evidence for this assertion is found in both the Bitcoin codebase, specifically at a particular segment of the script header file on GitHub, and the definition of endianness as outlined in Wikipedia. Additionally, the Bitcoin wiki corroborates the little-endian nature of `CScriptNum`.

The core of the discussion hinges on two main differences between the existing `CScriptNum` implementation and the proposed alternative. The first difference is the method of encoding: `CScriptNum` employs variable-length encoding while the proposal suggests a fixed length. The second contrast lies in the handling of negative numbers; `CScriptNum` uses a two's complement system whereas the proposed encoding considers using a sign bit. These distinctions are critical as they directly impact the efficiency and functionality of script processing in the Bitcoin network.</summary>
    <published>2024-01-15T04:22:58.226000+00:00</published>
  </entry>
</feed>
