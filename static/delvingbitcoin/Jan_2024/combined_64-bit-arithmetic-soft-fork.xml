<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - 64 bit arithmetic soft fork</title>
  <updated>2024-01-12T02:16:09.067829+00:00</updated>
  <author>
    <name>ProofOfKeags 2024-01-11 21:01:22.448000+00:00</name>
  </author>
  <author>
    <name>moonsettler 2024-01-11 20:57:27.933000+00:00</name>
  </author>
  <author>
    <name>sipa 2024-01-11 20:40:26.242000+00:00</name>
  </author>
  <author>
    <name>ProofOfKeags 2024-01-11 17:55:35.883000+00:00</name>
  </author>
  <author>
    <name>ajtowns 2024-01-11 17:42:51.731000+00:00</name>
  </author>
  <author>
    <name>ajtowns 2024-01-11 17:39:55.430000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_5 2024-01-11 17:19:48.085000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_5 2024-01-11 17:19:08.767000+00:00</name>
  </author>
  <author>
    <name>ProofOfKeags 2024-01-11 16:46:12.669000+00:00</name>
  </author>
  <author>
    <name>sipa 2024-01-11 15:23:39.480000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_5 2024-01-11 15:08:42.326000+00:00</name>
  </author>
  <author>
    <name>sipa 2024-01-11 14:54:55.887000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_5 2024-01-11 14:24:52.280000+00:00</name>
  </author>
  <author>
    <name>sipa 2024-01-11 14:11:33.795000+00:00</name>
  </author>
  <author>
    <name>halseth 2024-01-11 14:07:42.305000+00:00</name>
  </author>
  <author>
    <name>moonsettler  . 2024-01-10 23:10:38.930000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-10 16:11:01.778000+00:00</name>
  </author>
  <link href="delvingbitcoin/Jan_2024/1086_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1085_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1084_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1083_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1082_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1081_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1078_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1080_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1079_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1076_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1075_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1074_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1073_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1072_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1071_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1061_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1057_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - 64 bit arithmetic soft fork</title>
    <updated>2024-01-12T02:16:09.067968+00:00</updated>
    <link href="https://delvingbitcoin.org/t/64-bit-arithmetic-soft-fork/397/17" rel="alternate"/>
    <summary>The ongoing dialogue among developers focuses on refining Bitcoin's scripting language by incorporating 64-bit arithmetic operations, which would be particularly beneficial for covenant opcodes and various computational tasks. A key proposal is to emulate the stack behavior seen in liquid/elements, where mathematical operations leave two values on the stack, a boolean for range checking, and the result if in range. There is a suggestion to expand the input range of existing opcodes rather than changing their behavior.

Developers are considering an `OP_MUL` opcode addition but are cautious about managing potential overflows and encoding consistency, with little-endian being preferred due to its current use in the protocol. To support larger integers, there is a plan to enhance `CScriptNum` to handle 64 bits by extending the input length from 4 to 8 bytes without altering existing functions, thus addressing malleability concerns.

The creation of new literals like `OP_1_64` to accommodate increased sizes is discussed, alongside the possibility of conversion opcodes or maintaining current `OP_n` semantics to avoid duplicating opcodes. The concept of an `OP_ENABLE64BIT` opcode is debated, which could allow all arithmetic opcodes to accept larger byte inputs. However, this might introduce complexities in the Script interpreter and formal specifications, possibly leading to consensus splits.

There is reluctance to implement a fundamental structural change like adding a third `VMInterpreterState` due to the risk of increasing witness sizes and altering state variables. Deploying these changes with existing v1 tapscripts raises compatibility questions, suggesting that scripts containing (not executing) `OP_ENABLE64BIT` could be anyone-can-spend under current rules for backward compatibility, or a new taproot leaf version could be introduced for a cleaner deployment.

For public examination and feedback, a Bitcoin Improvement Proposal (BIP) detailing these concepts is available at [BIP proposal link](https://github.com/Christewart/bips/pull/1), along with a corresponding implementation at [implementation link](https://github.com/Christewart/bitcoin/pull/2). The intent is to solicit early input to refine the proposal before presenting it to a wider audience, aiming to advance Bitcoin's programming framework and operational effectiveness.</summary>
    <published>2024-01-11T21:01:22.448000+00:00</published>
  </entry>
</feed>
