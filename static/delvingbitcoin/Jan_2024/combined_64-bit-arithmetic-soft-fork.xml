<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - 64 bit arithmetic soft fork</title>
  <updated>2024-01-14T02:09:46.861544+00:00</updated>
  <author>
    <name>dgpv 2024-01-13 15:12:01.617000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_5 2024-01-13 15:03:10.677000+00:00</name>
  </author>
  <author>
    <name>dgpv 2024-01-13 15:00:18.287000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_5 2024-01-13 14:59:37.726000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_5 2024-01-13 14:53:41.807000+00:00</name>
  </author>
  <author>
    <name>dgpv 2024-01-13 14:26:46.385000+00:00</name>
  </author>
  <author>
    <name>rustyrussell  . 2024-01-12 16:22:29.735000+00:00</name>
  </author>
  <author>
    <name>halseth  . 2024-01-12 13:20:15.414000+00:00</name>
  </author>
  <author>
    <name>ProofOfKeags  . 2024-01-11 21:01:22.448000+00:00</name>
  </author>
  <author>
    <name>moonsettler  . 2024-01-11 20:57:27.933000+00:00</name>
  </author>
  <author>
    <name>sipa  . 2024-01-11 20:40:26.242000+00:00</name>
  </author>
  <author>
    <name>ProofOfKeags  . 2024-01-11 17:55:35.883000+00:00</name>
  </author>
  <author>
    <name>ajtowns  . 2024-01-11 17:42:51.731000+00:00</name>
  </author>
  <author>
    <name>ajtowns  . 2024-01-11 17:39:55.430000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-11 17:19:48.085000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-11 17:19:08.767000+00:00</name>
  </author>
  <author>
    <name>ProofOfKeags  . 2024-01-11 16:46:12.669000+00:00</name>
  </author>
  <author>
    <name>sipa  . 2024-01-11 15:23:39.480000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-11 15:08:42.326000+00:00</name>
  </author>
  <author>
    <name>sipa  . 2024-01-11 14:54:55.887000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-11 14:24:52.280000+00:00</name>
  </author>
  <author>
    <name>sipa  . 2024-01-11 14:11:33.795000+00:00</name>
  </author>
  <author>
    <name>halseth  . 2024-01-11 14:07:42.305000+00:00</name>
  </author>
  <author>
    <name>moonsettler  . 2024-01-10 23:10:38.930000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-10 16:11:01.778000+00:00</name>
  </author>
  <link href="delvingbitcoin/Jan_2024/1101_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1105_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1104_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1103_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1102_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1099_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1093_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1088_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1086_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1085_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1084_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1083_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1082_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1081_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1078_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1080_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1079_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1076_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1075_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1074_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1073_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1072_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1071_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1061_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1057_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - 64 bit arithmetic soft fork</title>
    <updated>2024-01-14T02:09:46.861710+00:00</updated>
    <link href="https://delvingbitcoin.org/t/64-bit-arithmetic-soft-fork/397/21" rel="alternate"/>
    <summary>The discourse focuses on enhancing scripting languages with the integration of 64-bit arithmetic operations. A consideration is made regarding the handling of arithmetic operations involving 64-bit integers, particularly the computation of arbitrary width integers and overflow detection when converting to data types like LE64 or LE32. The alternative of adding verification checks after each operation is also discussed, noting the possibility of increased script sizes and unexpected behaviors due to overflows.

Modifications to consensus rules, specifically tapscript leaf versions, are discussed, and a GitHub link is provided for deeper understanding. The idea of removing `SCRIPT_VERIFY_MINIMALIF` is explored, as well as ensuring consistent interpretation of literals within scripts and maintaining numeric values as 8 bytes on the stack.

The debate continues over the value of extra encoding for numbers, weighing complexity against simplification benefits such as reducing policy flags. The advantages of performing computations in the same format as transaction numbers, as observed in designing covenant scripts on Elements, are noted for their clarity in overflow detection.

New opcodes for handling unsigned numbers and offering greater precision are considered, alongside reactivating operations such as multiplication (MUL), left shift (LSHIFT), and substring extraction (SUBSTR). Resources, including an analysis of arithmetic opcodes, are provided for further reading on this topic.

The discussion then turns to the `CScriptNum` implementation, suggesting building upon its structure rather than introducing a new number format. A commit link demonstrates how `CScriptNum` could support 64-bit across various numeric opcodes, proposing solutions for using `leaf_version` within the interpreter.

There's a debate on conserving opcode space versus integrating features like `OP_ENABLE64BIT`, which could increase complexity. Emphasis is placed on formal specifications for the Script VM and integrating new 64-bit opcodes directly into the VM.

Finally, a new opcode `OP_ENABLE64BIT` is proposed to allow arithmetic opcodes to accept inputs up to 8 bytes in size, changing the current system by pushing two values onto the stack. There are concerns about the placement of `ENABLE64BIT` within scripts to avoid confusion and ensure predictability, suggesting that it should fail the script if not placed first, except for any `OP_SUCCESSx` operations.

In summary, the conversation is a technical exploration of potential improvements to Bitcoin's scripting capabilities, aiming to enhance precision and ease of development while considering the risks of altering consensus-critical components. Discussions cover the implications of 64-bit arithmetic, opcode space conservation, encoding formats, and the introduction of new opcodes, reflecting a balance between innovation and stability in the scripting environment.</summary>
    <published>2024-01-13T15:12:01.617000+00:00</published>
  </entry>
</feed>
