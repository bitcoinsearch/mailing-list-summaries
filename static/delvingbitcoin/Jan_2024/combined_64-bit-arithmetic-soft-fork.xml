<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - 64 bit arithmetic soft fork</title>
  <updated>2024-01-18T02:13:31.303491+00:00</updated>
  <author>
    <name>Davidson 2024-01-17 22:31:06.270000+00:00</name>
  </author>
  <author>
    <name>jamesob  . 2024-01-16 17:43:34.637000+00:00</name>
  </author>
  <author>
    <name>ajtowns  . 2024-01-15 04:22:58.226000+00:00</name>
  </author>
  <author>
    <name>dgpv  . 2024-01-13 15:12:01.617000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-13 15:03:10.677000+00:00</name>
  </author>
  <author>
    <name>dgpv  . 2024-01-13 15:00:18.287000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-13 14:59:37.726000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-13 14:53:41.807000+00:00</name>
  </author>
  <author>
    <name>dgpv  . 2024-01-13 14:26:46.385000+00:00</name>
  </author>
  <author>
    <name>rustyrussell  . 2024-01-12 16:22:29.735000+00:00</name>
  </author>
  <author>
    <name>halseth  . 2024-01-12 13:20:15.414000+00:00</name>
  </author>
  <author>
    <name>ProofOfKeags  . 2024-01-11 21:01:22.448000+00:00</name>
  </author>
  <author>
    <name>moonsettler  . 2024-01-11 20:57:27.933000+00:00</name>
  </author>
  <author>
    <name>sipa  . 2024-01-11 20:40:26.242000+00:00</name>
  </author>
  <author>
    <name>ProofOfKeags  . 2024-01-11 17:55:35.883000+00:00</name>
  </author>
  <author>
    <name>ajtowns  . 2024-01-11 17:42:51.731000+00:00</name>
  </author>
  <author>
    <name>ajtowns  . 2024-01-11 17:39:55.430000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-11 17:19:48.085000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-11 17:19:08.767000+00:00</name>
  </author>
  <author>
    <name>ProofOfKeags  . 2024-01-11 16:46:12.669000+00:00</name>
  </author>
  <author>
    <name>sipa  . 2024-01-11 15:23:39.480000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-11 15:08:42.326000+00:00</name>
  </author>
  <author>
    <name>sipa  . 2024-01-11 14:54:55.887000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-11 14:24:52.280000+00:00</name>
  </author>
  <author>
    <name>sipa  . 2024-01-11 14:11:33.795000+00:00</name>
  </author>
  <author>
    <name>halseth  . 2024-01-11 14:07:42.305000+00:00</name>
  </author>
  <author>
    <name>moonsettler  . 2024-01-10 23:10:38.930000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-10 16:11:01.778000+00:00</name>
  </author>
  <link href="delvingbitcoin/Jan_2024/1173_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1146_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1112_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1101_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1105_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1104_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1103_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1102_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1099_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1093_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1088_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1086_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1085_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1084_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1083_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1082_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1081_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1078_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1080_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1079_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1076_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1075_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1074_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1073_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1072_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1071_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1061_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1057_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - 64 bit arithmetic soft fork</title>
    <updated>2024-01-18T02:13:31.303695+00:00</updated>
    <link href="https://delvingbitcoin.org/t/64-bit-arithmetic-soft-fork/397/28" rel="alternate"/>
    <summary>The recent programming discourse evaluated the potential reintroduction of 256-bit arithmetic into Bitcoin script, considering recent enhancements like taproot. Complex cryptographic protocols might be implemented on the blockchain to serve as a dispute resolution mechanism.

There's concern about inefficiency when shifting from minimally encoded numbers to fixed-length 64-bit numbers, with minimal encodings optimizing chainspace usage. Multiple encoding standards complicate wallet development due to the need for legacy script compatibility, illustrating the trade-off between storage efficiency and ease of implementation.

Confusion regarding the endianness of `CScriptNum` in Bitcoin script encoding suggests it is little-endian. The proposed alternative to `CScriptNum` differs in encoding and handling negative numbers, impacting scripting efficiency and functionality.

Overflow checks after 64-bit operations are problematic. An alternative could be computations with arbitrary width integers, with overflow checks at type conversions. Safety checks remain crucial, as skipping them could lead to unexpected behaviors.

Modifications to consensus rules, such as leaf versions in Bitcoin scripting, are pondered, specifically if they require a hard fork. GitHub code provides insights into how scripting changes could affect consensus rules.

Changes to script verifications, including the possible removal of the `SCRIPT_VERIFY_MINIMALIF` flag, are critically assessed due to their impact on network security and efficiency.

The difference between literals like `OP_1` and `OP_1_64` is discussed, noting the importance of consistent numeric value sizes for reliable stack operations, while allowing exceptions for some literals.

Adding extra encoding for numbers may increase system complexity and developer friendliness. Simplifying development by overlooking policies like `SCRIPT_VERIFY_MINIMALDATA` and soft fork policy flags is considered.

Standardized encoding in covenant scripts on Elements could simplify comparisons between computed and introspected transactional values, improving script reliability.

Opinions suggest developing new opcodes for unsigned, high-precision numbers and reactivating certain operations, with further reading recommended via a link.

Building upon `CScriptNum` for 64-bit arithmetic is favored for its compactness, with an extension for numeric opcodes shown in a GitHub commit.

Considerations include modifying `CScriptNum` to support 64-bit integers, aiming for design simplicity and consistent data encoding, and recognizing the challenges of altering existing functions.

Additionally, the integration of the new opcode `OP_ENABLE64BIT` is debated, which would extend arithmetic operations to 8-byte inputs but introduces additional complexity. It requires scripts to place this opcode at the start, barring any `OP_SUCCESSx` operations. Adjustments to `CScriptNum` for 64-bit support risk consensus for existing scripts, and an 8-byte standard for literals is contemplated. The proposal discusses VM interpreter state complexity and the possibility of a separate taproot leaf version for global interpretation of 64-bit operations.

Backward compatibility and witness sizes, opcode space, and compatibility with version 1 tapscripts are also areas of focus. A link to BIP324 provides context for the current encoding system debate over little endian versus big endian.

In summary, debates center on enhancing Bitcoin's scripting language, maintaining stability, compatibility, and developer simplicity, and the balance between introducing new features and preserving established system integrity.

The proposal includes enhancing existing opcodes rather than introducing a new encoding system. `OP_ENABLE64BIT` could enable 64-bit input values, streamlining modifications to the framework. Covenant opcodes for arithmetic on satoshi values are recognized for enabling dynamic smart contracts. Implementing 64-bit arithmetic is essential for applications requiring detailed data introspection and complex operations. The OP_TLUV mailing list review highlights the relevance of 64-bit arithmetic for TLUV and other protocols. Feedback is sought on a drafted BIP and its compatible implementation, available at [BIP proposal link](https://github.com/Christewart/bips/pull/1) and [implementation link](https://github.com/Christewart/bitcoin/pull/2), respectively, to refine the proposal before wider review.</summary>
    <published>2024-01-17T22:31:06.270000+00:00</published>
  </entry>
</feed>
