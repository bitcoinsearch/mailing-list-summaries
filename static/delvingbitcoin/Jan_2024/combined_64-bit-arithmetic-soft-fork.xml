<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - 64 bit arithmetic soft fork</title>
  <updated>2024-01-13T02:03:24.465355+00:00</updated>
  <author>
    <name>rustyrussell 2024-01-12 16:22:29.735000+00:00</name>
  </author>
  <author>
    <name>halseth 2024-01-12 13:20:15.414000+00:00</name>
  </author>
  <author>
    <name>ProofOfKeags  . 2024-01-11 21:01:22.448000+00:00</name>
  </author>
  <author>
    <name>moonsettler  . 2024-01-11 20:57:27.933000+00:00</name>
  </author>
  <author>
    <name>sipa  . 2024-01-11 20:40:26.242000+00:00</name>
  </author>
  <author>
    <name>ProofOfKeags  . 2024-01-11 17:55:35.883000+00:00</name>
  </author>
  <author>
    <name>ajtowns  . 2024-01-11 17:42:51.731000+00:00</name>
  </author>
  <author>
    <name>ajtowns  . 2024-01-11 17:39:55.430000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-11 17:19:48.085000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-11 17:19:08.767000+00:00</name>
  </author>
  <author>
    <name>ProofOfKeags  . 2024-01-11 16:46:12.669000+00:00</name>
  </author>
  <author>
    <name>sipa  . 2024-01-11 15:23:39.480000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-11 15:08:42.326000+00:00</name>
  </author>
  <author>
    <name>sipa  . 2024-01-11 14:54:55.887000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-11 14:24:52.280000+00:00</name>
  </author>
  <author>
    <name>sipa  . 2024-01-11 14:11:33.795000+00:00</name>
  </author>
  <author>
    <name>halseth  . 2024-01-11 14:07:42.305000+00:00</name>
  </author>
  <author>
    <name>moonsettler  . 2024-01-10 23:10:38.930000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-01-10 16:11:01.778000+00:00</name>
  </author>
  <link href="delvingbitcoin/Jan_2024/1093_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1088_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1086_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1085_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1084_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1083_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1082_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1081_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1078_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1080_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1079_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1076_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1075_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1074_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1073_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1072_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1071_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1061_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1057_64-bit-arithmetic-soft-fork.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - 64 bit arithmetic soft fork</title>
    <updated>2024-01-13T02:03:24.465487+00:00</updated>
    <link href="https://delvingbitcoin.org/t/64-bit-arithmetic-soft-fork/397/19" rel="alternate"/>
    <summary>The programming community is evaluating the potential introduction of new arithmetic opcodes to handle unsigned numbers and provide greater precision beyond 64 bits. There's a consideration for re-enabling opcodes such as MUL, LSHIFT, and SUBSTR, especially in how they would interact with a modified `CScriptNum` type designed to support 64-bit integers. The modification of `CScriptNum` is seen as beneficial due to its current implementation and developers' familiarity with it.

Debate exists around the complexity of introducing multiple operation codes within scripts. A notable issue is the proposed `OP_ENABLE64BIT` opcode, which could shift Bitcoin's virtual machine paradigm and impact script execution consistency. To maintain predictability, there are suggestions to incorporate new 64-bit opcodes directly into the VM, placing `ENABLE64BIT` at the beginning of the script sequence.

There's also concern over system accessibility for newcomers and consensus risks linked to altering `CScriptNum`. The transition to strict 64-bit little-endian encoding could affect witness sizes and deviate from the traditional big-endian format, yet expanding arithmetic support from 51-bit to 64-bit does not face much opposition. Compatibility with existing version 1 tapscripts is a priority, and `OP_ENABLE64BIT` is suggested to enhance arithmetic capabilities without compromising active scripts.

Furthermore, discussions cover the pros and cons of adopting 64-bit little-endian encoding and its impact on witness sizes and the transition from big-endian formats. Clarity is sought on how this expansion can coexist with version 1 tapscripts without changing current opcode semantics. Compatibility with deployed version 1 Scripts is paramount, despite possible state modifications through `OP_SUCCESSx`.

The debate on encoding efficiencies is ongoing, with some advocating for the established minimal-length big endian approach. BIP324 highlights the benefits of the current system. Proposals to mandate 64-bit arithmetic and comparison operations in future versions aim to simplify processes, although this has met skepticism due to concerns about unconventional number encoding changes.

Standardizing data representation conventions like little endian encoding is suggested to streamline programming languages and minimize complexities. An alternative proposal recommends implementing `OP_ENABLE64BIT` to support larger values without duplicating opcodes. Covenant opcodes are viewed favorably for their potential to enhance smart contract functionality and transaction versatility.

The integration of 64-bit operations is deemed vital for a range of computational tasks, improving the precision and efficiency in processing large datasets and complex algorithms. The significance of such advancements is evident in protocols like TLUV. A draft Bitcoin Improvement Proposal and its implementation are shared for community feedback, inviting early input to refine the proposal ahead of broader discussions.

Links for further information and feedback on these developments are provided, encouraging the community's participation in refining these proposals.</summary>
    <published>2024-01-12T16:22:29.735000+00:00</published>
  </entry>
</feed>
