<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>64 bit arithmetic soft fork</title>
  <updated>2024-01-12T02:11:34.032610+00:00</updated>
  <author>
    <name>ajtowns 2024-01-11 17:42:51.731000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>64 bit arithmetic soft fork</title>
    <updated>2024-01-12T02:11:34.032641+00:00</updated>
    <link href="https://delvingbitcoin.org/t/64-bit-arithmetic-soft-fork/397/13" rel="alternate"/>
    <summary>The proposal under consideration introduces a new opcode, `OP_ENABLE64BIT`, designed to extend the capacity of arithmetic operations within a scripting language. When this opcode is executed within a script, its primary function would be to allow arithmetic opcodes to accept inputs up to 8 bytes in size, effectively enhancing their computational range.

Drawing inspiration from the implementation in liquid/elements, the suggested modification to the mathematical operations such as ADD and SUB would result in a significant behavioral change from the current system. Specifically, the outcome of these operations would involve pushing two values onto the stack: firstly, a boolean value indicating the success or failure of the operation based on the input range (TRUE if the operands were within the acceptable range, FALSE otherwise), followed by the actual result of the computation provided that the operands were indeed within the specified range.

This approach marks a departure from the existing operational mechanism in Bitcoin's script where mathematical opcodes behave differently. The implications of altering established opcodes to align with this new behavior warrant careful consideration due to the fundamental shift it represents in the execution of arithmetic instructions.</summary>
    <published>2024-01-11T17:42:51.731000+00:00</published>
  </entry>
</feed>
