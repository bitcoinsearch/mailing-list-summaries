<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Ephemeral Anchors and MEVil</title>
  <updated>2024-02-01T02:06:05.540407+00:00</updated>
  <author>
    <name>instagibbs 2024-01-31 19:13:07.936000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Ephemeral Anchors and MEVil</title>
    <updated>2024-02-01T02:06:05.540434+00:00</updated>
    <link href="https://delvingbitcoin.org/t/ephemeral-anchors-and-mevil/383/13" rel="alternate"/>
    <summary>In the discussion of mempool transaction replacement and associated incentives, there is a consideration of whether omitting a full diagram check would be sufficient to prevent motivations for inflating transaction value. The core of the issue revolves around how transactions with conflicting inputs are handled. For illustration, a scenario was presented using the mermaid flowchart syntax to depict three transactions: `TxA` with a fee of 0 satoshis and size of 300 vbytes, `TxB` with a fee of 11,780 satoshis and size of 130 vbytes, and `TxC`, which conflicts with `TxB`, carrying a fee of 10,000 satoshis and a size of 384 vbytes.

The transaction package consisting of `TxA` plus a pure burn of 10,000 satoshis yields a rate of 27 sat/vbyte, which is identical to the package rate of `TxA+TxB`. However, including `TxB` also accomplishes the eviction of `TxC`, suggesting that counterparties in such transactions have extra incentives to increase this rate.

A potential solution to simulate these conflicts more accurately might involve implementing the checks during the actual execution phase, allowing Replace-by-Fee (RBF) logic to manage them after transactions have been clustered in the mempool. Prior to clustering, it may be more straightforward to initiate the process with outputs valued at zero. This approach would effectively address the issue without relying on a full diagram check to mitigate incentives for value inflation within the mempool.</summary>
    <published>2024-01-31T19:13:07.936000+00:00</published>
  </entry>
</feed>
