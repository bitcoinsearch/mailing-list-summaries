<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>64 bit arithmetic soft fork</title>
  <updated>2024-01-12T02:12:28.245228+00:00</updated>
  <author>
    <name>Chris_Stewart_5 2024-01-11 17:19:08.767000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>64 bit arithmetic soft fork</title>
    <updated>2024-01-12T02:12:28.245262+00:00</updated>
    <link href="https://delvingbitcoin.org/t/64-bit-arithmetic-soft-fork/397/11" rel="alternate"/>
    <summary>The introduction of an `OP_ENABLE64BIT` operation has raised concerns regarding the potential complexity it could add to the virtual machine interpreter state, with significant implications for consensus stability. The addition would mark a substantial shift in the virtual machine's formal structure by enabling 64-bit operations within script execution. This change is seen as particularly problematic due to the confusing nature of mixing standard and 64-bit specific operations within the same script. An example provided illustrates the point where consecutive operations like `OP_ADD` and `OP_SUB` would have their interpretation altered mid-script through the use of `OP_ENABLE64BIT`, resulting in a mix of numerical systems that could be difficult to follow.

A contrasting approach suggests the adoption of a `leaf_version` path that offers a more holistic solution. By using such a method, it would become possible to interpret all arithmetic operations as 64-bit at a global level throughout the entire script execution. This would ensure consistency in operation interpretation and reduce the risk of introducing consensus issues. The global reasoning within the interpreter, when following this path, simplifies the understanding of arithmetic operation handling by maintaining a uniform operational context.</summary>
    <published>2024-01-11T17:19:08.767000+00:00</published>
  </entry>
</feed>
