<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Unspendable keys in descriptors</title>
  <updated>2024-01-17T02:05:00.876838+00:00</updated>
  <author>
    <name>salvatoshi 2024-01-16 15:02:53.929000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Unspendable keys in descriptors</title>
    <updated>2024-01-17T02:05:00.876871+00:00</updated>
    <link href="https://delvingbitcoin.org/t/unspendable-keys-in-descriptors/304/24" rel="alternate"/>
    <summary>The discussion revolves around the integration of wallet policy features in programming standards. The argument presented suggests that expecting a wallet policy feature is a reasonable assumption and that programming standards should not be optimized for scenarios where such a feature is absent. Concerns are raised regarding other proposals which increase the complexity of code on hardware signers. These signers would be required to interpret "descriptor templates" to ascertain the correct sequence of keys, hence adding more layers to their processing.

Furthermore, it's highlighted that wallet policies might incorporate identical `@i` placeholders multiple times, particularly with taproot technology. This poses a challenge as it could lead to either redundant concatenation of the same public key or necessitate a parser that is capable of recognizing and skipping already processed placeholders. The implication here is that there needs to be an efficient, stateful approach when dealing with repeated elements within wallet policies to avoid unnecessary complications in parsing and interpreting data. 

The conclusions imply the necessity for careful consideration of wallet policy features' impact on the complexity and functionality of hardware signers, and the importance of creating standards that accommodate these features efficiently.</summary>
    <published>2024-01-16T15:02:53.929000+00:00</published>
  </entry>
</feed>
