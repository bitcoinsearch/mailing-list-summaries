<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>64 bit arithmetic soft fork</title>
  <updated>2024-01-13T02:01:58.282404+00:00</updated>
  <author>
    <name>rustyrussell 2024-01-12 16:22:29.735000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>64 bit arithmetic soft fork</title>
    <updated>2024-01-13T02:01:58.282434+00:00</updated>
    <link href="https://delvingbitcoin.org/t/64-bit-arithmetic-soft-fork/397/19" rel="alternate"/>
    <summary>The discussion opens with the opinion that the modal hack is not an optimal solution and suggests that new opcodes should be developed. These new opcodes would ideally handle unsigned numbers exclusively, thereby simplifying their implementation and use. Additionally, there is a clear preference expressed for increased precision within these opcodes, as the current 64-bit standard may be insufficient in certain contexts, especially when compared to the limitations posed by a 31-bit system in handling larger numerical amounts.

Another point of consideration is the potential reactivation of specific operations such as multiplication (MUL), left shift (LSHIFT), and substring extraction (SUBSTR). The implications and interactions of reintroducing these operations need to be thoroughly examined to ensure they can be effectively integrated without causing unforeseen issues.

For those interested in exploring the subject further, the author has provided a link to an informative resource that delves into the topic of arithmetic opcodes. This resource, which can be found at https://rusty.ozlabs.org/2023/12/30/arithmetic-opcodes.html, offers a more detailed analysis and could serve as a valuable reference for anyone considering the proposed changes or seeking a deeper understanding of the intricacies involved in opcode development and application.</summary>
    <published>2024-01-12T16:22:29.735000+00:00</published>
  </entry>
</feed>
