<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>64 bit arithmetic soft fork</title>
  <updated>2024-01-12T02:12:36.845257+00:00</updated>
  <author>
    <name>ProofOfKeags 2024-01-11 16:46:12.669000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>64 bit arithmetic soft fork</title>
    <updated>2024-01-12T02:12:36.845285+00:00</updated>
    <link href="https://delvingbitcoin.org/t/64-bit-arithmetic-soft-fork/397/10" rel="alternate"/>
    <summary>The programming community is currently deliberating on the introduction of a new opcode, `OP_ENABLE64BIT`, which would enable arithmetic opcodes within a script to accept inputs up to 8 bytes in size. There are concerns regarding the expansion of the state variable of the script's virtual machine (VM). Typically, opcodes within the VM interact with the main and alternate stacks or halt the execution of the VM, which can be represented by a state transition function, as shown:

``` 
exec_op : (MainStack, AltStack) -&gt; (MainStack, AltStack) 
```

However, introducing `OP_ENABLE64BIT` would necessitate the addition of a third component, the `VMInterpreterState`, altering the current structure of the VM. This could significantly broaden the potential for consensus issues due to the increased complexity of the VM's state. The suggestion to implement this opcode marks a radical shift in the formalism of the VM. Those in favor of such developments must consider the implications on the script's reliability and the risk of introducing new avenues for bugs that may affect consensus.</summary>
    <published>2024-01-11T16:46:12.669000+00:00</published>
  </entry>
</feed>
