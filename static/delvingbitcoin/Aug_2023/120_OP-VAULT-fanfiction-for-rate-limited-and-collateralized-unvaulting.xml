<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>OP_VAULT fanfiction for rate-limited and collateralized unvaulting</title>
  <updated>2024-01-16T02:31:31.576962+00:00</updated>
  <author>
    <name>instagibbs 2023-08-22 20:42:30.666000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>OP_VAULT fanfiction for rate-limited and collateralized unvaulting</title>
    <updated>2024-01-16T02:31:31.577004+00:00</updated>
    <link href="https://delvingbitcoin.org/t/op-vault-fanfiction-for-rate-limited-and-collateralized-unvaulting/55" rel="alternate"/>
    <summary>The final form of BIP345 is currently being considered, featuring a set of proposed modifications aimed at enhancing the proposal's flexibility. These changes involve a slight but significant modification to the OP_FORWARD_PARTIAL opcode, suggesting an alternative way that OP_VAULT operates. The recommendation is for OP_VAULT to take explicit arguments rather than its current implicit ones. The idea is to remove certain opcodes and instead push the minimally-encoded residual value of the input left over from the execution onto the stack. This would change the parameters required by OP_VAULT to a more simplified form.

Additionally, a new opcode called OP_REVAULT has been proposed. It is designed to take specific arguments and return a success indicator upon completion. This separation between OP_VAULT and OP_REVAULT allows for enhanced functionality such as adding partial collateral through committing to additional VAULT opcodes, or implementing per-utxo-rate-limited unvaults by committing to the unvaulting amount. The latter could be executed by using a sequence of opcodes to perform conditional checks and verifications before invoking OP_VAULT and OP_REVAULT, with some arithmetic operations involved to manage denominations in practical applications.

The debate around these suggestions includes differing opinions on their necessity, with some, like James, finding them unnecessary, while others might consider the conceptual exploration valuable. The proposed modifications are positioned as a cleanup to existing operations within Bitcoin's scripting language, potentially allowing for more intricate smart contract-like behaviors within Bitcoin transactions.</summary>
    <published>2023-08-22T20:42:30.666000+00:00</published>
  </entry>
</feed>
