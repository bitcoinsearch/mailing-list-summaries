<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP352: PSBT support</title>
  <updated>2024-05-20T02:00:56.950770+00:00</updated>
  <author>
    <name>Sosthene 2024-05-19 17:32:48.113000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP352: PSBT support</title>
    <updated>2024-05-20T02:00:56.950803+00:00</updated>
    <link href="https://delvingbitcoin.org/t/bip352-psbt-support/877/2" rel="alternate"/>
    <summary>The email discusses the implementation and challenges of a basic PSBT (Partially Signed Bitcoin Transaction) workflow developed for a donation wallet, which has been incorporated into WebAssembly experiments by the sender. This initial setup, described as hacky with limitations, is highlighted as a foundation for future enhancements. The process for spending from silent payment (sp) outputs involves a proprietary method where the spend private key is tweaked with a `shared_secret_tweak` during the signing phase. This technique is essential for modifying the spend private key to derive the signing key, a critical step in the transaction signing process, detailed further with code references on GitHub ([sp-client](https://github.com/cygnet3/sp-client/blob/0a81059e2959b87798432fc10c9447ba276dc1a1/src/spclient.rs#L684)).

For transactions directed towards sp addresses, the approach becomes more intricate. It employs the output proprietary field for storing the recipient's sp address and includes a placeholder scriptpubkey in the unsigned transaction. This strategy facilitates accurate fee calculation while allowing modifications to the PSBT until the actual output keys need to be finalized based on the transaction's current state. Additional insights are shared through a GitHub link ([sp-client details](https://github.com/cygnet3/sp-client/blob/0a81059e2959b87798432fc10c9447ba276dc1a1/src/spclient.rs#L267)), emphasizing this method's effectiveness despite potential for optimization. 

The communication also touches on the challenges of handling inputs in silent payment taproot scripts, particularly distinguishing between eligible and non-eligible prevoutsâ€”a task simplified in this context by assuming ownership of all prevouts. The possibility of enhancing coinjoin wallets with silent payment features is mentioned, alongside concerns about the security of such implementations, suggesting a dialogue with experts in the secp256k1 cryptography standard might be beneficial to address these issues comprehensively.</summary>
    <published>2024-05-19T17:32:48.113000+00:00</published>
  </entry>
</feed>
