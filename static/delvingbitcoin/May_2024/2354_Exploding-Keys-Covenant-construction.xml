<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Exploding Keys - Covenant construction</title>
  <updated>2024-05-03T01:58:50.937256+00:00</updated>
  <author>
    <name>ZmnSCPxj 2024-05-02 15:14:10.286000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Exploding Keys - Covenant construction</title>
    <updated>2024-05-03T01:58:50.937291+00:00</updated>
    <link href="https://delvingbitcoin.org/t/exploding-keys-covenant-construction/832/3" rel="alternate"/>
    <summary>The discussion revolves around enhancing the flexibility and security of transactions within a blockchain system, specifically focusing on a proposal that aims to refine how spends are executed. The core idea is to utilize `MuSig(outputs)` as the internal public key for spent inputs, which introduces a method to execute transactions without disclosing any scripts for certain types of spends, termed as 'splody-path spend. This approach allows the transaction to only reveal the topmost `TapRoot` hash, maintaining privacy and security.

The proposal outlines various spending options, each tailored to meet different security and consensus requirements. For instance, in the case of an exclusive 'splody-path spend, the actual public key is defined as the `MuSig(outputs)`, and this type of transaction would proceed with an empty witness, enhancing privacy by concealing the transaction's specifics. Similarly, for a consensual transaction where all parties are in agreement, the process includes a witness alongside a 64 bytes signature, ensuring both transparency and security through collective consent.

Further refining the spending processes, the proposal details scenarios where either a 'splody-path spend or a taproot spend could occur. In such cases, the actual public key is constructed as `P + hash(P | tagged_hash("TapRoot", whatever))`, with `P` representing the `MuSig(output)`. This methodology not only secures the transaction but also provides versatility in how the spends are executed, offering options for an empty witness in a 'splody-path spend, a 32 bytes tagged hash output for verification, or a comprehensive witness comprising a control block, tapleaf script, and its corresponding witness stack for tapleaf spends. 

These mechanisms collectively aim to bolster transaction security, minimize unnecessary disclosure of transaction details, and enhance the overall flexibility of the spending process within the blockchain framework.</summary>
    <published>2024-05-02T15:14:10.286000+00:00</published>
  </entry>
</feed>
