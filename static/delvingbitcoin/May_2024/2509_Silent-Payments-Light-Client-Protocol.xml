<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Silent Payments: Light Client Protocol</title>
  <updated>2024-05-23T01:59:30.611212+00:00</updated>
  <author>
    <name>cygnet3 2024-05-22 19:17:29.310000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Silent Payments: Light Client Protocol</title>
    <updated>2024-05-23T01:59:30.611248+00:00</updated>
    <link href="https://delvingbitcoin.org/t/silent-payments-light-client-protocol/891/8" rel="alternate"/>
    <summary>The discussion revolves around the implementation strategies for interacting with the Blindbit oracle as a backend in programming environments. Specifically, it highlights the method of converting the utxo array into a map, as demonstrated in the provided code snippet [convert the utxo array into a map](https://github.com/cygnet3/donationwallet/blob/f07f4e13013c168049e9d595d9bdffd24991f777/rust/src/blindbit/logic.rsL144). This approach aligns with the structure of the JSON mentioned, suggesting a potential simplification by removing the `txid` from the output structure to streamline the process.

Furthermore, an alternative technique is discussed for scenarios not utilizing Blindbit, where a BIP158 client comes into play. In such cases, the strategy involves requesting the full block to access the complete transaction structure. This indicates a versatile approach to handling backend operations depending on the specific requirements or constraints of the project at hand, whether it be through the direct manipulation of data structures like utxo arrays or through leveraging client requests for comprehensive transaction information.</summary>
    <published>2024-05-22T19:17:29.310000+00:00</published>
  </entry>
</feed>
