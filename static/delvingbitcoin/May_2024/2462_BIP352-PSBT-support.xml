<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP352: PSBT support</title>
  <updated>2024-05-21T01:58:13.636027+00:00</updated>
  <author>
    <name>josibake 2024-05-20 12:01:29.956000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP352: PSBT support</title>
    <updated>2024-05-21T01:58:13.636061+00:00</updated>
    <link href="https://delvingbitcoin.org/t/bip352-psbt-support/877/3" rel="alternate"/>
    <summary>The discussion emphasizes the necessity for clarifying the process involved in spending from specific outputs within a PSBT (Partially Signed Bitcoin Transaction). It highlights a particular concern regarding the utilization of `shared_secret_tweak` in conjunction with specifying the exact spend private key that needs to be tweaked. This is especially pertinent when dealing with transactions involving outputs sent to different silent payment addresses, necessitating a mechanism to distinctly associate each `shared_secret_tweak` with its respective input and corresponding spend key.

Further inquiry is made into the PSBT's capacity to store critical information about previous transactions (prevout), which could facilitate the differentiation between eligible and non-eligible prevouts. A significant point of investigation is whether the PSBT format inherently provides sufficient details about the prevout to ascertain if the output being spent adheres to specific criteria, such as not being a SegWit witness version greater than 1. This aspect is crucial for ensuring the proper execution and security of transactions that involve complex conditions like those described.</summary>
    <published>2024-05-20T12:01:29.956000+00:00</published>
  </entry>
</feed>
