<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Anonymous usage tokens from curve trees or autct</title>
  <updated>2024-05-23T01:58:22.545298+00:00</updated>
  <author>
    <name>kayabaNerve 2024-05-22 09:44:21.287000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Anonymous usage tokens from curve trees or autct</title>
    <updated>2024-05-23T01:58:22.545322+00:00</updated>
    <link href="https://delvingbitcoin.org/t/anonymous-usage-tokens-from-curve-trees-or-autct/862/6" rel="alternate"/>
    <summary>The discussion centers around the limitations of ring signature-based mechanisms due to their failure in achieving sublinear verification times. The conversation highlights the necessity for either a succinct proof with linear proving time or altering the problem to one that inherently possesses sublinear complexity, such as utilizing a Merkle tree structure. However, an innovative solution presented through the [Curve Trees](https://eprint.iacr.org/2022/756.pdf) approach offers a promising avenue for trustless setups. This method not only addresses the verification challenge but also showcases impressive keyset sizes ranging from 50K to 2.5M while maintaining verification times primarily between 40 and 70ms.

Further advancements have been made in applying Curve Trees to Monero, leading to even more efficient outcomes. Specifically, verification of one proof has been reduced to 35ms, employing two curves without specialized field implementations yet leveraging crypto-bigint's Residue type; batch verification further decreases this time to 11ms for ten proofs. This efficiency is partly due to an effective algorithm that resolves the "yyy-coordinate tiebreaker" issue within the arithmetic circuit, ensuring that the transformation from xxx-coordinate to curve point is unambiguous. This algorithm, discussed in detail [here](https://github.com/AdamISZ/aut-ct/issues/10), allows for the optimization of the initial key setup process, thus mitigating the time cost associated with trustless bootstrapping.

Moreover, the dialogue touches upon the challenge of producing a collision on the layers by hashing negative words and proposes using an initialization generator with a constant coefficient of 1 to avoid negation issues, which would otherwise necessitate solving the Discrete Logarithm Problem (DLP) for both the initialization generator and other generators.

The conversation also distinguishes between Generalized Bulletproofs, which Curve Trees are based upon, and traditional Bulletproofs. Generalized Bulletproofs offer advantages in terms of 'native' operations regarding Pedersen Vector Commitments. Additionally, it's mentioned that Microsoftâ€™s SPARTAN, accessible [here](https://github.com/personaelabs/spartan-ecdsa), presents another viable approach that doesn't rely on pairings or assumptions beyond the Elliptic Curve Discrete Logarithm (ECDL). However, implementing Spartan might be more resource-intensive due to the need for manual construction on the towering curve.

Lastly, the possibility for users to prove ownership is acknowledged through the re-randomized output key opening. This method leverages an existing Discrete Logarithm Equality (DLEq) proof, which also facilitates linkability, illustrating a comprehensive approach to address both technical challenges and user-centric needs within the cryptographic domain.</summary>
    <published>2024-05-22T09:44:21.287000+00:00</published>
  </entry>
</feed>
