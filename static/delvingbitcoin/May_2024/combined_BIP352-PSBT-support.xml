<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - BIP352: PSBT support</title>
  <updated>2024-05-27T02:01:01.330548+00:00</updated>
  <author>
    <name>andrewtoth 2024-05-27 00:34:44.509000+00:00</name>
  </author>
  <author>
    <name>andrewtoth  . 2024-05-20 17:56:49.967000+00:00</name>
  </author>
  <author>
    <name>josibake  . 2024-05-20 12:01:29.956000+00:00</name>
  </author>
  <author>
    <name>Sosthene  . 2024-05-19 17:32:48.113000+00:00</name>
  </author>
  <author>
    <name>josibake  . 2024-05-17 11:51:04.620000+00:00</name>
  </author>
  <link href="delvingbitcoin/May_2024/2539_BIP352-PSBT-support.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2024/2478_BIP352-PSBT-support.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2024/2462_BIP352-PSBT-support.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2024/2458_BIP352-PSBT-support.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2024/2441_BIP352-PSBT-support.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - BIP352: PSBT support</title>
    <updated>2024-05-27T02:01:01.330626+00:00</updated>
    <link href="https://delvingbitcoin.org/t/bip352-psbt-support/877/5" rel="alternate"/>
    <summary>The email contains detailed discussions on the implementation and challenges of integrating silent payment functionalities within the Partially Signed Bitcoin Transactions (PSBT) framework, focusing on ensuring compatibility, security, and efficiency. It begins with technical enhancements proposed for silent payments, specifically addressing the need to prevent older versions from mistakenly signing placeholder scriptpubkey by making PSBT_OUT_SCRIPT optional. This adaptation helps in avoiding unnecessary inclusions by older implementations that do not recognize silent payment fields. Furthermore, the email introduces measures to solidify transaction integrity by suggesting that the Inputs Modifiable Flag and the Silent Payments Modifiable Flag be set to false. This action ensures outputs are generated once, facilitating simpler fee calculations and maintaining transaction finality.

Moreover, the email raises a critical concern about ensuring transaction outputs comply with specific criteria, proposing the merge of Constructor and Updater roles within the PSBT framework. This merge aims to simplify the discrimination between eligible and non-eligible prevouts, thereby enforcing mutual exclusion between silent payment outputs and inputs marked as ANYONECANSPEND or Segwit version greater than 1. The discussion extends into the technical complexities of implementing silent payments, highlighting the importance of careful design to uphold compatibility and security standards while adhering to intended transaction parameters. 

Another significant aspect covered is the challenge of managing `shared_secret_tweak` across different silent payment addresses within a transaction, underscoring the necessity for a mechanism to link each tweak with its corresponding input and spend key. This aspect underscores the complexity involved in transactions with multiple silent payment outputs, emphasizing the need for precise execution to ensure transaction security.

The email further delves into an experimental setup developed for a donation wallet, which incorporates WebAssembly for spending from silent payment outputs. Despite being described as hacky, this initial setup marks a foundational step towards future enhancements. The described method tweaks the spend private key with a `shared_secret_tweak` during the signing phase, crucial for deriving the correct signing key. This process underscores the intricacies of transactions directed towards silent payment addresses and highlights the potential for optimization despite current limitations.

Additionally, the possibility of enhancing coinjoin wallets with silent payment features is mentioned, raising concerns about security implications. This segment suggests engaging with experts in secp256k1 cryptography to comprehensively address these concerns, reflecting the ongoing dialogue within the community regarding the balance between advanced features and their security ramifications.

Finally, the discussion touches upon both the current capabilities and future possibilities for supporting the sending and spending of silent payment outputs in PSBTs. A promising approach for immediate implementation involves using the `PSBT_IN_PROPRIETARY` type alongside a `shared_secret_tweak`, indicating potential for standardization and further development. Moreover, a draft BIP proposes an `OutputGenerator` role to streamline silent payment integrations, suggesting innovative methods for secure collaborations without full key disclosure. Despite these advancements, the text cautions against unproven security methods and emphasizes the importance of ongoing discussions to navigate the technical and security complexities involved in fully supporting silent payments within the PSBT framework.</summary>
    <published>2024-05-27T00:34:44.509000+00:00</published>
  </entry>
</feed>
