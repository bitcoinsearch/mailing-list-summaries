<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - BIP352: PSBT support</title>
  <updated>2024-05-28T02:02:31.030709+00:00</updated>
  <author>
    <name>andrewtoth 2024-05-27 22:13:47.258000+00:00</name>
  </author>
  <author>
    <name>andrewtoth  . 2024-05-27 00:34:44.509000+00:00</name>
  </author>
  <author>
    <name>andrewtoth  . 2024-05-20 17:56:49.967000+00:00</name>
  </author>
  <author>
    <name>josibake  . 2024-05-20 12:01:29.956000+00:00</name>
  </author>
  <author>
    <name>Sosthene  . 2024-05-19 17:32:48.113000+00:00</name>
  </author>
  <author>
    <name>josibake  . 2024-05-17 11:51:04.620000+00:00</name>
  </author>
  <link href="delvingbitcoin/May_2024/2548_BIP352-PSBT-support.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2024/2539_BIP352-PSBT-support.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2024/2478_BIP352-PSBT-support.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2024/2462_BIP352-PSBT-support.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2024/2458_BIP352-PSBT-support.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2024/2441_BIP352-PSBT-support.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - BIP352: PSBT support</title>
    <updated>2024-05-28T02:02:31.030799+00:00</updated>
    <link href="https://delvingbitcoin.org/t/bip352-psbt-support/877/6" rel="alternate"/>
    <summary>The email provides an intricate discussion on the technical enhancements and security considerations for implementing silent payments within the Partially Signed Bitcoin Transaction (PSBT) framework. It introduces the concept of using an "ECDH share" instead of direct access to private keys for the `OutputGenerator`, a method aimed at enhancing security by potentially eliminating the need for the `OutputGenerator` role. This approach, however, is highlighted as theoretically possible but not provably secure, indicating a cautious stance towards its implementation due to unverified security assurances and potential issues with signing devices responding to Diffie-Hellman requests.

A significant update mentioned in the email is the inclusion of the DLEQ (Discrete Logarithm Equality) proof in the draft Bitcoin Improvement Proposal (BIP), based on contributions from [RubenSomsen's gist](https://gist.github.com/RubenSomsen/be7a4760dd4596d06963d67baf140406). This addition aims to enhance the proposalâ€™s security and efficiency by integrating advanced cryptographic techniques, showcasing a commitment to maintaining high standards of security and reliability. The integration of peer-reviewed innovations such as the DLEQ proof is portrayed as a critical step forward in developing the BIP, emphasizing a focus on cryptographic rigor.

The email further discusses the practical aspects of implementing silent payments, including the need to make PSBT_OUT_SCRIPT optional to prevent older versions from mistakenly signing placeholder scriptpubkey for fee calculation. It addresses the necessity of ensuring transaction integrity by setting specific flags to false, thereby preventing changes to inputs and the addition of new silent payment outputs after their generation. This measure simplifies the transaction process and enhances security by dictating that outputs be generated only once, facilitating accurate fee calculations.

Moreover, the communication delves into the complexities of executing transactions involving silent payment addresses. It underscores the challenge of associating each `shared_secret_tweak` with its corresponding input and spend key, essential for transactions directed towards different silent payment addresses. The potential of storing critical information about previous transactions in the PSBT format to distinguish between eligible and non-eligible prevouts is also examined, highlighting the intricacies involved in ensuring the proper execution and security of these transactions.

Lastly, the email outlines a basic workflow developed for a donation wallet and incorporated into WebAssembly experiments, describing it as foundational despite its limitations. It details the process of spending from silent payment outputs using a proprietary method where the spend private key is tweaked during the signing phase. For transactions towards silent payment addresses, a method involving the output proprietary field and placeholder scriptpubkey is discussed, demonstrating the approach's effectiveness while acknowledging room for optimization. The possibility of enhancing coinjoin wallets with silent payment features is suggested, raising concerns about security and the need for expert consultations on secp256k1 cryptography to comprehensively address these issues.

In summary, the discussion encapsulates the ongoing efforts and proposed methodologies for supporting the sending and spending of silent payment outputs in PSBTs. It reflects on both the current capabilities and future directions for improving privacy and security in cryptocurrency transactions, marking significant strides toward more private and secure transaction mechanisms.</summary>
    <published>2024-05-27T22:13:47.258000+00:00</published>
  </entry>
</feed>
