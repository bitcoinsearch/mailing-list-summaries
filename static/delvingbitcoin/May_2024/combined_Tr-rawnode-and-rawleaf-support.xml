<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Tr(): rawnode() and rawleaf() support</title>
  <updated>2024-06-01T02:03:55.805891+00:00</updated>
  <author>
    <name>josibake 2024-05-31 14:36:20.302000+00:00</name>
  </author>
  <author>
    <name>Eunovo  . 2024-05-29 08:00:27.448000+00:00</name>
  </author>
  <author>
    <name>ajtowns  . 2024-05-28 21:20:57.620000+00:00</name>
  </author>
  <author>
    <name>Eunovo  . 2024-05-28 17:41:55.616000+00:00</name>
  </author>
  <author>
    <name>Eunovo  . 2024-05-28 17:37:26.121000+00:00</name>
  </author>
  <author>
    <name>sipa  . 2024-05-28 15:49:08.375000+00:00</name>
  </author>
  <author>
    <name>josibake  . 2024-05-22 15:28:00.776000+00:00</name>
  </author>
  <author>
    <name>Eunovo  . 2024-05-22 15:25:38.310000+00:00</name>
  </author>
  <link href="delvingbitcoin/May_2024/2581_Tr-rawnode-and-rawleaf-support.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2024/2561_Tr-rawnode-and-rawleaf-support.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2024/2559_Tr-rawnode-and-rawleaf-support.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2024/2557_Tr-rawnode-and-rawleaf-support.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2024/2556_Tr-rawnode-and-rawleaf-support.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2024/2555_Tr-rawnode-and-rawleaf-support.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2024/2504_Tr-rawnode-and-rawleaf-support.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2024/2503_Tr-rawnode-and-rawleaf-support.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Tr(): rawnode() and rawleaf() support</title>
    <updated>2024-06-01T02:03:55.805967+00:00</updated>
    <link href="https://delvingbitcoin.org/t/tr-rawnode-and-rawleaf-support/901/8" rel="alternate"/>
    <summary>The utilization of Nested 2-of-3 Key Bundles (N2KBs) in digital transactions presents a sophisticated method for managing funds with an emphasis on security and flexibility. N2KBs enable the creation of spend paths that are not immediately visible to all parties involved, which is particularly beneficial in scenarios such as inheritance or escrow services where the primary focus is on ensuring the recoverability of funds under adverse circumstances, like the loss of all keys by a beneficiary. This technology proves especially useful when assets are distributed across multiple wallets, each designed for specific purposes or levels of security. For instance, a primary wallet might be equipped to handle complex contracts, while a backup hardware or cold wallet could have limited functionality. However, with the knowledge of only the internal public key and a specific rawnode leaf, a backup wallet can still execute transactions, ensuring that funds remain accessible even if the advanced contract features supported by the primary wallet are beyond the backup wallet's capabilities.

There is an ongoing conversation within the community regarding the apprehension about hidden spend paths in N2KBs, prompting inquiries directed towards experts like @sipa and @JeremyRubin for insights. This dialogue reflects concerns about the transparency and trustworthiness of N2KBs in transactional processes, suggesting a need for clearer mechanisms or improved transparency to maintain confidence among all transaction parties. Engaging with experts underscores the value placed on expert opinions in addressing challenges and fostering innovation in the space, highlighting a collaborative effort towards enhancing the security and integrity of transactions facilitated by new technologies.

Moreover, discussions surrounding Bitcoin's Taproot descriptors, specifically through proposals on GitHub and detailed technical documents, introduce two new descriptor types: `rawnode(HEXHASH)` and `rawleaf(HEXSCRIPT,[HEXLEAFVER])`. These additions aim to increase the flexibility and functionality within the context of specifying Taproot trees. The `rawnode()` descriptor facilitates the specification of branches within a Taproot tree using its merkle hash, supporting Need-to-Know-Branches (N2KB) and allowing for the construction of Taproot trees with omitted information or simplified TR trees. On the other hand, the `rawleaf()` descriptor provides a means to include raw scripts with different leaf versions, enhancing precise script and leaf version communication. This ongoing discussion indicates a preference for maintaining specificity in descriptors to avoid overloading existing ones, reflecting efforts towards streamlining Bitcoin's cryptographic framework for improved privacy and efficiency.

A proof of concept has been developed, showcasing the implementation of two new `DescriptorImpl` subclasses: `RawNodeDescriptor` and `RawLeafDescriptor`, both valid only within the P2TR context. This development raises questions about the advantages of these descriptors over previous methods, hinting at their potential benefits in terms of specificity and flexibility in constructing and inferring Taproot descriptors.</summary>
    <published>2024-05-31T14:36:20.302000+00:00</published>
  </entry>
</feed>
