<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP352: PSBT support</title>
  <updated>2024-05-30T02:00:37.011841+00:00</updated>
  <author>
    <name>andrewtoth 2024-05-29 13:51:12.405000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP352: PSBT support</title>
    <updated>2024-05-30T02:00:37.011880+00:00</updated>
    <link href="https://delvingbitcoin.org/t/bip352-psbt-support/877/8" rel="alternate"/>
    <summary>The Musig2 PSBT BIP draft focuses on fields for inputs, specifically catering to spending support rather than sending support, indicating a limitation in its application for certain transaction types. It suggests that in scenarios involving numerous inputs and outputs, such as coinjoins, the data required for proofs could become excessively large, although this should not pose an issue for standard transactions. The draft outlines a workflow for different cases depending on the signer's access to private keys and the level of trust a wallet has in the signer.

In the first scenario, if the signer possesses private keys for all inputs and is trusted by the wallet, they are responsible for generating output scripts and completing the signing process independently. This straightforward approach simplifies the transaction process when a single entity controls all aspects of the transaction.

The second case addresses situations where the signer has keys to inputs eligible for silent payments but may also encounter non-eligible inputs or a lack of trust from the wallet. Here, the signer not only generates outputs but must also calculate and attach an ECDH sum and proof for each eligible input per output. This additional step ensures that other signers or the wallet can verify silent payment outputs prior to signing their inputs or broadcasting the transaction, respectively.

The third scenario expands upon the previous ones by considering signers with access to only some private keys for silent payment-eligible inputs. These signers contribute by creating an ECDH share and attaching it with a proof to each output, specifying which inputs these proofs correlate with. This process might require multiple rounds of signing, especially if not all necessary shares and proofs are initially present. However, it's noted that all these cases could potentially be simplified into the third case scenario, where, under full trust between the wallet and signer, the need for proofs might be eliminated altogether.

This workflow emphasizes the importance of adaptability and verification in transactions involving multiple signers and varying degrees of trust, ensuring security and integrity through the use of ECDH sums and proofs.</summary>
    <published>2024-05-29T13:51:12.405000+00:00</published>
  </entry>
</feed>
