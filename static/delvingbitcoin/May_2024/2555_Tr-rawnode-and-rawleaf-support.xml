<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Tr(): rawnode() and rawleaf() support</title>
  <updated>2024-05-29T02:04:08.312461+00:00</updated>
  <author>
    <name>sipa 2024-05-28 15:49:08.375000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Tr(): rawnode() and rawleaf() support</title>
    <updated>2024-05-29T02:04:08.312491+00:00</updated>
    <link href="https://delvingbitcoin.org/t/tr-rawnode-and-rawleaf-support/901/3" rel="alternate"/>
    <summary>The discussion centers on the comparative advantages of using `tr(internal_key,rawnode(merkle_root))` over `rawtr(tr_public_key)` in cryptographic systems. The primary advantage highlighted is that the former approach provides more comprehensive information by including the internal key. This inclusion aligns with the philosophical underpinning of partial descriptors in cryptography, which advocates for the flexibility to convey any subset of relevant information. From a practical standpoint, this approach benefits signers who may recognize the internal key but not the tweaked output key. By having access to both the `internal_key` and `merkle_root`, signers are better positioned to identify the correct key, enhancing the system's overall functionality and security. This explanation underscores the importance of selecting cryptographic methods that offer both broad and specific data points to accommodate various user needs and scenarios.</summary>
    <published>2024-05-28T15:49:08.375000+00:00</published>
  </entry>
</feed>
