<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Silent Payments: Light Client Protocol</title>
  <updated>2024-05-22T03:10:49.257290+00:00</updated>
  <author>
    <name>setavenger 2024-05-21 09:15:50.167000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Silent Payments: Light Client Protocol</title>
    <updated>2024-05-22T03:10:49.257326+00:00</updated>
    <link href="https://delvingbitcoin.org/t/silent-payments-light-client-protocol/891" rel="alternate"/>
    <summary>The development of light clients in the blockchain space has led to the creation of a preliminary [Light Client Specification](https://github.com/setavenger/BIP0352-light-client-specification), which draws from the appendix of the SP BIP. This specification aims to address two critical challenges faced by light clients: reducing the computational burden and minimizing bandwidth usage, without compromising user privacy. By designing a protocol that allows light clients to connect to any public indexing server with minimal information disclosure—merely expressing interest in a specific block—the specification endeavors to enhance efficiency and privacy.

To alleviate the computational demands on light clients, the specification introduces the concept of generating a tweak index. This approach not only diminishes the computational workload but also lessens bandwidth consumption by employing cut-through for transactions, specifically pruning tweaks for transactions where all taproot Unspent Transaction Outputs (UTXOs) have been spent. Bandwidth reduction is further achieved by ensuring that only the necessary data for a light client to locate and spend a UTXO is transmitted.

The specification outlines a basic workflow for light clients to receive information, which involves fetching tweaks (with potential filtering for dust limits), computing possible public keys, fetching taproot-only filters (BIP 158), and comparing these public keys against the taproot-only filter to determine matches. If a match is found, the client proceeds to fetch simplified UTXOs, scans according to the BIP, collects all matched UTXOs for addition to their wallet, and then repeats the process for the next block height. Additionally, the specification advises tracking scriptPubKeys that have already received funds, providing a rationale for this recommendation within the document. This structured approach promises to significantly enhance the performance and usability of light clients by streamlining their operations and reducing unnecessary overheads.</summary>
    <published>2024-05-21T09:15:50.167000+00:00</published>
  </entry>
</feed>
