<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Atomic swap</title>
  <updated>2023-06-01T23:44:35.865618+00:00</updated>
  <author>
    <name>Pierre 2015-09-14 13:35:02</name>
  </author>
  <author>
    <name>Rusty Russell 2015-09-14 18:46:10</name>
  </author>
  <author>
    <name>Pierre 2015-09-14 21:44:26</name>
  </author>
  <link href="lightning-dev/Sept_2015/000184_Atomic-swap.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2015/000185_Atomic-swap.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2015/000186_Atomic-swap.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Atomic swap</title>
    <updated>2023-06-01T23:44:35.866665+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-September/000184.html" rel="alternate"/>
    <summary>In a Bitcoin forum, some individuals proposed an idea for secure movement of funds in and out of existing channels using htlc contracts. This implementation would facilitate funding balanced channels and provide merchants with a seamless way to cash out their funds. Rusty-style protobuf messages illustrate the implementation's workings, with separate flows for swap in and swap out processes. The regular swap in flow involves Bob sending Alice a swap_in_offer, which Alice accepts and sends an update_add_htlc message to Bob. Bob then sends an update_fulfill_htlc message to Alice after revealing the hash r. The regular swap out flow involves Bob sending Alice a swap_out_offer, which Alice accepts and then sends an update_add_htlc message to Bob. Alice then sends an update_fulfill_htlc message to Bob after revealing the hash r. However, two caveats require addressing. Firstly, a way to add another anchor to a channel is necessary since atomic swaps cannot increase channel capacity. Secondly, there is a routing question. The proposal involves normal HTLCs but with a different "next hop" - "bitcoin address X" instead of "lightning node X." No protocol changes are necessary except for adding routing information to the commitment transaction to initiate the HTLC.The discussion revolves around finding a method to add another anchor to a channel. Updating channel capacity is critical, and participants express excitement about this approach. They discuss the use of normal HTLCs with a bitcoin address as the "next hop" instead of a lightning node. The tone is generally positive, and the implementation seems promising.</summary>
    <published>2015-09-14T13:35:02+00:00</published>
  </entry>
</feed>
