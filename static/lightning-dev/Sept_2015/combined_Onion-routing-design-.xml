<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Onion routing design.</title>
  <updated>2023-05-18T17:51:21.069028+00:00</updated>
  <author>
    <name>Anthony Towns 2015-09-22 05:25:44</name>
  </author>
  <author>
    <name>Anthony Towns 2015-09-22 01:22:57</name>
  </author>
  <author>
    <name>Anthony Towns 2015-09-19 01:44:18</name>
  </author>
  <author>
    <name>Anthony Towns 2015-09-19 01:27:16</name>
  </author>
  <link href="lightning-dev/Sept_2015/000205_Onion-routing-design-.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2015/000204_Onion-routing-design-.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2015/000194_Onion-routing-design-.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2015/000193_Onion-routing-design-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Onion routing design.</title>
    <updated>2023-05-18T17:51:21.069028+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-September/000205.html" rel="alternate"/>
    <summary>The context discusses the encryption of data with public and hop keys. It also mentions a protocol for nodes to create routes and calculate size, which includes random padding and encryption. The weakness in the protocol is that there is no MAC, allowing a nosy node to replace the routing entirely and probe through HTLCs.In September 2015, a discussion happened on the Lightning-dev mailing list about probing attacks. After suggesting an idea for preventing probing attacks, Rusty Russell proposed to use padding in the HTLC messages to prevent attackers from learning the length of the chain. However, Anthony Towns pointed out that any random bytes on the end would be included when calculating the sha256_hash sum by the next node.He suggested combining two approaches and setting S=sha256(H+X) and requiring revealing S as well as R for payment redemption. This way, any attempt to garble the padding makes S unrecoverable and renders the payment unredeemable, without relying on any verification/cooperation from anyone else on the network.Rusty Russell then suggested including a pubkey and using it to encrypt 0 padding. The last hop gets the privkey (and boundary information), and she can verify the padding. However, he later realized that this approach was missing a step.One could generate symmetric keys for each step in an onion route and transmit them to Bob. Then Bob can append E_KB(00000..) as padding. If one uses OFB or CTR mode for the symmetric cypher, they could calculate D_KD() of all the padding and use that to work out the hash H of the plaintext message. Though one cannot use CBC mode, which means that the format of a route should be changed accordingly.A suggestion is made to prevent probing by using two R values, one known only by the recipient and another by the sender, with the HTLCs payable on presentation of both R and S. The onion blob could be re-padded when forwarded, or encrypted bytes from the incoming message payload could be appended to it. There is no general solution to this problem, but parallel probes are not efficient due to channel capacity constraints.</summary>
    <published>2015-09-22T05:25:44+00:00</published>
  </entry>
</feed>
