<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Thoughts on JoinChannels, benefits for LN using Schnorr sig ?</title>
  <updated>2023-06-02T00:25:58.986427+00:00</updated>
  <author>
    <name>Jérôme Legoupil 2016-03-07 12:17:55</name>
  </author>
  <author>
    <name>Tier Nolan 2016-03-07 12:59:16</name>
  </author>
  <link href="lightning-dev/March_2016/000458_Thoughts-on-JoinChannels-benefits-for-LN-using-Schnorr-sig-.xml" rel="alternate"/>
  <link href="lightning-dev/March_2016/000460_Thoughts-on-JoinChannels-benefits-for-LN-using-Schnorr-sig-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Thoughts on JoinChannels, benefits for LN using Schnorr sig ?</title>
    <updated>2023-06-02T00:25:58.986427+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-March/000458.html" rel="alternate"/>
    <summary>Jerome has proposed the idea of JoinChannels, which are multi-party payment channels that involve more than two participants. JoinChannels are believed to be more efficient than 2-2 payment channels for the Lightning Network as they take up less blockchain space and have a faster signature time. The downside is that all participants must be online to participate in a transfer, which may become problematic if the payment needs to go through multiple JoinChannels with hundreds or thousands of participants. JoinChannels allow for bigger transfers of value through LN due to their higher connectivity. However, intermediate LN nodes can be more efficient with JoinChannels as they can put the sum of their funds into a JoinChannel, and the threshold condition of a transfer to occur is consequently higher. The author provides an example of how JoinChannels enable bigger transfers of value through LN by comparing it to a configuration where the sender cannot send "2" to receiver because B doesn't have enough funds in AB channel. If (A,B,C) had performed a (3/3) JoinChannel, sender could have sent "2" to receiver for the same value of funds locked in the previous example.The author also discusses the need for a way to do consensus enforced sequence numbers without requiring everyone to be online. A soft fork could be used with a locked transactions list committed to in the coinbase, and there would be fees to pay to get into the pending list. The author suggests only those negatively affected should have to sign to change the state and proposes a moderator and normal participants system for signing a state change. The hub would likely act as a moderator, and there would be a penalty if the moderator signs the same state number twice. Ideally, users would sign updates periodically to reduce clutter, and if someone signs state 180, they are signing all previous states too.</summary>
    <published>2016-03-07T12:17:55+00:00</published>
  </entry>
</feed>
