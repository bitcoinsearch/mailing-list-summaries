<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Payment presentation strawmen.</title>
  <updated>2023-06-02T00:53:02.556767+00:00</updated>
  <author>
    <name>Rusty Russell 2016-09-06 00:49:24</name>
  </author>
  <author>
    <name>Ryan Grant 2016-09-10 11:16:07</name>
  </author>
  <author>
    <name>Ryan Grant 2016-09-11 03:16:02</name>
  </author>
  <author>
    <name>Ryan Grant 2016-09-11 04:04:34</name>
  </author>
  <author>
    <name>Christian Decker 2016-09-10 21:36:12</name>
  </author>
  <link href="lightning-dev/Sept_2016/000606_Payment-presentation-strawmen-.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2016/000610_Payment-presentation-strawmen-.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2016/000612_Payment-presentation-strawmen-.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2016/000613_Payment-presentation-strawmen-.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2016/000611_Payment-presentation-strawmen-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Payment presentation strawmen.</title>
    <updated>2023-06-02T00:53:02.556767+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-September/000606.html" rel="alternate"/>
    <summary>The discussion revolves around how a payee instructs a payer on making payments through Lightning Network (LN) channels. Rusty presents his wishlist that includes minimal state required on the client and server, minimal network queries by the client, and presentation of a standard QR code for one-way communications. Rusty discusses three possibilities to address this issue, with option C being more scalable and option B working for the first million nodes. It is important to have reassembly protocol support available wherever payments may fragment when using multiple LN channels. A payment_id could be used to identify fragmented payments, which would help recipients join separate LN transactions. Christian Decker explains that there is nothing special about splitting a payment as long as the recipient knows the total amount they should be receiving and can delay the release of the secret until all funds are guaranteed. The partial payments are collated using the r-hash. An error is made by a speaker in the context, but it is unclear what the mistake was. They advise holding onto the r-hash longer, which could refer to a different approach or technique in relation to hashing. Finally, Ryan Grant suggests that fragmented payments made through multiple LN channels are trickier than transactions spending multiple UTXOs. To address this problem, reassembly protocol support should be available, and every wallet should assist in the accounting. Decker notes that theoretically, Lightning would support arbitrary splitting and merging along the payment paths, but it is unclear whether this is still possible when adding onion routing to the mix.</summary>
    <published>2016-09-06T00:49:24+00:00</published>
  </entry>
</feed>
