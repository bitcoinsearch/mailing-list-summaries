<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>HTLCs using OP_CHECKSEQUENCEVERIFY/OP_LOCKTIMEVERIFY and revocation hashes.</title>
  <updated>2023-05-17T16:59:27.093687+00:00</updated>
  <author>
    <name>Anthony Towns</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>HTLCs using OP_CHECKSEQUENCEVERIFY/OP_LOCKTIMEVERIFY and revocation hashes.</title>
    <updated>2023-05-17T16:59:27.093687+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-February/000441.html" rel="alternate"/>
    <summary>The email discusses a hypothetical payment scenario involving Alice, Eve, and Evelyn. The channels are set up with delay parameters for both channels and Alice's commitments include a fee that she expects will result in confirmation in less than a delay of "F". Two HTLCs exist where Eve pays Alice $X on receipt of R, CLTV at time T, and Alice pays Evelyn $X on receipt of R, CLTV at time T'. If the second HTLC is dealt with, things are fine so far, but on the other channel, Alice sends the R value to Eve, but Eve does not send Alice a commit transaction update, becoming completely unresponsive on this channel. As a result, Alice must broadcast her commit transaction containing the HTLC before the CLTV of the HTLC times out or Eve can try to claim the HTLC funds. The question arises as to which times out first, Alice's CSV or Eve's CLTV? Assuming the HTLC timeout is T0+1 day on the channel where Eve receives and T0+2 days on the channel where Eve sends, D + 2*F + N is what Eve wants to delay. Alice's CSV should have a delay less than one day, meaning Alice has a remaining 0.5 day time window in which her node must be up and running and connected to the Bitcoin network, to claim the HTLC funds.</summary>
    <published>2016-02-10T16:50:49+00:00</published>
  </entry>
</feed>
