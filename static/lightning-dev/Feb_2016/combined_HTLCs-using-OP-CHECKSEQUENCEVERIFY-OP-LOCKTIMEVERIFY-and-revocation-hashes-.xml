<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - HTLCs using OP_CHECKSEQUENCEVERIFY/OP_LOCKTIMEVERIFY and revocation hashes.</title>
  <updated>2023-05-18T20:09:11.485453+00:00</updated>
  <author>
    <name>Anthony Towns 2016-02-10 16:50:49</name>
  </author>
  <author>
    <name>Anthony Towns 2016-02-09 08:59:56</name>
  </author>
  <author>
    <name>Anthony Towns 2015-07-23 05:07:33</name>
  </author>
  <link href="lightning-dev/Feb_2016/000441_HTLCs-using-OP-CHECKSEQUENCEVERIFY-OP-LOCKTIMEVERIFY-and-revocation-hashes-.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2016/000437_HTLCs-using-OP-CHECKSEQUENCEVERIFY-OP-LOCKTIMEVERIFY-and-revocation-hashes-.xml" rel="alternate"/>
  <link href="lightning-dev/July_2015/000054_HTLCs-using-OP-CHECKSEQUENCEVERIFY-OP-LOCKTIMEVERIFY-and-revocation-hashes-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - HTLCs using OP_CHECKSEQUENCEVERIFY/OP_LOCKTIMEVERIFY and revocation hashes.</title>
    <updated>2023-05-18T20:09:11.485453+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-February/000441.html" rel="alternate"/>
    <summary>This is a technical discussion about Lightning Network development. The conversation revolves around the channels and payments between Alice, Eve, and Evelyn. Both Alice's and Eve's connections have the delay parameter set at "D." Alice's commitments include a fee that she expects will result in confirmation in less than a delay of "F," and she's confident that a transaction can be spent so long as it has been in the blockchain for "N" units of time. HTLCs are used to manage funds between Alice and Eve. One HTLC is where Eve pays Alice $X on receipt of R, CLTV at time T; the other is where Alice pays Evelyn $X on receipt of R, CLTV at time T'. When forwarding an HTLC, Alice calculates T' such that T' = now + D + F. If everything works out, the second HTLC is dealt with, and things are fine so far. However, on the other channel, Alice sends the R value to Eve, but Eve does not send Alice a commit transaction update and becomes completely unresponsive on this channel. This forces Alice to broadcast her commit transaction containing the HTLC before the CLTV of the HTLC times out because otherwise Eve can try to claim the HTLC funds. The question is which times out first, Alice's CSV or Eve's CLTV? The one that times out first will be the first to be able to claim the funds. Alice's CSV should be the first to time out. A game theory aspect is also discussed, and the preferences are strictly d &gt; b &gt; c. If you find yourself trying to convince the other person to do (b) to avoid doing (c) yourself, it's a dominating strategy to simply do (d). Each side maintains a commitment transaction with two outputs: one paying to self (with some delay), and the second paying to the other side. To generate hash time-locked contracts (required for lightning to be a network), both commitment transactions get an additional output. This output is spendable under four conditions: 1) Recipient knows the R value (funds go to recipient), OR 2) The HTLC has timed out (funds return to initiator), OR 3) The HTLC has been revoked (funds to go "non-cheating" side), OR 4) The Commit transaction has been revoked (funds to go "non-cheating" side). The last two failure modes are separate from each other because HTLCs have different lifetimes from commit transactions. Scripts for HTLC from US to THEM and HTLC from THEM to US are also given.</summary>
    <published>2016-02-10T16:50:49+00:00</published>
  </entry>
</feed>
