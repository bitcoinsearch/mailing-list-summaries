<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - HTLC output aggregation as a mitigation for tx recycling, jamming, and on-chain efficiency (covenants)</title>
  <updated>2023-12-12T02:03:24.917844+00:00</updated>
  <author>
    <name>Johan Torås Halseth 2023-12-11 09:17:23+00:00</name>
  </author>
  <author>
    <name>Antoine Riard 2023-11-21 02:39:45+00:00</name>
  </author>
  <author>
    <name>Johan Torås Halseth 2023-10-26 16:52:03+00:00</name>
  </author>
  <link href="lightning-dev/Dec_2023/004243_HTLC-output-aggregation-as-a-mitigation-for-tx-recycling-jamming-and-on-chain-efficiency-covenants-.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2023/004218_HTLC-output-aggregation-as-a-mitigation-for-tx-recycling-jamming-and-on-chain-efficiency-covenants-.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2023/022093_HTLC-output-aggregation-as-a-mitigation-for-tx-recycling-jamming-and-on-chain-efficiency-covenants-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - HTLC output aggregation as a mitigation for tx recycling, jamming, and on-chain efficiency (covenants)</title>
    <updated>2023-12-12T02:03:24.917905+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-December/004243.html" rel="alternate"/>
    <summary>The recent correspondence delves into the intricacies of improving the Lightning Network's transaction mechanisms, particularly focusing on the vulnerabilities and potential enhancements related to Hash Time-Locked Contracts (HTLCs). The discussion begins by identifying a specific attack vector known as the 'transaction recycling attack,' which takes advantage of modifications made to HTLCs in anchor channel types. These modifications permit additional inputs to augment fees without compromising the signature's validity. This susceptibility does not apply to legacy channels since their fees are sourced from HTLC outputs and mutually agreed upon.

A notable proposition involves the aggregation of HTLC outputs, which presents several advantages, including a reduction in the reserves required for fee-bumping. Nevertheless, this method is not devoid of challenges, such as the residual malleability that might enable a counterparty to unjustly inflate miner fees. To combat this issue, the recommendation is to bifurcate HTLC claims into two distinct outputs and employ covenants to oversee aggregated claims, contingent upon witness and chain state conditions. Despite these measures, there remains a concern regarding the protocol's inherent 483 limit, which could hinder the long-term payment throughput capabilities of the Lightning Network.

In search of solutions to manage HTLC claim periods, the sliding window concept was introduced, requiring an off-chain consensus on feerate thresholds among routing nodes. Furthermore, Point Time-Locked Contracts (PTLCs) are mentioned as a possible avenue for maintaining a relatively stable size for offered HTLCs through the use of aggregate curve points. Covenant mechanisms are also suggested as potentially beneficial during the withdrawal phases of payment pools, which encompass multiple participants and non-competing transactions.

The email touches upon the complexities of implementing multiple covenants within Bitcoin's conservative framework, cautioning about the risks of enabling 'malicious' Layer 2 contracts that have yet to be fully understood from a game-theory perspective. Previous discussions around CoinSwap's Transaction Withholding Attack are referenced, emphasizing the need for an efficiency simulation framework to evaluate different covenant structures and their respective performance trade-offs.

Lastly, the email poses an intriguing question about whether advanced cryptosystems, predicated on assumptions other than the Discrete Logarithm problem, could enhance the scalability of LN payment throughput. The goal would be to decouple the quantity of off-chain payments from the on-chain witness size necessary for claiming them, without undermining security. The exploration of this subject signifies a concerted effort to strike a delicate balance between innovation and security within the Bitcoin ecosystem and its associated Layer 2 solutions.

Moreover, the discussion extends to the ramifications of HTLC output aggregation on both transaction recycling and slot jamming. The amendment that permits adding fees to anchor channel type transactions without invalidating the signature has been pointed out as the root of the transaction recycling attack. In contrast, this issue did not affect legacy channel types. The aggregation of HTLC outputs into a single output aims to provide numerous benefits, including enabling the spender to allocate the desired amount for fees. However, this implementation hinges on the application of a covenant.

The sender also highlights the limitations posed by the current system where each forwarded HTLC results in a separate output on the commitment transaction, thereby restricting the number of active HTLCs and making it feasible to jam the channel with minimal capital. Covenants could facilitate a unified aggregated output on the commitment, corresponding to the sum of active HTLCs, allowing spenders to claim only what they are entitled to. Such aggregation could significantly alter the dynamics of slot jamming by obviating the need for a commitment output for each HTLC, though questions about chain fees and economic viability remain.

Additionally, the exploration of new covenant primitives on Layer 1 is proposed, alongside the consideration of PTLCs for generating a compact proof of preimage knowledge for certain satoshi amounts, potentially resolving the slot jamming issue altogether. A recursive covenant is deemed necessary for achieving HTLC output aggregation, with suggestions to explore OP_CHECKCONTRACTVERIFY, OP_CAT, and amount inspection for this purpose. A preliminary demonstration using OP_CHECKCONTRACTVERIFY has been created to spend an HTLC output by committing all active HTLCs in a merkle tree and furnishing merkle proofs for claiming the sum into a new output. HTLC output aggregation is underscored as a promising development for enhancing channel transactions' efficiency, security, and scalability, warranting further research and evolution of covenant primitives.</summary>
    <published>2023-12-11T09:17:23+00:00</published>
  </entry>
</feed>
