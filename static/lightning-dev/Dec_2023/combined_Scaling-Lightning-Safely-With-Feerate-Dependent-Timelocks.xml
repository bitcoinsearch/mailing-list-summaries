<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Scaling Lightning Safely With Feerate-Dependent Timelocks</title>
  <updated>2023-12-19T02:03:38.363373+00:00</updated>
  <author>
    <name>Antoine Riard 2023-12-17 23:01:22+00:00</name>
  </author>
  <author>
    <name>jlspc 2023-12-14 17:07:40+00:00</name>
  </author>
  <link href="lightning-dev/Dec_2023/004256_Scaling-Lightning-Safely-With-Feerate-Dependent-Timelocks.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2023/004254_Scaling-Lightning-Safely-With-Feerate-Dependent-Timelocks.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Scaling Lightning Safely With Feerate-Dependent Timelocks</title>
    <updated>2023-12-19T02:03:38.363413+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-December/004256.html" rel="alternate"/>
    <summary>The recent discussion in the smart contract space has brought to light the innovative concept of utilizing sliding reaction windows for blockchain congestion detection, particularly within Bitcoin and its associated applications like Lightning Network and covenant designs. This idea is encapsulated within the framework of Feerate-Dependent Timelocks (FDTs), which represent a methodical approach to adjust timelocks based on the median fee rates of transactions over a specified window of blocks.

In essence, FDTs prevent a transaction from being included in a block under two conditions: first, if the height-based or epoch-based absolute or relative timelocks, as per current consensus rules, are not met; second, if less than a certain number of blocks within a given window have a median fee rate above a predetermined threshold. These parameters—median feerate, feerate value bound, window size, and block count—are chosen by the transaction creator and secured through signature or hash chain-based covenants. Consequently, parties engaging in off-chain construction can select a fee rate boundary that would delay their time-sensitive transactions when necessary.

To exemplify, consider a scenario with a Lightning Network penalty channel between Alice and Bob where an HTLC transaction is pre-signed with specific FDT parameters. If the network's median fee rate surpasses the set threshold during the time of transaction expiry, neither party can execute their respective timeout or preimage transactions, thus providing a potential solution to the Forced Expiration Spam issue highlighted in the original Lightning Network paper.

However, several design considerations must be addressed. For instance, the revokeable scripts within the current LN-penalty system should be updated to accommodate the enforcement of FDT's parameters, ensuring robustness against potential miner collusion. Moreover, incorporating an additional parameter, namely `claim_grace_period`, may prove beneficial. This parameter acts as a new type of relative timelock, adding another layer of security and strategy for the involved parties.

Given these enhancements, it is suggested that all FDT parameters be incorporated into the BIP341 annex, capitalizing on available space and allowing for different parameters across multiple HTLC outputs in a single transaction. This move could synergize well with future covenant mechanisms, such as HTLC aggregation.

The blog post concludes by acknowledging the inability to assert the superiority of the FDT proposal over existing channel factories and payment pool constructions. Still, it recognizes the integral role FDT could play in addressing vulnerabilities inherent to time-sensitive applications amidst blockchain congestion. The introduction of FDTs is seen as a step forward in resolving critical issues within the Lightning Network and similar constructs.</summary>
    <published>2023-12-17T23:01:22+00:00</published>
  </entry>
</feed>
