<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Fwd:  Post-Schnorr lightning txes</title>
  <updated>2023-06-03T18:28:28.395432+00:00</updated>
  <author>
    <name>Andrew Poelstra 2018-03-06 20:58:51</name>
  </author>
  <author>
    <name>Andrew Poelstra 2018-03-06 21:06:25</name>
  </author>
  <link href="lightning-dev/March_2018/001075_Fwd-Post-Schnorr-lightning-txes.xml" rel="alternate"/>
  <link href="lightning-dev/March_2018/001076_Fwd-Post-Schnorr-lightning-txes.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Fwd:  Post-Schnorr lightning txes</title>
    <updated>2023-06-03T18:28:28.395432+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-March/001075.html" rel="alternate"/>
    <summary>Andrew Poelstra from Blockstream's Mathematics Department has proposed a simpler way to update states in a payment channel using adaptor/Bellare-Neven signatures. Adaptor signatures enable the use of multipaths for Atomic Multipath Payments (AMP) by linking multiple state updates into complete paths. For two-party transactions, jointly signing a transaction with A(i), Revocation(B,i) ensures that A has time to penalize misbehavior, and B can complete the signature when closing properly. The suggested method involves doing HTLCs via Schnorr and generating six plus eight times the number of HTLCs in-flight transactions every time the channel state is updated. The author proposes a solution for efficient outsourced channel monitoring in Bitcoin using 2-of-2 multisig funding transactions, which can be converted to Schnorr/muSig when available, and generating various types of transactions consisting of channel state commitment transactions held by A/B, channel fund distribution transactions held by A/B, timeout/success transactions held by X/Y, and pay2pubkey(hash) outputs. Andrew Poelstra notes that monitoring can be outsourced efficiently with minimal overhead and without serious changes to Bitcoin. However, there is currently no plausible way of doing constant space outsourced channel monitoring without SIGHASH_NOINPUT.Revoking an old state involves sending an adaptor signature for revealing half of AB_i or AB_{i-1}, which gives the other party the secret key to AB_i, allowing them to take the coins. Blind monitoring may be possible because everything is discrete-log based, which is friendly towards blinding. The email thread also discusses optimizing for the rare case of misbehavior in closing a lightning channel by using muSig Schnorr pay-to-pubkey transactions. The email includes references to various links and papers discussing the use of blockchain and discreet log contracts. One proposed idea is to use a zero-knowledge proof to confirm a new revocation hash conforms to standards without revealing the secret. Another suggestion is to create a transaction pre-signed by B that spends the commitment tx A holds, giving all channel funds to A after a large CSV timeout, making it possible to penalize disappearance as well as misbehavior. However, this could provide too much incentive to block someone from accessing the blockchain. Andrew Poelstra can be contacted at apoelstra@wpsoftware.net.</summary>
    <published>2018-03-06T20:58:51+00:00</published>
  </entry>
</feed>
