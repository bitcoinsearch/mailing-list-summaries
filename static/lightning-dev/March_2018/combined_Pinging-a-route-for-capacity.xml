<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Pinging a route for capacity</title>
  <updated>2023-06-03T18:26:30.578604+00:00</updated>
  <author>
    <name>Jim Posen 2018-03-01 14:45:16</name>
  </author>
  <author>
    <name>gb 2018-03-01 21:16:02</name>
  </author>
  <author>
    <name>Christian Decker 2018-03-04 22:18:56</name>
  </author>
  <author>
    <name>René Pickhardt 2018-03-01 15:13:43</name>
  </author>
  <author>
    <name>René Pickhardt 2018-03-01 15:26:22</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-03-02 07:53:46</name>
  </author>
  <author>
    <name>Jim Posen 2018-03-02 14:42:09</name>
  </author>
  <author>
    <name>Rusty Russell 2018-03-04 02:46:46</name>
  </author>
  <link href="lightning-dev/March_2018/001058_Pinging-a-route-for-capacity.xml" rel="alternate"/>
  <link href="lightning-dev/March_2018/001060_Pinging-a-route-for-capacity.xml" rel="alternate"/>
  <link href="lightning-dev/March_2018/001068_Pinging-a-route-for-capacity.xml" rel="alternate"/>
  <link href="lightning-dev/March_2018/001066_Pinging-a-route-for-capacity.xml" rel="alternate"/>
  <link href="lightning-dev/March_2018/001059_Pinging-a-route-for-capacity.xml" rel="alternate"/>
  <link href="lightning-dev/March_2018/001062_Pinging-a-route-for-capacity.xml" rel="alternate"/>
  <link href="lightning-dev/March_2018/001063_Pinging-a-route-for-capacity.xml" rel="alternate"/>
  <link href="lightning-dev/March_2018/001067_Pinging-a-route-for-capacity.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Pinging a route for capacity</title>
    <updated>2023-06-03T18:26:30.578604+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-March/001058.html" rel="alternate"/>
    <summary>In the Lightning Network community, discussions have taken place on various strategies to improve payment success rates while maintaining privacy. One proposal involves sending a ping over an onion route to ask if every hop has sufficient capacity before sending the payment. This method could make payments quicker and cheaper, but it may also allow someone to extract information about channel capacities on the network with a binary search.Another proposal suggested using IP-Fragmentation techniques to solve the issue of insufficient channel balance during routing. However, concerns were raised about the impacts on the HTLC and whether it would be possible to fragment a payment that is encapsulated within the onion routing. Furthermore, discussions on AMP (atomic multi-path) highlighted that only the source has the ability to split a payment into multiple smaller payments, as intermediaries may decide to send it to a channel with high fees. It was suggested that using IP-Fragmentation techniques could be a solution.Additionally, the best strategy for choosing a route to send funds over was discussed, with one proposal suggesting determining all possible routes and ranking them by estimated fees based on channel announcements and number of hops before trying them successively until one works. However, concerns were raised about designing for failure too soon and the need for effective safeguards to mitigate potential security risks. Some suggest using fees as a means of signaling low capacity and adjusting them accordingly, while others propose making `temporary_channel_failure` return a `channel_update` with disabled flags if the request asks for capacity.In order to prevent payment failures caused by lack of capacity, a solution has been proposed that may prove sufficient. This proposed solution is not explicitly stated, leaving room for interpretation. However, it is clear that the goal is to eliminate payment failures caused by a lack of capacity. It is possible that this solution involves increasing the capacity in question, whether that be in terms of technology or human resources. Alternatively, it could involve implementing a system to better manage and allocate existing capacity. Whatever the solution may be, the focus is on preventing payment failures from occurring due to capacity issues.Overall, this solution aims to improve payment processing and ensure that transactions are carried out smoothly without any interruptions or delays. By addressing the issue of capacity, businesses and organizations can avoid the negative consequences that come with payment failures, such as loss of revenue and damage to reputation. The Lightning Network community continues to explore various solutions to improve payment efficiency and success rates while maintaining privacy and security.</summary>
    <published>2018-03-01T14:45:16+00:00</published>
  </entry>
</feed>
