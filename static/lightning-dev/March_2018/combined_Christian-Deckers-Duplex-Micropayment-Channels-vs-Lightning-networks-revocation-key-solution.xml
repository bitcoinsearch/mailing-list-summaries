<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Christian Deckers Duplex Micropayment Channels vs Lightning networks revocation key solution</title>
  <updated>2023-06-03T18:27:49.676438+00:00</updated>
  <author>
    <name>René Pickhardt 2018-03-03 23:30:23</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-03-05 13:50:10</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-03-05 13:28:49</name>
  </author>
  <link href="lightning-dev/March_2018/001065_Christian-Deckers-Duplex-Micropayment-Channels-vs-Lightning-networks-revocation-key-solution.xml" rel="alternate"/>
  <link href="lightning-dev/March_2018/001070_Christian-Deckers-Duplex-Micropayment-Channels-vs-Lightning-networks-revocation-key-solution.xml" rel="alternate"/>
  <link href="lightning-dev/March_2018/001069_Christian-Deckers-Duplex-Micropayment-Channels-vs-Lightning-networks-revocation-key-solution.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Christian Deckers Duplex Micropayment Channels vs Lightning networks revocation key solution</title>
    <updated>2023-06-03T18:27:49.676438+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-March/001065.html" rel="alternate"/>
    <summary>The writer, who is new to lightning dev, has been studying Christian Decker's work on duplex micropayment channels and wonders why the lightning spec went with the revocation key system instead of Decker's solution. The writer acknowledges that the revocation system was already in the whitepaper, but finds it complex to handle and potentially requiring a third party observing service to detect cheaters. Rusty also mentioned this in his article on the matter. Under Decker-Wattenhofer, a potential thief could try to reuse old invalid state, making it necessary to be online after the kickoff transaction gets confirmed to broadcast the latest commitment transaction. If offline for long, a watchtower-like service is also needed. Channels drop on-chain, making economic information publicly readable.The email discusses the differences between Poon-Dryja (revocation) channels and Decker-Wattenhofer duplex micropayment channels. Poon-Dryja channels have no limit on the number of updates possible and use O(1) lockup time and transactions for an n update limit. In contrast, Decker-Wattenhofer uses O(log n) lockup time and transactions for n update limits. Although Decker-Wattenhofer has the advantage of being extendable to any number of participants per channel, the construction of Poon-Dryja channels cannot be easily extended beyond two per channel. To address this limitation, Burchert-Decker-Wattenhofer channel factories combine multiple two-participant Poon-Dryja channels that can have any number of updates, with the Decker-Wattenhofer part only updated if all participants agree to redistribute their funds. This results in a potentially infinite number of possible channel updates for individual Poon-Dryja channels while minimizing the O(log n) cost for maximum number of updates for fund redistribution. The email also notes that Rusty Russell’s “shachain” concept reduces storage for a sequence of revocation keys to just 64 bytes.Despite the writer's initial skepticism about the revocation key system, they express respect for the creators of the lightning network and believe it will become history. Overall, the email provides an in-depth comparison between the two channel types, highlighting their respective advantages and disadvantages.</summary>
    <published>2018-03-03T23:30:23+00:00</published>
  </entry>
</feed>
