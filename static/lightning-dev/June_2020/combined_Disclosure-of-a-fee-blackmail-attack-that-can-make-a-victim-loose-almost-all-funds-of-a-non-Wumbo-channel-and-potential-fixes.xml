<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Disclosure of a fee blackmail attack that can make a victim loose almost all funds of a non Wumbo channel and potential fixes</title>
  <updated>2023-06-04T00:26:29.831498+00:00</updated>
  <author>
    <name>Antoine Riard 2020-06-18 08:40:45</name>
  </author>
  <author>
    <name>Jeremy 2020-06-21 22:17:39</name>
  </author>
  <author>
    <name>Jeremy 2020-06-20 23:13:40</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2020-06-22 01:09:28</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2020-06-22 01:20:23</name>
  </author>
  <author>
    <name>David A. Harding 2020-06-22 14:19:20</name>
  </author>
  <author>
    <name>Ren√© Pickhardt 2020-06-17 10:29:42</name>
  </author>
  <author>
    <name>Jeremy 2020-06-22 19:18:08</name>
  </author>
  <link href="lightning-dev/June_2020/002738_Disclosure-of-a-fee-blackmail-attack-that-can-make-a-victim-loose-almost-all-funds-of-a-non-Wumbo-channel-and-potential-fixes.xml" rel="alternate"/>
  <link href="lightning-dev/June_2020/002748_Disclosure-of-a-fee-blackmail-attack-that-can-make-a-victim-loose-almost-all-funds-of-a-non-Wumbo-channel-and-potential-fixes.xml" rel="alternate"/>
  <link href="lightning-dev/June_2020/002745_Disclosure-of-a-fee-blackmail-attack-that-can-make-a-victim-loose-almost-all-funds-of-a-non-Wumbo-channel-and-potential-fixes.xml" rel="alternate"/>
  <link href="lightning-dev/June_2020/002750_Disclosure-of-a-fee-blackmail-attack-that-can-make-a-victim-loose-almost-all-funds-of-a-non-Wumbo-channel-and-potential-fixes.xml" rel="alternate"/>
  <link href="lightning-dev/June_2020/002751_Disclosure-of-a-fee-blackmail-attack-that-can-make-a-victim-loose-almost-all-funds-of-a-non-Wumbo-channel-and-potential-fixes.xml" rel="alternate"/>
  <link href="lightning-dev/June_2020/002755_Disclosure-of-a-fee-blackmail-attack-that-can-make-a-victim-loose-almost-all-funds-of-a-non-Wumbo-channel-and-potential-fixes.xml" rel="alternate"/>
  <link href="lightning-dev/June_2020/002735_Disclosure-of-a-fee-blackmail-attack-that-can-make-a-victim-loose-almost-all-funds-of-a-non-Wumbo-channel-and-potential-fixes.xml" rel="alternate"/>
  <link href="lightning-dev/June_2020/002756_Disclosure-of-a-fee-blackmail-attack-that-can-make-a-victim-loose-almost-all-funds-of-a-non-Wumbo-channel-and-potential-fixes.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Disclosure of a fee blackmail attack that can make a victim loose almost all funds of a non Wumbo channel and potential fixes</title>
    <updated>2023-06-04T00:26:29.831498+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-June/002738.html" rel="alternate"/>
    <summary>The Lightning Network protocol, which enables faster and cheaper Bitcoin transactions, has been found to be vulnerable to a "flood and blackmail" attack. This involves flooding the network with large transactions that freeze channels between nodes and demanding ransom payments to unfreeze them. To mitigate this issue, various solutions have been proposed on the Lightning-dev mailing list, such as limiting the number of HTLCs used by default in Eclaire and c-lightning to 30, implementing bitcoin core PR #15681, avoiding overpaying fees in commitment transactions, aggregating HTLCs in a Taproot tree, and adding a hint to the readme file for disclosing attacks and vulnerabilities.Another solution is BIP-119 Congestion Control trees to bucket a tree by doing a histogram of HTLC size so that all small HTLCs live in a common CTV subtree and don't interfere with higher value HTLCs. Additionally, there could be a layer of indirection added to how HTLCs are manifested within the commitment transactions to further mitigate costs. This technique, called "coupe commitments," adds a new 2-of-2 multi-sig output (an HTLC indirect block) to the commitment transactions, which is then spent by a new transaction (the HTLC block) that actually manifests the HTLC outputs.The vulnerability highlights the need for continued development and improvement of second-layer solutions for Bitcoin transactions. A similar vulnerability was discovered in July 2019 involving Hash Time-Locked Contracts (HTLCs) and blackmail scenarios, which led to lowering the maximum amount of HTLCs allowed in-flight as a solution. These attacks demonstrate the importance of ongoing efforts to ensure the security of the Lightning Network.C-lightning has merged a patch to mitigate the blackmail attack, while Eclaire is somewhat mitigating it by defaulting to 30 accepted HTLCs. However, lnd does not appear to have a hard cap on HTLCs, and may allow up to 483 by default. Several potential fixes have been suggested including not using the maximum value of HTLCs, allowing low fees and asking persons claiming outputs to pay fees, not overpaying commitment transaction fees, not adding HTLCs where the on-chain fee is higher than the HTLCs value, aggregating HTLCs, and splitting on-chain fees differently.It has also been suggested that there should be a hint in the Lightning Network's readme file about how to disclose attacks and vulnerabilities.</summary>
    <published>2020-06-18T08:40:45+00:00</published>
  </entry>
</feed>
