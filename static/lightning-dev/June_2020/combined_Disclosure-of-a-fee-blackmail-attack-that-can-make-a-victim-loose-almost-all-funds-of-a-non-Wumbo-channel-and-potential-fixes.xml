<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Disclosure of a fee blackmail attack that can make a victim loose almost all funds of a non Wumbo channel and potential fixes</title>
  <updated>2023-06-03T01:44:06.625932+00:00</updated>
  <author>
    <name>Jeremy 2020-06-20 23:13:40</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2020-06-22 01:09:28</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2020-06-22 01:20:23</name>
  </author>
  <author>
    <name>David A. Harding 2020-06-22 14:19:20</name>
  </author>
  <author>
    <name>Ren√© Pickhardt 2020-06-17 10:29:42</name>
  </author>
  <author>
    <name>Jeremy 2020-06-22 19:18:08</name>
  </author>
  <author>
    <name>Antoine Riard 2020-06-18 08:40:45</name>
  </author>
  <author>
    <name>Jeremy 2020-06-21 22:17:39</name>
  </author>
  <link href="lightning-dev/June_2020/002745_Disclosure-of-a-fee-blackmail-attack-that-can-make-a-victim-loose-almost-all-funds-of-a-non-Wumbo-channel-and-potential-fixes.xml" rel="alternate"/>
  <link href="lightning-dev/June_2020/002750_Disclosure-of-a-fee-blackmail-attack-that-can-make-a-victim-loose-almost-all-funds-of-a-non-Wumbo-channel-and-potential-fixes.xml" rel="alternate"/>
  <link href="lightning-dev/June_2020/002751_Disclosure-of-a-fee-blackmail-attack-that-can-make-a-victim-loose-almost-all-funds-of-a-non-Wumbo-channel-and-potential-fixes.xml" rel="alternate"/>
  <link href="lightning-dev/June_2020/002755_Disclosure-of-a-fee-blackmail-attack-that-can-make-a-victim-loose-almost-all-funds-of-a-non-Wumbo-channel-and-potential-fixes.xml" rel="alternate"/>
  <link href="lightning-dev/June_2020/002735_Disclosure-of-a-fee-blackmail-attack-that-can-make-a-victim-loose-almost-all-funds-of-a-non-Wumbo-channel-and-potential-fixes.xml" rel="alternate"/>
  <link href="lightning-dev/June_2020/002756_Disclosure-of-a-fee-blackmail-attack-that-can-make-a-victim-loose-almost-all-funds-of-a-non-Wumbo-channel-and-potential-fixes.xml" rel="alternate"/>
  <link href="lightning-dev/June_2020/002738_Disclosure-of-a-fee-blackmail-attack-that-can-make-a-victim-loose-almost-all-funds-of-a-non-Wumbo-channel-and-potential-fixes.xml" rel="alternate"/>
  <link href="lightning-dev/June_2020/002748_Disclosure-of-a-fee-blackmail-attack-that-can-make-a-victim-loose-almost-all-funds-of-a-non-Wumbo-channel-and-potential-fixes.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Disclosure of a fee blackmail attack that can make a victim loose almost all funds of a non Wumbo channel and potential fixes</title>
    <updated>2023-06-03T01:44:06.625932+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-June/002745.html" rel="alternate"/>
    <summary>The Lightning Network protocol has been identified vulnerable to an attack called "flood and blackmail." The attack floods the network with large transactions, causing nodes' channels to freeze, which stops further payments from being made. Attackers could then demand a ransom payment in exchange for unfreezing the channel and returning part of the lost funds. To mitigate this attack, eclaire has set a constant cap of 483 HTLCs per channel. Lowering the maximum number of concurrent HTLCs is a reasonable start towards fixing this issue. Anchor commitments can also help by letting initiators select a low starting fee and bump fees of second-level HTLC transactions.Several ideas have been proposed to fix the Lightning Network vulnerability, including not using the maximum value of HTLCs, implementing bitcoin core PR #15681, not overpaying fees in commitment transactions, not adding HTLCs for which the on-chain fee is higher than the HTLC's value, finding a way to aggregate HTLCs, and splitting on-chain fees differently. Additionally, it is suggested that there should be a hint in the readme file about how to disclose attacks and vulnerabilities.Laolu, a contributor to the Lightning Protocol, suggested a new technique for mitigating up-front costs without using Channel Factories. This is done by adding an HTLC indirect block, a new 2-of-2 multi-sig output to the commitment transactions, which is then spent by a new transaction that creates the HTLC outputs. Different flavors of this technique are possible as well, allowing both sides to craft varying HTLC indirection trees, which may factor in traits like HTLC expiration time.Jeremy Rubin, another contributor to the Lightning Protocol, suggested BIP-119 Congestion Control trees, which could help mitigate congestion control issues. By bucketing a tree through a histogram of HTLC size, small HTLCs can live in a common CTV subtree and not interfere with higher value HTLCs.Antoine Riard, another contributor to the Lightning Protocol, discussed a vulnerability related to "Flood &amp; Loot" attacks and the unbounded commitment transaction size inflation. He recommended capping commitment size to ensure competitive propagation/block selection and limiting HTLC exposure. Riard also discussed other potential solutions such as dynamic dust_limit based on HTLC economic value, feerate of its output, feerate of HTLC-transaction, feerate estimation of any CPFP to bump it, encoding all HTLC in some Taproot tree in the future, switching fee from pre-committed ones to a single-party dynamic one, and hinting in the readme file about where and how people can disclose attacks and vulnerabilities.Finally, there was some discussion about fee futures and how they could help with this issue. The conversation also touched on the need for a hint in the readme file about where and how people can disclose attacks and vulnerabilities. Overall, the Lightning Network vulnerability highlights the need for continued development and improvement of second-layer solutions for Bitcoin transactions.</summary>
    <published>2020-06-20T23:13:40+00:00</published>
  </entry>
</feed>
