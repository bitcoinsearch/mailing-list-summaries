<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Onion-Routing for Messages</title>
  <updated>2023-06-02T00:07:10.176692+00:00</updated>
  <author>
    <name>Mats Jerratsch 2015-12-08 17:13:22</name>
  </author>
  <author>
    <name>Rusty Russell 2015-12-09 10:19:25</name>
  </author>
  <author>
    <name>Bryan Bishop 2015-12-08 17:53:40</name>
  </author>
  <author>
    <name>Mats Jerratsch 2015-12-09 09:45:20</name>
  </author>
  <link href="lightning-dev/Dec_2015/000369_Onion-Routing-for-Messages.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2015/000372_Onion-Routing-for-Messages.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2015/000370_Onion-Routing-for-Messages.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2015/000371_Onion-Routing-for-Messages.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Onion-Routing for Messages</title>
    <updated>2023-06-02T00:07:10.176692+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-December/000369.html" rel="alternate"/>
    <summary>A proposed system to ensure privacy in payment transactions uses Onion Routing, which routes payments over a rendezvous point and encrypts them using an onion scheme. The sender and receiver would not learn any additional information about each other by default. It is suggested that the onion-routing could be one-time and one-directional or include a message system integrated where each node could encrypt and append the pubkey of the node it received the object from together with the ephemeral key used initially. However, potential issues with this design have been highlighted such as a possible security risk if someone obtains the onion object and 'hunts down' the sender by targeting the nodes consisting of the route one by one.The use of onion routing for sending messages over the Lightning network was discussed in a conversation on the Lightning-dev mailing list. The idea was to extricate messaging from payments by having the vendor negotiate with a node to forward a payment and then have the buyer route to that node. The provision of messaging raised concerns about spam and payment disputes. It is suggested that reinventing a peer-to-peer messaging network seems outside scope, but there's nothing stopping them from doing so in a future revision.In an email conversation on December 8, 2015, Mats Jerratsch raised the question of whether onion-routing should be one-time and one-directional. To have the added privacy of changing R value, a random number would likely be added as well. Jerratsch suggests implementing an interactive wallet-to-wallet protocol while both sides are busy communicating with the onion routing network for actual payment route negotiation. Once a path is found, the recipient would then communicate over the wallet-to-wallet channel to pass over the fully-constructed onion routing information. However, defining the wallet-to-wallet channel and which techniques could/should be used without leaking information may be an issue. Jerratsch notes that increasing the total load for nodes to handle these additional messages could be problematic but suggests a simplified message-delivery-system where each hop costs like 1 satoshi. If it remains a problem, they might either find a way to proof this behavior or even use HTLCs for these, although this would probably be impractical and bloat commit transactions.</summary>
    <published>2015-12-08T17:13:22+00:00</published>
  </entry>
</feed>
