<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - An Alternative Onion-Routing Proposal</title>
  <updated>2023-06-03T15:58:43.571133+00:00</updated>
  <author>
    <name>Olaoluwa Osuntokun 2015-12-14 22:04:01</name>
  </author>
  <author>
    <name>Rusty Russell 2015-12-15 02:30:52</name>
  </author>
  <author>
    <name>Rusty Russell 2015-12-15 23:38:46</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2015-12-17 18:08:24</name>
  </author>
  <author>
    <name>Zooko Wilcox-OHearn 2015-12-17 19:33:45</name>
  </author>
  <author>
    <name>Rusty Russell 2015-12-20 19:31:38</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2015-12-15 05:16:04</name>
  </author>
  <author>
    <name>Zooko Wilcox-OHearn 2015-12-16 17:57:56</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2015-12-18 22:16:22</name>
  </author>
  <link href="lightning-dev/Dec_2015/000384_An-Alternative-Onion-Routing-Proposal.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2015/000385_An-Alternative-Onion-Routing-Proposal.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2015/000389_An-Alternative-Onion-Routing-Proposal.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2015/000394_An-Alternative-Onion-Routing-Proposal.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2015/000395_An-Alternative-Onion-Routing-Proposal.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2015/000398_An-Alternative-Onion-Routing-Proposal.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2015/000386_An-Alternative-Onion-Routing-Proposal.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2015/000393_An-Alternative-Onion-Routing-Proposal.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2015/000397_An-Alternative-Onion-Routing-Proposal.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - An Alternative Onion-Routing Proposal</title>
    <updated>2023-06-03T15:58:43.571133+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-December/000384.html" rel="alternate"/>
    <summary>The article discusses the design of onion routing in the Lightning Network. The author explores existing academic literature to identify two schemes, Sphinx and HORNET, that fit well into their domain. Sphinx is a compact mixing format that achieves small mix-headers with formal proof of security, replay protection, and sender anonymity. On the other hand, HORNET sets up a duplex onion circuit between sender and receiver, enabling both sides to retain full unlinkability. Modifications are necessary to achieve sender-receiver unlinkability, which involve nested AHDRs. A working implementation of Sphinx alone is available, but a working implementation of HORNET will be released soon.The conversation revolves around the security and efficiency of using ChaCha20+poly1305 over AES-CTR+HMAC-SHA-256 in routing information for Sphinx mix-header. The current implementation of node IDs takes two forms: hash160 or raw serialized pub-key. Within the Sphinx mix-header, truncating the hash160 to 16 bytes is suggested, while ditching ChaCha20+poly3015 for AES-CTR+SHA-256-HMAC may be necessary if serialized pub-keys are used for node IDs in the routing info. It is also proposed to upgrade the crypto later by appending a key for a different system. The header overhead is sha256 (32 bytes) + pubkey (33 bytes), or 1300 bytes. The serialized size of the message is 3.8K bytes, and each node decrypts and removes the tail entry, then prepends padding. With Poly1035, the forged messages are rejected with a probability of 1-(n/(2^102)) for a 16n-byte message. If we're standardizing on ChaCha20, with a 32-byte key, the size would be 1377 bytes. Zooko expresses his satisfaction with re-using prior work-SPHINX rather than inventing a new one. He also mentions two options-AES-CTR + HMAC-SHA-256 and ChaCha20+poly1035 and prefers the latter. Regarding node ids, he is unsure how costly long node ids are in this context as well as how many node ids will exist in the long run.The discussion revolves around the concept of backward-compatibility in edge wallets. The scenario starts with an edge wallet wanting to send funds over lightning to a particular address but is unable to connect directly. So, the wallet falls back on regular on-chain Bitcoin transactions. This mechanism provides a graceful fallback to on-chain transactions. The safety of this mechanism is discussed, where collisions of public-key hashes can occur. The network is viewed in two namespaces - global and local. In practice, it is safe as a global node ID conflict with the local mix-net ID doesn't undermine the propagation of an HTLC.Furthermore, the context describes a scenario involving Alice who wants to send funds to Dave. Alice's channel sub-graph includes nodes Bob, Carol, and Estelle. However, there is a collision between the 16-byte ID of Estelle's public key and Carol's ID. When Bob receives the mix-header, he realizes the collision in the local namespace. He sends the mix-header to Estelle first, who rejects it. As a result, Bob forwards it to Carol, who accepts it, and everything continues as normal. It is important to note that Sphinx requires the mix-net node IDs to be of the same size as the MAC in the mix-header. Therefore, if node IDs were 32-bytes, poly3015 couldn't be used since its tag size is 16-bytes.</summary>
    <published>2015-12-14T22:04:01+00:00</published>
  </entry>
</feed>
