<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - commitment update steps</title>
  <updated>2023-05-18T20:08:23.694139+00:00</updated>
  <author>
    <name>Anthony Towns 2015-07-23 04:40:45</name>
  </author>
  <author>
    <name>Anthony Towns 2015-07-24 03:30:05</name>
  </author>
  <author>
    <name>Anthony Towns 2015-07-25 08:44:26</name>
  </author>
  <link href="lightning-dev/July_2015/000053_commitment-update-steps.xml" rel="alternate"/>
  <link href="lightning-dev/July_2015/000058_commitment-update-steps.xml" rel="alternate"/>
  <link href="lightning-dev/July_2015/000062_commitment-update-steps.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - commitment update steps</title>
    <updated>2023-05-18T20:08:23.694139+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-July/000053.html" rel="alternate"/>
    <summary>The Lightning protocol was discussed in detail for Alice and Bob's existing channel setup, with a focus on network-protocol level implementation. The author provided the secrets needed to spend an output, and used TIMEOUT and DELAY for the checktimelockverify construction. To update the channel to reflect a conditional payment from Bob once R is revealed, several steps were suggested.These included Alice proposing an unsigned transaction, which Bob checks for structure, amounts, R, Bob key, and stores the hash of #Alice_102. If Bob approves, they move on to the next step where Alice checks signature, txn structure, amounts, R, Alice key, signs, and stores the new txn. Alice then discards old commitment txn and reveals Alice_101. Bob checks signature and Alice_101 hashes correctly and forms hash chain with prior secrets as expected. Bob signs and stores his new commitment txn, discards the hash of #Alice_101 and reveals Bob_101. Alice checks that Bob_101 hashes correctly and Bob_101 forms hash chain with prior secrets as expected. Alice discards the hash of #Bob_101. If the protocol follows through to completion, they each have matching, updated, signed commitment transactions along with the secrets necessary to void attempts to use older commitments. However, if the protocol goes off track, either party can safely close the channel after any step. If Alice ever tries cheating and publishes an old commitment, Bob needs to work out which of the 100 Alice_N hashes he knows or can work out is being abused; prior to the DELAY expiring.The author also discussed HTLCs when assuming pay2scripthash is used. If Alice published multiple R values and after those contracts had long been resolved, Bob could only claim the final outputs if he could unhash the scripts, which would require having remembered all R values. Thus, it was suggested to add OP_RETURN in the extra output "0: OP_RETURN 42 #R1 #R2 #R3 #R4". The author also suggested that multiple OP_RETURN outputs could be used to create more space for R values.In addition, the discussion revolved around storing information related to commitment transactions and HTLC outputs. The use of nLockTime as a filter/counter was suggested to identify the Commitment Transaction. The challenge of identifying expired HTLC outputs, regardless of their age, was discussed in detail. It was suggested that a small storage of prior commitment transactions be maintained, and for each commitment and HTLC output, the timeout and the original Commitment Transaction height when the HTLC was first made should be stored. The need to store the hash of the R value was also discussed, which would make it bigger by 26-bytes or so. Finally, the key management works for when we don't have OP_CTV or OP_CSV is addressed. A possible solution is presented to store 18 bytes per HTLC or n commitments, and if one spends a year doing 100 new HTLC/s, that's 57GB for HTLCs.</summary>
    <published>2015-07-23T04:40:45+00:00</published>
  </entry>
</feed>
