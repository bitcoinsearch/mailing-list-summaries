<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - commitment update steps</title>
  <updated>2023-05-18T17:45:21.059472+00:00</updated>
  <author>
    <name>Anthony Towns 2015-07-23 04:40:45</name>
  </author>
  <author>
    <name>Anthony Towns 2015-07-24 03:30:05</name>
  </author>
  <author>
    <name>Anthony Towns 2015-07-25 08:44:26</name>
  </author>
  <link href="lightning-dev/July_2015/000053_commitment-update-steps.xml" rel="alternate"/>
  <link href="lightning-dev/July_2015/000058_commitment-update-steps.xml" rel="alternate"/>
  <link href="lightning-dev/July_2015/000062_commitment-update-steps.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - commitment update steps</title>
    <updated>2023-05-18T17:45:21.059472+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-July/000053.html" rel="alternate"/>
    <summary>The Lightning Network protocol enables fast and cost-effective bitcoin transactions by establishing a payment channel between two parties through a series of signed and updated commitment transactions. To ensure the integrity of the transactions, participants must be able to verify that the other party's commitment transaction is honest and up-to-date. If one party tries to cheat by publishing an old transaction, the other party can use the hash chain to identify the abused hash.However, storing prior commitment transactions and HTLC outputs can be challenging, especially if pay2scripthash is used. One possible solution is to use OP_CSV and overload nLockTime with values below current Unixtime as a filter/counter. This approach offers about a billion updates per channel between 500M and $NOW. Another suggestion is to store the timeout and original Commitment Transaction height when the HTLC was first made in small storage. To avoid relying on OP_CTV/OP_CSV, an extra 4B per HTLC may be needed, which increases space by ~23%. While OP_RETURN is deemed non-standard for avoiding local storage of HTLC specs, it is not useful if one has OP_CTV and OP_CSV. Alice, Bob, and DELAY are channel parameters; leaving just R and TIMEOUT which fit in 22 bytes. Additionally, one can store ~3.6 R&amp;TIMEOUTs in a single OP_RETURN.Finally, it is mentioned that the key management strategy needs further discussion when OP_CTV or OP_CSV is not available.</summary>
    <published>2015-07-23T04:40:45+00:00</published>
  </entry>
</feed>
