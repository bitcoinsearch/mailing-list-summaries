<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - commitment update steps</title>
  <updated>2023-05-18T01:46:52.924315+00:00</updated>
  <author>
    <name>Anthony Towns 2015-07-23 04:40:45</name>
  </author>
  <author>
    <name>Anthony Towns 2015-07-24 03:30:05</name>
  </author>
  <author>
    <name>Anthony Towns 2015-07-25 08:44:26</name>
  </author>
  <link href="lightning-dev/July_2015/000053_commitment-update-steps.xml" rel="alternate"/>
  <link href="lightning-dev/July_2015/000058_commitment-update-steps.xml" rel="alternate"/>
  <link href="lightning-dev/July_2015/000062_commitment-update-steps.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - commitment update steps</title>
    <updated>2023-05-18T01:46:52.924315+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-July/000053.html" rel="alternate"/>
    <summary>The Lightning Network is a protocol designed to enable fast and low-cost transactions between two parties via an off-chain channel. To use this protocol, Alice and Bob must be connected through a channel that they both have to update as payments are made. The update process uses commitment transactions that reflect the current state of the channel. These transactions contain all the necessary information to spend an output and are signed by both parties.To make a conditional payment from Bob to Alice, the following steps must be followed: Alice proposes the transaction, Bob accepts it, Alice discards old commitment transaction and signs the new one, and finally, Bob does the same thing. If any checks fail or there is no response from the other party, either party can safely close the channel. If Alice attempts to cheat, Bob needs to determine which of the 100 Alice_N hashes he knows or can work out is being abused. However, if pay2scripthash is used, HTLCs become more challenging.The discussion in question focuses on the implementation of Hashed Time-Lock Contracts (HTLCs) in Bitcoin's Lightning Network. The participants consider various methods for storing HTLC information, such as nLockTime, which can filter/count transactions by overloading it with values below current Unix time. However, they conclude that this method would only work for commitment transactions, not for HTLC outputs.Ultimately, the participants suggest storing prior commitment transaction data to limit the search space and using OP_RETURN as an acceptable solution. They also suggest storing the hash R-value along with commitment transaction information. They provide a detailed explanation of how to store HTLC information, which involves storing the timeout and original Commitment Transaction height when the HTLC was first made. The participants also discuss the use of keys for HTLCs and how to calculate them.</summary>
    <published>2015-07-23T04:40:45+00:00</published>
  </entry>
</feed>
