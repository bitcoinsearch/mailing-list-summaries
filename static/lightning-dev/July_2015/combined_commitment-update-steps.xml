<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - commitment update steps</title>
  <updated>2023-05-17T16:58:21.653041+00:00</updated>
  <author>
    <name>Anthony Towns 2015-07-23 04:40:45</name>
  </author>
  <author>
    <name>Anthony Towns 2015-07-24 03:30:05</name>
  </author>
  <author>
    <name>Anthony Towns 2015-07-25 08:44:26</name>
  </author>
  <link href="lightning-dev/July_2015/000053_commitment-update-steps.xml" rel="alternate"/>
  <link href="lightning-dev/July_2015/000058_commitment-update-steps.xml" rel="alternate"/>
  <link href="lightning-dev/July_2015/000062_commitment-update-steps.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - commitment update steps</title>
    <updated>2023-05-17T16:58:21.654036+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-July/000053.html" rel="alternate"/>
    <summary>The lightning protocol is a payment channel network that allows two parties to more rapidly and cheaply conduct frequent transactions with each other. In this context, the author lays out a possible sequence of steps which could be used to update a channel to reflect a conditional payment from one party. The example uses Alice and Bob as sample parties who already have an established channel. Alice proposes the change and Bob must approve it before they can proceed. If all checks pass, both parties will end up with matching, updated, signed commitment transactions. However, if either party attempts to cheat by publishing and old commitment, the other party would need to work out which hash is being abused prior to the delayed expiration.OP_RETURN could be used to make this calculation trivial. Further, the author considers the complications that arise when HTLCs are used in conjunction with pay2scripthash. While the hash values and timeouts are needed to spend the output using pay2scripthash, the author suggests that it might be feasible to use multiple OP_RETURN outputs to solve the problem.The conversation between two individuals, Joseph Poon and Rusty, revolves around the issue of storing data for Hashed Time-Locked Contracts (HTLCs) on Bitcoin's blockchain. They discuss various possible solutions to efficiently store HTLC data as it requires a lot of space. One of the proposed solutions involves using nLockTime to store the height of the HTLC storage and then searching back down from the most recent HTLC output to find the other HTLCs in the transaction. They also consider using OP_RETURN metadata output but conclude that it may not be useful due to non-standard scripts behind the P2SH hashes. The conversation further addresses how key management works for when you don't have OP_CTV or OP_CSV. Finally, they suggest a stop-gap solution of having some small storage of prior commitment transactions, which would store the timeout and the original commitment transaction height when the HTLC was first made.</summary>
    <published>2015-07-23T04:40:45+00:00</published>
  </entry>
</feed>
