<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>commitment update steps</title>
  <updated>2023-05-17T16:57:52.458637+00:00</updated>
  <author>
    <name>Anthony Towns</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>commitment update steps</title>
    <updated>2023-05-17T16:57:52.458637+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-July/000053.html" rel="alternate"/>
    <summary>The lightning protocol at a network-protocol level is explained by the writer. The protocol includes the use of secrets for spending an output, with Alice and Bob's keys and shachain sequences being used for notational convenience. Their current commitments are listed as Alice's commitment txn and Bob's commitment txn, which are fully signed. If Alice wants to update the channel to reflect a conditional payment from Bob once R is revealed, a proposal is made by Alice, which Bob checks. Bob then approves and replies, requesting Alice's signature. The old commitment txns are discarded, and new ones are signed. If the protocol follows through to completion, then they each have matching, updated, signed commitment transactions; along with the secrets necessary to void attempts to use older commitments. If the protocol goes off track, either party can safely close the channel after any step. If Alice ever tries cheating and publishes an old commitment, it is up to Bob to work out which of the 100 Alice_N hashes he knows or can work out is being abused; prior to the DELAY expiring. HTLCs are harder if you assume pay2scripthash is used though.</summary>
    <published>2015-07-23T04:40:45+00:00</published>
  </entry>
</feed>
