<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - [RFC] Anchor (funding) transactions without segregated witness</title>
  <updated>2023-06-03T15:06:26.993237+00:00</updated>
  <author>
    <name>Rusty Russell 2015-07-14 05:56:57</name>
  </author>
  <author>
    <name>Joseph Poon 2015-07-13 22:26:59</name>
  </author>
  <author>
    <name>Rusty Russell 2015-07-07 06:09:39</name>
  </author>
  <link href="lightning-dev/July_2015/000029_-RFC-Anchor-funding-transactions-without-segregated-witness.xml" rel="alternate"/>
  <link href="lightning-dev/July_2015/000028_-RFC-Anchor-funding-transactions-without-segregated-witness.xml" rel="alternate"/>
  <link href="lightning-dev/July_2015/000022_-RFC-Anchor-funding-transactions-without-segregated-witness.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - [RFC] Anchor (funding) transactions without segregated witness</title>
    <updated>2023-06-03T15:06:26.994233+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-July/000029.html" rel="alternate"/>
    <summary>Rusty Russell and Joseph Poon discussed the possibility of implementing a basic lightning implementation in real bitcoin after OP_CHECKLOCKTIMEVERIFY soft-forks into it. They realized that the malleability issue could cause the commitment transaction to be useless. However, Rusty came up with another variant that Joseph approved of and improved upon. This construction will allow LN channels to exist with OP_CLTV; however, in case of uncooperative counterparties, waiting until channel expiration would be required to get the money back. In order to establish an anchor without new sighash modes, Rusty proposes having two anchors instead of one, each requiring both signatures to spend. The commitment transaction has two inputs, one for each. To recover funds in the event of an abort case, an intermediary transaction called "Escape" transactions is added. It spends the 2 of 2 anchor output but can be spent either by 2 of 2 or back to the anchor owner after a delay using OP_CHECKSEQUENCEVERIFY. Although there are three extra transactions involved, one extra for the channel open, and two for the channel close, this technique works and doesn't add any new requirements.</summary>
    <published>2015-07-14T05:56:57+00:00</published>
  </entry>
</feed>
