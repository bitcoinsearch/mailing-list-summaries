<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Taproot-aware Channel Announcements + Proof Verification</title>
  <updated>2023-06-04T03:11:59.820831+00:00</updated>
  <author>
    <name>David A. Harding 2022-03-23 21:02:12</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2022-03-23 22:30:40</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2022-03-23 01:10:00</name>
  </author>
  <link href="lightning-dev/March_2022/003528_Taproot-aware-Channel-Announcements-Proof-Verification.xml" rel="alternate"/>
  <link href="lightning-dev/March_2022/003529_Taproot-aware-Channel-Announcements-Proof-Verification.xml" rel="alternate"/>
  <link href="lightning-dev/March_2022/003526_Taproot-aware-Channel-Announcements-Proof-Verification.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Taproot-aware Channel Announcements + Proof Verification</title>
    <updated>2023-06-04T03:11:59.820831+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2022-March/003528.html" rel="alternate"/>
    <summary>The email conversation between Olaoluwa Osuntokun and Dave discusses the issue of whether proof+verification should be strongly bound to the Lightning Network (LN) context. Currently, nodes use two bitcoin keys to construct a P2WSH multi-sig script to verify that the script matches what has been confirmed on chain. With Taproot, the output is just a single key which raises questions about how to maintain the same level of binding. Dave argues that there is a significant difference between P2WSH and P2TR in terms of maintaining binding-to-LN-usage. He believes that the same level of binding cannot be maintained when P2TR keypath spends are allowed. Laolu agrees that 100% maintenance of the same level of binding for pure Taproot channels may not be possible, but suggests that validators verifying the final key derivation can still effectively restrict the type of outputs used to advertise channels.The Lightning Network (LND) has integrated Taproot into its codebase, which is scheduled to ship in version 0.15 around April. However, since Taproot means a different on-chain funding output, the existing gossip layer needs modification because the BOLTs don't define how to validate a given output as a Taproot channel. Discussions during prior spec meetings have centered on two possible paths: 1) redesigning the channel validation portion of the gossip layer, or 2) going with a more minimal mostly the same channel_announcement-like message for Taproot channels.Laolu Osuntokun, a developer at Lightning Labs, explores the second option in detail in this email. A new Taproot-aware `channel_announcement2` message could be a simple message that would include signature, length information, features, chain hash, short channel ID, node IDs, and Bitcoin keys. Nodes would need to reconstruct the aggregated Bitcoin public key to ensure that there's no actual committed script root that binds the output to their context further.To maintain the same level of binding for on-chain output validation, the `announcement_signatures` message would also need to change, as only a single signature across the wire would be sent: the musig2 partial signature. To generate these signatures, both sides would need to exchange their public nonce, which can be piggybacked on top of the existing funding message flow. Overall, Laolu Osuntokun outlines a mostly mechanical mapping of Taproot awareness to the existing gossip message flow that doesn't deviate too much from the current flow, making it easier to deploy.</summary>
    <published>2022-03-23T21:02:12+00:00</published>
  </entry>
</feed>
