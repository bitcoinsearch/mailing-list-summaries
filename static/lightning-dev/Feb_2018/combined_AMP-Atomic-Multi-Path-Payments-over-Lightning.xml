<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - AMP: Atomic Multi-Path Payments over Lightning</title>
  <updated>2023-06-02T02:14:09.532961+00:00</updated>
  <author>
    <name>Olaoluwa Osuntokun 2018-02-06 05:26:30</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-02-06 07:12:09</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2018-02-07 00:03:45</name>
  </author>
  <author>
    <name>Conner Fromknecht 2018-02-07 02:14:45</name>
  </author>
  <author>
    <name>Rusty Russell 2018-02-08 00:22:47</name>
  </author>
  <author>
    <name>Johan Torås Halseth 2018-02-08 16:41:41</name>
  </author>
  <author>
    <name>Johan Torås Halseth 2018-02-08 18:05:40</name>
  </author>
  <author>
    <name>Cezary Dziemian 2018-02-11 13:58:49</name>
  </author>
  <author>
    <name>Corné Plooy 2018-02-12 13:30:07</name>
  </author>
  <author>
    <name>Christian Decker 2018-02-12 18:05:56</name>
  </author>
  <author>
    <name>Rusty Russell 2018-02-07 23:21:43</name>
  </author>
  <author>
    <name>CJP 2018-02-09 10:15:20</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-02-12 03:03:37</name>
  </author>
  <author>
    <name>Christian Decker 2018-02-12 09:18:49</name>
  </author>
  <author>
    <name>Christian Decker 2018-02-12 09:23:22</name>
  </author>
  <author>
    <name>Conner Fromknecht 2018-02-13 03:29:28</name>
  </author>
  <author>
    <name>Rusty Russell 2018-02-14 00:47:49</name>
  </author>
  <author>
    <name>Jim Posen 2018-02-07 08:36:35</name>
  </author>
  <author>
    <name>Jim Posen 2018-02-08 17:44:21</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-02-13 02:56:04</name>
  </author>
  <link href="lightning-dev/Feb_2018/000993_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/000994_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/000999_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001001_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001009_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001010_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001012_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001017_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001022_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001023_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001008_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001015_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001019_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001020_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001021_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001025_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001029_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001004_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001011_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001024_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - AMP: Atomic Multi-Path Payments over Lightning</title>
    <updated>2023-06-02T02:14:09.532961+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-February/000993.html" rel="alternate"/>
    <summary>In an email exchange, ZmnSCPxj has complimented Laolu's work on Atomic Multi-path Payments (AMP) for the Lightning Network. AMP allows for multi-path payments without requiring fundamental changes to the Lightning protocol. The negotiation is strictly end-to-end between sender and receiver, so a global feature bit could be used to gate this new feature. Modifications to the fee schedule may make it cheaper to send payments over multiple flows rather than one giant flow, but the existence of per-hop fees means splitting the payment over multiple flows will very likely be more expensive compared to using a single flow.To include the three tuple within the per-hop payload for the final destination, the first byte of the unused padding bytes in the payload is repurposed to signal version 0x01 of the AMP protocol. Supporting AMP only at final payees might be enough and redefining the entire 64 bytes of the final hop data would reduce route length by one. The proposal by Olaoluwa Osuntokun is a generalized version of the single non-interactive payment scheme that utilizes decoding of extra onion blobs (EOBs) to encode additional data for receivers.Developers Conner Fromknecht and Olaoluwa Osuntokun have proposed the Atomic Multi-path Payments (AMP) payment protocol for the Lightning Network. AMP allows for sending large payments over multiple routes, with the recipient unable to settle any of the partial payments until all have arrived. The protocol splits every transaction into lots of micro-payments, allowing for better path diversity and privacy in routing. One of its benefits is that it eliminates the constraint of a single path from sender to receiver, reducing strain on individual paths, and potential fee savings for larger payments. AMPs also allow for logical payments larger than the current maximum value of an individual payment. The sender requires a random identifier ID, the number of partial payments n, and the total payment value V to use the AMP protocol. The sender constructs the n partial payments and deterministically computes the partial preimage r_i = H(BP || i) using smaller payments to increase the set of possible paths a partial payment could have taken, which reduces the effectiveness of static analysis techniques involving channel capacities and plaintext values being forwarded. The proposed solution uses Encrypted Onion Balances (EOBs) to deliver additive shares of a base preimage from which the payment preimages of partial payments can be derived, ensuring atomicity of the transaction. However, there are still open questions before something like this can be feasibly deployed, such as how the sender decides how many chunked payments to send and the size of each payment. AMPs may improve the privacy of LN as intermediaries are now unaware of how much of the total payment they are forwarding or even if they are forwarding a partial payment at all. To support the increased load, internal routing nodes are incentivized to have more active channels, which may increase the longevity of channels as there will be smaller, more numerous payment flows.The debate around Lightning has raised the question of whether atomicity should be abandoned in favour of making proof-of-payment presentable in court. Corné Plooy suggested that a new signed invoice could be formulated stating several payment hashes, their corresponding amounts and the obligation of the signer to deliver the asset if all corresponding payment keys are shown, with terms to handle the case where only part of the payments was successful. In addition, the payer would sign a declaration stating which transactions were cancelled and which ones should be refunded.In a recent discussion, Jim Posen questioned the use of using two hashes to deliver payment while still getting proof. He argued that it would not be any different from sending regular lightning payments over multiple routes with one hash. Furthermore, he pointed out that the second hash, if used, would likely be the same for all routes, making them linkable again, which AMP tries to solve.The question of use cases arises in discussions about splitting payments into smaller transactions. In situations where there is already a level of trust between payer and payee, such as when physical goods are being exchanged, partial payments can be made and any issues can be cooperatively resolved. On the other hand, in cases where there is less trust, a signed invoice can be used to provide proof of agreement between the two parties.Conner Fromknecht expressed his concerns about the soundness of using the current invoicing system to prove payments in the AMP setting. He argued that the current signed invoice + preimage is a weak proof of payment and suggested exploring proofs of stronger statements such as utilizing the ephemeral keys in the onion packets or even the onion as a witness. Another idea proposed by ZmnSCPxj was to use techniques like ZKCP and ZKCSP, which provide atomic access to information in exchange for monetary compensation. Christian Decker suggested keeping things simple and sticking to the current system that allows atomic multipath payments using a single secret, and future decorrelation</summary>
    <published>2018-02-06T05:26:30+00:00</published>
  </entry>
</feed>
