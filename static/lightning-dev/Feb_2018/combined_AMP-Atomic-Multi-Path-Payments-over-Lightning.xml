<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - AMP: Atomic Multi-Path Payments over Lightning</title>
  <updated>2023-06-03T18:21:11.697621+00:00</updated>
  <author>
    <name>Jim Posen 2018-02-08 17:44:21</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-02-13 02:56:04</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2018-02-06 05:26:30</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-02-06 07:12:09</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2018-02-07 00:03:45</name>
  </author>
  <author>
    <name>Conner Fromknecht 2018-02-07 02:14:45</name>
  </author>
  <author>
    <name>Rusty Russell 2018-02-08 00:22:47</name>
  </author>
  <author>
    <name>Johan Torås Halseth 2018-02-08 16:41:41</name>
  </author>
  <author>
    <name>Johan Torås Halseth 2018-02-08 18:05:40</name>
  </author>
  <author>
    <name>Cezary Dziemian 2018-02-11 13:58:49</name>
  </author>
  <author>
    <name>Corné Plooy 2018-02-12 13:30:07</name>
  </author>
  <author>
    <name>Christian Decker 2018-02-12 18:05:56</name>
  </author>
  <author>
    <name>Rusty Russell 2018-02-07 23:21:43</name>
  </author>
  <author>
    <name>CJP 2018-02-09 10:15:20</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-02-12 03:03:37</name>
  </author>
  <author>
    <name>Christian Decker 2018-02-12 09:18:49</name>
  </author>
  <author>
    <name>Christian Decker 2018-02-12 09:23:22</name>
  </author>
  <author>
    <name>Conner Fromknecht 2018-02-13 03:29:28</name>
  </author>
  <author>
    <name>Rusty Russell 2018-02-14 00:47:49</name>
  </author>
  <author>
    <name>Jim Posen 2018-02-07 08:36:35</name>
  </author>
  <link href="lightning-dev/Feb_2018/001011_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001024_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/000993_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/000994_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/000999_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001001_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001009_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001010_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001012_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001017_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001022_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001023_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001008_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001015_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001019_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001020_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001021_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001025_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001029_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/001004_AMP-Atomic-Multi-Path-Payments-over-Lightning.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - AMP: Atomic Multi-Path Payments over Lightning</title>
    <updated>2023-06-03T18:21:11.697621+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-February/001011.html" rel="alternate"/>
    <summary>The Lightning Network is a layer-two scaling solution for Bitcoin that enables faster and cheaper transactions by using payment channels between parties. One of the challenges faced by the Lightning Network is sending $6 payment atomically while maintaining proof of payment in the process. Several proposals have been suggested to solve this problem, including the Atomic Multi-path Payments (AMP) protocol developed by Conner Fromknecht and Olaoluwa Osuntokun. AMP allows sending a large payment non-atomically over multiple routes, with the recipient unable to settle any of the partial payments until all have arrived. The proposed protocol uses additive shares for AMPs and requires padding bytes in the payload to signal version 0x01 of the AMP protocol. The receiver does not need to know the order in which partial payments were sent, as it iteratively reconstructs the payment and settles them back once all have arrived. With AMPs, each flow can be up to the maximum size, with the sum of all flows exceeding the max. Furthermore, given sufficient path diversity, AMPs may improve the privacy of LN as intermediaries are now unaware of how much of the total payment they are forwarding or even if they are forwarding a partial payment at all.The Lightning Network has introduced a new protocol called Atomic Multi-path Payments (AMP), which allows for multiple payment flows without reusing any payment hashes. This protocol has several benefits such as supporting larger payment flows and improving privacy with sufficient path diversity. The Lightning-dev mailing list has discussed the possibility of making multipath payments. The proposal suggests using two hashes to claim the HTLC, which would give the sender a receipt after only one of the HTLCs is claimed. However, there are concerns that this would result in the loss of proof of payment. Despite these issues, the community seems enthusiastic about the possibility of multipath payments and is continuing to explore ways to implement them.In a recent discussion, Jim Posen questioned the use of using two hashes to deliver payment while still getting proof, arguing that it would not be any different from sending regular lightning payments over multiple routes with one hash. Furthermore, he pointed out that the second hash, if used, would likely be the same for all routes, making them linkable again. Conner Fromknecht expressed his concerns about the soundness of using the current invoicing system to prove payments in the AMP setting, suggesting exploring proofs of stronger statements such as utilizing the ephemeral keys in the onion packets or even the onion as a witness.The Lightning Network can become more reliable with the use of Atomic Multi-Path (AMP) payments, which involves splitting payments into smaller ones and using a pseudorandom number generator to ensure that the receiver can only receive all payments at once before claiming them. AMPs deliver additive shares of a base preimage, allowing users to send funds through multiple payment paths, providing higher availability and privacy compared to single-path payments. Integrating AMP into Lightning allows a sender to split a payment flow amongst several individual payment flows, eliminating the need for larger channels as one total outbound payment bandwidth can be utilized to send several channels.ZmnSCPxj suggested using techniques like ZKCP and ZKCSP to provide atomic access to information in exchange for monetary compensation. Christian Decker questioned the need for complicating the system when they already have a system that allows atomic multipath payments using a single secret. Corné Plooy proposed a different signed invoice format for use cases where there is already trust between payer and payee. In the email conversation, ZmnSCPxj compliments Laolu's work on AMP and suggests using a globalfeatures odd bit rather than localfeatures for AMP. The potential fee savings for larger payments are contingent on there being a super-linear component to routed fees. Using smaller payments increases the set of possible paths a partial payment could have taken, reducing the effectiveness of static analysis techniques involving channel capacities and plaintext values being forwarded.In order to include the three-tuple within the per-hop payload for the final destination, the first byte of the unused padding bytes in the payload can be repurposed to signal version 0x01 of the AMP protocol. AMP requires no fundamental changes to the existing protocol as negotiation is strictly end-to-end between sender and receiver. Supporting AMP only at final payees might be enough and redefining the entire 64 bytes of the final hop data would reduce route length by one. AMP at intermediate nodes might not matter much because taking advantage of it seems more complex than just asking the routing algorithm to provide multiple routes to a destination.The Lightning Network protocol can be used for making payments in exchange for non-cryptographic assets. In such cases, a signed invoice is provided by the merchant to the user stating that if payment is made with payment_hash Y, Z will be delivered. A different signed invoice could be formulated to handle partial refund cooperatively with an invoice created by the payer. The courts can be the final point of settlement</summary>
    <published>2018-02-08T17:44:21+00:00</published>
  </entry>
</feed>
