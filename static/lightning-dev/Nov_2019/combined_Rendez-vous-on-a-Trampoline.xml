<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Rendez-vous on a Trampoline</title>
  <updated>2023-06-02T21:01:58.160224+00:00</updated>
  <author>
    <name>Corn√© Plooy 2019-10-25 07:14:22</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2019-11-05 23:53:01</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2019-11-12 13:42:12</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2019-11-12 13:49:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2019-10-22 12:01:56</name>
  </author>
  <author>
    <name>Antoine Riard 2019-10-28 02:01:31</name>
  </author>
  <link href="lightning-dev/Oct_2019/002244_Rendez-vous-on-a-Trampoline.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2019/002284_Rendez-vous-on-a-Trampoline.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2019/002321_Rendez-vous-on-a-Trampoline.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2019/002322_Rendez-vous-on-a-Trampoline.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2019/002237_Rendez-vous-on-a-Trampoline.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2019/002253_Rendez-vous-on-a-Trampoline.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Rendez-vous on a Trampoline</title>
    <updated>2023-06-02T21:01:58.160224+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-October/002244.html" rel="alternate"/>
    <summary>Bastien Teinturier, a member of the Eclair team, has proposed using Bitcoin Trampoline to improve rendezvous routing in Lightning Network payments. Rendezvous routing allows for more efficient payment routing by allowing the recipient to create their part of the onion and communicate it to the sender via a Bolt 11 invoice. However, this method requires additional bytes to be added to the invoice, limiting the amount that can be sent at once and requiring upfront decisions on how to split multi-part payments.Using Trampoline onions would allow for pre-encryption on a smaller onion and enable multi-part payments at each hop through Trampoline nodes, improving efficiency and potentially enabling high AMP. The proposal also addresses issues with payment failures by providing a communication channel between the sender and receiver to exchange further payment information and decrypt opaque errors. Trampoline would offer a payment-level ACK, important for payment splitting. The proposal acknowledges that Trampoline itself has trade-offs, such as impacting privacy when paying to legacy nodes, but plans to continue experiments and develop a spec that minimizes these trade-offs.</summary>
    <published>2019-10-25T07:14:22+00:00</published>
  </entry>
</feed>
