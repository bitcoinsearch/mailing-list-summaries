<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Using Per-Update Credential to enable Eltoo-Penalty</title>
  <updated>2023-06-02T19:27:31.440329+00:00</updated>
  <author>
    <name>Christian Decker 2019-07-14 13:42:30</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-07-15 00:12:30</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-07-15 09:58:12</name>
  </author>
  <author>
    <name>Antoine Riard 2019-07-16 18:34:00</name>
  </author>
  <author>
    <name>Antoine Riard 2019-07-16 18:52:41</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-07-17 04:35:13</name>
  </author>
  <author>
    <name>Antoine Riard 2019-07-13 04:35:30</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-07-14 23:22:43</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-07-14 04:48:22</name>
  </author>
  <author>
    <name>Antoine Riard 2019-07-16 17:04:20</name>
  </author>
  <link href="lightning-dev/July_2019/002067_Using-Per-Update-Credential-to-enable-Eltoo-Penalty.xml" rel="alternate"/>
  <link href="lightning-dev/July_2019/002069_Using-Per-Update-Credential-to-enable-Eltoo-Penalty.xml" rel="alternate"/>
  <link href="lightning-dev/July_2019/002070_Using-Per-Update-Credential-to-enable-Eltoo-Penalty.xml" rel="alternate"/>
  <link href="lightning-dev/July_2019/002074_Using-Per-Update-Credential-to-enable-Eltoo-Penalty.xml" rel="alternate"/>
  <link href="lightning-dev/July_2019/002075_Using-Per-Update-Credential-to-enable-Eltoo-Penalty.xml" rel="alternate"/>
  <link href="lightning-dev/July_2019/002076_Using-Per-Update-Credential-to-enable-Eltoo-Penalty.xml" rel="alternate"/>
  <link href="lightning-dev/July_2019/002064_Using-Per-Update-Credential-to-enable-Eltoo-Penalty.xml" rel="alternate"/>
  <link href="lightning-dev/July_2019/002068_Using-Per-Update-Credential-to-enable-Eltoo-Penalty.xml" rel="alternate"/>
  <link href="lightning-dev/July_2019/002066_Using-Per-Update-Credential-to-enable-Eltoo-Penalty.xml" rel="alternate"/>
  <link href="lightning-dev/July_2019/002073_Using-Per-Update-Credential-to-enable-Eltoo-Penalty.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Using Per-Update Credential to enable Eltoo-Penalty</title>
    <updated>2023-06-02T19:27:31.440329+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-July/002067.html" rel="alternate"/>
    <summary>ZmnSCPxj, a Bitcoin developer, has discussed the use of punishment in multi-participant settings and identified potential issues with contracts like HTLC outputs that have shared ownership. Punishment systems only work if there are two or fewer participants, which prevents channel factory scaling. ZmnSCPxj believes non-punitive constructions are the only possible option for multi-participant constructions. The context also explores identifying the perpetrator who attempted to steal, and the proposal involves four transactions: funding transaction, update transaction, friendly settlement transaction, and litigation transaction. A hostile settlement transaction is also included for revocable outputs owned by the participant who initiated the unilateral close. In a Lightning-dev post, it was noted that access to channel databases is often easier than accessing node private keys, and attackers can use older versions to frame a user for theft and make them lose all channel funds. Decker-Russell-Osuntokun eliminates "toxic waste" from older versions of channel databases that can be used by attackers to access funds. The post argues that punishments reintroduce asymmetry and undo many benefits gained with eltoo. ZmnSCPxj also argues that channel factories are better than multi-participant channels as they allow limited transport of funds even if one participant is offline and arbitrary transport of funds between any participants inside the factory if all participants are online.The context discusses the issue of punishment systems in multi-participant constructions within lightning networks, noting that punitive constructions on the channel syntax level may not make economic sense due to higher funds being locked as channel reserve. Additionally, the possibility of exploiting other elements like mempool congestion or eclipse your onchain node was noted, and the need for an increased insurance policy in the form of punitive provisions on channels was mentioned. In scenarios where Alice steals from Bob by publishing old state, the old-state Alice-&gt;Bob HTLC is revocable split by Bob and Charlie, resulting in the money that rightfully belongs to Bob going partly to Charlie instead. In such scenarios, the author suggests that Alice and Bob could be in cahoots, with Bob as the mastermind and Alice as the fall guy, or Alice and Charlie could be in cahoots, with Charlie as the mastermind and Alice as the fall guy.</summary>
    <published>2019-07-14T13:42:30+00:00</published>
  </entry>
</feed>
