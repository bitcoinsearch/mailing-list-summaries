<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Preventing MITM - Providing new nodes with real pubkeys</title>
  <updated>2023-06-03T15:40:16.324212+00:00</updated>
  <author>
    <name>Anthony Towns 2015-10-16 23:01:42</name>
  </author>
  <author>
    <name>Anthony Towns 2015-10-16 23:47:47</name>
  </author>
  <author>
    <name>Anthony Towns 2015-10-19 01:41:00</name>
  </author>
  <author>
    <name>Mats Jerratsch 2015-10-19 07:45:34</name>
  </author>
  <author>
    <name>Anthony Towns 2015-10-19 21:58:01</name>
  </author>
  <author>
    <name>Peter Todd 2015-10-20 15:38:52</name>
  </author>
  <author>
    <name>Mats Jerratsch 2015-10-16 13:22:25</name>
  </author>
  <author>
    <name>Rusty Russell 2015-10-16 20:50:30</name>
  </author>
  <author>
    <name>Mats Jerratsch 2015-10-18 11:25:29</name>
  </author>
  <author>
    <name>Rusty Russell 2015-10-20 06:25:04</name>
  </author>
  <author>
    <name>Mats Jerratsch 2015-10-20 07:27:11</name>
  </author>
  <author>
    <name>Rusty Russell 2015-10-20 23:15:26</name>
  </author>
  <author>
    <name>Mats Jerratsch 2015-10-18 11:21:13</name>
  </author>
  <author>
    <name>Rusty Russell 2015-10-20 01:42:26</name>
  </author>
  <link href="lightning-dev/Oct_2015/000266_Preventing-MITM-Providing-new-nodes-with-real-pubkeys.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2015/000267_Preventing-MITM-Providing-new-nodes-with-real-pubkeys.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2015/000270_Preventing-MITM-Providing-new-nodes-with-real-pubkeys.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2015/000272_Preventing-MITM-Providing-new-nodes-with-real-pubkeys.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2015/000276_Preventing-MITM-Providing-new-nodes-with-real-pubkeys.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2015/000283_Preventing-MITM-Providing-new-nodes-with-real-pubkeys.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2015/000262_Preventing-MITM-Providing-new-nodes-with-real-pubkeys.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2015/000264_Preventing-MITM-Providing-new-nodes-with-real-pubkeys.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2015/000269_Preventing-MITM-Providing-new-nodes-with-real-pubkeys.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2015/000280_Preventing-MITM-Providing-new-nodes-with-real-pubkeys.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2015/000282_Preventing-MITM-Providing-new-nodes-with-real-pubkeys.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2015/000284_Preventing-MITM-Providing-new-nodes-with-real-pubkeys.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2015/000268_Preventing-MITM-Providing-new-nodes-with-real-pubkeys.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2015/000279_Preventing-MITM-Providing-new-nodes-with-real-pubkeys.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Preventing MITM - Providing new nodes with real pubkeys</title>
    <updated>2023-06-03T15:40:16.325216+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-October/000266.html" rel="alternate"/>
    <summary>The Lightning Network is a payment protocol designed to address the scalability limitations of Bitcoin. However, concerns have been raised regarding its security, particularly with regards to fake networks. Users can perform tests by paying small amounts to merchants or friends to confirm connectivity. Rusty Russell discusses the possibility of Lightning channels between nodes through IOUs and suggests that it could be done on a pegged sidechain or through literal IOUs on paper. Mats Jerratsch raises concerns about attackers who could MITM internet connections to build a local network that points to the same node, which would enable them to block payments and do other malicious activities.There are three types of attacks: vandalism, sybil, and pervasive. Vandalism occurs when attackers randomly join the lightning network with dysfunctional nodes to stop it from functioning. A Sybil attack happens when someone targets a user personally and controls all the nodes they connect to. A pervasive attack involves everyone in a large group simultaneously suffering from a sybil attack. The author proposes several ways to mitigate the risks, including hashing and linking data to a blockchain, exposing scripts for verification, using OP_RETURN outputs, and starting with one node and comparing IP addresses.When using a lightning network, the user must set up a channel and lock some money into it for the channel to activate before they can test it. However, an attacker can open channels with a user and succeed in vandalism. The attacker can also follow the rules and forward payments to a certain point where they stop. Furthermore, if everyone connects to the attacker's nodes, they can relay all payments and identify payees and payers even with onion routing. In terms of forwarding transactions, it may cost more in CPU cycles than the fees made. One satoshi is equal to 2.6 10,000ths of a cent, and it costs about 1/350th of a CPU-second to forward a transaction. The cost of forwarding a single transaction is around 2.4e-8 dollars, which is currently about 9.1e-11 bitcoin or 0.0091 satoshi. Mats Jerratsch suggests that opening channels with randomly chosen nodes can help find good ones. The probability of finding a good node increases as the number of random nodes increases. One solution is to create a cost to run or register a node/channel, thereby discouraging spamming of the list of channels with valid-looking edges that won't route payments successfully.Regarding the size of the map needed for Lightning, Russell suggests that the concern can be ignored until there are over 10k nodes. It may also be possible for nodes to randomly prune distant parts of the map and retrieve them from the network as needed. However, creating a cost to run or register a node/channel could discourage spamming. The context discusses the possibility of attackers maintaining control over network activity even with personal attacks. The group suggests making it expensive to attack as a good start towards protection. To solve malleability in anchor transactions, the group considers using SecretAHash || KeyB' || KeyB || KeyA || TxID || nodePubKey || SignatureB (L=264B) but determines that escape and fast-escape solutions are the only viable options. Schnorr signatures are discussed as a potential solution but not all members are comfortable with it. They also discuss the idea of pruning distant parts of the map randomly and implementing broadcast messages to avoid on-chain spam. Rusty expresses discomfort with using Schnorr due to its lack of implementation in Java but acknowledges that it can be decided on later since they are not bound to consensus.</summary>
    <published>2015-10-16T23:01:42+00:00</published>
  </entry>
</feed>
