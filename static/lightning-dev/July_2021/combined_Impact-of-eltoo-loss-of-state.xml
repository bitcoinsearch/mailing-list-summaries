<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Impact of eltoo loss of state</title>
  <updated>2023-06-04T02:01:50.417079+00:00</updated>
  <author>
    <name>Jeremy 2021-07-12 22:16:43</name>
  </author>
  <author>
    <name>Christian Decker 2021-07-20 10:57:17</name>
  </author>
  <author>
    <name>Anthony Towns 2021-07-12 08:17:49</name>
  </author>
  <author>
    <name>Martin Habov≈°tiak 2021-07-15 10:28:17</name>
  </author>
  <author>
    <name>Anthony Towns 2021-07-21 06:39:13</name>
  </author>
  <author>
    <name>Jeremy 2021-07-27 18:21:48</name>
  </author>
  <author>
    <name>Jeremy 2021-07-12 22:20:41</name>
  </author>
  <author>
    <name>Christian Decker 2021-07-14 14:44:24</name>
  </author>
  <author>
    <name>ZmnSCPxj 2021-07-27 11:44:21</name>
  </author>
  <author>
    <name>ZmnSCPxj 2021-07-27 16:53:14</name>
  </author>
  <link href="lightning-dev/July_2021/003130_Impact-of-eltoo-loss-of-state.xml" rel="alternate"/>
  <link href="lightning-dev/July_2021/003136_Impact-of-eltoo-loss-of-state.xml" rel="alternate"/>
  <link href="lightning-dev/July_2021/003127_Impact-of-eltoo-loss-of-state.xml" rel="alternate"/>
  <link href="lightning-dev/July_2021/003134_Impact-of-eltoo-loss-of-state.xml" rel="alternate"/>
  <link href="lightning-dev/July_2021/003137_Impact-of-eltoo-loss-of-state.xml" rel="alternate"/>
  <link href="lightning-dev/July_2021/003141_Impact-of-eltoo-loss-of-state.xml" rel="alternate"/>
  <link href="lightning-dev/July_2021/003131_Impact-of-eltoo-loss-of-state.xml" rel="alternate"/>
  <link href="lightning-dev/July_2021/003133_Impact-of-eltoo-loss-of-state.xml" rel="alternate"/>
  <link href="lightning-dev/July_2021/003139_Impact-of-eltoo-loss-of-state.xml" rel="alternate"/>
  <link href="lightning-dev/July_2021/003140_Impact-of-eltoo-loss-of-state.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Impact of eltoo loss of state</title>
    <updated>2023-06-04T02:01:50.418079+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-July/003130.html" rel="alternate"/>
    <summary>In the Lightning-dev mailing list, discussions were held to address the issue of lost state on eltoo channels in case of node crashes. Two options were proposed - doing nothing and keeping up-to-date backups or using peer-storage, such as Rusty's encrypted-blob idea. There were discussions about layered commitments in relation to channel factories and the safety of restoring an eltoo channel from an out-of-date backup. It was suggested that nodes should share state on reconnection and negotiate a mutual/cooperative close if possible to avoid using the eltoo protocol on-chain.In another discussion, Jeremy Rubin proposed a solution to fix the lost state issue by encrypting data in an OP_RETURN for any update transaction for each participant. Anthony Towns suggested that nodes should share state on reconnection and always negotiate a mutual/cooperative close to avoid using the eltoo protocol on-chain when Bob's lightning node crashes while payments are going from Alice to Bob to Carol with eltoo channels. The discussion also covered the size of resolution during a contested close scenario and the possibility of reducing the chance of not having the latest state. It was suggested that encoding the necessary state in an op_return or similar method guarantees the availability of the closing transaction data in the protocol with no external dependencies. Additionally, discussions were held about storing data with multiple peers using erasure coding to ensure reliable data storage while limiting the amount of data stored.The article discusses the problem of losing funds due to forgetting state in the Lightning Network. To prevent this, nodes can provide a "will remember for you" flag in the feature bits, allowing them to locate the nearest node and contact it to remember the memento. A throwaway keypair should be used instead of the normal pubkey while contacting the selected node. The Barrier Escrow solution is suggested where both parties can provide data before the other withholds it. However, Barrier Escrow services have to be paid for their service and need Lightning connectivity. The anonymous nature of the client requesting data storage is vulnerable to abuse and DDoS. To prevent spam, a "will remember for you" node can use techniques developed for anonymously paying to watchtowers. Even if peers conspire with the "will remember for you" node, it cannot identify which node suffered amnesia.</summary>
    <published>2021-07-12T22:16:43+00:00</published>
  </entry>
</feed>
