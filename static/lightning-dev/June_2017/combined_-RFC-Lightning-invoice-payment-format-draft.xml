<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - [RFC] Lightning invoice/payment format draft</title>
  <updated>2023-06-03T17:35:24.642610+00:00</updated>
  <author>
    <name>Rusty Russell 2017-06-01 01:28:20</name>
  </author>
  <author>
    <name>ZmnSCPxj 2017-06-01 03:42:21</name>
  </author>
  <author>
    <name>ZmnSCPxj 2017-06-01 03:48:46</name>
  </author>
  <author>
    <name>ZmnSCPxj 2017-06-01 05:25:57</name>
  </author>
  <link href="lightning-dev/June_2017/000732_-RFC-Lightning-invoice-payment-format-draft.xml" rel="alternate"/>
  <link href="lightning-dev/June_2017/000733_-RFC-Lightning-invoice-payment-format-draft.xml" rel="alternate"/>
  <link href="lightning-dev/June_2017/000734_-RFC-Lightning-invoice-payment-format-draft.xml" rel="alternate"/>
  <link href="lightning-dev/June_2017/000735_-RFC-Lightning-invoice-payment-format-draft.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - [RFC] Lightning invoice/payment format draft</title>
    <updated>2023-06-03T17:35:24.642610+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2017-June/000732.html" rel="alternate"/>
    <summary>The lightning network is proposing a new payment method, which requires further review. The payment method uses bech32 encoding and includes an optional part that can be tagged. Rustyrussell has created an implementation of the payment format on Github, along with an example. There is a potential issue with parsing the optional amount in lightning invoices due to the separator character "1" being used for both human-readable and data parts. To avoid confusion, it is suggested that the first 5 bits of the payment format should be fixed at 0 to provide an unambiguous separator between the two parts. Furthermore, it is questioned whether lightning invoices are optimized for human errors, as they are longer than segwit addresses and therefore more prone to errors. The author suggests rewording the statement to clarify that human errors are unlikely compared to other types of errors.In another message, ZmnSCPxj corrects their understanding of bech32 and notes that the character "1" is not allowed in the data part of the string. This means that the last "1" serves as the separator between the human-readable and data parts.Finally, ZmnSCPxj reports a doubled "than" at line 20 of Bolt#11 and raises concerns about the lack of a clear description of how the tagged `d` field is encoded. They suggest that a proper description of its intended encoding should be included in the BOLT.</summary>
    <published>2017-06-01T01:28:20+00:00</published>
  </entry>
</feed>
