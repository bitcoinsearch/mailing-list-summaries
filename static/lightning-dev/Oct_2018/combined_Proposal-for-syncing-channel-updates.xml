<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Proposal for syncing channel updates</title>
  <updated>2023-06-02T03:53:01.111880+00:00</updated>
  <author>
    <name>Fabrice Drouin 2018-10-04 12:46:19</name>
  </author>
  <author>
    <name>Fabrice Drouin 2018-10-12 08:58:41</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-10-05 08:16:34</name>
  </author>
  <link href="lightning-dev/Oct_2018/001426_Proposal-for-syncing-channel-updates.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2018/001451_Proposal-for-syncing-channel-updates.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2018/001427_Proposal-for-syncing-channel-updates.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Proposal for syncing channel updates</title>
    <updated>2023-06-02T03:53:01.111880+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-October/001426.html" rel="alternate"/>
    <summary>Fabrice has proposed an extension to the current "channel queries" for nodes in the Lightning Network, which will help them to sync their outdated channel updates properly. He has opened an issue on the RFC's Github repo and posted on the forum to have a less constrained discussion. The routing table sync is a crucial issue for LN wallets, and it includes static information such as channel announcements and dynamic information such as channel updates. One problem is that offline nodes cannot sync their channel updates correctly, leading to outdated information. There are currently two schemes to improve routing table sync, but they still have issues with offline nodes. Fabrice proposes a timestamp-based channel update sync scheme to extend query parameters to include channel update timestamps. In a conversation between ZmnSCPxj and Fabrice, they discuss the possibility of reducing the synchronization problem using set reconciliation algorithms. They suggest that if they consider the timestamp and enable/disable state of channel updates as part of an item, they can use standard set reconciliation algorithms. This idea might be less efficient than Zmn's proposed extension. However, Fabrice believes that this would be a natural solution to handle sync issues. Fabrice also raises the concern that they may have missed something with the current channel queries. He proposes something that is close to what they already have today, should be easy to implement if channel queries are already supported, and should fix the issue he thinks they have. In an email response to Fabrice, ZmnSCPxj suggests a solution to a set reconciliation problem. While Fabrice had noted that the problem was not one of missing items, but rather missing updates for existing items, ZmnSCPxj suggests that by considering the timestamp and enable/disable state of channel updates, the problem could be reduced to a set reconciliation problem. This would allow both sides to use standard set reconciliation algorithms, dropping all items except for the one with the latest timestamp for channel updates of the same short channel ID. ZmnSCPxj acknowledges that this solution may be less efficient than Fabrice's proposed extension.</summary>
    <published>2018-10-04T12:46:19+00:00</published>
  </entry>
</feed>
