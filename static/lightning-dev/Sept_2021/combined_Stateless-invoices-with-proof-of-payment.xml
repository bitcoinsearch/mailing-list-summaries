<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Stateless invoices with proof-of-payment</title>
  <updated>2023-06-03T06:01:03.265396+00:00</updated>
  <author>
    <name>Joost Jager 2021-09-23 09:48:06</name>
  </author>
  <author>
    <name>Joost Jager 2021-09-21 10:08:06</name>
  </author>
  <author>
    <name>ZmnSCPxj 2021-09-21 11:11:10</name>
  </author>
  <author>
    <name>Joost Jager 2021-09-21 11:25:41</name>
  </author>
  <author>
    <name>ZmnSCPxj 2021-09-21 11:40:37</name>
  </author>
  <author>
    <name>fiatjaf 2021-09-21 12:03:44</name>
  </author>
  <author>
    <name>Joost Jager 2021-09-21 13:17:10</name>
  </author>
  <author>
    <name>Joost Jager 2021-09-21 17:12:52</name>
  </author>
  <author>
    <name>ZmnSCPxj 2021-09-21 11:44:16</name>
  </author>
  <author>
    <name>Joost Jager 2021-09-21 12:40:24</name>
  </author>
  <author>
    <name>fiatjaf 2021-09-21 13:05:48</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2021-09-21 15:47:12</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2021-09-22 23:40:55</name>
  </author>
  <link href="lightning-dev/Sept_2021/003253_Stateless-invoices-with-proof-of-payment.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2021/003236_Stateless-invoices-with-proof-of-payment.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2021/003237_Stateless-invoices-with-proof-of-payment.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2021/003238_Stateless-invoices-with-proof-of-payment.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2021/003239_Stateless-invoices-with-proof-of-payment.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2021/003241_Stateless-invoices-with-proof-of-payment.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2021/003244_Stateless-invoices-with-proof-of-payment.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2021/003246_Stateless-invoices-with-proof-of-payment.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2021/003240_Stateless-invoices-with-proof-of-payment.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2021/003242_Stateless-invoices-with-proof-of-payment.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2021/003243_Stateless-invoices-with-proof-of-payment.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2021/003245_Stateless-invoices-with-proof-of-payment.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2021/003252_Stateless-invoices-with-proof-of-payment.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Stateless invoices with proof-of-payment</title>
    <updated>2023-06-03T06:01:03.265396+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-September/003253.html" rel="alternate"/>
    <summary>A recent proposal suggests using stateless invoices in the Lightning Network to alleviate the need for protection against unbounded generation of payment requests. This involves generating an invoice hash that serves as the lock for the HTLC and reconstructing the preimage upon receipt of the payment. Additional custom tlv records can be attached to the htlc or an existing invoice description field can be used to specify additional data for that record in a bolt11 invoice.The email exchange between Bastien and Joost discusses the implementation of a "stateless invoice" API that could be a solution to protect against unbounded generation of payment requests. The proposal is for the payee to generate a stateless invoice using some secret to compute the preimage upon receiving the HTLC. One way to achieve this is via the payment_secret, which is already an arbitrary invoice id that gets sent as a tlv record. Implementations should expose a "stateless invoice" API for receiving using the payment_secret and when sending, implementations should attach a TLV record with encoded order details.Two proposals related to Lightning Network payments were also discussed, including a "stateless invoice" API for receiving payments and attaching TLV records with encoded order details when sending payments. Invoice storage is also discussed as a vector for DoS attacks for merchants/hubs, and metadata could be attached to Lightning Network payments in the future. Overall, these proposals aim to improve the Lightning Network payment process and provide more efficient solutions for payees and senders.Joost suggests that a new tag for bolt11 and node implementations is needed to carry over the contents of the encoded order details field to a tlv record. Bastien asks for an example of what information would usually be put in the encoded_order_details field, suggesting that it could be a skuID from the merchant's product database or fully self-contained data to identify a transaction, encrypted with a key belonging to the payee.In addition, unlimited amounts of invoices can be generated without worrying about storage or memory, regardless of whether the requests are due to popularity of a service or a deliberate dos attack. Resilience can be achieved by implementing just-in-time inserted invoices to keep the difference small. A clever workaround was used by fiatjaf on @lntxbot, but it required low-level code in a c-lightning plugin and a hack with route hints since TLV payloads were not an option.Stateless invoices can be a simple way to improve the resiliency of systems that deal with lightning invoices. The Lightning network can provide light-weight, no-login payments with minimal friction, but optimistically presenting payment requests leads to many of those payment requests going unused. With stateless invoices, invoices can be generated without the need to keep any state at all.</summary>
    <published>2021-09-23T09:48:06+00:00</published>
  </entry>
</feed>
