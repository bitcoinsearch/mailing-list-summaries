<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Peer selection</title>
  <updated>2023-06-02T01:34:11.751038+00:00</updated>
  <author>
    <name>William Casarin 2017-12-14 02:45:38</name>
  </author>
  <author>
    <name>Stan Kladko 2017-12-12 15:32:12</name>
  </author>
  <author>
    <name>Stan Kladko 2017-12-13 08:58:21</name>
  </author>
  <author>
    <name>ZmnSCPxj 2017-12-13 00:36:24</name>
  </author>
  <author>
    <name>ZmnSCPxj 2017-12-13 12:53:52</name>
  </author>
  <author>
    <name>Stan Kladko 2017-12-13 13:04:50</name>
  </author>
  <author>
    <name>ZmnSCPxj 2017-12-13 13:15:46</name>
  </author>
  <link href="lightning-dev/Dec_2017/000842_Peer-selection.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2017/000832_Peer-selection.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2017/000835_Peer-selection.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2017/000833_Peer-selection.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2017/000837_Peer-selection.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2017/000838_Peer-selection.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2017/000840_Peer-selection.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Peer selection</title>
    <updated>2023-06-02T01:34:11.752036+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2017-December/000842.html" rel="alternate"/>
    <summary>The Lightning Network (LN) protocol allows nodes to be behind Tor hidden services, which automatically have NAT punching and firewall traversal as long as the firewall allows the Tor protocol to go through. However, it is unclear if there are already LN software that supports being run as a Tor hidden service yet. To discover nodes on the network, there are no UIs available, but current LN programs keep track of this in their databases. The network bootstrap involves using DNS to discover some of the LN nodes, and then the node will connect to these nodes, request node gossip, and select nodes to connect and channel to.When selecting nodes to peer with, users can choose their own selection criteria. Channels are initially single-funded, but there is a proposal for dual-funded channels that did not make it into version 1.0. If users have onchain bitcoins to invest and intend to become a hub and earn routing fees, it is suggested they channel with relatively new and low-connectivity nodes, increasing their chances of being routed through if those nodes become prolific users of the network in the future. Each node indicates a "fixed fee" and a "proportional fee," imposed per successful routing attempt and as a ratio of the value traveling through the node when it is on the route, respectively.There are currently no performance/reputation info available for any hub, but users' auto-channeling programs will gather statistics and other information to make some guesses on which nodes have good performance. There is nothing that specially privileges hubs, and any node can become a hub without permission or special treatment of the network, if by "hub" we mean "node with high number of channels". Even the DNS bootstrap should only be used to gather initial node gossip to acquire some other nodes that can potentially be channeled to.Regarding incoming channel requests, there are no UIs available to accept or reject them, and they are auto-accepted. However, users can program their nodes to reject some nodes via any heuristic they choose.</summary>
    <published>2017-12-14T02:45:38+00:00</published>
  </entry>
</feed>
