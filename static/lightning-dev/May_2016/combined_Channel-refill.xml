<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Channel refill</title>
  <updated>2023-06-03T16:27:42.729633+00:00</updated>
  <author>
    <name>Kumaigorodskiy Anton 2016-05-09 16:45:07</name>
  </author>
  <author>
    <name>Rusty Russell 2016-05-09 20:30:54</name>
  </author>
  <author>
    <name>mr. gnosteek 2016-05-10 04:48:38</name>
  </author>
  <link href="lightning-dev/May_2016/000534_Channel-refill.xml" rel="alternate"/>
  <link href="lightning-dev/May_2016/000535_Channel-refill.xml" rel="alternate"/>
  <link href="lightning-dev/May_2016/000536_Channel-refill.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Channel refill</title>
    <updated>2023-06-03T16:27:42.729633+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-May/000534.html" rel="alternate"/>
    <summary>The Lightning Network has some limitations, including the inability to receive a single payment larger than the amount currently locked in a channel and the inability to make payments once their side of the channel balance reaches zero. One solution that has been proposed is to implement a "channel refill" procedure. This process involves using the same pair of commit_keys resulting in a second utxo on the anchor address. A new "refill commitment tx" is created which does not invalidate the current "main commitment tx." Once the on-chain refill transaction reaches the required depth, a new "main commitment tx" is created that takes into account the new utxo. The old "main commitment tx" as well as the "refill commitment tx" are invalidated. One advantage of the refill method over creating a new channel is that overall channel capacity would grow each time, meaning that after several refills, no more may be needed for an extended period.Kumaigorodskiy Anton suggested implementing the channel refill procedure to address the limitations of the Lightning Network. Rusty Russell, an expert in Bitcoin and Lightning Network supported this idea and referred to it as "re-anchoring." Essentially, re-anchoring involves creating a new funding transaction that spends the old one plus additional inputs and providing signatures for both transactions until the new one has become deep enough to drop the old signatures. Re-anchoring could also be used to pay non-Lightning bitcoin addresses. Russell believes that re-anchoring will likely be the first extension implemented once the basics of Lightning Network are sorted out. On May 12, 2016, the Lightning team held a meeting in Kyiv, Ukraine to discuss potential improvements for the Lightning Network. One topic discussed was the issue of edge cases where one cannot receive a single payment that exceeds the currently locked-in channel capacity. The proposed solution was to implement a "re-anchoring" or "channel refill" procedure. This would involve creating a new funding transaction that spends the old one, plus additional inputs. Signatures would be provided for both the old and new funding transactions until the new one is deep enough, at which point the old signatures can be dropped. Re-anchoring could also be used to pay non-Lightning bitcoin addresses. Russell expressed support for the idea of re-anchoring and suggested it may be the first extension implemented once the basics are sorted out. The proposed advantage of re-anchoring over creating a new channel is that overall channel capacity would grow each time, reducing the need for repeated refills in the future.</summary>
    <published>2016-05-09T16:45:07+00:00</published>
  </entry>
</feed>
