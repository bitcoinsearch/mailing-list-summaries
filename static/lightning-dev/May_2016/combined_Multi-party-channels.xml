<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Multi-party channels</title>
  <updated>2023-06-02T00:35:58.398033+00:00</updated>
  <author>
    <name>Mats Jerratsch 2016-05-30 09:01:33</name>
  </author>
  <author>
    <name>Tier Nolan 2016-05-27 20:38:40</name>
  </author>
  <link href="lightning-dev/May_2016/000545_Multi-party-channels.xml" rel="alternate"/>
  <link href="lightning-dev/May_2016/000543_Multi-party-channels.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Multi-party channels</title>
    <updated>2023-06-02T00:35:58.398033+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-May/000545.html" rel="alternate"/>
    <summary>A cloud-based payment channel with multiple parties has been proposed, but it presents problems in case of cheating and broadcasting an old channel transaction. One possible solution is to return to the schema of decreasing nLocktime with each update, but this would mean returning to very limited lifetime per channel and lead to increased on-chain activity or high refund timeouts where money cannot be accessed.The Lightning network's hubs require a large amount of capital, making it difficult for new hubs to enter the market and increasing the possibility of cartel formation. Multi-party channels could solve this issue by allowing a hub to share its capital between multiple customers. A basic multi-party channel would require all participants to sign each state update, ensuring that only the most recent state is broadcasted. This system requires signatures from all parties for all state updates and updates are impossible while any of the parties are offline or uncooperative. A flexible multi-party channel would require signatures only from parties who lose out due to the state update, and until the channel times out, only the hub can broadcast the final state.Outputs from the channel would be locked for 24 hours to give participants a chance to challenge the final state. Fraud claim timeouts could be handled in parallel, and it should be possible to set up the channel to be mostly eternal. Parties could be added and removed from the channel without it having to be closed, but this would require some kind of on-chain activity unless the withdrawal is handled by moving to another channel.</summary>
    <published>2016-05-30T09:01:33+00:00</published>
  </entry>
</feed>
