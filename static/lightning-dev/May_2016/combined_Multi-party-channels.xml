<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Multi-party channels</title>
  <updated>2023-06-03T16:29:57.512445+00:00</updated>
  <author>
    <name>Mats Jerratsch 2016-05-30 09:01:33</name>
  </author>
  <author>
    <name>Tier Nolan 2016-05-27 20:38:40</name>
  </author>
  <link href="lightning-dev/May_2016/000545_Multi-party-channels.xml" rel="alternate"/>
  <link href="lightning-dev/May_2016/000543_Multi-party-channels.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Multi-party channels</title>
    <updated>2023-06-03T16:29:57.512445+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-May/000545.html" rel="alternate"/>
    <summary>The Lightning network is discussing the idea of a cloud-based payment channel with multiple parties connected, but there are concerns about what would happen if a participant cheats and broadcasts an old channel transaction. The issue lies in determining the correct payout to other participants, especially when different parties have made different initial contributions. One possible solution is to return to the schema of decreasing nLocktime with each update, making broadcasting old states impossible. However, this would mean returning to limited lifetime per channel or high refund timeouts where money cannot be accessed. Multi-party channels could allow hubs to share their capital between multiple customers, solving the issue of requiring large amounts of capital for new hubs to enter the market and preventing cartel formation. A basic multi-party channel would require all participants to sign each state update, ensuring that only the most recent state is broadcasted. A flexible multi-party channel would require signatures only from parties who lose out due to the state update, and until the channel times out, only the hub can broadcast the final state. Outputs from the channel would be locked for 24 hours to give participants a chance to challenge the final state, and fraud claim timeouts could be handled in parallel. It should also be possible to set up the channel to be mostly eternal, with parties being added and removed without it having to be closed, as long as withdrawal is handled by moving to another channel. However, these proposals require more information on how resigning transactions would be combined with the nLocktime approach.</summary>
    <published>2016-05-30T09:01:33+00:00</published>
  </entry>
</feed>
