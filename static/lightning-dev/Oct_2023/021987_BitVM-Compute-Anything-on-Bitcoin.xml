<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BitVM: Compute Anything on Bitcoin</title>
  <updated>2023-11-01T21:01:30.920529+00:00</updated>
  <author>
    <name>symphonicbtc 2023-10-10 01:12:28+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BitVM: Compute Anything on Bitcoin</title>
    <updated>2023-11-01T21:01:30.920529+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-October/021987.html" rel="alternate"/>
    <summary>Symphonic is expressing their interest in the development of arbitrary smart contracts on Bitcoin and has a few questions to ask on behalf of themselves and others. Firstly, they inquire about any plans to implement a high-level language that can compile down to these scripts or adapt an existing virtual machine (VM) to make them more workable for testing purposes. They believe that many people would appreciate having something more practical to experiment with.

Secondly, Symphonic seeks information regarding the expected computational costs of establishing the tapleaves for these scripts. They are concerned about the feasibility of performing complex operations like ECDSA signature checking and worry that the required hardware may present a barrier to widespread adoption.

Moving on, they wonder if it would be possible to implement existing zero-knowledge proof constructs on BitVM, and if doing so would simplify verification. Instead of directly verifying programs with BitVM, they propose writing programs in a zero-knowledge proof VM and executing proof verification on BitVM.

Lastly, Symphonic is interested in understanding the expected costs of resolving fraud for a program. While they acknowledge the nuanced nature of this topic, they request some examples of how this process might unfold for simple programs to aid comprehension.

Overall, Symphonic is excited about the prospect of arbitrary smart contracts on Bitcoin and poses several thought-provoking questions regarding the implementation, computational costs, zero-knowledge proofs, and fraud resolution.</summary>
    <published>2023-10-10T01:12:28+00:00</published>
  </entry>
</feed>
