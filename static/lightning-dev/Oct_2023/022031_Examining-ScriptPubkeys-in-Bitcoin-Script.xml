<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Examining ScriptPubkeys in Bitcoin Script</title>
  <updated>2023-11-01T21:12:52.714459+00:00</updated>
  <author>
    <name>Rusty Russell 2023-10-20 03:40:37+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Examining ScriptPubkeys in Bitcoin Script</title>
    <updated>2023-11-01T21:12:52.714459+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-October/022031.html" rel="alternate"/>
    <summary>In an email, the sender shares their exploration of the requirements to validate Taproot outputs in Bitcoin Script. They mention that such functionality is necessary for usable vaults. The sender provides a link to a blog post where they discuss this exploration in detail (https://rusty.ozlabs.org/2023/10/20/examining-scriptpubkey-in-script.html). They also invite others to collaborate on producing a prototype and debugging their script examples.

The sender summarizes their findings as follows: If OP_TX/OP_TXHASH or an equivalent way of pushing a scriptPubkey on the stack is available, and additional opcodes like OP_MULTISHA256 (or OP_CAT), OP_KEYADDTWEAK, OP_LESS (or OP_CONDSWAP) are added, along with a soft-fork to weaken the OP_SUCCESSx rule (or pop-script-from-stack), it becomes possible to prove a two-leaf tapscript tree in approximately 110 bytes of Script. This enables the implementation of useful spending constraints based on a template approach.

The email concludes with a thank you from Rusty, the sender.</summary>
    <published>2023-10-20T03:40:37+00:00</published>
  </entry>
</feed>
