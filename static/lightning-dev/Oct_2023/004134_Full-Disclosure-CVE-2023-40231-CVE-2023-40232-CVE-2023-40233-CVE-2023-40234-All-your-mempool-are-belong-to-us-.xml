<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Full Disclosure: CVE-2023-40231 / CVE-2023-40232 / CVE-2023-40233 / CVE-2023-40234 "All your mempool are belong to us"</title>
  <updated>2023-10-25T17:55:36.768389+00:00</updated>
  <author>
    <name>Matt Corallo 2023-10-18 00:17:44+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Full Disclosure: CVE-2023-40231 / CVE-2023-40232 / CVE-2023-40233 / CVE-2023-40234 "All your mempool are belong to us"</title>
    <updated>2023-10-25T17:55:36.768389+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-October/004134.html" rel="alternate"/>
    <summary>There is confusion surrounding the issue and its mitigations. The deployed mitigations are not expected to fix the problem, as they may only serve as a PR statement. Two discussed mitigations are mempool scanning and transaction re-signing/re-broadcasting. Mempool scanning involves regularly checking the mempool of a local node to catch the replacement cycle mid-cycle. However, it only works if the first transaction is seen before the second transaction replaces it. Currently, most lightning nodes run on machines with a Bitcoin node on the same IP address, making it easy for an attacker to connect to the local node and quickly perform the replacement, preventing the victim from seeing it.

Discoverability of similar nature exists for mining pools as well. An attacker performing this attack is likely to do the replacement attack on a miner's node directly, limiting the reach of the intermediate transaction to only miners. This makes it impossible for the victim to discover it. The second mitigation, which involves re-signing and re-broadcasting the victim's transaction in an attempt to get it to miners even if it has been removed, may work if the attacker is lazy and hasn't finished their attack system. However, if the attacker is connected to a large majority of the hashrate, they can aggressively and arbitrarily reduce the probability of the victim's transaction being confirmed by repeatedly replacing it.

The aforementioned information holds true under ideal conditions, assuming a spherical cow kind of world where the P2P network functions normally. However, the P2P network has slow nodes and exhibits strange behavior. It is possible that these mitigations might accidentally prevent such an attack if something takes longer than expected. Nevertheless, this does not constitute a complete "fix" for the issue. The ultimate solution would be for miners to keep a history of transactions they have seen and try them again after they may be able to enter the mempool due to an attack like this.</summary>
    <published>2023-10-18T00:17:44+00:00</published>
  </entry>
</feed>
