<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Full Disclosure: CVE-2023-40231 / CVE-2023-40232 / CVE-2023-40233 / CVE-2023-40234 "All your mempool are belong to us"</title>
  <updated>2023-10-24T15:02:54.340087+00:00</updated>
  <author>
    <name>Olaoluwa Osuntokun 2023-10-21 00:18:58+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Full Disclosure: CVE-2023-40231 / CVE-2023-40232 / CVE-2023-40233 / CVE-2023-40234 "All your mempool are belong to us"</title>
    <updated>2023-10-24T15:02:54.340113+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-October/004165.html" rel="alternate"/>
    <summary>In the email, the sender discusses a scenario involving Carol, Bob, and Alice in which Mallory can only replace an HTLC-timeout transaction if she is directly connected to the targeted peer via a direct channel. It is emphasized that a third party cannot unilaterally sweep an HTLC with only knowledge of the preimage. HTLC transactions are two-party contracts with the public keys of both participants hardcoded into the contract.

The email suggests taking a step back to establish some fundamental context. When the timelock of an HTLC expires and the receiver has the preimage, a bidding war begins. If the receiver confirms their success transaction in time, they gain the funds, and the sender can pipeline the preimage backward in the route to make all parties whole. On the other hand, if the sender wins, it's as if nothing happened except for fees paid at the last mile, and all other hops can safely cancel their HTLCs on the chain.

Most implementations today monitor the mempool for preimages so they can quickly resolve incoming HTLCs off-chain. The described attack relies on the attacker's ability to precisely replace transactions globally across the mempool. However, if any honest party sees the preimage in the mempool, they can settle back off-chain, potentially gaining funds if their timeout confirms first.

Executing such an attack perfectly for hours or even days is crucial. Within the Lightning Network (LN), nodes set a security parameter called the CLTV delta, determining the time they have before outgoing and incoming HTLCs expire. Increasing this value makes the attack more challenging as the attacker must balance fees to avoid mining while replacing the defender's transaction. Additionally, finding the defender's node to launch the replacement attack directly in their mempool risks revealing the preimage and allowing the defender to settle everything back.

Even without direct access to the defender's mempool, the attacker needs to iteratively execute the replacement across a real network, accounting for network jitter, propagation delay, and geographic heterogeneity. Any slight timing discrepancies could lead to confirmation or preimage revelation in the mempool.

For anchor channels, second-level HTLCs enable the defender to attach arbitrary inputs for fee bumping purposes. By iteratively increasing their fee using Replace-by-Fee (RBF) as the expiry deadline approaches, the defender can further raise the cost for the attacker. Moreover, this attack cannot be launched indiscriminately across the network. The attacker requires per-node setup and must consume UTXOs to create a chain of transactions for launching the replacement attack. These transactions also need to be maintained in a non-confirming superposition state.

In summary, the email highlights that this attack is fragile and complex, requiring per-node setup, precise timing and execution, non-confirming superposition of all transactions, and instant propagation across the entire network while remaining obscured from the defender's perspective. Launching the attack directly with a miner or "into" their mempool weakens the effectiveness, as any broadcast of preimage replacement transactions by the miner can be used by the defender to extract the preimage and settle the incoming HTLC.</summary>
    <published>2023-10-21T00:18:58+00:00</published>
  </entry>
</feed>
