<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Examining ScriptPubkeys in Bitcoin Script</title>
  <updated>2023-11-01T21:12:40.017881+00:00</updated>
  <author>
    <name>Rusty Russell 2023-10-22 04:16:33+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Examining ScriptPubkeys in Bitcoin Script</title>
    <updated>2023-11-01T21:12:40.017881+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-October/022063.html" rel="alternate"/>
    <summary>In an email exchange, Brandon Black discusses the challenges he faces while writing scripts for evaluation. He expresses discomfort with not having tested the scripts he has written so far. One specific issue he highlights is the difficulty of performing N-input evaluation without iteration. Despite this challenge, he believes it would be valuable to attempt such evaluations as they may shed light on OP_TXHASH input selection. He suggests the possibility of incorporating an "all *but* one input" mode for this purpose.

Brandon also mentions that dealing with satsoshi amounts in scripts is possible but messy, which he plans to explore further in a future post. He provides examples that demonstrate how OP_MULTISHA256 is nearly as powerful as OP_CAT, but without the limitations of stack size. He concludes by stating that OP_2SHA256 is not generally sufficient for CScriptNum generation, making it a premature optimization to save two opcodes.

Overall, Brandon's email highlights the challenges and considerations involved in script writing and evaluation, particularly in relation to input selection and opcode efficiency.</summary>
    <published>2023-10-22T04:16:33+00:00</published>
  </entry>
</feed>
