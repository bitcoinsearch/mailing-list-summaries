<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Full Disclosure: CVE-2023-40231 / CVE-2023-40232 / CVE-2023-40233 / CVE-2023-40234 "All your	mempool are belong to us"</title>
  <updated>2023-10-18T01:57:42.547599+00:00</updated>
  <author>
    <name>ZmnSCPxj 2023-10-17 10:34:04+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Full Disclosure: CVE-2023-40231 / CVE-2023-40232 / CVE-2023-40233 / CVE-2023-40234 "All your	mempool are belong to us"</title>
    <updated>2023-10-18T01:57:42.547631+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-October/004125.html" rel="alternate"/>
    <summary>In the email, ZmnSCPxj explains a core attack on the Lightning Network (LN) and discusses the details of how it can be executed. The attack involves nodes on the LN, specifically nodes A, B, and C, connected by channels. The timelocks for the HTLCs (Hashed Time-Lock Contracts) are also mentioned.According to ZmnSCPxj, the attack starts when node A routes an HTLC from A to B and then B forwards it to C. If node C goes offline after receiving the HTLC, all the signed transactions, including the commitment transaction and HTLC-timeout transactions, become "stuck" at the feerate at the time.At block height 100, node B notices that the HTLC timelock has expired without node C claiming it, so node B forces the B-C channel on-chain. However, due to increased on-chain feerates, the commitment transaction and HTLC-timeout transaction do not confirm. Meanwhile, node A is still online with node B and updates the on-chain fees of the A-B channel pre-signed transactions to the latest.At block height 144, node B is still unable to claim the A-B HTLC, so node A drops the A-B channel on-chain, which confirms immediately due to the up-to-date fees. Node A is then able to recover the HTLC funds. However, the feerates of the B-C pre-signed transactions remain at the old, uncompetitive feerates.At this point, node C broadcasts an HTLC-success transaction with high feerates that Child-Pays-for-Parent (CPFPs) the commitment transaction. This transaction replaces the HTLC-timeout transaction, which has a lower feerate. Node C is able to get the value of the HTLC, but node B is no longer able to use the knowledge of the preimage, as its own incoming HTLC was already confirmed as claimed by node A.ZmnSCPxj also explains why the HTLC-timeout is pre-signed in this case and why node B cannot feebump it. In the Poon-Dryja mechanism, the HTLCs are "infected" by the Poon-Dryja penalty case, which adds a revocation branch and includes node C in the claimable branch of node B. This prevents node B from cheating by using an old revoked transaction. The HTLC-timeout transaction spends the B-C-OP_CLTV branch and has a specific feerate that can only be changed if both node B and node C agree to re-sign it at a higher feerate.Furthermore, ZmnSCPxj mentions that the HTLC-success transaction, which spends the plain C-OP_HASH160 branch, allows node C to feebump it arbitrarily even if node B does not cooperate. Node C's advantage lies in being able to Replace-By-Fee (RBF) the HTLC-timeout transaction out of the way with just one transaction, while node B needs to perform both CPFP-RBF of the anchor output of the HTLC-timeout transaction and the HTLC-timeout itself, requiring two transactions. As a result, node C requires a smaller fee to achieve a particular feerate due to pushing a smaller number of bytes compared to node B.In conclusion, ZmnSCPxj provides a detailed explanation of the core attack on the Lightning Network, discussing the nodes involved, timelocks, signed transactions, and the implications for each node's ability to claim the HTLC funds. The email also delves into the reasons behind the pre-signed HTLC-timeout transaction and the advantages node C has in feebumping the HTLC-success transaction.</summary>
    <published>2023-10-17T10:34:04+00:00</published>
  </entry>
</feed>
