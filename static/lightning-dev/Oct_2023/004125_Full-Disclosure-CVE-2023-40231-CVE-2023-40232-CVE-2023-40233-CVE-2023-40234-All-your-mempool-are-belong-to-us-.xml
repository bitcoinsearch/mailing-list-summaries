<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Full Disclosure: CVE-2023-40231 / CVE-2023-40232 / CVE-2023-40233 / CVE-2023-40234 "All your	mempool are belong to us"</title>
  <updated>2023-10-25T17:58:31.526808+00:00</updated>
  <author>
    <name>ZmnSCPxj 2023-10-17 10:34:04+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Full Disclosure: CVE-2023-40231 / CVE-2023-40232 / CVE-2023-40233 / CVE-2023-40234 "All your	mempool are belong to us"</title>
    <updated>2023-10-25T17:58:31.526808+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-October/004125.html" rel="alternate"/>
    <summary>In the email, ZmnSCPxj provides a detailed explanation of a potential attack on the Lightning Network (LN) protocol. The attack involves three nodes, labeled A, B, and C, connected by channels. Node A routes transactions from A to B to C.

To satisfy the requirements of the LN Bolt standard, node B must have a `cltv_expiry_delta` (a time delay) of 44 or lower. If this condition is met, the system operates as intended. However, if node C suddenly goes offline after node B forwards a Hashed Timelock Contract (HTLC) transaction from B to C, several signed transactions become "stuck" at the feerate (transaction fee rate) at that time.

At block height 100, node B realizes that the HTLC timelock has expired without node C claiming it. As a result, node B forces the channel between B and C to be settled on-chain. However, due to increased on-chain feerates, the commitment transaction and HTLC-timeout transaction do not confirm. Meanwhile, node A remains online with node B and updates the on-chain fees of the A-to-B channel's pre-signed transactions (commitment transaction and HTLC-timeout transaction) to the latest fees.

At block height 144, node B still cannot claim the A-to-B HTLC, so node A decides to close the A-to-B channel on-chain. Since the fees are up-to-date, this closure confirms immediately, allowing node A to recover the HTLC funds. However, the pre-signed transactions for the B-to-C channel remain at the old, uncompetitive feerates.

At this point, node C broadcasts an HTLC-success transaction with high feerates that Child-Pays-for-Parent (CPFPs) the commitment transaction. This action replaces the HTLC-timeout transaction, which has a low feerate. As a result, node C can retrieve the value of the HTLC, but node B can no longer use the knowledge of the preimage because its incoming HTLC has already been confirmed as claimed by node A.

The email also explains the reason why the HTLC-timeout transaction is presigned and why node B cannot fee-bump it. In the Poon-Dryja mechanism (the underlying mechanism of LN), HTLCs are "infected" by the Poon-Dryja penalty case to prevent cheating. The commitment transaction held by node B is modified to include a revocation branch and a branch claimable by both node B and node C. These changes ensure that even if node B attempts to spend an old, revoked transaction, it will face a relative timelock.

Unfortunately, due to these modifications, the HTLC-timeout transaction must be presigned with a specific feerate. Changing the feerate requires both node B and node C to agree to re-sign the transaction at a higher feerate. On the other hand, the HTLC-success transaction only involves node C, allowing it to fee-bump the transaction arbitrarily, even without node B's cooperation.

In conclusion, this attack takes advantage of the design of HTLC transactions within the Lightning Network protocol and the differences in fee-bumping capabilities between nodes B and C. By understanding this attack, developers and researchers can work to improve the security and efficiency of the Lightning Network.

(Note: The farewell part of the email was not included in the summary as per the rules.)</summary>
    <published>2023-10-17T10:34:04+00:00</published>
  </entry>
</feed>
