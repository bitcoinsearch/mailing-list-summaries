<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Examining ScriptPubkeys in Bitcoin Script</title>
  <updated>2023-10-30T15:19:13.873736+00:00</updated>
  <author>
    <name>Rusty Russell 2023-10-28 04:49:30+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Examining ScriptPubkeys in Bitcoin Script</title>
    <updated>2023-10-30T15:19:13.873736+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-October/022103.html" rel="alternate"/>
    <summary>In the email, Anthony Towns discusses multiple variants of vaults and their functionalities. One variant allows the master key to have full control, while another variant allows the normal key to send funds back to the vault address without any delay. Additionally, the normal key can also perform other actions after a certain delay. Another variant involves the normal key being able to send funds to either the master key or another normal key after a delay.

Anthony expresses his interest in vaults as they provide a concrete example that he can comprehend, although he acknowledges that they may not be widely used. He believes that optimizing or improving the convenience of a system that can protect two distinct keys and perform two transactions per transfer is not necessary.

Regarding the implementation of vaults in Bitcoin script, Anthony agrees that only 1:1 unvaulting would be suitable and anything more complex would serve as a mere party trick. He found the vault BIP (Bitcoin Improvement Proposal) difficult to understand and suggests that it should be a new address format rather than using script opcodes. Anthony also mentions that using templates and spelling out the script is not significantly more complex and could work well, with the exception of consolidation.

He then comments on oracles, which are cryptographic mechanisms used for verifying and enforcing contract terms. Anthony finds them interesting as they provide a use case for CSFS (Commitment Schemes for Signatures) that doesn't involve abusing signatures for hashing purposes. However, he wonders if there could be an alternative approach to achieve similar results without relying on CSFS.

Anthony concludes by stating that although a replacement for the current script may be possible, there is still significant room for improvement. Comparing the limitations of the existing script with alternative solutions is challenging since many interesting scenarios are currently impossible to implement.

Overall, Anthony's email highlights various aspects of vaults, their potential implementations, and his thoughts on their practicality and optimization.</summary>
    <published>2023-10-28T04:49:30+00:00</published>
  </entry>
</feed>
