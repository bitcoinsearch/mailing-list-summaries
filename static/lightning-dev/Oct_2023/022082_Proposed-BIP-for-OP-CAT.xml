<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposed BIP for OP_CAT</title>
  <updated>2023-10-30T14:44:43.444070+00:00</updated>
  <author>
    <name>Rusty Russell 2023-10-24 03:45:49+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposed BIP for OP_CAT</title>
    <updated>2023-10-30T14:44:43.444070+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-October/022082.html" rel="alternate"/>
    <summary>In an email sent by Andrew Poelstra, he discusses a diff in the code and mentions that it is smaller than the OP_CAT diff. He also expresses the need for refactoring the interpreter code as it requires improvement. Andrew suggests using a class for the stack instead of macros. 

The diff in question can be seen in the code snippet provided in the email. It shows changes made to the "interpreter.cpp" file. One of the changes includes adding a function called "effective_size" which calculates the effective size of the stack. This function takes into account the size of each element in the stack and checks if it exceeds the maximum script element size.

The "EvalScript" function is also mentioned in the email. This function evaluates a script and checks if it meets certain conditions. One of the conditions is the size limit of the stack. In the updated code, the size limit is checked using the "effective_size" function for both the main stack and the alternate stack. If the combined effective size exceeds the maximum stack size, an error is returned.

Overall, Andrew's email highlights the changes made in the code, the need for refactoring, and the implementation of the "effective_size" function to calculate the stack size taking into account the maximum script element size.</summary>
    <published>2023-10-24T03:45:49+00:00</published>
  </entry>
</feed>
