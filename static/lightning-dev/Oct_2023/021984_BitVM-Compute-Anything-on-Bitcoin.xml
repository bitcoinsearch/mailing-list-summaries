<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BitVM: Compute Anything on Bitcoin</title>
  <updated>2023-11-01T21:01:40.701247+00:00</updated>
  <author>
    <name>Robin Linus 2023-10-09 13:46:24+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BitVM: Compute Anything on Bitcoin</title>
    <updated>2023-11-01T21:01:40.701247+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-October/021984.html" rel="alternate"/>
    <summary>BitVM is a computing paradigm that allows for the expression of Turing-complete Bitcoin contracts without making changes to the network's consensus rules. Instead of executing computations on Bitcoin, they are verified in a similar manner to optimistic rollups. In this approach, a prover makes a claim about a function evaluation for specific inputs and outputs, and if the claim is false, the verifier can provide a succinct fraud proof and punish the prover.

By using BitVM, any computable function can be verified on Bitcoin. Committing to a large program in a Taproot address requires significant off-chain computation and communication, but the resulting on-chain footprint is minimal. This means that as long as both parties collaborate, they can perform complex, stateful off-chain computation without leaving a trace on the blockchain. On-chain execution is only necessary in case of a dispute.

For more detailed information, you can refer to the official BitVM paper: [https://bitvm.org/bitvm.pdf](https://bitvm.org/bitvm.pdf).</summary>
    <published>2023-10-09T13:46:24+00:00</published>
  </entry>
</feed>
