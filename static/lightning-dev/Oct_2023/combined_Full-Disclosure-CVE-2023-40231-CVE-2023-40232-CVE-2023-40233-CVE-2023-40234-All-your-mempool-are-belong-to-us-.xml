<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Full Disclosure: CVE-2023-40231 / CVE-2023-40232 / CVE-2023-40233 / CVE-2023-40234 "All your	mempool are belong to us"</title>
  <updated>2023-10-25T17:59:06.517936+00:00</updated>
  <author>
    <name>ZmnSCPxj 2023-10-17 10:34:04+00:00</name>
  </author>
  <author>
    <name>ziggie1984 2023-10-17 07:21:35+00:00</name>
  </author>
  <link href="lightning-dev/Oct_2023/004125_Full-Disclosure-CVE-2023-40231-CVE-2023-40232-CVE-2023-40233-CVE-2023-40234-All-your-mempool-are-belong-to-us-.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2023/004124_Full-Disclosure-CVE-2023-40231-CVE-2023-40232-CVE-2023-40233-CVE-2023-40234-All-your-mempool-are-belong-to-us-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Full Disclosure: CVE-2023-40231 / CVE-2023-40232 / CVE-2023-40233 / CVE-2023-40234 "All your	mempool are belong to us"</title>
    <updated>2023-10-25T17:59:06.518931+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-October/004125.html" rel="alternate"/>
    <summary>In the email thread, ZmnSCPxj provides a detailed explanation of a pinning attack on the Lightning Network (LN). The attack involves exploiting the timelock feature of HTLCs (Hash Time-Locked Contracts) in order to force channels to close and claim funds. 

ZmnSCPxj illustrates the attack scenario using three nodes, A, B, and C, connected via channels. Node A routes a payment from A to B and then to C. The timelocks for this transaction are set such that the HTLC between B and C expires after 100 blocks. If node B has a `cltv_expiry_delta` value of 44 or lower, the setup satisfies LN BOLT requirements. 

However, if C suddenly goes offline after B forwards the HTLC, the signed transactions (commitment transaction and HTLC-timeout transactions) become "stuck" at the feerate at the time. At block height 100, B detects that the HTLC timelock has expired without C claiming it and forces the B-C channel to close on-chain. But due to increased on-chain feerates, the commitment transaction and HTLC-timeout transaction do not confirm.

Meanwhile, node A is still online with B and updates the on-chain fees of the A-B channel pre-signed transactions to the latest. At block height 144, B is still unable to claim the A-B HTLC, so A drops the A-B channel on-chain. As the fees are up-to-date, this confirmation happens immediately, and A is able to recover the HTLC funds. However, the feerates of the B-C pre-signed transactions remain at the old, uncompetitive rates.

At this point, C broadcasts an HTLC-success transaction with high feerates, which Child Pays For Parent (CPFP) the commitment transaction. This action replaces the HTLC-timeout transaction, which has a low feerate. As a result, C successfully receives the value of the HTLC, but B can no longer use the knowledge of the preimage because its own incoming HTLC was already confirmed as claimed by A.

The email also addresses why the HTLC-timeout transaction is pre-signed and why B cannot fee-bump it. In the Poon-Dryja mechanism used in the Lightning Network, HTLCs are "infected" by the penalty case to prevent cheating. The commitment transaction held by B includes additional branches for revocation and involves both B and C. On the other hand, the HTLC-success transaction spends the plain branch involving only C. This allows C to feebump the HTLC-success transaction without needing B's cooperation.

In conclusion, ZmnSCPxj seeks confirmation that their restatement accurately describes the attack and provides non-experts with an understanding of why the HTLC-timeout is presigned and why B cannot fee-bump it.

In response to the email, ziggie acknowledges the detailed explanation and suggests adding more details about the observed attack on the mainnet. They inquire about tools to monitor suspicious behavior on the blockchain and propose introducing a feebumping race between the victim and the attacker to make the attack more costly. They also suggest aggressively fee-bumping the htlc-output when the preimage is seen in the mempool, in addition to claiming it on the incoming path. Furthermore, ziggie proposes restricting the number and amount of HTLCs for big channels to unknown peers as an additional mitigation measure.</summary>
    <published>2023-10-17T10:34:04+00:00</published>
  </entry>
</feed>
