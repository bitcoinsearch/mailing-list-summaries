<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BitVM: Compute Anything on Bitcoin</title>
  <updated>2023-11-01T21:00:57.178335+00:00</updated>
  <author>
    <name>Russell O'Connor 2023-10-17 18:00:26+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BitVM: Compute Anything on Bitcoin</title>
    <updated>2023-11-01T21:00:57.178335+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-October/022010.html" rel="alternate"/>
    <summary>The email discusses the potential use of Simplicity, a core language with the same expressivity as Boolean circuits, in generating useful circuits for BitVM. The sender mentions that they have previously experimented with compiling Simplicity expressions to a system of polynomial constraints (R1CS) and were successful in generating approximately 128,000 constraints from a Sha256 compression function specification written in Simplicity. 

In this "circuit" interpretation, Simplicity types represent cables, which are bundles of wires equal to the 'bit size' of the type. The 'case' combinator serves as the only active component, implementing a demultiplexer. The 'injr' and 'injl' combinators output fixed Boolean values. The other combinations mainly connect, bundle, and unbundle wires, without contributing any constraints.

While the previous experiment generated constraints, the sender suggests that a similar interpretation could generate logic gates instead. They anticipate that the number of gates generated would be in the same order of magnitude as the number of constraints generated previously. Consequently, Simplicity could potentially serve as a source of ready-made expressions to generate useful circuits for BitVM, if someone is interested in exploring this approach further.</summary>
    <published>2023-10-17T18:00:26+00:00</published>
  </entry>
</feed>
