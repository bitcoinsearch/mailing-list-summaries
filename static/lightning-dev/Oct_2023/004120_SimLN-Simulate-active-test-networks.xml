<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>SimLN: Simulate active test networks</title>
  <updated>2023-10-11T01:54:56.094697+00:00</updated>
  <author>
    <name>Carla Kirk-Cohen 2023-10-10 17:03:55+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>SimLN: Simulate active test networks</title>
    <updated>2023-10-11T01:54:56.094741+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-October/004120.html" rel="alternate"/>
    <summary>SimLN is a tool that simulates random payment activity on any test lightning network setup. It aims to make it easier to test applications and proposals against networks that are actively processing payments. The tool is set up agnostic and can run on any test environment such as local dev, signet, polar, and scaling lightning. To use SimLN, you need a network with open channels where you have execution access on some of the nodes, a config file that provides the simulator with node details, and the Rust compiler installed.SimLN allows you to configure specific payment flows, such as sending a specific amount from one node to another at regular intervals. Although it doesn't match the mainnet exactly, SimLN provides a tool for testing against "busy" networks, allowing more rigorous testing of changes and proposals. The random activity in SimLN is generated using two magic numbers: the capacity multiplier and the expected payment amount. The capacity multiplier represents how frequently a node sends its full balance/capacity over a calendar month, while the expected payment amount is the average payment amount in the network. The payment frequency is determined using an exponential distribution, similar to bitcoin block times. The payment destination is selected using a weighted uniform distribution based on node capacity, with larger nodes being more likely to be chosen. The payment amount is determined using a log normal distribution with the expected payment amount as the mean, introducing more varied payment sizes for larger nodes and less varied sizes for smaller nodes.While SimLN has some limitations, such as assigning the same capital efficiency to every node and biasing payments towards large nodes, it also offers several benefits. It saves time by automating payment generation and can be easily integrated into existing development environments. Additionally, it can produce NPC background noise for running tests specific to your work and make deploying to production less intimidating.Overall, SimLN provides a valuable tool for testing lightning network applications and proposals, allowing for more efficient and comprehensive testing in a simulated payment environment.</summary>
    <published>2023-10-10T17:03:55+00:00</published>
  </entry>
</feed>
