<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Examining ScriptPubkeys in Bitcoin Script</title>
  <updated>2023-10-30T15:19:38.480363+00:00</updated>
  <author>
    <name>Rusty Russell 2023-10-28 04:49:30+00:00</name>
  </author>
  <author>
    <name>Anthony Towns 2023-10-27 07:00:36+00:00</name>
  </author>
  <link href="lightning-dev/Oct_2023/022103_Examining-ScriptPubkeys-in-Bitcoin-Script.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2023/022099_Examining-ScriptPubkeys-in-Bitcoin-Script.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Examining ScriptPubkeys in Bitcoin Script</title>
    <updated>2023-10-30T15:19:38.480363+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-October/022103.html" rel="alternate"/>
    <summary>In this email, Anthony Towns discusses the concept of vaults and their various variants. He mentions that there are multiple reasonable variants of vaults, such as ones where the master key can do anything, or normal keys can send back to the vault address without delay, or normal keys can do anything else after a delay. He also acknowledges that vaults are a concrete example that he can understand, but he doesn't believe they will be widely used due to the complexity involved.

Anthony then expresses his difficulty in understanding the vault BIP (Bitcoin Improvement Proposal) and suggests that it should be a new address format rather than script opcodes. He believes that spelling out the functionality in script is not much more complex to use. He also mentions the use of oracles in the context of CSFS (Cross-input Signature Aggregation), which he finds interesting as it is a use case that doesn't involve abusing signatures for hashing purposes.

He agrees that there is room for improvement before a replacement for the current script language is implemented, as the hobbled script we have today is limited in its capabilities. He suggests using a lisp variant as a promising solution, as it would provide a more complete programming language compared to script's limited functionality. Anthony has been experimenting with this idea and believes that a language with around 43 opcodes could be effective. He gives an example of how this lisp-like language could be used to experiment with new SIGHASH modes and mimic existing hash constructs.

Anthony concludes by stating that this lisp-like approach seems more promising for experimentation compared to trying to fit everything into script's limitations. He believes that once a lisp-like structure is established, opcodes like OP_TX, OP_CAT, and OP_CSFS would work well.</summary>
    <published>2023-10-28T04:49:30+00:00</published>
  </entry>
</feed>
