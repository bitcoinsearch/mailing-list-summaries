<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Actuarial System To Reduce Interactivity In N-of-N (N &gt; 2) Multiparticipant Offchain Mechanisms</title>
  <updated>2023-11-01T21:00:25.627463+00:00</updated>
  <author>
    <name>ZmnSCPxj 2023-10-15 13:36:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Actuarial System To Reduce Interactivity In N-of-N (N &gt; 2) Multiparticipant Offchain Mechanisms</title>
    <updated>2023-11-01T21:00:25.627463+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-October/021996.html" rel="alternate"/>
    <summary>The email discusses the use of BitVM to improve a specific idea. The author analyzes the situation and concludes that BitVM cannot be used for this purpose. The desired outcome is to restrict an actuary from signing for a particular spend more than once. The original proposal suggests forcing reuse by fixing a parameter called `R`. However, this approach requires a change in Bitcoin consensus on top of `SIGHASH_ANYPREVOUT`, which has its own advantages. 

The author explores an alternative solution involving a program that checks if two signatures have different messages but the same public key. If this validation program passes, it indicates that the actuary has cheated, and appropriate actions can be taken to penalize them. However, BitVM triggers on dishonest execution of the program, making it unsuitable for this scenario. Honest execution of the program results in the BitVM contract resolving via timeout.

The author attempts to find a way to change the logic so that the actuary is punished instead. However, this requires the actuary to act as the validator instead of the prover, which doesn't align with the expected roles. Furthermore, reversing the logic would involve demonstrating that no other signatures exist with a different message but the same public key. This can be easily manipulated by denying the program any input other than the actuary's signature.

Additionally, the actuarial system requires the actuary to provide something that makes a transaction immediately confirmable, rather than after a timeout. In contrast, in BitVM, a dishonest execution of a BitVM program serves as the immediate confirmation, while the timeout represents the honest execution. The actuary should also be restricted to only providing this confirmation for one transaction, not multiple transactions.

In summary, the author has been unable to find a way to use BitVM as a replacement for the current mechanism of forced `R` reuse in preventing multiple commitments by the actuary.</summary>
    <published>2023-10-15T13:36:00+00:00</published>
  </entry>
</feed>
