<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>MATT: [demo] Optimistic execution of arbitrary programs</title>
  <updated>2023-11-01T20:59:19.767977+00:00</updated>
  <author>
    <name>Johan Tor√•s Halseth 2023-10-03 07:53:08+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>MATT: [demo] Optimistic execution of arbitrary programs</title>
    <updated>2023-11-01T20:59:19.767977+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-October/021977.html" rel="alternate"/>
    <summary>In the email, Johan acknowledges a typo in their previous message and clarifies that the correct notation should be O(log n), where n represents the number of steps in the program. They mention that P, which denotes how to create the commitment, is not relevant because the entire program is not put on-chain but rather broken down into n steps. Johan explains that when traversing the tree, the node scripts enforce consistency between h(sub_n ode{1,2}) and the commitment by including it in the witness. This achieves what the recipient suggests. 

To ensure this consistency, the participants agree upfront, during contract creation, on the exact length of the trace or the depth of the tree. If the actual execution is shorter, the remaining steps are filled with no-ops. This allows the moment the challenge protocol starts to determine the transactions that will be played, similar to a CTV (Channel Transparency and Verifiability) tree. If any participant creates a trace from a non-balanced state tree, it will be rejected by the script at that level. Johan emphasizes the importance of building the state tree in a deterministic manner and expresses gratitude for the error correction.</summary>
    <published>2023-10-03T07:53:08+00:00</published>
  </entry>
</feed>
