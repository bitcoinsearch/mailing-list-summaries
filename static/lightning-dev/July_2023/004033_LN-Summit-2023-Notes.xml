<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>LN Summit 2023 Notes</title>
  <updated>2023-08-03T02:09:28.602693+00:00</updated>
  <author>
    <name>Clara Shikhelman 2023-07-31 18:42:29+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>LN Summit 2023 Notes</title>
    <updated>2023-08-03T02:09:28.602725+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004033.html" rel="alternate"/>
    <summary>A different approach to the monetary aspect of the Lightning Network is suggested by AJ. Instead of focusing on deterring attackers, AJ proposes scaling up the network by making the cost for attackers sufficient to ensure excess capacity for regular users. This can be achieved by making attackers pay Amazon EC2 prices plus a 50% fee for the resources they use and deploying more servers as needed. The idea is to turn attackers and spammers into a profit center.AJ suggests implementing this approach in three ways. First, for message spam, the sender would pay for the bandwidth and compute of the onion traffic, with a reasonable fee of around 20c/GB or 1msat per onion packet. Second, for liquidity DoS prevention, if a node receives an HTLC/PTLC and doesn't cancel or confirm it, they would pay a fee to their peer for holding the funds. The fee would be slightly higher if the HTLC is forwarded. A fee of 1ppm per hour is suggested, which matches a 1% per annum return. For example, if a node is holding a $20 payment waiting for the recipient to claim it, they might pay out $0.0004 per hour (1.4sat) for 20 intermediate hops to each make a 20% per annum interest on the held funds. Lastly, actual payment incentives would be implemented, where a $20 payment would pay 0.05% fees, costing $0.01 or 33sat.To address concerns about message spam, AJ proposes firing up more Amazon compute and taking a profit of around 10c/GB if there is too much spam. In terms of liquidity DoS, the challenge lies in charging fees based on the time the HTLC was held. While it's difficult to implement this currently, AJ suggests using reputation for slow jamming and only using fees for quick jamming to prevent DoS attacks.AJ also suggests using precision of "hourly" or even "per block" for the low amounts involved in these fees. For liquidity DoS, a 10% APY (annual percentage yield) is mentioned, and it is suggested that this can be converted to "0.2 parts per million per block." However, adjustments may be needed to account for reorganizations or stale blocks.There is a discussion about a scenario involving a route where a channel is closed by node B and funds are claimed by node A20 after the timeout. Node B would have paid liquidity fees to nodes A1-A19 for the full two-week period but would only receive a fixed payout from node A20 due to the channel close. This scenario highlights the challenge of favoring fees for a two-week unresolved HTLC over a quickly resolving one. AJ proposes a solution where a payment is only forwarded if the liquidity fee rate multiplied by the expiry is below a cap.The email concludes with a note on the enforceability of the suggested fees. If the cap is set at 500ppm per block, the liquidity fees for a $0.60 payment (2000sat) would be redeemable on-chain. However, this depends on on-chain fees and adds another layer of complexity to the implementation.Clara thanks AJ for the interesting email and acknowledges the various points raised.</summary>
    <published>2023-07-31T18:42:29+00:00</published>
  </entry>
</feed>
