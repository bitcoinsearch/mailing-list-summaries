<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Computing Blinding Factors in a PTLC and Trampoline World</title>
  <updated>2023-07-29T19:17:00.298185+00:00</updated>
  <author>
    <name>Bastien TEINTURIER 2023-07-03 12:25:57+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-07-04 20:55:34+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-06-28 20:34:37+00:00</name>
  </author>
  <link href="lightning-dev/July_2023/004002_Computing-Blinding-Factors-in-a-PTLC-and-Trampoline-World.xml" rel="alternate"/>
  <link href="lightning-dev/July_2023/004003_Computing-Blinding-Factors-in-a-PTLC-and-Trampoline-World.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003999_Computing-Blinding-Factors-in-a-PTLC-and-Trampoline-World.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Computing Blinding Factors in a PTLC and Trampoline World</title>
    <updated>2023-07-29T19:17:00.298185+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004002.html" rel="alternate"/>
    <summary>In a conversation on the Lightning-dev mailing list, Bastien and ZmnSCPxj discuss a proposal for a schnorr multi-hop locks mechanism. Bastien refers to a specific source and expresses confusion about ZmnSCPxj's use of a different mechanism involving a trampoline. He suggests creating a diagram to illustrate the concept if necessary. ZmnSCPxj responds by providing a mathematical demonstration of computing blinding factors in a way that satisfies certain conditions. These conditions include the ultimate receiver and non-Trampoline intermediate nodes only needing to know one blinding factor each, and Trampoline nodes being able to provide blinding factors without revealing their involvement.ZmnSCPxj begins by explaining a simple case where the ultimate sender is directly connected to the ultimate receiver. The sender chooses a random error blinding factor and constructs an onion that the receiver can decrypt. The sender also offers a PTLC with a specific point. The receiver can claim the PTLC by revealing a certain value and learn the error blinding factor from the onion.The scenario is then extended to include an intermediate node, Carol. In this case, the ultimate sender needs to generate two additional scalars, c and d, such that their sum equals the error blinding factor. The sender encrypts the onion with the error blinding factor for the ultimate receiver and the other scalar for Carol. Each non-Trampoline intermediate node adds its per-hop blinding factor to the input point and passes it to the next hop.ZmnSCPxj introduces a scenario where Carol is a Trampoline node and the ultimate sender does not provide a detailed route from Carol to the next Trampoline hop. The sender selects a random error blinding factor and creates a Trampoline-level onion with encrypted values for the ultimate receiver, Carol, and the next Trampoline hop. Carol decrypts the onion, finds a route to the ultimate receiver, and creates a new onion for the next hop. The ultimate receiver cannot differentiate whether it was reached via a Trampoline, a non-Trampoline intermediate node, or directly.In both scenarios, every intermediate node has enough data to claim its incoming PTLC, but only the ultimate sender knows the necessary information to recover the original secret.Moving back to the discussion between Bastien and ZmnSCPxj, Bastien points out that ZmnSCPxj's proposal differs from the one specified in the latest schnorr multi-hop locks proposal found in a specific source. ZmnSCPxj argues that their proposal is just a restatement of the same scheme.Bastien suggests that according to the construction from the specific source, using a trampoline does not impact the protocol. The sender follows the same steps and sends the left/right locks in the trampoline onion. However, ZmnSCPxj is surprised by this and expected that since the PTLC arrives at the trampoline node and serves as the left lock, only the delta scalar between its left and right locks would need to be sent to the trampoline node.ZmnSCPxj explains that their scheme allows implementations to define a function called `buildPath`, which takes inputs like a random source, gossip map, final or next trampoline payment point, final hop or next trampoline hop, and delta scalar. This function generates a raw path using a pathfinding algorithm, generates a new scalar for each hop, decorates the path with the generated scalars, takes the sum, and subtracts it from the input delta scalar to generate the first hop scalar. This scalar is then added to the input final or next trampoline payment point (after multiplication by `G`) to obtain the output PTLC point. The last hop is decorated with the delta scalar.For a flat payment function, the payment function can generate its own delta scalar for each attempt and pass the paths as-is to the onion encoder. The same `buildPath` function can also be used by a trampoline node, where the received delta scalar from the input onion is passed in. Additionally, a payment function through trampoline nodes can reuse the same function by assigning individual deltas to be sent to each trampoline node selected by the pathfinding algorithm.Overall, ZmnSCPxj's proposal is a variation of the schnorr multi-hop locks mechanism that allows for flexibility and reusability of the `buildPath` function. It simplifies the process by eliminating the need to send left and right locks when using a trampoline node.In summary, Bastien and ZmnSCPxj discuss a proposal for a schnorr multi-hop locks mechanism on the Lightning-dev mailing list. ZmnSCPxj provides a mathematical demonstration of computing blinding factors in onion routing scenarios with different configurations of intermediate nodes. The demonstration shows how certain properties can be achieved, such as non-Trampoline intermediate nodes only needing to know one blinding factor and the receiver only needing to know one blinding factor. ZmnSCPxj's proposal involves using a trampoline</summary>
    <published>2023-07-03T12:25:57+00:00</published>
  </entry>
</feed>
