<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Equalizing Packet Size</title>
  <updated>2023-07-27T02:06:16.581171+00:00</updated>
  <author>
    <name>Antoine Riard 2023-07-26 01:30:20+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Equalizing Packet Size</title>
    <updated>2023-07-27T02:06:16.581199+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004019.html" rel="alternate"/>
    <summary>Recently, it has been highlighted that even with Noise encryption, a third-party eavesdropper can deduce the content of messages being transmitted between Lightning Network (LN) nodes by analyzing the sizes of IP packets exchanged between them. This poses a potential security risk as it enables the eavesdropper to infer the routing of payments across the network. To mitigate this issue, one possible solution is to ensure that all packet sizes are uniform.The BOLT8 specification, which builds on top of TCP, can be leveraged to implement this solution. Most implementations of BOLT8 tunnels have an object or equivalent software construction that handles message encryption. This object can be extended to serve as a buffer in addition to its existing functionality as a tunnel encrypter.The interface of this object would include entry points for sending BOLT8 messages and flushing the buffer. The internal buffer of the object would have a fixed size, into which ciphertext from the "send BOLT8 message" interface would be stored. Once the buffer reaches its capacity, the object would utilize the POSIX `send` API to transmit it as a packet, thereby ensuring fixed-size packets.To accommodate cases where the buffer is not completely filled, the "flush" entry point would add a `pong` message to pad it until it is full. However, since `pong` messages are inserted, the object cannot be a simple buffer and must modify the encryptor state accordingly.By implementing this mechanism, it becomes possible to encapsulate a sequence of `update_add_htlc` messages followed by a `commitment_signed` message within a single fixed-size packet or a series of fixed-size packets. It is crucial for the implementation to invoke the "flush" entry point to ensure that the counterparty receives the complete tail end of the `commitment_signed` message.To enhance robustness against internal bugs and adopt a defensive programming approach, the object could incorporate an individual randomized timer. This timer would periodically trigger a self-flush in case the implementation fails to invoke the "flush" operation when waiting for a response from the counterparty. This would effectively transform potential bugs into performance-related issues rather than interop concerns.It is suggested that the buffer size be aligned with the packet size of `update_add_htlc` messages, as this size is expected to fit within a single IP packet for optimal latency.In conclusion, ensuring uniform packet sizes can mitigate the risk of third-party eavesdroppers deducing message content in the Lightning Network. By extending existing BOLT8 tunnel encrypter objects to include buffering functionality, fixed-size packets can be achieved, enhancing privacy and security.</summary>
    <published>2023-07-26T01:30:20+00:00</published>
  </entry>
</feed>
