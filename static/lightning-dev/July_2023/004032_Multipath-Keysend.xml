<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Multipath Keysend</title>
  <updated>2023-07-31T02:09:26.223637+00:00</updated>
  <author>
    <name>Matt Corallo 2023-07-29 16:37:26+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Multipath Keysend</title>
    <updated>2023-07-31T02:09:26.223669+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004032.html" rel="alternate"/>
    <summary>In a recent post on the Lightning-dev mailing list, ZmnSCPxj proposed a scheme for creating a `keysend` protocol that allows for multipath payments. The idea behind this scheme is to ensure that the receiver can only claim the payment once all parts of the payment have arrived.To implement this scheme, ZmnSCPxj suggests embedding the preimage as TLV 5482373484 with a length of 32 in the `keysend`. The payment hash is generated by taking the SHA256 hash of the preimage. For example, if the `keysend` is split into two parts, a true preimage `p` is randomly selected and used to generate the payment hash `h = SHA256(p)`. A new 256-bit scalar, `a`, is generated. One part of the `keysend` contains `a` for TLV 5482373484, while the second part contains `a ^ p`, where `^` denotes XOR. Both parts use the same payment hash `h`.When the receiver receives either part, it realizes that the supposed preimage does not match the actual HTLC payment hashes. Instead of failing, the receiver holds the payment according to the basic multipath payment rules. Once the receiver receives another part, it XORs the supposed preimages together. In the above example, the receiver would XOR `a` and `a ^ p` to obtain `p`, which is now the correct preimage. At this point, the receiver can claim the entire complete funds.This scheme can be extended to any number of parts. If the `keysend` is split into `n` parts, `n - 1` additional random scalars are generated and used for the first `n - 1` parts. Then, all of these scalars are XORed with the scalar-to-be-split for the `n`th part. This technique also works for dynamic splitting, where a part is split off from another part that was already split off.To detect if the receiver supports multipath `keysend`, the sender can check the response when a part reaches the receiver. If the receiver errors with `incorrect_or_unknown_payment_details`, it indicates that the receiver does not support multipath `keysend`. On the other hand, if the receiver is aware of multipath `keysend`, it would hold onto the incoming HTLCs until the MPP timeout and error with `mpp_timeout`. Therefore, support for this on the receiver side does not need to be specially announced via a new feature bit.Overall, ZmnSCPxj's proposal aims to enhance the functionality of the `keysend` protocol by enabling multipath payments, allowing for more flexibility in how payments are split and claimed.</summary>
    <published>2023-07-29T16:37:26+00:00</published>
  </entry>
</feed>
