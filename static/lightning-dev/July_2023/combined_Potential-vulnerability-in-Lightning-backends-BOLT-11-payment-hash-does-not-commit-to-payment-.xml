<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-07-13T17:32:57.364713+00:00</updated>
  <author>
    <name>Rusty Russell 2023-07-06 07:10:42+00:00</name>
  </author>
  <author>
    <name>callebtc  + 2023-06-19 15:26:05+00:00</name>
  </author>
  <author>
    <name>Antoine Riard  + 2023-06-19 20:34:10+00:00</name>
  </author>
  <author>
    <name>callebtc 2023-07-06 07:22:59+00:00</name>
  </author>
  <author>
    <name>callebtc  + 2023-06-19 15:26:05+00:00</name>
  </author>
  <author>
    <name>Antoine Riard  + 2023-06-19 20:34:10+00:00</name>
  </author>
  <link href="lightning-dev/July_2023/004005_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003983_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003986_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/July_2023/004006_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003983_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003986_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-07-13T17:32:57.364793+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004005.html" rel="alternate"/>
    <summary>Earlier last month, the LNbits team discovered an exploit in their system that allowed attackers to create fake balances by manipulating invoices. This vulnerability has been patched in the latest version of LNbits, and users are strongly advised to update their software promptly. The team also cautions that similar exploits may exist in other Lightning applications that involve custodial wallets, payment processors, and account management software.The attack itself involved inserting a different payment hash into an invoice, tricking the backend into treating it as another payment. The process is as follows: first, the attacker creates an invoice A with an amount of 1000 sat in LNbits. Then, they create an invoice B' with an amount of 1 sat on their own node. The attacker then manipulates invoice B' by replacing its payment hash with payment_hash(A), re-signs it, and serializes it again to produce a malicious invoice B. Next, the attacker creates a new account in LNbits and pays the malicious invoice B. The LNbits backend uses payment_hash(B) to determine if it is an internal payment or a payment via the Lightning Network. Since payment_hash(A) commits to A, the backend finds A in its database and settles the payment internally by crediting A and debiting B, effectively "creating" 999 sats.To mitigate this issue, backends should implement self-generated unique "checking ids" or additional checks to ensure that invoice details have not been tampered with. For example, verifying that the amount of invoice A is equal to the amount of invoice B. It is crucial for developers to be aware of potential vulnerabilities in Lightning applications and take appropriate measures to strengthen security protocols.In addition to the email exchange discussing the exploit, another email from callebtc provides further details about the attack. The attacker was able to create a malicious invoice by inserting the payment hash of payment A into a different payment. This manipulation takes advantage of the fact that payment hashes only commit to the preimage and not the payment details like the amount. The email explains the step-by-step process of how the attacker carried out the exploit and emphasizes two important lessons. Firstly, it highlights the sophistication of LN-savvy attackers who possess a deep understanding of bolt-11 and require custom tooling to execute such attacks. Secondly, it addresses the misconception surrounding the "payment hash" in invoices and suggests referring to it as the "preimage hash" to avoid confusion.Overall, developers should be proactive in addressing potential vulnerabilities in Lightning applications and adopting security measures to protect against exploitation.</summary>
    <published>2023-07-06T07:10:42+00:00</published>
  </entry>
</feed>
