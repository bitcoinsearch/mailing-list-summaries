<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-07-16T02:48:28.343963+00:00</updated>
  <author>
    <name>fiatjaf 2023-07-13 21:03:11+00:00</name>
  </author>
  <author>
    <name>David A. Harding  + 2023-07-12 20:04:19+00:00</name>
  </author>
  <author>
    <name>callebtc  + 2023-07-06 07:22:59+00:00</name>
  </author>
  <author>
    <name>Rusty Russell  + 2023-07-06 07:10:42+00:00</name>
  </author>
  <author>
    <name>callebtc  + 2023-06-19 15:26:05+00:00</name>
  </author>
  <author>
    <name>Antoine Riard  + 2023-06-19 20:34:10+00:00</name>
  </author>
  <link href="lightning-dev/July_2023/004008_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/July_2023/004007_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/July_2023/004006_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/July_2023/004005_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003983_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003986_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-07-16T02:48:28.344047+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004008.html" rel="alternate"/>
    <summary>In a recent email, David A. Harding suggests reaching out to developers of the underlying Lightning Network (LN) node implementations used by LNBits to support self-payment of their own invoices. This approach would eliminate the need for the short circuit logic in LNBits and similar systems. By relying on the underlying LN implementation's APIs for payment processing, it simplifies the codebase and reduces the need for frequent changes as the LN protocol evolves.The email also discusses an exploit discovered by Calle from LNBits, which allows attackers to create fraudulent balances by exploiting a quirk in how invoices are handled internally. LNBits has patched this exploit in version 0.10.5, and users are advised to update promptly. The attack involves inserting the payment hash of one payment into a different payment, tricking the backend into treating it as a legitimate payment. To mitigate this issue, backends should use self-generated unique "checking IDs" for internal payment lookups or implement additional checks to ensure invoice details have not been tampered with.Calle's findings highlight the sophistication of LN-savvy attackers and emphasize that the "payment hash" field in invoices should be referred to as a "preimage hash," as it only commits to the preimage and not other payment details like amount or pubkey. This incident underscores the importance of implementing robust security measures in Lightning applications and being aware of potential vulnerabilities in invoice handling.Additionally, the email mentions a report regarding a possible attack on LNBits backend. The attack is possible because the backend does not check if an external received HTLC `amount_msat` satisfies the invoice amount for both matching preimage and payment secret. The author suggests that custodial wallets, payment processors, and account management software based on LDK and following API recommendations should not be affected by this issue.Overall, the email emphasizes the importance of collaboration in addressing vulnerabilities within the Lightning Network and highlights the need for developers to stay vigilant and proactive in addressing potential exploits and vulnerabilities.</summary>
    <published>2023-07-13T21:03:11+00:00</published>
  </entry>
</feed>
