<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-07-14T02:37:21.662544+00:00</updated>
  <author>
    <name>David A. Harding 2023-07-12 20:04:19+00:00</name>
  </author>
  <author>
    <name>callebtc  + 2023-07-06 07:22:59+00:00</name>
  </author>
  <author>
    <name>Rusty Russell  + 2023-07-06 07:10:42+00:00</name>
  </author>
  <author>
    <name>callebtc  + 2023-06-19 15:26:05+00:00</name>
  </author>
  <author>
    <name>Antoine Riard  + 2023-06-19 20:34:10+00:00</name>
  </author>
  <link href="lightning-dev/July_2023/004007_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/July_2023/004006_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/July_2023/004005_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003983_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003986_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-07-14T02:37:21.662633+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004007.html" rel="alternate"/>
    <summary>LNbits recently discovered an exploit that allows attackers to generate fraudulent balances by exploiting a vulnerability in how invoices are handled internally. The issue has been addressed in LNbits version 0.10.5, and users are advised to update their systems promptly. The team believes that similar exploits may be possible in other Lightning applications, particularly those involving custodial wallets, payment processors, and account management software.The attack involves inserting the payment hash of one payment into a different payment, creating a malicious invoice that tricks the backend into treating it as a legitimate payment. To carry out the attack, the attacker creates two invoices: A and B'. They then manipulate invoice B' by replacing its payment hash with the payment hash from invoice A, re-sign it, and serialize it again to create the malicious invoice B. The attacker creates a new account in LNbits and pays the malicious invoice B. The LNbits backend identifies the payment as internal and settles it by crediting invoice A and debiting invoice B, effectively creating a balance out of thin air.To mitigate this exploit, backends should use self-generated unique "checking ids" for internal payment lookups or implement additional checks to ensure that invoice details have not been tampered with. It is also important to note that payment hashes only commit to the preimage and not other payment details like the amount or pubkey.This incident highlights the sophistication of LN-savvy attackers who possess a deep understanding of bolt-11 and utilize custom tools to create malicious invoices. It also emphasizes the need to refer to the "payment hash" of an invoice as a "preimage" hash to avoid misconceptions about its commitment to payment details.Overall, it is essential for developers working on Lightning applications to implement robust security measures and remain vigilant about potential vulnerabilities in the handling of invoices.</summary>
    <published>2023-07-12T20:04:19+00:00</published>
  </entry>
</feed>
