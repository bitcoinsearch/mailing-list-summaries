<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Loop attack with onion routing..</title>
  <updated>2023-05-18T17:48:49.069129+00:00</updated>
  <author>
    <name>Anthony Towns 2015-09-01 22:01:58</name>
  </author>
  <author>
    <name>Anthony Towns 2015-08-31 21:42:55</name>
  </author>
  <author>
    <name>Anthony Towns 2015-08-24 10:06:25</name>
  </author>
  <author>
    <name>Anthony Towns 2015-08-21 11:32:50</name>
  </author>
  <author>
    <name>Anthony Towns 2015-09-01 07:56:54</name>
  </author>
  <author>
    <name>Anthony Towns 2015-08-31 21:41:00</name>
  </author>
  <author>
    <name>Anthony Towns 2015-08-31 21:08:58</name>
  </author>
  <author>
    <name>Anthony Towns 2015-08-30 00:34:37</name>
  </author>
  <author>
    <name>Anthony Towns 2015-08-24 11:36:53</name>
  </author>
  <author>
    <name>Anthony Towns 2015-08-21 14:29:08</name>
  </author>
  <author>
    <name>Anthony Towns 2015-08-21 13:26:41</name>
  </author>
  <author>
    <name>Anthony Towns 2015-08-20 22:12:15</name>
  </author>
  <link href="lightning-dev/Sept_2015/000176_Loop-attack-with-onion-routing-.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000172_Loop-attack-with-onion-routing-.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000150_Loop-attack-with-onion-routing-.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000146_Loop-attack-with-onion-routing-.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2015/000174_Loop-attack-with-onion-routing-.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000171_Loop-attack-with-onion-routing-.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000169_Loop-attack-with-onion-routing-.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000159_Loop-attack-with-onion-routing-.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000152_Loop-attack-with-onion-routing-.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000148_Loop-attack-with-onion-routing-.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000147_Loop-attack-with-onion-routing-.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000140_Loop-attack-with-onion-routing-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Loop attack with onion routing..</title>
    <updated>2023-05-18T17:48:49.070127+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-September/000176.html" rel="alternate"/>
    <summary>A discussion about Lightning Network protocol implementation and its potential use cases is ongoing among multiple participants. The conversation covers various topics such as payment coordination, communication between payers and payees, initiating transactions via QR codes or NFC, and benefits of using lightning transactions in other protocols. There is also a debate regarding the best way to handle unilateral closes. One participant suggests requiring a valid unilateral close transaction as an incentive, while another believes this is enough for now but there may be a need to get more sophisticated eventually. Another aspect under discussion is how to deal with misbehaving participants, including scenarios where one participant pretends another was misbehaving, and what happens if a participant times out during the HTLC process. Finally, some participants question why cartel participants have shorter HTLCs in transit than those outside the cartel.The author of another discussion involving Lightning Network talks about the fund status and risk of loss associated with delaying transactions in Lightning Network. They suggest that if someone is willing to lose TIMEOUT*AMOUNT worth of bitcoin to encourage transactions over A/C rather than B/C, why not offer reduced/negative fees instead? The author also discusses how lightning could pay to a cold wallet. They assume end-users will bump their lightning channels at least once every couple of years. Finally, they estimate the exchange rate for a very ambitious scenario, assuming a future world of 10e9 people who have all reached developed-nation wealth and who use Bitcoin for all their finances.Another conversation about the Lightning Network revolves around imposing fines on nodes that do not behave properly. The fine would compensate for any delays or misbehavior when processing transactions, and if not paid, the other node can simply close the channel, isolating the misbehaving node. Several options for the payee are discussed, including acting quickly, revealing the R value later and receiving less money due to having to pay a fine, failing the payment and paying a fine for taking too long, paying the fine and closing the channel cooperatively, or closing the channel unilaterally. The size of the fine is important relative to Bitcoin blockchain fees, as a long chain might get fees into the 1% range. It is also noted that if an attacker creates an arbitrarily long path with source routing, they can create an arbitrarily large total damage to the network, corresponding to arbitrarily large total fines.In another discussion about Lightning Network, the conversation revolves around ensuring that payments are made quickly and reliably while handling misbehaving nodes in the network. One idea proposed is to impose fines on nodes that do not behave correctly, which would be paid to well-behaving nodes to incentivize good behavior. The fees for using the Lightning Network are also discussed, with suggestions for how they could be locked in cryptographically to prevent cheating. Dispute resolution is also discussed, involving closing channels between nodes and providing proof of the offending transaction on the blockchain. Finally, it is noted that the Lightning Network could reveal the chain of payees all the way back to the root, potentially causing problems for users who want to keep their transactions private.An email conversation between Anthony Towns, Rusty Russell, and Joseph Poon discusses the risks and benefits of onion routing in Bitcoin transactions. The discussion centers around the possibility of collusion between nodes to increase transaction speed and reduce fees at the expense of other nodes. Rusty expresses concern about the risk model and the difficulty of judging which side is affected by a 10,000 factor delay. Joseph agrees that some parts of the graph may be faster with disclosure of R and that collusion may lead to higher costs for some participants. However, Anthony argues that colluding is not beneficial as any transaction would still require the full timeout period, and collusion could even deprive the colluders of payment. The discussion ends with suggestions for a "per hop maxdelay" system to charge appropriately when expected to be slow, with reputations forming part of the routing service.</summary>
    <published>2015-09-01T22:01:58+00:00</published>
  </entry>
</feed>
