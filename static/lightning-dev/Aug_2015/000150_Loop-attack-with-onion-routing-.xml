<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Loop attack with onion routing..</title>
  <updated>2023-05-17T17:03:49.217093+00:00</updated>
  <author>
    <name>Anthony Towns</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Loop attack with onion routing..</title>
    <updated>2023-05-17T17:03:49.217093+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-August/000150.html" rel="alternate"/>
    <summary>In an email thread, Rusty Russell changed his mind about peeling the onion to close a channel. In case of Carol misbehaving by pretending that Dave was misbehaving when he wasn't, Carol closes the channel with Dave before accepting his resolution of the HTLC and passes the info to Bob. Since he's not cheating, Dave claims the HTLC output on the blockchain. Bob sees the HTLC output Carol was pointing at has been spent in a timely fashion, indicating Carol is cheating. Bob claims funds from Alice without having to justify being a cheat himself, and then closes the channel with Carol since she's being weird. However, Bob can't tell if Dave really sent it to Carol or not, but Alice doesn't care as someone paid 2 txfees in apology money for the delay. In another scenario, Dave starts the HTLC process but times out and doesn't resolve the HTLC in 20*11 seconds, and doesn't send back a blame packet from Emma either. In this case, Carol dumps the commit tx to the blockchain and the screwed-up HTLC along with any other casualty HTLCs in progress. She can include this commit tx + htlc txs in the blame packet back to Bob, and the HTLC txn provides Dave's public key id though, which is the only name for Dave that matters.</summary>
    <published>2015-08-24T10:06:25+00:00</published>
  </entry>
</feed>
