<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-06-29T03:03:03.443170+00:00</updated>
  <author>
    <name>callebtc 2023-06-19 15:26:05+00:00</name>
  </author>
  <author>
    <name>Antoine Riard 2023-06-19 20:34:10+00:00</name>
  </author>
  <link href="lightning-dev/June_2023/003983_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003986_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-06-29T03:03:03.443207+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003983.html" rel="alternate"/>
    <summary>Recently, the LNbits team discovered an exploit that could allow attackers to create fraudulent balances by taking advantage of a vulnerability in how invoices are handled internally. The team has released a patch in version 0.10.5 of LNbits and advises users to update as soon as possible. The team believes that this exploit may also be possible in other Lightning applications, particularly for those working on custodial wallets, payment processors, and account management software. The attack involves the attacker inserting a bolt-11 payment hash of payment A into a different payment, creating a malicious invoice B that tricks the backend into thinking B is equal to A. The process includes creating invoice A with an amount of 1000 sat, creating invoice B' with an amount of 1 sat, deserializing B', inserting payment_hash(A) into payment_hash(B), re-signing the invoice, and serializing it again to create the malicious invoice B. The attacker then creates a new account in LNbits and pays invoice B. The critical part of the attack lies in the fact that payment hashes do not commit to payment details like the amount but only to the preimage. The LNbits backend settles the payment internally by crediting A and debiting B, allowing the attacker to "create" 999 sats. To mitigate this vulnerability, backends should either use self-generated unique "checking ids" for internal payment lookups or implement additional checks to ensure that the invoice details have not been tampered with. For example, asserting that amount(A) is equal to amount(B). This incident highlights two important lessons. Firstly, it demonstrates the level of sophistication of LN-savvy attackers, as this attack requires a deep understanding of bolt-11 and custom tooling. Secondly, it emphasizes the need to recognize that the "payment hash" of an invoice is actually a "preimage" hash and does not commit to payment details such as amount or pubkey. The team suggests referring to this field as the "preimage hash" to avoid any implicit assumptions about its purpose.In response to the report, Antoine points out that custodial wallets, payment processors, and account management software based on LDK that follow the API recommendations should not be affected by this exploit. These implementations handle the equivalence checks for invoice amounts. He also mentions a previous known safety issue with invoices (CVE-2020-26896) and suggests practicing good disclosure security by notifying Lightning implementation maintainers and other vendors in advance to facilitate patch coordination if necessary.</summary>
    <published>2023-06-19T15:26:05+00:00</published>
  </entry>
</feed>
