<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-07-09T03:01:44.698296+00:00</updated>
  <author>
    <name>callebtc 2023-06-19 15:26:05+00:00</name>
  </author>
  <author>
    <name>Antoine Riard 2023-06-19 20:34:10+00:00</name>
  </author>
  <link href="lightning-dev/June_2023/003983_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003986_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-07-09T03:01:44.698346+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003983.html" rel="alternate"/>
    <summary>In a recent discovery, the LNbits team found an exploit that allows attackers to create balances out of thin air by exploiting a quirk in how invoices are handled internally. This exploit has been patched in LNbits version 0.10.5, and users are urged to update as soon as possible. The team believes that this exploit may be possible in other Lightning applications as well, especially for those working on custodial wallets, payment processors, and account management software.The attack involves the creation of a malicious invoice by inserting a bolt-11 payment hash of one payment into a different payment. Here's how it works: 1. The attacker creates invoice A with an amount of 1000 sat in LNbits.2. The attacker also creates invoice B' with an amount of 1 sat on their own node.3. The attacker deserializes B', inserts the payment_hash(A) into payment_hash(B), re-signs the invoice, and serializes it again, creating the malicious invoice B.4. The attacker then creates a new account in LNbits and pays invoice B.When LNbits backend receives the payment for invoice B, it uses payment_hash(B) to determine if it is an internal payment or a payment via Lightning Network. Since the backend assumes that payment_hash(A) commits to invoice A, it finds A in its database.However, the critical part of this exploit is that payment hashes do not commit to any payment details like the amount but only to the preimage. As a result, the backend settles the payment internally by crediting invoice A and debiting invoice B, effectively allowing the attacker to "create" 999 sats.To mitigate this exploit, backends should use self-generated unique "checking ids" or additional checks to ensure that the invoice details have not been tampered with. For example, asserting that the amount of invoice A is equal to the amount of invoice B.There are two lessons to be learned from this exploit. First, it highlights the level of sophistication of LN-savvy attackers who possess a fundamental understanding of bolt-11 and use custom tooling to create malicious invoices. Second, it emphasizes that the "payment hash" of an invoice is not a "payment" hash but rather a "preimage" hash. Calling it the "preimage hash" reduces the chance of developers mistakenly assuming that the hash commits to payment details like the amount or pubkey.It is recommended for custodial wallets, payment processors, and account management software based on LDK to follow the API recommendations and use the `create_inbound_payment` function, which handles amount equivalence checks. Additionally, good disclosure security practice suggests informing the Lightning implementation maintainers in advance through their respective security communication channels to facilitate patch coordination if necessary with second-line vendors like wallets and processors.</summary>
    <published>2023-06-19T15:26:05+00:00</published>
  </entry>
</feed>
