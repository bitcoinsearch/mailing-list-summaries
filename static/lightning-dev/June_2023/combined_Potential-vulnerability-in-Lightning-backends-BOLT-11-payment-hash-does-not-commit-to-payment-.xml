<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-07-13T03:03:59.197492+00:00</updated>
  <author>
    <name>callebtc 2023-06-19 15:26:05+00:00</name>
  </author>
  <author>
    <name>Antoine Riard 2023-06-19 20:34:10+00:00</name>
  </author>
  <link href="lightning-dev/June_2023/003983_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003986_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-07-13T03:03:59.197542+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003983.html" rel="alternate"/>
    <summary>Earlier last month, the LNbits team discovered an exploit that allowed an attacker to create balances out of thin air by taking advantage of a quirk in how invoices are handled internally. This exploit has been patched in LNbits version 0.10.5, and users are urged to update as soon as possible. The team believes that similar exploits may be possible in other Lightning applications, especially those working with custodial wallets, payment processors, and account management software.The attack involves the attacker inserting a bolt-11 payment hash of payment A into a different payment, creating a malicious invoice B. The backend is then tricked into believing that B is equal to A. Here's how the attack works:1. The attacker creates invoice A with an amount of 1000 sat in LNbits.2. The attacker also creates invoice B' with an amount of 1 sat on her own node.3. The attacker deserializes B', inserts payment_hash(A) into payment_hash(B), re-signs the invoice, and serializes it again, producing the malicious invoice B.4. The attacker creates a new account in LNbits and pays B.5. The LNbits backend uses payment_hash(B) to check if this is an internal payment or a payment via Lightning Network.6. The backend finds A in its database because it implicitly assumes that payment_hash(A) commits to A.   - It's important to note that payment hashes do not commit to payment details like amount but only to the preimage.As a result, the backend settles the payment internally by crediting A and debiting B, allowing the attacker to "create" 999 sats.To mitigate this exploit, backends should either use self-generated unique "checking ids" for looking up internal payments or implement additional checks to ensure that the invoice details have not been tampered with (e.g., comparing the amount of A and B).There are two valuable lessons to learn from this attack. Firstly, it highlights the level of sophistication of LN-savvy attackers, as carrying out this exploit requires a fundamental understanding of bolt-11 and custom tooling. Secondly, it emphasizes that the "payment hash" of an invoice is actually a "preimage" hash and does not commit to payment details like amount or pubkey. The LNbits team suggests calling this field simply the "preimage hash" to avoid developers assuming that it commits to payment details.In response to the report, Antoine clarifies that if custodial wallets, payment processors, or account management software based on LDK (Lightning Development Kit) follow the recommended API practices, they should not be affected by this exploit. He also mentions potential safety issues with invoices, referencing CVE-2020-26896, and advises adopting good disclosure security practices by notifying Lightning implementation maintainers in advance to facilitate patch coordination with second-line vendors.Overall, this report sheds light on an interesting exploit found in LNbits and provides insights into its implications, mitigation strategies, and lessons learned for developers working with Lightning applications.</summary>
    <published>2023-06-19T15:26:05+00:00</published>
  </entry>
</feed>
