<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-07-14T03:06:42.658523+00:00</updated>
  <author>
    <name>callebtc 2023-06-19 15:26:05+00:00</name>
  </author>
  <author>
    <name>Antoine Riard 2023-06-19 20:34:10+00:00</name>
  </author>
  <link href="lightning-dev/June_2023/003983_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003986_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-07-14T03:06:42.658600+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003983.html" rel="alternate"/>
    <summary>Earlier last month, the LNbits team discovered an exploit that allowed an attacker to create balances out of thin air by exploiting a quirk in how invoices are handled internally. The team has patched this issue in LNbits version 0.10.5 and urges users to update as soon as possible. This exploit could potentially affect other Lightning applications, such as custodial wallets, payment processors, and account management software.In this attack, the attacker was able to insert a bolt-11 payment hash of payment A into a different payment, creating a malicious invoice B that tricks the backend into believing that B is equal to A. The process involves the attacker creating invoice A with an amount of 1000 sat in LNbits, creating invoice B' with an amount of 1 sat on their own node, deserializing B', inserting payment_hash(A) into payment_hash(B), re-signing the invoice, and serializing it again to produce the malicious invoice B. The attacker then creates a new account in LNbits and pays invoice B.The LNbits backend uses payment_hash(B) to determine whether the payment is internal or via Lightning Network. In this case, the backend finds invoice A in its database because it assumes that payment_hash(A) commits to A. However, the critical part is that payment hashes do not commit to any payment details like the amount but only to the preimage.To mitigate this issue, backends should either use self-generated unique "checking ids" for looking up internal payments or implement additional checks to ensure that the invoice details have not been tampered with, such as asserting amount(A) == amount(B).There are two important lessons to take away from this exploit. Firstly, it highlights the level of sophistication of LN-savvy attackers, as this attack requires a fundamental understanding of bolt-11 and custom tooling to create the malicious invoice. Secondly, it emphasizes that the "payment hash" of an invoice is not a "payment" hash but merely a "preimage" hash, which increases the chance of developers mistakenly assuming that the hash commits to payment details like the amount or pubkey. It is suggested to refer to this field as the "preimage hash" instead.In response to the report, Antoine acknowledges that the attack is possible due to LNBits backend not checking if an external received HTLC `amount_msat` satisfies the invoice amount for both matching preimage and payment secret. However, if custodial wallets, payment processors, or account management software are based on LDK and follow the API recommendations by using `create_inbound_payment`, they should not be affected as amount equivalence checks are handled by the implementation. Antoine also mentions potential safety issues with invoices, referencing CVE-2020-26896, and advises following good disclosure security practices by informing Lightning implementation maintainers in advance for coordinated patching with second-line vendors.Overall, this exploit serves as a reminder of the need for robust security measures and constant vigilance in the development and implementation of Lightning applications.</summary>
    <published>2023-06-19T15:26:05+00:00</published>
  </entry>
</feed>
