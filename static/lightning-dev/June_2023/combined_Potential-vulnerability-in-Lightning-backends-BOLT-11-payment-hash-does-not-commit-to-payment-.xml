<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-07-05T02:56:55.568381+00:00</updated>
  <author>
    <name>callebtc 2023-06-19 15:26:05+00:00</name>
  </author>
  <author>
    <name>Antoine Riard 2023-06-19 20:34:10+00:00</name>
  </author>
  <link href="lightning-dev/June_2023/003983_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003986_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-07-05T02:56:55.568436+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003983.html" rel="alternate"/>
    <summary>Earlier last month, the LNbits team discovered an exploit that allows attackers to create balances out of thin air by exploiting a quirk in how invoices are handled internally. The team patched this issue in LNbits version 0.10.5 and urges users to update as soon as possible. The team believes that similar exploits may be possible in other Lightning applications, particularly those involved in custodial wallets, payment processors, and account management software.The attack works by manipulating the payment hash of an invoice. The attacker creates two invoices: A and B'. Using custom tooling, the attacker inserts the payment hash from invoice A into invoice B', creating a malicious invoice B. The attacker then creates a new account in LNbits and pays invoice B. The LNbits backend uses the payment hash to determine whether the payment is internal or via the Lightning Network. Since the backend assumes that the payment hash commits to the details of the invoice, it settles the payment internally by crediting invoice A and debiting invoice B. As a result, the attacker effectively creates 999 satoshis out of thin air.To mitigate this exploit, backends should use self-generated unique "checking ids" for looking up internal payments or implement additional checks to ensure that the invoice details have not been tampered with. This could include asserting that the amounts of the invoices match.There are two main lessons to take away from this exploit. First, it highlights the level of sophistication of LN-savvy attackers, as carrying out this attack requires a fundamental understanding of bolt-11 and the use of custom tooling. Second, it underscores the importance of recognizing that the "payment hash" of an invoice is actually a "preimage" hash and does not commit to payment details like the amount or pubkey. The LNbits team suggests referring to this field as the "preimage hash" to avoid implicit assumptions about its functionality.In response to the report, Antoine acknowledges that the attack is possible due to LNBits backend not checking that the amount of an external received HTLC matches the invoice amount for both the matching preimage and payment secret. He notes that custodial wallets, payment processors, and account management software based on LDK and following API recommendations should not be affected, as these checks are handled by the implementation. Antoine also suggests that good disclosure security practice includes warning Lightning implementation maintainers beforehand to facilitate patch coordination if necessary.Overall, this exploit serves as a reminder of the need for robust security measures in Lightning applications and highlights the importance of proper invoice handling and verification.</summary>
    <published>2023-06-19T15:26:05+00:00</published>
  </entry>
</feed>
