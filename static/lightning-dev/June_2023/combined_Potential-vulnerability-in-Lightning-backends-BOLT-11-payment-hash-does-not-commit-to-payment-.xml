<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-07-08T02:51:54.387178+00:00</updated>
  <author>
    <name>callebtc 2023-06-19 15:26:05+00:00</name>
  </author>
  <author>
    <name>Antoine Riard 2023-06-19 20:34:10+00:00</name>
  </author>
  <link href="lightning-dev/June_2023/003983_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003986_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-07-08T02:51:54.387214+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003983.html" rel="alternate"/>
    <summary>Earlier last month, the LNbits team discovered an exploit that allowed an attacker to create balances by taking advantage of a quirk in how invoices are handled internally. The team has patched this issue in LNbits version 0.10.5 and urges users to update as soon as possible. The team believes that similar exploits may be possible in other Lightning applications, particularly for those working on custodial wallets, payment processors, and account management software.The attack involves the ability to insert a bolt-11 payment hash of one payment (A) into a different payment (B). By doing this, the attacker can create a malicious invoice (B) that tricks the backend into believing that B is equal to A. The process involves creating invoice A with an amount of 1000 sat in LNbits, creating invoice B' with an amount of 1 sat on the attacker's own node, deserializing B', inserting payment_hash(A) into payment_hash(B), re-signing the invoice, and serializing it again to produce the malicious invoice B. The attacker then creates a new account in LNbits and pays B.The LNbits backend uses payment_hash(B) to determine whether the payment is internal or via the Lightning Network. In this case, the backend finds A in its database because it assumes that payment_hash(A) commits to A. However, the critical part is that payment hashes do not commit to any payment details like the amount, but only to the preimage hash. As a result, the backend settles the payment internally by crediting A and debiting B, effectively allowing the attacker to "create" 999 sats.To mitigate this issue, backends should use self-generated unique "checking ids" for looking up internal payments or implement additional checks to ensure that the invoice details have not been tampered with. For example, asserting that amount(A) is equal to amount(B) would be a valid check.There are two important lessons to learn from this exploit. Firstly, it highlights the level of sophistication of LN-savvy attackers, as carrying out this attack requires a fundamental understanding of bolt-11 and custom tooling to produce the malicious invoice. Secondly, it emphasizes that the "payment hash" of an invoice is not actually a "payment" hash but rather a "preimage" hash. Calling it a preimage hash reduces the chances of developers mistakenly assuming that the hash commits to payment details like the amount or pubkey.It's worth noting that if you're a custodial wallet, payment processor, or account management software based on LDK and you follow the API recommendations by using create_inbound_payment, you should not be affected by this issue, as the implementation handles the amount equivalence checks.Overall, this exploit serves as a reminder for developers to be vigilant about potential security vulnerabilities in Lightning applications and to implement necessary mitigations to protect against such attacks.</summary>
    <published>2023-06-19T15:26:05+00:00</published>
  </entry>
</feed>
