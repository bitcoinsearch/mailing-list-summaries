<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-07-11T02:42:57.970064+00:00</updated>
  <author>
    <name>callebtc 2023-06-19 15:26:05+00:00</name>
  </author>
  <author>
    <name>Antoine Riard 2023-06-19 20:34:10+00:00</name>
  </author>
  <link href="lightning-dev/June_2023/003983_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003986_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-07-11T02:42:57.970114+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003983.html" rel="alternate"/>
    <summary>Last month, the LNbits team discovered an exploit that could allow an attacker to create balances by taking advantage of a quirk in how invoices are handled internally. This issue has been patched in LNbits version 0.10.5, and users are urged to update as soon as possible. The team believes that similar exploits may be possible in other Lightning applications, particularly those involving custodial wallets, payment processors, and account management software.The attack involves the insertion of a bolt-11 payment hash from one payment into a different payment, resulting in a malicious invoice that tricks the backend into treating the two payments as equivalent. The process includes creating an invoice A with a certain amount in LNbits, creating a separate invoice B' with a small amount on the attacker's own node, deserializing B', inserting the payment hash from A into B, re-signing the invoice, and serializing it again to produce the malicious invoice B. The attacker then creates a new account in LNbits and pays invoice B.The LNbits backend uses the payment hash from invoice B to determine whether the payment is internal or via the Lightning Network. In this case, because the payment hash corresponds to invoice A, which is assumed to commit to the payment details, the backend settles the payment by crediting invoice A and debiting invoice B. This allows the attacker to effectively "create" 999 satoshis.To mitigate this issue, backends should use self-generated unique "checking ids" for looking up internal payments or implement additional checks to ensure that the invoice details have not been tampered with. For example, they can compare the amounts of the original invoice and the received invoice.There are two lessons to be learned from this exploit. Firstly, it highlights the sophistication of attackers who are knowledgeable about the Lightning Network. This attack requires a deep understanding of bolt-11 and custom tooling to create the malicious invoice. Secondly, the term "payment hash" is misleading, as it implies that it encompasses payment details such as the amount and pubkey. To avoid confusion, the author suggests referring to this field as the "preimage hash" instead.It is worth noting that if a custodial wallet, payment processor, or account management software is based on LDK and follows the API recommendations by using the `create_inbound_payment` function, it should not be affected by this exploit, as the implementation handles the equivalence checks of amounts.In conclusion, the LNbits team has addressed an exploit that could allow attackers to create balances through manipulated invoices. They have provided a patch and recommend immediate updates. This incident serves as a reminder of the sophistication of Lightning-savvy attackers and highlights the need for accurate terminology in the field. Developers are urged to implement proper checks and unique identifiers to mitigate similar attacks.</summary>
    <published>2023-06-19T15:26:05+00:00</published>
  </entry>
</feed>
