<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-07-10T03:01:47.261675+00:00</updated>
  <author>
    <name>callebtc 2023-06-19 15:26:05+00:00</name>
  </author>
  <author>
    <name>Antoine Riard 2023-06-19 20:34:10+00:00</name>
  </author>
  <link href="lightning-dev/June_2023/003983_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003986_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-07-10T03:01:47.261720+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003983.html" rel="alternate"/>
    <summary>Earlier last month, the LNbits team discovered an exploit that allowed attackers to create balances out of thin air by manipulating invoices. The team has released a patch in LNbits version 0.10.5 to address this issue and advises users to update as soon as possible. The team believes that similar exploits may be possible in other Lightning applications, especially those involving custodial wallets, payment processors, and account management software.The attack involves inserting a bolt-11 payment hash from one payment (A) into a different payment (B), creating a malicious invoice (B) that tricks the backend into treating it as if it were payment A. The attacker accomplishes this by creating invoice A with an amount of 1000 sat and then creating invoice B' with an amount of 1 sat. The attacker deserializes B', replaces its payment hash with payment_hash(A), re-signs the invoice, and serializes it again to produce the malicious invoice B. The attacker then creates a new account in LNbits and pays invoice B.The LNbits backend uses payment_hash(B) to determine whether the payment is internal or via the Lightning Network. In this case, since payment_hash(B) matches payment_hash(A), the backend mistakenly treats the payment as internal and credits invoice A while debiting invoice B. This allows the attacker to "create" 999 sats.To mitigate this issue, backends should use self-generated unique "checking ids" to distinguish between internal and external payments. Alternatively, additional checks can be implemented to ensure that the invoice details have not been tampered with (e.g., verifying that the amounts of A and B are equal).There are two lessons to be learned from this exploit. First, it highlights the sophistication of LN-savvy attackers who have a deep understanding of bolt-11 and the ability to create custom tools for carrying out such attacks. Second, it emphasizes the importance of recognizing that the "payment hash" of an invoice is actually a "preimage" hash that only commits to the preimage itself and not to payment details like the amount or pubkey. The LNbits team suggests using the term "preimage hash" instead to avoid any misunderstandings.In response to the report, Antoine points out that custodial wallets, payment processors, and account management software based on LDK are not affected by this exploit if they follow the API recommendations and use the "create_inbound_payment" function, which handles amount equivalence checks. However, he also recommends following good disclosure security practice by warning Lightning implementation maintainers in advance to facilitate patch coordination with second-line vendors.Overall, it is crucial for developers and users of Lightning applications to be aware of potential exploits and vulnerabilities like the one described here and take appropriate measures to protect their systems and funds.</summary>
    <published>2023-06-19T15:26:05+00:00</published>
  </entry>
</feed>
