<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-06-22T01:34:49.864981+00:00</updated>
  <author>
    <name>callebtc 2023-06-19 15:26:05+00:00</name>
  </author>
  <author>
    <name>Antoine Riard 2023-06-19 20:34:10+00:00</name>
  </author>
  <link href="lightning-dev/June_2023/003983_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003986_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-06-22T01:34:49.865018+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003983.html" rel="alternate"/>
    <summary>Last month, the team at LNbits discovered a vulnerability that allowed attackers to create balances out of thin air by exploiting a quirk in how invoices are handled internally. The vulnerability has been patched in LNbits version 0.10.5. The attack involved an attacker inserting a bolt-11 payment hash of payment A into a different payment, creating a malicious invoice B that could trick the backend into believing that B == A.The critical part of the attack was that payment hashes do not commit to any payment details but only to the preimage. To mitigate this issue, backends should use self-generated unique "checking id's" for looking up internal payments or use additional checks to make sure that the invoice details have not been messed around with (e.g., asserting amount(A) == amount(B)).Developers working on custodial wallets, payment processors, account management software, etc. are encouraged to read about the attack since carrying out the same exploit is possible in other Lightning applications. The attack requires a fundamental understanding of bolt-11 and custom tooling to produce the malicious invoice.Good disclosure security practice suggests having previously warned the Lightning implementation maintainers on their respective security communication channels to ease patch coordination if needed with second-line vendors like wallets and processors. Potential safety issues with invoices have been known since CVE-2020-26896.</summary>
    <published>2023-06-19T15:26:05+00:00</published>
  </entry>
</feed>
