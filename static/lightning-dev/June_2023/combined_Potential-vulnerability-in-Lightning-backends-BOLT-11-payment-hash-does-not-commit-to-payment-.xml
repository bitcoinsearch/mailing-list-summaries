<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-07-03T03:14:41.126310+00:00</updated>
  <author>
    <name>callebtc 2023-06-19 15:26:05+00:00</name>
  </author>
  <author>
    <name>Antoine Riard 2023-06-19 20:34:10+00:00</name>
  </author>
  <link href="lightning-dev/June_2023/003983_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003986_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-07-03T03:14:41.126353+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003983.html" rel="alternate"/>
    <summary>Earlier last month, LNbits discovered an exploit that allowed attackers to create balances by abusing a quirk in how invoices are handled internally. The exploit has been patched in LNbits version 0.10.5, and users are urged to update as soon as possible. The team believes that similar exploits may be possible in other Lightning applications, especially those related to custodial wallets, payment processors, and account management software.The attack involves the attacker inserting a bolt-11 payment hash of payment A into a different payment, creating a malicious invoice B that tricks the backend into thinking B is equal to A. The process includes creating invoice A of 1000 sat in LNbits, creating invoice B' of 1 sat on the attacker's node, deserializing B', inserting payment_hash(A) into payment_hash(B), re-signing the invoice, and serializing it again to produce the malicious invoice B. The attacker then creates a new account in LNbits and pays B.The LNbits backend uses payment_hash(B) to determine whether the payment is internal or via LN. Since payment_hash(A) commits to A, the backend finds A in its database. However, the critical part is that payment hashes do not commit to payment details like amount but only to the preimage.To mitigate this exploit, backends should use self-generated unique "checking ids" for internal payments or additional checks to ensure invoice details have not been tampered with (e.g., asserting amount(A) == amount(B)).There are two lessons to learn from this exploit. First, it highlights the level of sophistication of LN-savvy attackers who understand bolt-11 and require custom tooling to execute such attacks. The second lesson is that the "payment hash" of an invoice should be considered a "preimage" hash rather than a "payment" hash, as it only commits to the preimage and not payment details like amount or pubkey.In response to the report, Antoine suggests that custodial wallets, payment processors, and account management software based on LDK and following API recommendations should not be affected by this exploit. He also mentions potential safety issues with invoices known since CVE-2020-26896 and advises good disclosure security practice of warning Lightning implementation maintainers on their respective security communication channels.Overall, it is important for developers and users of Lightning applications to be aware of the potential for such exploits and to implement proper security measures to prevent them.</summary>
    <published>2023-06-19T15:26:05+00:00</published>
  </entry>
</feed>
