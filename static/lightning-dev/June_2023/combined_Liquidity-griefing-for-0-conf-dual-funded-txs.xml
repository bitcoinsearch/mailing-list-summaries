<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Liquidity griefing for 0-conf dual-funded txs</title>
  <updated>2023-07-04T02:54:27.695297+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-07 00:41:12+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-10 09:15:25+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-07 22:54:50+00:00</name>
  </author>
  <author>
    <name>Matt Morehouse 2023-05-09 17:38:55+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-05 16:21:50+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-10 00:07:06+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-06-07 09:46:36+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-10 09:15:25+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-07 22:54:50+00:00</name>
  </author>
  <author>
    <name>Matt Morehouse 2023-05-09 17:38:55+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-05 16:21:50+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-10 00:07:06+00:00</name>
  </author>
  <link href="lightning-dev/June_2023/003974_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003943_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003931_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003938_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003920_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003942_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003975_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003943_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003931_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003938_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003920_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003942_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Liquidity griefing for 0-conf dual-funded txs</title>
    <updated>2023-07-04T02:54:27.695387+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003974.html" rel="alternate"/>
    <summary>The email thread discusses the challenges of offering 0-conf services while protecting against liquidity griefing attacks from malicious peers in the context of lightning network's dual funded transactions. The dual funding protocol involves exchanging data about utxos and broadcasting the resulting transaction. If a peer goes silent after locking their utxos, the honest node's liquidity is locked and unusable. One solution is to never lock utxos used in dual funded transactions as they will automatically be re-used in another instance of the protocol if a remote node goes silent. However, this approach falls short when using 0-conf as accidentally double-spending a 0-conf channel can result in loss of funds for one of the peers if payments were made on that channel before detecting the double-spend.Nodes offering 0-conf services must ensure that the UTXOs they use for 0-conf are isolated from those used for non 0-conf. This can be fixed by using a "soft lock" when selecting UTXOs for a non 0-conf funding attempt. In eclair, the opportunistic 0-conf approach is used, but it cannot be used anymore when mixing 0-conf and non-0-conf funding attempts due to soft locked utxos. The aim is to gather ideas on how to improve the situation and offer good enough protections against liquidity griefing for nodes offering 0-conf services.One suggestion is to use v3 transactions for channel funding and splicing, although this would make them identifiable on-chain. In the long term, an anti-DoS token may need to be exchanged to avoid liquidity griefing, but designing and analyzing such a solution is challenging. It is also suggested that nodes can disable inbound payments or require longer `cltv_expiry_delta` in case of mempool fee spikes delaying the 0-conf chain confirmation. The issue of liquidity griefing related to mempool vectors is discussed. One suggestion is that the counterparty can enforce that any contributed outputs must be encumbered by a 1 CSV, unless being a 2-of-2 funding. However, this mitigation may be limited as the initial commitment transaction must have anchor outputs on each side for each party to recover its contributed UTXOs. Another long-term solution could be to deploy solutions worked out to mitigate channel jamming, such as the Staking Credentials framework. This involves dual-funding market-makers beyond routing hops and having the dual-funding initiator pay a fee scale up on the amount of UTXOs contributed, along with worst-case liquidity griefing scenarios. A privacy-preserving credential can be introduced between the payment of the fee and the redeem of the service to unlink dual-funding initiators.Bastien Nocera, a developer of the Lightning Network, has suggested adding 0-conf support to Lightning. In an email to the Lightning-dev mailing list, Nocera acknowledged that 0-conf is a "massive implementation pain point" but that users still like it. He proposed adding support for 0-conf in Lightning's `pay` command through a pull request on GitHub. However, some developers have expressed concerns about the security implications of implementing 0-conf in Lightning. The discussion on the pull request is ongoing.The message discusses the safety of dual-funded 0-conf transactions. The author suggests that such transactions can be made safe if the initiator uses swap-in-potentiam addresses with the acceptor. If the initiator stalls, the acceptor can retaliate by refusing to sign the swap-in-potentiam UTXOs which will also lock their funds until the swap-in-potentiam times out. This prevents liquidity griefing from being cost-free. The expected use-case for dual-funded 0-conf transactions is when a user expects onchain operations to be slow and take multiple confirmations to receive. Once there is deep confirmation that a swap-in-potentiam address has been funded, it can be transferred immediately to a 0-conf Lightning channel.Overall, the discussion aims to gather ideas on how to improve the situation and offer better protections against liquidity griefing for nodes offering 0-conf services.</summary>
    <published>2023-06-07T00:41:12+00:00</published>
  </entry>
</feed>
