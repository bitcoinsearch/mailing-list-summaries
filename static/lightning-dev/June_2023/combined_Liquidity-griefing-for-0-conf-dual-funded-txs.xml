<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Liquidity griefing for 0-conf dual-funded txs</title>
  <updated>2023-06-24T01:37:49.694768+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-07 00:41:12+00:00</name>
  </author>
  <author>
    <name>Matt Morehouse 2023-05-09 17:38:55+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-07 22:54:50+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-10 00:07:06+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-10 09:15:25+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-05 16:21:50+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-06-07 09:46:36+00:00</name>
  </author>
  <author>
    <name>Matt Morehouse 2023-05-09 17:38:55+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-07 22:54:50+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-10 00:07:06+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-10 09:15:25+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-05 16:21:50+00:00</name>
  </author>
  <link href="lightning-dev/June_2023/003974_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003938_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003931_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003942_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003943_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003920_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003975_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003938_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003931_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003942_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003943_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003920_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Liquidity griefing for 0-conf dual-funded txs</title>
    <updated>2023-06-24T01:37:49.694868+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003974.html" rel="alternate"/>
    <summary>Bastien Teinturier, a member of the Lightning Network development team, has sent out a message to the Lightning-dev mailing list regarding the safety of dual-funded 0-conf transactions. The email thread discusses the challenges of offering 0-conf services while protecting against liquidity griefing attacks from malicious peers.The introduction of dual funded transactions in lightning has created challenges, particularly regarding protecting against liquidity griefing attacks from malicious peers. One solution is to never lock utxos used in dual funded transactions as they will automatically be re-used in another instance of the protocol if a remote node goes silent. However, this approach falls short when using 0-conf as accidentally double-spending a 0-conf channel can result in loss of funds for one of the peers. Nodes offering 0-conf services expose themselves to liquidity griefing by locking utxos.Additionally, nodes offering 0-conf channels must ensure that the utxos they use for 0-conf are isolated from the utxos they use for non-0-conf. This can be fixed by using a "soft lock" when selecting utxos for a non-0-conf funding attempt. The post aims to raise awareness among implementers to avoid accidentally double-spending 0-conf channels when implementing dual funding.The email proposes a solution to never lock UTXOs used in dual-funded transactions and suggests locking UTXOs after tx_complete exchange if they are the only contributors and selecting UTXOs that are not soft-locked for option_zeroconf channels. Bastien Nocera, a developer of the Lightning Network, has suggested adding support for 0-conf in Lightning's `pay` command through a pull request on GitHub. However, some developers have expressed concerns about the security implications of implementing 0-conf in Lightning. The discussion on the pull request is ongoing. In eclair, they are currently doing "opportunistic" 0-conf when they receive `channel_ready` immediately and are the only contributor to the funding transaction. They cannot do that with mixed 0-conf and non 0-conf funding attempts because the utxos may be soft-locked, preventing them from "upgrading" to 0-conf.The author seeks ideas for improving the situation and offering good-enough protections against liquidity griefing for nodes offering 0-conf services. In terms of (quick) solutions to prevent liquidity griefing, the (honest) counterparty can enforce that any contributed outputs must be encumbered by a 1 CSV unless being a 2-of-2 funding. A more long-term solution might reuse solutions worked out to mitigate channel jamming. The Staking Credentials framework could be deployed by dual-funding market-makers beyond routing hops.</summary>
    <published>2023-06-07T00:41:12+00:00</published>
  </entry>
</feed>
