<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Liquidity griefing for 0-conf dual-funded txs</title>
  <updated>2023-06-21T00:45:52.545431+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-07 00:41:12+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-10 09:15:25+00:00</name>
  </author>
  <author>
    <name>Matt Morehouse 2023-05-09 17:38:55+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-07 22:54:50+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-05 16:21:50+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-10 00:07:06+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-06-07 09:46:36+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-10 09:15:25+00:00</name>
  </author>
  <author>
    <name>Matt Morehouse 2023-05-09 17:38:55+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-07 22:54:50+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-05 16:21:50+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-10 00:07:06+00:00</name>
  </author>
  <link href="lightning-dev/June_2023/003974_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003943_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003938_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003931_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003920_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003942_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003975_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003943_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003938_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003931_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003920_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003942_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Liquidity griefing for 0-conf dual-funded txs</title>
    <updated>2023-06-21T00:45:52.545562+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003974.html" rel="alternate"/>
    <summary>Bastien Teinturier, a developer of the Lightning Network, sent a message to the Lightning-dev mailing list discussing the challenge of protecting against liquidity griefing attacks from malicious peers in dual funded transactions. He suggests never locking UTXOs used in dual funded transactions but acknowledges that this solution falls short when using 0-conf as accidentally double-spending a 0-conf channel can result in loss of funds for one of the peers. Nodes offering 0-conf services must ensure that the UTXOs they use for 0-conf are isolated from those used for non-0-conf.Matt Morehouse proposed that UTXOs should be locked after tx_completes have been exchanged only if the node is the only contributor. Bastien Nocera has suggested adding 0-conf support to Lightning's `pay` command through a pull request on GitHub, although some developers have expressed concerns about the security implications of implementing 0-conf in Lightning. The email thread discusses the safety of dual-funded 0-conf transactions. The author proposes that such transactions can be made safe if the initiator uses swap-in-potentiam addresses with the acceptor. If the initiator stalls, the acceptor can retaliate by refusing to sign the swap-in-potentiam UTXOs which will also lock their funds until the swap-in-potentiam times out. The introduction of dual funded transactions in lightning has created challenges, particularly regarding protecting against liquidity griefing attacks from malicious peers. One solution is to never lock UTXOs used in dual funded transactions as they will automatically be re-used in another instance of the protocol if a remote node goes silent. Nodes offering 0-conf services expose themselves to liquidity griefing by locking UTXOs. Another issue arises when nodes offering 0-conf channels must ensure that the UTXOs they use for 0-conf are isolated from the UTXOs they use for non-0-conf. This can be fixed by using a "soft lock" when selecting UTXOs for a non-0-conf funding attempt.In summary, the Lightning Network mailing list discusses the challenges of protecting against liquidity griefing attacks from malicious peers in dual funded transactions and the safety of using 0-conf channels. The email thread proposes various solutions such as never locking UTXOs used in dual funded transactions, locking UTXOs after tx_completes have been exchanged only if the node is the only contributor, and using swap-in-potentiam addresses with the acceptor. The email also highlights the need for nodes offering 0-conf services to ensure the isolation of UTXOs used for 0-conf from those used for non-0-conf.</summary>
    <published>2023-06-07T00:41:12+00:00</published>
  </entry>
</feed>
