<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Liquidity griefing for 0-conf dual-funded txs</title>
  <updated>2023-07-02T03:06:40.380327+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-07 00:41:12+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-10 09:15:25+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-07 22:54:50+00:00</name>
  </author>
  <author>
    <name>Matt Morehouse 2023-05-09 17:38:55+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-05 16:21:50+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-10 00:07:06+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-06-07 09:46:36+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-10 09:15:25+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-07 22:54:50+00:00</name>
  </author>
  <author>
    <name>Matt Morehouse 2023-05-09 17:38:55+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-05 16:21:50+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-10 00:07:06+00:00</name>
  </author>
  <link href="lightning-dev/June_2023/003974_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003943_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003931_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003938_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003920_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003942_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003975_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003943_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003931_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003938_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003920_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003942_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Liquidity griefing for 0-conf dual-funded txs</title>
    <updated>2023-07-02T03:06:40.380432+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003974.html" rel="alternate"/>
    <summary>In a message to the Lightning-dev mailing list, Bastien Teinturier discussed the challenge of protecting against liquidity griefing attacks from malicious peers in dual funded transactions. The proposal was made to never lock UTXOs used in dual funded transactions and suggested that UTXOs be locked after tx_completes have been exchanged if the channel has option_zeroconf. However, this solution falls short when using 0-conf as accidentally double-spending a channel can result in loss of funds. Nodes offering 0-conf services must ensure that the UTXOs used for 0-conf are isolated from those used for non 0-conf. To address this issue, a "soft lock" should be used when selecting UTXOs for a non 0-conf funding attempt.Eclair is currently doing "opportunistic" 0-conf by immediately sending 'channel_ready' if it receives it immediately and meets certain conditions. However, this approach cannot be used when mixing 0-conf and non 0-conf funding attempts. The message serves as a call for ideas on how to improve protections against liquidity griefing for nodes offering 0-conf services.The introduction of dual-funded transactions in lightning has created challenges in protecting against liquidity griefing attacks from malicious peers. The dual funding protocol involves exchanging data about utxos and broadcasting the resulting transaction. If a peer goes silent after locking their utxos, the honest node's liquidity is locked and unusable. One solution is to never lock utxos used in dual funded transactions as they will automatically be re-used in another instance of the protocol if a remote node goes silent. However, this approach falls short when using 0-conf as accidentally double-spending a 0-conf channel can result in loss of funds for one of the peers. Nodes offering 0-conf services expose themselves to liquidity griefing by locking utxos.Another issue arises when nodes offering 0-conf channels must ensure that the utxos they use for 0-conf are isolated from the utxos they use for non 0-conf. This can be fixed by using a "soft lock" when selecting utxos for a non 0-conf funding attempt.Eclair is currently doing "opportunistic" 0-conf by immediately sending 'channel_ready' if it receives it immediately and meets certain conditions. However, this approach cannot be used anymore when mixing 0-conf and non 0-conf funding attempts due to soft locked utxos.The aim is to gather ideas on how to improve the situation and offer good enough protections against liquidity griefing for nodes offering 0-conf services. One idea proposed is to use v3 transactions for channel funding and splicing, with the caveat that it makes them identifiable on-chain. In the longer term, an anti-DoS token may need to be exchanged to avoid liquidity griefing attacks, but designing and analyzing such a solution is not easy. It is also suggested that nodes can apply a policy to disable inbound payments or require a longer `cltv_expiry_delta` in case of mempool fee spikes delaying the 0-conf chain confirmation.One suggestion is to enforce that any contributed outputs must be encumbered by a 1 CSV, unless it is a 2-of-2 funding. This mitigates liquidity griefing related to mempool vectors. In the long term, solutions used to mitigate channel jamming could be repurposed to address the liquidity griefing problem. The Staking Credentials framework could be deployed to prevent lockup of scarce resources without fees paid.In summary, the challenges of offering 0-conf services while protecting against liquidity griefing attacks are discussed. The use of dual funded transactions and the locking of utxos pose risks to the liquidity of honest nodes. Various solutions and ideas are proposed, including not locking utxos in dual funded transactions, using v3 transactions, implementing anti-DoS measures, and leveraging the Staking Credentials framework.Bastien Teinturier proposed that UTXOs used in dual funded transactions should not be locked to prevent liquidity griefing attacks from malicious peers. However, this solution falls short when using 0-conf because accidentally double-spending a 0-conf channel can result in loss of funds for one of the peers. To address this issue, Matt Morehouse proposed that UTXOs should be locked after tx_completes have been exchanged only if the node is the only contributor.Although this proposal enables the common use case for 0-conf, ZmnSCPxj argued that it means "do not dual-fund 0-conf", and the simpler openv1 flow should be used instead. Another related issue is that nodes offering 0-conf services must ensure that the UTXOs they use for 0-conf are isolated from those used for non 0-conf. This can be fixed by using a "soft lock" when selecting UTXOs for a non 0-conf funding attempt.Bastien Noc</summary>
    <published>2023-06-07T00:41:12+00:00</published>
  </entry>
</feed>
