<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Liquidity griefing for 0-conf dual-funded txs</title>
  <updated>2023-07-01T03:11:49.590210+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-07 00:41:12+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-10 09:15:25+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-07 22:54:50+00:00</name>
  </author>
  <author>
    <name>Matt Morehouse 2023-05-09 17:38:55+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-05 16:21:50+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-10 00:07:06+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-06-07 09:46:36+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-10 09:15:25+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-07 22:54:50+00:00</name>
  </author>
  <author>
    <name>Matt Morehouse 2023-05-09 17:38:55+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-05 16:21:50+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-10 00:07:06+00:00</name>
  </author>
  <link href="lightning-dev/June_2023/003974_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003943_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003931_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003938_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003920_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003942_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003975_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003943_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003931_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003938_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003920_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003942_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Liquidity griefing for 0-conf dual-funded txs</title>
    <updated>2023-07-01T03:11:49.590313+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003974.html" rel="alternate"/>
    <summary>The Lightning Network is currently facing challenges in protecting against liquidity griefing attacks in dual funded transactions. These attacks can occur when malicious peers lock their unspent transaction outputs (UTXOs) and become unresponsive, effectively locking the honest node's liquidity. To address this issue, one proposed solution is to avoid locking UTXOs used in dual funded transactions and automatically reuse them in another instance of the protocol if a remote node goes silent. This approach would prevent soft locks from interfering with the upgrade to 0-conf.However, there are additional concerns when mixing 0-conf and non-0-conf funding attempts. Nodes offering 0-conf services need to ensure that the UTXOs used for 0-conf are isolated from those used for non-0-conf. One suggestion is to implement a "soft lock" mechanism when selecting UTXOs for non-0-conf funding attempts. This would help mitigate potential liquidity griefing attacks.Bastien Nocera, a developer of the Lightning Network, has proposed adding support for 0-conf in Lightning's `pay` command through a pull request on GitHub. However, some developers have raised concerns about the security implications of implementing 0-conf in Lightning, and the discussion on the pull request is ongoing.In addition, the safety of dual-funded 0-conf transactions is also being discussed. The proposal suggests using swap-in-potentiam addresses with the acceptor to make these transactions safe. If the initiator stalls, the acceptor can refuse to sign the swap-in-potentiam UTXOs, effectively locking their funds until the swap-in-potentiam times out, preventing liquidity griefing from being cost-free. These dual-funded 0-conf transactions are expected to be used when onchain operations are slow and require multiple confirmations.Antoine Riard raises concerns about the vulnerability of the "soft lock" strategy to liquidity griefing attacks. He suggests enforcing encumbrance on contributed outputs or using longer `cltv_expiry_delta` for inbound payments to mitigate mempool-related liquidity griefing. Riard also proposes exploring solutions designed to mitigate channel jamming, including the potential use of the Staking Credentials framework.To summarize, the Lightning Network is actively seeking solutions to protect against liquidity griefing attacks in dual funded transactions. Proposed solutions include not locking UTXOs used in dual funded transactions, implementing a "soft lock" mechanism for non-0-conf funding attempts, and using swap-in-potentiam addresses to prevent liquidity griefing. The addition of 0-conf support to Lightning has been proposed, but concerns regarding security implications are being addressed. Ultimately, the goal is to improve the network's ability to handle both 0-conf and non-0-conf funding attempts while maintaining security and usability.</summary>
    <published>2023-06-07T00:41:12+00:00</published>
  </entry>
</feed>
