<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Liquidity griefing for 0-conf dual-funded txs</title>
  <updated>2023-07-04T02:52:20.379619+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-07 00:41:12+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Liquidity griefing for 0-conf dual-funded txs</title>
    <updated>2023-07-04T02:52:20.379642+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003974.html" rel="alternate"/>
    <summary>The email exchange between Antoine and Bastien discusses the issue of liquidity griefing in dual-funded transactions in Lightning Network. The problem arises when one peer locks their UTXOs in the shared transaction, causing the other peer's liquidity to be locked and unusable if the remote node goes silent. Simply unlocking the UTXOs after detecting a fishy remote node is not a viable solution, as the remote node could still succeed in locking the liquidity for a duration and initiate other instances of the attack.To address this issue, an elegant solution proposed is to never lock UTXOs used in dual-funded transactions. If a remote node goes silent during the protocol, the UTXOs will automatically be re-used in another instance of the protocol. However, this approach falls short when using 0-conf (zero-confirmation) channels because accidentally double-spending a 0-conf channel can result in loss of funds. Nodes offering 0-conf services expose themselves to liquidity griefing.Another related issue is the race scenario where the same UTXO is selected for both non 0-conf and 0-conf funding attempts. To fix this, a "soft lock" can be implemented, where soft locked UTXOs are ignored for 0-conf funding attempts but can be reused for non 0-conf funding attempts.In the context of Eclair, the opportunistic use of 0-conf is discussed. If the node receives a `channel_ready` message immediately, is the sole contributor to the funding transaction, and the transaction hasn't been replaced by fee (RBF-ed), the node can start using the channel for 0-conf payments. This allows for the use of 0-conf where only one side of the channel needs to trust the other side.However, when mixing 0-conf and non 0-conf funding attempts, the presence of soft locked UTXOs prevents the upgrade to 0-conf. The discussion concludes by inviting ideas to improve the situation and provide better protections against liquidity griefing for nodes offering 0-conf services. The email includes links to relevant resources and discussions for further reference.Overall, the discussion delves into the challenges and potential solutions related to liquidity griefing in dual-funded transactions and the use of 0-conf channels in Lightning Network.</summary>
    <published>2023-06-07T00:41:12+00:00</published>
  </entry>
</feed>
