<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Liquidity griefing for 0-conf dual-funded txs</title>
  <updated>2023-07-05T02:47:30.336987+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-07 00:41:12+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Liquidity griefing for 0-conf dual-funded txs</title>
    <updated>2023-07-05T02:47:30.337015+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003974.html" rel="alternate"/>
    <summary>Bastien Teinturier, in a post to the Lightning-dev mailing list, discussed the challenges posed by liquidity griefing attacks in dual-funded transactions. He explained that if utxos are locked as soon as they are added to the shared transaction, the honest node may lose liquidity if the remote node goes silent. To address this issue, Bastien proposed never locking utxos used in dual-funded transactions. If a remote node goes silent, the utxos will be automatically reused in another instance of the protocol. However, this solution falls short when using 0-conf, as accidentally double-spending a 0-conf channel can result in loss of funds. Another issue arises when nodes want to offer 0-conf channels while also using utxos for non 0-conf transactions. If the same utxo is selected for both types of funding attempts, it can lead to accidental double-spending. Bastien suggested implementing a "soft lock" mechanism, where utxos selected for non 0-conf funding attempts are soft locked and ignored for 0-conf funding attempts.In the Eclair implementation, an opportunistic approach to 0-conf is currently used. If `channel_ready` is received immediately and there is no other contributor to the funding transaction, the channel is immediately used. However, this approach cannot be used when mixing 0-conf and non 0-conf funding attempts due to the presence of soft locked utxos.Bastien sought ideas on how to improve the situation and offer better protection against liquidity griefing for nodes offering 0-conf services. He acknowledged that 0-conf is a pain point in implementations but recognized its popularity among users.To mitigate liquidity griefing related to mempool vectors, Bastien suggested implementing a solution similar to the Staking Credentials framework used to mitigate channel jamming. This would involve market-makers paying fees based on the amount of UTXOs contributed and worst-case liquidity griefing scenarios.Overall, Bastien's post highlighted the challenges and potential solutions to liquidity griefing attacks in dual-funded transactions and sought input from the community on how to improve protections for nodes offering 0-conf services.Source: [Lightning-dev Mailing List](https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-May/003964.html)</summary>
    <published>2023-06-07T00:41:12+00:00</published>
  </entry>
</feed>
