<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Liquidity griefing for 0-conf dual-funded txs</title>
  <updated>2023-06-27T03:44:34.526523+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-07 00:41:12+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Liquidity griefing for 0-conf dual-funded txs</title>
    <updated>2023-06-27T03:44:34.526548+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003974.html" rel="alternate"/>
    <summary>In a technical post on the Lightning-dev mailing list, Bastien Teinturier discussed liquidity griefing attacks from malicious peers in dual funded transactions. The problem is that if peers lock their utxos as soon as they've decided to add them to the shared transaction, the remote node may go silent and the honest node has some liquidity that is locked and unusable. An elegant solution to this issue is to never lock utxos used in dual funded transactions. However, that solution falls short when using 0-conf, because accidentally double-spending a 0-conf channel (because of concurrent instances) can result in loss of funds for one of the peers. Teinturier suggested a "soft lock" when selecting utxos for a non 0-conf funding attempt. 0-conf funding attempts must ignore soft locked utxos while non 0-conf funding attempts can (should) reuse soft locked utxos. In eclair, they are currently doing "opportunistic" 0-conf. If they receive `channel_ready` immediately and they're the only contributor to the funding transaction and the transaction hasn't been RBF-ed yet, then they immediately send `channel_ready` as well and start using that channel. However, they cannot do that anymore when mixing 0-conf and non 0-conf funding attempts, because the utxos may be soft locked, preventing them from "upgrading" to 0-conf. Teinturier asked for ideas on how to improve the situation and offer good enough protections against liquidity griefing for nodes offering 0-conf services. As a more long-term solution, he suggested reusing solutions worked out to mitigate channel jamming, as the abstract problem is the same, namely your counterparty can lock up scarce resources without (on-chain/off-chain whatever) fees paid.</summary>
    <published>2023-06-07T00:41:12+00:00</published>
  </entry>
</feed>
