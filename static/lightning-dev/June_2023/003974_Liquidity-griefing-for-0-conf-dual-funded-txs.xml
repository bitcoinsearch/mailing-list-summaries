<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Liquidity griefing for 0-conf dual-funded txs</title>
  <updated>2023-06-29T02:47:13.805985+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-07 00:41:12+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Liquidity griefing for 0-conf dual-funded txs</title>
    <updated>2023-06-29T02:47:13.806007+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003974.html" rel="alternate"/>
    <summary>In a discussion on the Lightning-dev mailing list, Bastien Teinturier raises concerns about liquidity griefing attacks in dual-funded transactions. He explains that when peers lock their UTXOs as soon as they are added to the shared transaction, it can lead to the honest node's liquidity being locked and unusable if the remote node goes silent. Bastien suggests an elegant solution to this issue, which is to never lock UTXOs used in dual-funded transactions. This way, if a remote node goes silent, the UTXOs will automatically be reused in another instance of the protocol. However, this solution falls short when using 0-conf (zero-confirmation) channels, as accidental double-spending can result in loss of funds. To address this, Bastien proposes using a "soft lock" for non 0-conf funding attempts, where soft locked UTXOs are ignored for 0-conf funding attempts.Bastien also discusses the race scenario that can occur when nodes want to offer both 0-conf and non 0-conf channels. If an unlocked UTXO is selected for a non 0-conf funding attempt and then subsequently locked for a 0-conf funding attempt, there is a risk of accidental double-spending. To fix this, Bastien suggests using a "soft lock" during the selection of UTXOs for non 0-conf funding attempts, allowing them to be reused for 0-conf funding attempts.In terms of implementing 0-conf in Eclair, Bastien explains that they currently use an opportunistic approach, where if they receive a `channel_ready` message immediately and meet certain conditions (such as being the only contributor to the funding transaction and the transaction not being Replace-By-Fee-ed), they immediately send a `channel_ready` message and start using the channel. However, this approach cannot be used when mixing 0-conf and non 0-conf funding attempts due to the potential soft locking of UTXOs.Bastien concludes by seeking ideas on how to improve the situation and offer better protections against liquidity griefing for nodes offering 0-conf services. He acknowledges that 0-conf is a pain point in implementation but recognizes its popularity among users.This discussion on liquidity griefing and the challenges of implementing 0-conf channels can be found on the Lightning-dev mailing list [1].</summary>
    <published>2023-06-07T00:41:12+00:00</published>
  </entry>
</feed>
