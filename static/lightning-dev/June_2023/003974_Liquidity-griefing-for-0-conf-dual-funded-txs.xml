<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Liquidity griefing for 0-conf dual-funded txs</title>
  <updated>2023-07-06T02:55:02.561465+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-07 00:41:12+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Liquidity griefing for 0-conf dual-funded txs</title>
    <updated>2023-07-06T02:55:02.561505+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003974.html" rel="alternate"/>
    <summary>The email conversation between Antoine and Bastien revolves around the issue of liquidity griefing in dual-funded transactions in the lightning network. The problem arises when one peer locks their UTXOs in the shared transaction, causing the other peer's liquidity to be locked and unusable. Bastien suggests a solution of not locking the UTXOs used in dual-funded transactions and allowing them to be automatically reused in another instance of the protocol if the remote node goes silent. However, this solution falls short when using 0-conf (zero-confirmation) transactions as accidental double-spending can result in loss of funds. In addition, there is a race scenario where UTXOs selected for non 0-conf funding attempts may accidentally double-spend the UTXOs used for 0-conf channels. To address this, a "soft lock" approach is proposed where UTXOs selected for non 0-conf funding attempts are soft locked and ignored by 0-conf funding attempts. Bastien explains that in their implementation, they use opportunistic 0-conf by immediately sending 'channel_ready' if certain conditions are met. However, this approach cannot be used when mixing 0-conf and non 0-conf funding attempts due to the soft-locking of UTXOs.Bastien seeks ideas on how to improve the situation and offer better protection against liquidity griefing for nodes offering 0-conf services. He acknowledges that 0-conf is a challenging implementation point but is popular among users. Antoine suggests reusing solutions developed to mitigate channel jamming and proposes deploying the Staking Credentials framework by dual-funding market-makers beyond routing hops to address liquidity griefing. He also mentions the possibility of using privacy-preserving credentials to unlink dual-funding initiators.Overall, the conversation highlights the challenges and potential solutions related to liquidity griefing in dual-funded transactions, particularly in the context of 0-conf channels. Bastien seeks input from the community to improve protections against liquidity griefing while still offering 0-conf services.</summary>
    <published>2023-06-07T00:41:12+00:00</published>
  </entry>
</feed>
