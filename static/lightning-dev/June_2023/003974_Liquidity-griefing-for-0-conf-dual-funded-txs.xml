<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Liquidity griefing for 0-conf dual-funded txs</title>
  <updated>2023-07-01T03:09:01.436461+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-07 00:41:12+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Liquidity griefing for 0-conf dual-funded txs</title>
    <updated>2023-07-01T03:09:01.436491+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003974.html" rel="alternate"/>
    <summary>In a discussion about the challenges of liquidity griefing attacks in dual-funded transactions on the Lightning Network, Bastien Teinturier raises concerns about the locking of UTXOs and the potential for loss of funds in 0-conf channels. The issue arises when nodes offering 0-conf services expose themselves to liquidity griefing due to accidental double-spending of a 0-conf channel. Additionally, there is a race scenario where the selection and locking of UTXOs for non 0-conf funding attempts can inadvertently double-spend a 0-conf channel. To address this issue, a "soft lock" strategy is proposed, where soft locked UTXOs can be reused for non 0-conf funding attempts but ignored for 0-conf funding attempts.In the context of dual-funding, Antoine suggests that liquidity griefing can occur due to a lack of signature release or mempool manipulation. He points out that even with package relay/nVersion deployment, there is still a duration between pinning in network mempools and the replacement broadcast. As a long-term solution, he proposes leveraging solutions used to mitigate channel jamming, such as the Staking Credentials framework, which could be deployed by dual-funding market-makers beyond routing hops.Bastien explains that in their implementation of Eclair, they currently use an "opportunistic" approach to 0-conf, where they immediately send `channel_ready` if certain conditions are met. However, when mixing 0-conf and non 0-conf funding attempts, the soft locking of UTXOs prevents them from using 0-conf. Bastien seeks ideas on how to improve the situation and provide better protection against liquidity griefing for nodes offering 0-conf services.The discussion thread includes links to the pull request for dual-funded transactions and a discussion about liquidity griefing attacks for further reference.Overall, the conversation revolves around addressing liquidity griefing attacks in dual-funded transactions, proposing the use of soft locks for UTXOs, and exploring long-term solutions to mitigate channel jamming and protect against liquidity griefing.</summary>
    <published>2023-06-07T00:41:12+00:00</published>
  </entry>
</feed>
