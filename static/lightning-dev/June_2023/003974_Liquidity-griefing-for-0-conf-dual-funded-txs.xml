<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Liquidity griefing for 0-conf dual-funded txs</title>
  <updated>2023-06-30T02:48:44.338988+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-07 00:41:12+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Liquidity griefing for 0-conf dual-funded txs</title>
    <updated>2023-06-30T02:48:44.339011+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003974.html" rel="alternate"/>
    <summary>In a recent discussion on the Lightning-dev mailing list, Bastien Teinturier raised the issue of liquidity griefing attacks in the context of dual funded transactions. The problem arises when a peer locks their UTXOs in a shared transaction and then goes silent, leaving the honest node's liquidity locked and unusable. Unlocking the UTXOs after detecting a fishy remote node is not a viable solution as it still allows the attacker to lock the liquidity for a duration. To address this issue, Bastien proposed a solution where UTXOs used in dual funded transactions are never locked. If a remote node goes silent, the UTXOs will automatically be reused in another instance of the protocol. However, this approach falls short when using 0-conf (zero-confirmation) transactions as accidental double-spending can result in loss of funds. Nodes offering 0-conf services are therefore exposed to liquidity griefing.Another related issue is the race scenario that can occur when nodes want to offer both 0-conf and non 0-conf channels. If the same UTXO is selected for both types of funding attempts, accidental double-spending can occur. To address this, a "soft lock" mechanism can be implemented where utxos are selectively locked based on the type of funding attempt. Non 0-conf funding attempts can reuse soft locked utxos, while 0-conf funding attempts must ignore them.In terms of mitigating liquidity griefing related to mempool vectors, one suggestion is for the honest counterparty to enforce that any contributed outputs must be encumbered by a 1 CSV (Check Sequence Verify). However, this mitigation may have limitations as the initial commitment transaction must have anchor outputs on each side for each party to recover its contributed UTXOs.Regarding using 0-conf in a mixed funding environment, the current approach in Eclair is opportunistic 0-conf. If the node receives a `channel_ready` message immediately, is the sole contributor to the funding transaction, and the transaction has not been replaced by fee (RBF-ed), it immediately sends `channel_ready` and starts using the channel. This approach allows for the use of 0-conf with only one side of the channel needing to trust the other side. However, when mixing 0-conf and non 0-conf funding attempts, the presence of soft locked utxos prevents the "upgrade" to 0-conf.In the long term, solutions developed to mitigate channel jamming, such as the Staking Credentials framework, could be deployed by dual-funding market-makers beyond routing hops. The dual-funding initiator would pay a fee to the maker based on the amount of UTXOs contributed and worst-case liquidity griefing scenarios. A privacy-preserving credential could be used to unlink dual-funding initiators if the maker has enough volume to constitute a reasonable anonymity set.Overall, the discussion focused on the challenges and potential solutions for protecting against liquidity griefing attacks in dual funded transactions, particularly in the context of 0-conf services. The goal is to find ways to offer sufficient protections against liquidity griefing while still accommodating user preferences for 0-conf transactions.</summary>
    <published>2023-06-07T00:41:12+00:00</published>
  </entry>
</feed>
