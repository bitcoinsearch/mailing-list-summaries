<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Liquidity griefing for 0-conf dual-funded txs</title>
  <updated>2023-06-21T01:16:15.762688+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-07 00:41:12+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Liquidity griefing for 0-conf dual-funded txs</title>
    <updated>2023-06-21T01:16:15.762726+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003974.html" rel="alternate"/>
    <summary>Bastien Teinturier, a Lightning Network developer, has posted on the Lightning-dev mailing list seeking ideas on how to improve protections against liquidity griefing for nodes offering 0-conf services. He notes that one of the challenges created by the introduction of dual-funded transactions in lightning is how to protect against liquidity griefing attacks from malicious peers. The liquidity griefing issue arises when nodes offer 0-conf channels and must ensure that the utxos they use for 0-conf are isolated from the utxos they use for non-0-conf. If not, it may be challenging to lock utxos properly, risking accidental double-spending of a 0-conf channel. Bastien suggests a "soft lock" strategy while selecting utxos for non-0-conf funding attempts. In this strategy, only locking UTXO when it's a non-0-conf funding attempt can help overcome the lack of signature release for a shared input by a counterparty and prevent mempool vectors. However, Bastien warns that the vector of griefing is still possible with dual-funding or splicing.The solution he proposes is never to lock utxos used in dual-funded transactions. If a remote node goes silent in the middle of an instance of the protocol, your utxos will automatically be re-used in another instance of the protocol. However, this approach falls short when using 0-conf as accidentally double-spending a 0-conf channel due to concurrent instances can result in loss of funds for one of the peers. Bastien suggests enforcing that any contributed outputs must be encumbered by a 1 CSV, unless being a 2-of-2 funding, to prevent liquidity griefing related to mempool vectors. Besides, Staking Credentials framework could be deployed by dual-funding market-makers beyond routing hops. The dual-funding initiator should pay to the maker a fee scale up on the amount of UTXOs contributed and some worst-case liquidity griefing scenario. A privacy-preserving credential can be introduced between the payment of the fee and the redeem of the service to unlink dual-funding initiators.Bastien concludes by seeking ideas on how to improve that situation and offer good enough protections against liquidity griefing for nodes offering 0-conf services. He acknowledges that 0-conf is a massive implementation pain point that developers would all like to remove from their codebases, but users like it.</summary>
    <published>2023-06-07T00:41:12+00:00</published>
  </entry>
</feed>
