<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Liquidity griefing for 0-conf dual-funded txs</title>
  <updated>2023-06-24T01:36:33.311457+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-07 00:41:12+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Liquidity griefing for 0-conf dual-funded txs</title>
    <updated>2023-06-24T01:36:33.311485+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003974.html" rel="alternate"/>
    <summary>In a lightning-dev mailing list, Bastien Teinturier discussed the challenges of dual-funded transactions in lightning and how to protect against liquidity griefing attacks from malicious peers. He explained that if peers lock their UTXOs as soon as they've decided to add them to the shared transaction, the remote node may go silent, locking honest nodes' liquidity and making it unusable. He suggested an elegant solution to this issue by never locking UTXOs used in dual-funded transactions. The only drawback with that approach is that when you have multiple concurrent instances of dual funding with honest peers, some of them may fail because they are double-spent by one of the concurrent instances. However, this solution falls short when using 0-conf, because accidentally double-spending a 0-conf channel (because of concurrent instances) can result in loss of funds for one of the peers. Another related issue is that nodes that want to offer 0-conf channels must ensure that the UTXOs they use for 0-conf are isolated from the UTXOs they use for non 0-conf; otherwise, it is not possible to properly lock UTXOs, resulting in accidental double-spending of 0-conf channels.To fix this, Bastien suggested using a "soft lock" when selecting UTXOs for a non 0-conf funding attempt. 0-conf funding attempts must ignore soft-locked UTXOs while non 0-conf funding attempts can (should) reuse soft-locked UTXOs. In terms of quick solutions to prevent liquidity griefing related to mempool vectors, the (honest) counterparty can enforce that any contributed outputs must be encumbered by a 1 CSV unless being a 2-of-2 funding.Bastien also discussed Eclair's current strategy of opportunistic 0-conf and how it works when mixing 0-conf and non 0-conf funding attempts. He suggested that the situation could be improved by gathering ideas on how to offer good enough protections against liquidity griefing for nodes offering 0-conf services. As a long-term solution, he proposed reusing solutions worked out to mitigate channel jamming, as the abstract problem is the same, namely your counterparty can lock up scarce resources without (on-chain/off-chain whatever) fees paid.</summary>
    <published>2023-06-07T00:41:12+00:00</published>
  </entry>
</feed>
