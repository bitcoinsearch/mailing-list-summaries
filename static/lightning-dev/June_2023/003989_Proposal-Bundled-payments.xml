<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal: Bundled payments</title>
  <updated>2023-07-11T02:38:50.637654+00:00</updated>
  <author>
    <name>Bastien TEINTURIER 2023-06-20 16:44:17+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal: Bundled payments</title>
    <updated>2023-07-11T02:38:50.637683+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003989.html" rel="alternate"/>
    <summary>In a discussion thread between Thomas and Dave, they are exploring the possibility of combining pre-payment of the mining fee with 0-conf on the Lightning Network. Thomas mentions that he doesn't see 0-conf going away even with the introduction of BOLT-12. Dave seeks clarification on whether bundled payments would work with the current specification or require changes to BOLT-12. Thomas explains that adding a TLV field to Bolt 12 invoices or onion messages would be necessary for bundled payments. He believes that the design space for a prepayment solution based on Bolt 12 is larger and could result in a more satisfying protocol.Thomas expresses his belief that it will take years for BOLT-12 to become the dominant payment method on Lightning, even after it is merged. However, he thinks that if the proposed feature was adopted in BOLT-11, it could be deployed much faster. He aims to level the field of competition between Lightning service providers with his proposal.Bastien joins the conversation and agrees that having a more satisfying solution than the current one would be great, but urges against rushing it. He suggests building the solution on top of Bolt 12, where they have the opportunity to create something cleaner due to the delivery of invoices on-the-fly and their short-lived nature.In a separate email, Dave proposes an alternative approach to incorporating prepayment into BOLT11 invoices. He suggests using a keysend payment with the onion message payload indicating the payment hash associated with the prepayment. This would eliminate the need for a payment hash in the BOLT11 invoice, reducing its size. Dave suggests extending BOLT11 invoices with an extra_fee_via_keysend field, which could be encoded in existing fields like description or metadata. This would allow for immediate implementation until an updated version of BOLT11 or an alternative using offers becomes widely deployed.Overall, the discussion revolves around the integration of prepayment into the Lightning Network, with different perspectives on the implementation and potential impact on the network.</summary>
    <published>2023-06-20T16:44:17+00:00</published>
  </entry>
</feed>
