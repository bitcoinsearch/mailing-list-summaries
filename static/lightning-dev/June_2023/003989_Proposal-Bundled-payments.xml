<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal: Bundled payments</title>
  <updated>2023-07-10T02:56:27.950511+00:00</updated>
  <author>
    <name>Bastien TEINTURIER 2023-06-20 16:44:17+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal: Bundled payments</title>
    <updated>2023-07-10T02:56:27.950536+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003989.html" rel="alternate"/>
    <summary>In a conversation between Bastien and Thomas, they discuss the combination of pre-payment mining fees with 0-conf in the Lightning Network. Bastien mentions that he doesn't see 0-conf going away even with the introduction of BOLT-12. Thomas seeks clarification on whether bundled payments would work with the current specification or require changes to BOLT-12. Bastien explains that adding a TLV field to Bolt 12 invoices or onion messages would be necessary for bundled payments. He also believes that it will take years for BOLT-12 to become the dominant payment method on Lightning if adopted, but if the feature was implemented in BOLT-11, it could be deployed faster.Thomas suggests that the goal of his proposal is to level the playing field for Lightning service providers. Bastien agrees that a more satisfying solution beyond the current options is desirable but emphasizes the need to build it on top of Bolt 12. He believes that a cleaner solution can be achieved using Bolt 12 since invoices are delivered on-the-fly and short-lived.In another conversation between Thomas and David, they discuss the semantics of bundled payments. Thomas explains that a BOLT-11 invoice for bundled payments contains two preimages and two amounts: prepayment and main payment. The receiver should wait until all HTLCs of both payments have arrived before fulfilling the HTLCs of the pre-payment. If the main payment doesn't arrive, the pre-payment should be failed with an MPP timeout. Once the HTLCs of both payments have arrived, the receiver fulfills the HTLCs of the prepayment and broadcasts the on-chain transaction. However, David suggests an alternative method using keysend payment with the onion message payload to indicate the payment hash for the prepayment. This would require extending BOLT11 invoices with an extra_fee_via_keysend field, which would be smaller and allow for immediate implementation.Overall, the discussions revolve around the combination of pre-payment mining fees with 0-conf, the possibility of bundled payments with BOLT-12, the timeline for adoption of BOLT-12, and the goal of leveling the field for Lightning service providers. There is also a suggestion for an alternative method using keysend payment for prepayment.</summary>
    <published>2023-06-20T16:44:17+00:00</published>
  </entry>
</feed>
