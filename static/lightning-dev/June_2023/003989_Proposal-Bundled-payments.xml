<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal: Bundled payments</title>
  <updated>2023-07-03T03:08:10.283352+00:00</updated>
  <author>
    <name>Bastien TEINTURIER 2023-06-20 16:44:17+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal: Bundled payments</title>
    <updated>2023-07-03T03:08:10.283377+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003989.html" rel="alternate"/>
    <summary>In a conversation between Thomas and Bastien, they discuss the possibility of combining pre-payment of the mining fee with 0-conf. Bastien mentions that even with BOLT-12, he doesn't see 0-conf going away. Thomas then asks if bundled payments would work with the current specification or require changes to BOLT-12. Bastien explains that adding a TLV field to Bolt 12 invoices or onion messages would be necessary for bundled payments. He also believes that a prepayment solution based on Bolt 12 could offer a more satisfying protocol.Bastien expresses his belief that it will take years for BOLT-12 to become the dominant payment method on Lightning, while if the feature was adopted in BOLT-11, it could be deployed faster. However, Thomas questions why it would be faster using BOLT-11, as it would still require software updates and implementers are currently focused on Bolt 12.The goal of Bastien's proposal is to level the field of competition between Lightning service providers. He agrees that a more satisfying solution than the current one would be great, but he thinks it's worth trying to build it on top of Bolt 12 since invoices are delivered on-the-fly and short-lived.In a separate email thread, Thomas discusses the semantics of bundled payments. He explains that a BOLT-11 invoice would contain two preimages and two amounts: prepayment and main payment. The receiver should wait until all the HTLCs of both payments have arrived before fulfilling the HTLCs of the pre-payment. Once the HTLCs of both payments have arrived, the receiver fulfills the HTLCs of the prepayment and broadcasts their on-chain transaction.David responds to Thomas' explanation and suggests using a keysend payment with the onion message payload for the receiver to indicate which payment hash to associate with the prepayment. This would allow for a smaller BOLT11 invoice and could be encoded in an existing field like the description or metadata field. This would allow for immediate implementation until an updated version of BOLT11 becomes widely deployed.Overall, the conversation revolves around the possibility of combining pre-payment with 0-conf and the potential for bundled payments using BOLT-12. Bastien proposes a solution to level the competition between Lightning service providers, while David suggests using keysend payments as an alternative.</summary>
    <published>2023-06-20T16:44:17+00:00</published>
  </entry>
</feed>
