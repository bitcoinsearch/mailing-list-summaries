<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal: Bundled payments</title>
  <updated>2023-07-06T03:00:45.653604+00:00</updated>
  <author>
    <name>Bastien TEINTURIER 2023-06-20 16:44:17+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal: Bundled payments</title>
    <updated>2023-07-06T03:00:45.653631+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003989.html" rel="alternate"/>
    <summary>In the email exchange between Bastien and Thomas, they discuss the use of pre-payment of the mining fee in combination with 0-conf (zero-confirmation) transactions on the Lightning Network. Bastien suggests that even with the introduction of BOLT-12, which is a proposal for a new version of the Lightning Network protocol, he still sees value in using 0-conf transactions. Thomas seeks clarification on whether bundled payments would work with the current BOLT-12 specification or if changes would be required. Bastien explains that adding a TLV (Type-Length-Value) field to Bolt 12 invoices or onion messages would be necessary for bundled payments. He believes that implementing this feature in BOLT-11, the current version of the protocol, could lead to faster deployment compared to BOLT-12. Thomas questions why implementing the feature in BOLT-11 would be faster, as it would still require updates to sender and receiver software. He also mentions that implementers are currently focused on BOLT-12, making it less likely that they will prioritize extensions to BOLT-11. Bastien clarifies that his proposal aims to level the playing field for Lightning service providers, but he believes that building it on top of BOLT-12 would allow for a cleaner and more satisfying solution. In another email thread, Thomas discusses the semantics of bundled payments. He explains that a BOLT-11 invoice for bundled payments would contain two preimages and two amounts: a prepayment and a main payment. The receiver should wait for all HTLCs (Hashed Time-Locked Contracts) of both payments to arrive before fulfilling the HTLCs of the pre-payment. If the main payment does not arrive, the pre-payment should be failed with a MPP (Multi-Path Payments) timeout. Once the HTLCs of both payments have arrived, the receiver fulfills the HTLCs of the prepayment and broadcasts the on-chain transaction. Thomas also addresses whether a BOLT11 invoice is required to contain a payment hash for the prepayment or if a keysend payment could be used instead. He suggests that extending BOLT11 invoices with an extra_fee_via_keysend field would be a smaller solution that allows for immediate implementation until an updated version of BOLT11 or an alternative using offers becomes widely deployed.Overall, the email exchange explores the use of pre-payment in combination with 0-conf transactions and discusses the potential implementation of bundled payments in the Lightning Network protocol. The conversation highlights the advantages of building this feature on top of BOLT-12 and considers alternative solutions using BOLT-11 invoices.</summary>
    <published>2023-06-20T16:44:17+00:00</published>
  </entry>
</feed>
