<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal: Bundled payments</title>
  <updated>2023-07-07T02:52:14.809853+00:00</updated>
  <author>
    <name>Bastien TEINTURIER 2023-06-20 16:44:17+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal: Bundled payments</title>
    <updated>2023-07-07T02:52:14.809879+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003989.html" rel="alternate"/>
    <summary>In a conversation between Thomas and Bastien, the topic of using pre-payment of the mining fee in combination with 0-conf is discussed. Bastien believes that even with BOLT-12, 0-conf will still be relevant and not go away. Thomas seeks clarification on whether bundled payments would work with the current specification or require changes to BOLT-12. He suggests adding a TLV field to Bolt 12 invoices or onion messages to enable bundled payments. Bastien expresses his belief that it will take years for BOLT-12 to become the dominant payment method on Lightning, but if the feature was adopted in BOLT-11, it could be deployed much faster.Thomas raises the goal of leveling the field of competition between Lightning service providers. Bastien agrees that a more satisfying solution should be developed, but emphasizes the importance of not rushing it. He suggests building this solution on top of Bolt 12, where a cleaner approach can be taken since invoices are delivered on-the-fly and short-lived.In another email, Thomas responds to David's suggestion regarding the semantics of bundled payments. Thomas explains that the BOLT-11 invoice would contain two preimages and two amounts: prepayment and main payment. The receiver should wait until all the HTLCs of both payments have arrived before fulfilling the HTLCs of the pre-payment. If the main payment does not arrive, the pre-payment should be failed with a MPP timeout. Once the HTLCs of both payments have arrived, the receiver fulfills the HTLCs of the prepayment and broadcasts their on-chain transaction.David proposes an alternative approach where the prepayment uses a keysend payment with the onion message payload indicating which payment hash to associate with the prepayment. Thomas considers this idea and discusses the possibility of extending BOLT11 invoices with an extra_fee_via_keysend field. This would allow for a smaller invoice size and immediate implementation until an updated version of BOLT11 or an alternative solution becomes widely deployed.Overall, the discussion revolves around the implementation and potential improvements of prepayment solutions in Lightning Network, with considerations for both BOLT-11 and BOLT-12 specifications.</summary>
    <published>2023-06-20T16:44:17+00:00</published>
  </entry>
</feed>
