<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal: Bundled payments</title>
  <updated>2023-07-05T02:52:47.469491+00:00</updated>
  <author>
    <name>Bastien TEINTURIER 2023-06-20 16:44:17+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal: Bundled payments</title>
    <updated>2023-07-05T02:52:47.469524+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003989.html" rel="alternate"/>
    <summary>In this email conversation between Bastien and Thomas, they discuss the use of 0-conf (zero-confirmation) in combination with pre-payment of mining fees in the Lightning Network. Bastien points out that even with BOLT-12, 0-conf can still be used and questions why Thomas sees them as opposed. Thomas clarifies that he was not suggesting they stop using 0-conf, but rather pointing out that if they did, the solution being discussed would not work and they would need to use prepayment instead.Bastien then asks about bundled payments and whether they would require changes to BOLT-12. Thomas explains that bundled payments would require adding a TLV (Type-Length-Value) field to either Bolt 12 invoices or onion messages. He believes that a prepayment solution based on Bolt 12 could offer a more satisfying protocol compared to Bolt 11.Thomas also mentions that it may take years for BOLT-12 to become the dominant payment method on Lightning, while if the feature was adopted in BOLT-11, it could be deployed faster. Bastien questions why Thomas thinks it would be faster using BOLT-11, as it would still require updating sender and receiver software. Additionally, implementers are currently focused on Bolt 12, making it less likely that they will prioritize extensions to Bolt 11.The goal of Bastien's proposal is to level the field of competition between Lightning service providers, and while he agrees that a better solution is needed, he believes it is worth trying to build it on top of Bolt 12. He suggests that a cleaner solution could be achieved since Bolt 12 invoices are delivered on-the-fly and short-lived.In a separate email, David proposes an idea related to prepayment hash. He suggests that the invoice could contain two preimages and two amounts: prepayment and main payment. The receiver would wait for all HTLCs (Hashed Time Lock Contracts) of both payments to arrive before fulfilling the HTLCs of the prepayment. If the main payment does not arrive, they would fail the prepayment with a MPP (Multi-Path Payments) timeout. Once all HTLCs have arrived, the receiver can fulfill the HTLCs of the prepayment and broadcast the on-chain transaction.David then asks if it is necessary for a BOLT11 invoice to contain a payment hash for the prepayment or if a keysend payment could be used instead. He suggests that the prepayment could be sent via keysend with metadata indicating the associated payment hash. This approach would require extending BOLT11 invoices with an extra_fee_via_keysend field. Thomas responds positively to this suggestion and notes that it would be smaller in size and could be implemented immediately using existing BOLT11 fields like description or metadata until an updated version of BOLT11 becomes widely deployed.Overall, this email conversation explores the use of prepayment and bundled payments in the Lightning Network, the compatibility of these solutions with BOLT-11 and BOLT-12, and the potential benefits and challenges associated with each approach.</summary>
    <published>2023-06-20T16:44:17+00:00</published>
  </entry>
</feed>
