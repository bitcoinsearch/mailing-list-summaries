<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal: Bundled payments</title>
  <updated>2023-07-02T03:14:05.135307+00:00</updated>
  <author>
    <name>Bastien TEINTURIER 2023-06-20 16:44:17+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal: Bundled payments</title>
    <updated>2023-07-02T03:14:05.135333+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003989.html" rel="alternate"/>
    <summary>In this email exchange between Thomas and Bastien, they discuss the use of pre-payment of mining fees in combination with 0-conf (zero-confirmation transactions) in the Lightning Network. Bastien clarifies that he did not mean to suggest that pre-payment and 0-conf are opposed, but rather that if 0-conf were to no longer be used, a prepayment solution would be necessary. Thomas asks Bastien about bundled payments and whether they would work with the current specification or if changes to BOLT-12 (the specification for routing payments on the Lightning Network) would be required. Bastien explains that adding a TLV (Type-Length-Value) field to BOLT-12 invoices or onion messages would be necessary for bundled payments. He believes that a prepayment solution based on BOLT-12 has more potential for improvement.Bastien expresses his belief that it will take years for BOLT-12 to become the dominant payment method on Lightning. However, he suggests that if this feature were adopted in BOLT-11 (an older version of the specification), it could be deployed much faster. Thomas questions why Bastien thinks it would be faster with BOLT-11, as it would still require software updates and the focus is currently on BOLT-12.Bastien states that the goal of his proposal is to level the field of competition between Lightning service providers. While he agrees that a more satisfying solution than the current one would be great, he believes it's worth trying to build it on top of BOLT-12, where they can potentially create something cleaner due to the dynamic nature of invoices.In a separate email exchange between Thomas and David, David proposes using keysend payments instead of including a payment hash for prepayment in BOLT11 invoices. Thomas explains that for the feature to be optional, the prepayment amount would need to be subtracted from the main payment amount. He provides an example of how this would work.Overall, the discussion revolves around the potential use of pre-payment in combination with 0-conf and the implementation challenges and possibilities for bundled payments. The focus is on finding a more efficient and satisfying solution for Lightning service providers while considering the specifications of BOLT-11 and BOLT-12.</summary>
    <published>2023-06-20T16:44:17+00:00</published>
  </entry>
</feed>
