<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal: Bundled payments</title>
  <updated>2023-06-30T02:56:59.836661+00:00</updated>
  <author>
    <name>Bastien TEINTURIER 2023-06-20 16:44:17+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal: Bundled payments</title>
    <updated>2023-06-30T02:56:59.836684+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003989.html" rel="alternate"/>
    <summary>In an email exchange between Bastien and Thomas, they discuss the possibility of combining pre-payment of mining fees with 0-conf (zero-confirmation) transactions. Bastien mentions that even with the introduction of BOLT-12, he doesn't see 0-conf going away. Thomas seeks clarification on whether bundled payments would work with the current BOLT-12 specification or if changes would be required. Bastien explains that adding a TLV (Type-Length-Value) field to Bolt 12 invoices or onion messages would be necessary for bundled payments.The conversation then shifts to the adoption and implementation timeline of BOLT-12. Bastien believes that it will take years for BOLT-12 to become the dominant payment method on Lightning Network. However, he suggests that if the proposed feature was adopted in BOLT-11, it could be deployed much faster. Thomas questions the feasibility of using BOLT-11, as it would require software updates and may not be prioritized by implementers focused on BOLT-12.Both agree that leveling the field of competition among Lightning service providers is important, but Bastien emphasizes the need for a well-designed solution rather than rushing the process. He suggests building the solution on top of BOLT-12, where they can develop a cleaner protocol due to the dynamic and short-lived nature of BOLT-12 invoices.In another email thread between Thomas and David, they discuss the semantics of bundled payments. Thomas explains that a BOLT-11 invoice for bundled payments would contain two preimages and two amounts: prepayment and main payment. The receiver must wait for all the HTLCs of both payments to arrive before fulfilling the HTLCs of the pre-payment. If the main payment does not arrive, the pre-payment should be failed with a MPP (Multi-Path Payments) timeout. Once the HTLCs of both payments have arrived, the receiver fulfills the HTLCs of the prepayment and broadcasts the on-chain transaction.David suggests an alternative approach where the prepayment uses a keysend payment with the onion message payload indicating the payment hash to associate with the prepayment. This would require extending BOLT-11 invoices with an extra_fee_via_keysend field. Thomas acknowledges that this approach could save space for the prepayment hash but mentions the need for a feature bit in the invoice to make the prepayment optional or required.The email exchanges are signed off by each participant, and their contact details are provided at the end of the emails.Overall, the conversation revolves around the feasibility, implementation timeline, and potential improvements of bundled payments and the use of prepayments in Lightning Network transactions.</summary>
    <published>2023-06-20T16:44:17+00:00</published>
  </entry>
</feed>
