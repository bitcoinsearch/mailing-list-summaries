<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-06-21T01:27:40.816311+00:00</updated>
  <author>
    <name>callebtc 2023-06-19 15:26:05+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-06-21T01:27:40.816340+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003983.html" rel="alternate"/>
    <summary>In a recent discovery, the LNbits team found an exploit that allowed attackers to create fake balances by abusing a quirk in how invoices are handled. The issue has been patched in LNbits version 0.10.5, and users are urged to update their systems. The attack involved an attacker inserting a bolt-11 payment hash into a different payment to create a malicious invoice. The backend would then believe that the two payments were the same. The attacker could then create a new account and pay the malicious invoice, resulting in the creation of 999 sats. To mitigate this kind of attack, backends should use self-generated unique "checking id's" for looking up internal payments or use additional checks to make sure that the invoice details have not been tampered with. Developers should also be aware that the "payment hash" of an invoice is not a "payment" hash but merely a "preimage" hash â€“ and nothing else. This naming convention could lead developers to assume that the hash commits to payment details like amount and pubkey when it doesn't.</summary>
    <published>2023-06-19T15:26:05+00:00</published>
  </entry>
</feed>
