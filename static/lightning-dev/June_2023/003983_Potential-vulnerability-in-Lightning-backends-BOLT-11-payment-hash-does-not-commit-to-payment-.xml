<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-07-12T02:51:58.855054+00:00</updated>
  <author>
    <name>callebtc 2023-06-19 15:26:05+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-07-12T02:51:58.855092+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003983.html" rel="alternate"/>
    <summary>Last month, the LNbits team discovered an exploit in their system that allowed attackers to create fraudulent balances by exploiting a quirk in how invoices are handled. The team has since released a patch in version 0.10.5 to address this issue and advises users to update as soon as possible. They believe that similar exploits may be possible in other Lightning applications, especially those involving custodial wallets, payment processors, and account management software.The attack involved inserting the payment hash of one invoice into another, creating a malicious invoice that tricks the backend into thinking it's a legitimate payment. The process goes as follows: the attacker creates invoice A with an amount of 1000 sat, then creates invoice B' with an amount of 1 sat on their own node. They then modify B' by inserting the payment hash of A into it, re-sign the invoice, and serialize it again, resulting in the malicious invoice B. The attacker creates a new account in LNbits and pays invoice B. Here's where the exploit occurs: the LNbits backend uses the payment hash of B to determine whether the payment is internal or via the Lightning Network. Since the backend assumes that the payment hash commits to the invoice details, it finds invoice A in its database and settles the payment by crediting A and debiting B. As a result, the attacker effectively "creates" 999 sats.To mitigate this exploit, backends should use self-generated unique "checking id's" for internal payments or implement additional checks to ensure that invoice details haven't been tampered with (e.g., verifying that the amounts match).This incident highlights two important lessons. Firstly, it demonstrates the level of sophistication of attackers familiar with Lightning Network technology. This particular attack required a deep understanding of bolt-11 and custom tooling to produce the malicious invoice. Secondly, it emphasizes the need to clarify the purpose of the "payment hash" field in invoices. It should be referred to as a "preimage" hash, as it only serves to commit to the preimage and not payment details like amount or pubkey.In conclusion, LNbits has addressed the exploit in their latest version and advises users to update promptly. Developers of Lightning applications should be aware of the potential for similar attacks and take appropriate measures to prevent them.</summary>
    <published>2023-06-19T15:26:05+00:00</published>
  </entry>
</feed>
