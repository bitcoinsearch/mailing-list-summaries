<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-06-24T01:46:22.155347+00:00</updated>
  <author>
    <name>callebtc 2023-06-19 15:26:05+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-06-24T01:46:22.155375+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003983.html" rel="alternate"/>
    <summary>In a message to a mailing list, Calle from the LNbits team has announced they discovered an exploit that would enable an attacker to create balances out of thin air. The exploit involves inserting a bolt-11 payment hash of payment A into a different payment, creating a malicious invoice B that can trick the backend into believing that B == A. The attacker then creates a new account and pays B, allowing them to "create" 999 sats. The team has patched this in LNbits version 0.10.5 and urges everyone to update ASAP. They also suggest that those working on custodial wallets, payment processors, account management software, etc. should read the details of the attack. The mitigation for this is quite simple. Backends should either use self-generated unique "checking id's" for looking up internal payments or use additional checks to make sure that the invoice details have not been messed around with. The team also suggests two lessons from this. First, it highlights the level of sophistication of LN-savvy attackers. Second, it emphasizes that the "payment hash" of an invoice is not a "payment" hash but merely a "preimage" hash â€“ and nothing else. Naming this field as such increases the chance of developers implicitly assuming that the hash commits to payment details like amount, pubkey, etc. The team invites people to call this simply the "preimage hash".</summary>
    <published>2023-06-19T15:26:05+00:00</published>
  </entry>
</feed>
