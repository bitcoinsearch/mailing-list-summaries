<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-07-08T02:51:28.059577+00:00</updated>
  <author>
    <name>callebtc 2023-06-19 15:26:05+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-07-08T02:51:28.059601+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003983.html" rel="alternate"/>
    <summary>Earlier last month, LNbits discovered an exploit that allowed attackers to create balances by manipulating invoices. The team has released a patch in version 0.10.5 and urges users to update immediately. This exploit may also be possible in other Lightning applications, making it important for those working on custodial wallets, payment processors, and account management software to take note.The attack involved the insertion of a bolt-11 payment hash from one payment into another, creating a malicious invoice that tricks the backend into thinking they are the same. The process begins with the attacker creating invoice A in LNbits with an amount of 1000 sat. Then, they create invoice B' with an amount of 1 sat on their own node. The attacker proceeds to deserialize B', insert payment_hash(A) into payment_hash(B), re-sign the invoice, and serialize it again, resulting in malicious invoice B. Finally, the attacker creates a new account in LNbits and pays invoice B.The LNbits backend uses payment_hash(B) to determine if the payment is internal or via LN. It finds invoice A in its database because it assumes that payment_hash(A) commits to A. However, it is crucial to note that payment hashes do not commit to payment details like the amount, only to the preimage.To mitigate this issue, backends should use self-generated unique "checking id's" for internal payments or implement additional checks to ensure the invoice details have not been tampered with (e.g., comparing amounts).This incident highlights two lessons. Firstly, it emphasizes the sophistication of LN-savvy attackers and their understanding of bolt-11. This attack required custom tooling to produce the malicious invoice. Secondly, it brings attention to the misconception that the "payment hash" of an invoice represents the payment itself when it actually refers to the preimage. Developers are encouraged to refer to this field as the "preimage hash" to avoid misunderstandings.Overall, it is crucial for users of LNbits and other Lightning applications to update their software promptly and implement necessary precautions to prevent similar exploits.</summary>
    <published>2023-06-19T15:26:05+00:00</published>
  </entry>
</feed>
