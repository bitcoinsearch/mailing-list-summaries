<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-06-23T01:47:24.409202+00:00</updated>
  <author>
    <name>callebtc 2023-06-19 15:26:05+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-06-23T01:47:24.409233+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003983.html" rel="alternate"/>
    <summary>A team at LNbits discovered an exploit that could enable an attacker to create balances by abusing a quirk in how invoices are handled internally. The attacker was able to insert a bolt-11 payment hash of payment A into a different payment, creating a malicious invoice B that can trick the backend into believing that B == A. The attacker then creates a new account and pays B, and the LNbits backend uses payment_hash(B) to check whether this is an internal payment or a payment via LN. The critical part is that payment hashes do not commit to any payment details but only to the preimage. To mitigate this, backends should use self-generated unique "checking id's" for looking up internal payments or use additional checks to make sure that the invoice details have not been messed around with. The attack involves a fundamental understanding of bolt-11 and requires custom tooling to produce the malicious invoice. The "payment hash" of an invoice is not a "payment" hash but merely a "preimage" hash â€“ and nothing else. Developers should be careful not to implicitly assume that the hash commits to payment details like amount, pubkey, etc. It is better to call this simply the "preimage hash."</summary>
    <published>2023-06-19T15:26:05+00:00</published>
  </entry>
</feed>
