<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-07-07T02:56:29.710760+00:00</updated>
  <author>
    <name>callebtc 2023-06-19 15:26:05+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-07-07T02:56:29.710814+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003983.html" rel="alternate"/>
    <summary>Earlier last month, the LNbits team discovered an exploit that allows an attacker to create balances by exploiting a quirk in how invoices are handled internally. This issue has been patched in LNbits version 0.10.5, and users are urged to update their systems as soon as possible. The team wants to share the details of the attack because they believe it may be possible to carry out similar exploits in other Lightning applications, especially those related to custodial wallets, payment processors, and account management software.In summary, the attacker was able to insert a bolt-11 payment hash from one payment into a different payment, creating a malicious invoice that tricks the backend into treating the two payments as equal. The process involves creating two invoices, A and B', where B' is on the attacker's node. The attacker then manipulates B' by inserting the payment hash from invoice A, re-signs it, and serializes it again as the malicious invoice B. The attacker creates a new account in LNbits and pays invoice B. The LNbits backend uses the payment hash from invoice B to determine whether the payment is internal or via Lightning Network. Since the payment hash for invoice B matches invoice A in the database, the backend settles the payment by crediting A and debiting B, effectively "creating" 999 satoshis.To mitigate this issue, backends should either use self-generated unique "checking id's" for internal payment lookups or implement additional checks to ensure that invoice details have not been tampered with, such as comparing the amounts between invoices A and B.The incident highlights two important lessons. Firstly, it demonstrates the sophistication of LN-savvy attackers, as this attack requires a deep understanding of bolt-11 and custom tooling to produce the malicious invoice. Secondly, it emphasizes the misconception around the "payment hash" field in an invoice. It is actually a "preimage" hash and does not commit to payment details like the amount or pubkey. The author suggests referring to this field as the "preimage hash" to avoid developers mistakenly assuming it includes payment details.Overall, it is crucial for developers in the Lightning Network ecosystem to be aware of potential vulnerabilities and take necessary precautions to protect against such exploits.</summary>
    <published>2023-06-19T15:26:05+00:00</published>
  </entry>
</feed>
