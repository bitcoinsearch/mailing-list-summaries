<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal: Bundled payments</title>
  <updated>2023-06-21T00:49:14.526512+00:00</updated>
  <author>
    <name>Olaoluwa Osuntokun 2023-06-14 02:56:54+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal: Bundled payments</title>
    <updated>2023-06-21T00:49:14.526543+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003978.html" rel="alternate"/>
    <summary>The proposal is to extend BOLT-11 to contain two bundled payments with distinct preimages and amounts. The use case is for services that require the prepayment of a mining fee in order for a non-custodian exchange to take place, such as submarine swaps and JIT channels. In Europe, services that ask for the preimage first become custodian and fall within the European MICA regulation. Competitors who refuse to offer custodian services are excluded from the game. The proposal would level the field in terms of competition between lightning service providers. An invoice containing two preimages and two amounts would be sent and the receiver should wait until all the HTLCs of both payments have arrived before fulfilling the HTLCs of the pre-payment. Once both payments arrive, the receiver fulfills the HTLCs of the prepayment, and they broadcast their on-chain transaction. This change should be implemented in BOLT-11 and not using BOLT-12 or onion messages since unnecessary complications will arise. One always requires dedicated logic in order to fully verify the swap parameters and also perform an on-chain sweep/timeout, which is a requirement for a trust-minimized swap. A user can trust the service to just send to the given address or pay an invoice for them, but that's not a trust minimized swap.</summary>
    <published>2023-06-14T02:56:54+00:00</published>
  </entry>
</feed>
