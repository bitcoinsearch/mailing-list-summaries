<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal: Bundled payments</title>
  <updated>2023-07-05T02:52:05.296362+00:00</updated>
  <author>
    <name>Thomas Voegtlin 2023-06-14 08:09:45+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal: Bundled payments</title>
    <updated>2023-07-05T02:52:05.296399+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003979.html" rel="alternate"/>
    <summary>The context discusses the possibility of distributing a submarine swap client separate from the lightning wallet of the user, which would enable competition in the market. The separation between wallet and submarine swap providers could benefit Lightning Loop by increasing its potential user base. However, the only missing ingredient is the bundling of fee prepayment and main payment in the same invoice.It is noted that Boltz, a submarine swap provider, is currently working on adding submarine swaps to the ongoing standardization effort for LSP (Lightning Service Provider) protocols. Boltz's website serves javascript that enables the proper checks and sweep of funds for their submarine swap client. This distribution model allows them to distribute a submarine swap client separate from the user's lightning wallet.In order for a submarine swap client to be properly non-custodial, it needs to be able to unilaterally sweep or timeout an on-chain HTLC (Hashed Time-Lock Contract) and validate all the swap parameters. The context explains that even with web-based flow, dedicated logic on the client side is still required to sweep or timeout the on-chain HTLC. Manual intervention may be needed for users to obtain a signed sweep transaction or refund transaction. This dedicated logic is necessary to fully verify the swap parameters and perform an on-chain sweep or timeout.The proposal made by Thomas Voegtlin suggests an extension to BOLT-11, where an invoice can contain two bundled payments with distinct preimages and amounts. This is aimed at addressing the use case of services that require prepayment of a mining fee for a non-custodian exchange, such as submarine swaps and JIT (Just-In-Time) channels.Currently, submarine swap services like Loop by Lightning Labs can ask for a prepayment because their software can handle it. However, competitors like Boltz, who do not require a dedicated wallet, face difficulties showing two invoices to be paid simultaneously. This vulnerability makes them susceptible to DoS (Denial of Service) attacks where attackers force them to pay on-chain fees.For JIT channels, providers who want to protect themselves against mining fee attacks need to ask for the preimage of the main payment before opening the channel. However, this makes them custodian service providers from a legal perspective. In Europe, such services fall under the European MICA regulation. Competitors like Electrum, who refuse to offer custodian services, are excluded from that game.The proposed solution is to bundle the prepayment and main payment in the same BOLT-11 invoice. The semantics of bundled payments involve waiting for all the HTLCs (Hashed Time-Lock Contracts) of both payments to arrive before fulfilling the HTLCs of the prepayment. If the main payment does not arrive, the prepayment can be failed with a MPP (Multi-Path Payments) timeout. Once the HTLCs of both payments have arrived, the receiver fulfills the HTLCs of the prepayment and broadcasts their on-chain transaction.It is acknowledged that the proposal does not prevent service providers from stealing the prepayment, but this is already a risk in the current system. The suggested change aims to level the field in terms of competition between lightning service providers and make services like ACINQ's pay-to-open fully non-custodial.Thomas Voegtlin believes that the change should be implemented in BOLT-11 rather than using BOLT-12 or onion messages. He argues that new messages should not be added when the desired functionality can be achieved in a non-interactive way.Overall, the context discusses the possibility of distributing a separate submarine swap client, the challenges faced by competitors in requiring prepayments, the need for dedicated logic in validating swap parameters, and the proposal to bundle prepayment and main payment in the same invoice to enhance competition among lightning service providers.</summary>
    <published>2023-06-14T08:09:45+00:00</published>
  </entry>
</feed>
