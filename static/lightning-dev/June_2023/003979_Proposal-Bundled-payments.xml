<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal: Bundled payments</title>
  <updated>2023-06-21T01:22:02.829187+00:00</updated>
  <author>
    <name>Thomas Voegtlin 2023-06-14 08:09:45+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal: Bundled payments</title>
    <updated>2023-06-21T01:22:02.829217+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003979.html" rel="alternate"/>
    <summary>In a proposal to the Lightning-dev mailing list, Thomas Voegtlin suggests extending BOLT-11 to include bundled payments for services that require prepayment of mining fees. These services include submarine swaps and JIT channels, which involve service providers receiving an HTLC for which they do not have the preimage, sending funds on-chain, and waiting for the client to reveal the preimage when they claim the payment. By bundling the prepayment and main payment in the same invoice, the receiver can fulfill the HTLCs of the pre-payment only after all the HTLCs of both payments have arrived. Voegtlin believes this proposal would level the field in terms of competition between lightning service providers and benefit ACINQ by making its pay-to-open service fully non-custodian. Currently, competitors who do not have an established user base running a dedicated client are exposed to the mining fee attack. However, nothing in the proposal prevents the service provider from stealing the pre-payment. Olaoluwa Osuntokun notes that a submarine swap client needs to unilaterally sweep or timeout an on-chain HTLC and validate all the swap parameters to be properly non-custodial. In the case of Boltz, their website serves javascript that does that, and they are also distributing a Progressive Web App. However, it still requires "dedicated logic" on the client side to sweep or timeout the on-chain HTLC. Osuntokun adds that one always requires dedicated logic to fully verify the swap parameters and perform an on-chain sweep/timeout, which is a requirement for a trust-minimized swap. A user can trust the service to just send to the given address or pay an invoice for them, but that's not a trust-minimized swap. There is an ongoing standardization effort for LSP protocols, and Boltz is currently working to add submarine swaps to it.</summary>
    <published>2023-06-14T08:09:45+00:00</published>
  </entry>
</feed>
