<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal: Bundled payments</title>
  <updated>2023-06-30T02:58:17.033529+00:00</updated>
  <author>
    <name>Steve Lee 2023-06-20 17:16:52+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal: Bundled payments</title>
    <updated>2023-06-30T02:58:17.033553+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003992.html" rel="alternate"/>
    <summary>In an email exchange, Thomas Voegtlin proposed an extension to BOLT-11, the Lightning Network protocol. The purpose of this proposal is to address the need for services that require a prepayment of a mining fee in order to facilitate non-custodian exchanges such as submarine swaps and JIT channels. Submarine swaps involve the service provider receiving a Hashed Time-Locked Contract (HTLC) without having the preimage, necessitating on-chain fund transfers and waiting for the client to reveal the preimage upon payment claim. To mitigate the risk of clients not claiming the payment, service providers request prepayment of mining fees. However, certain competitors, like Boltz exchange, cannot ask for prepayment due to using wallets that are agnostic about the swap. This vulnerability exposes them to potential denial-of-service attacks where attackers force them to pay on-chain fees. JIT channels operate similarly, with providers needing the preimage of the main payment before opening the channel to protect against mining fee attacks. However, asking for the preimage before opening the channel makes the service custodian, falling within European regulatory guidelines. This excludes competitors like Electrum, which refuse to offer custodian services, from participating.To address these challenges, Voegtlin proposes bundling the prepayment and main payment in the same BOLT-11 invoice. The semantics of bundled payments involve the invoice containing two preimages and two amounts: prepayment and main payment. The receiver waits for both HTLCs of both payments to arrive before fulfilling the HTLCs of the prepayment. If the main payment fails to arrive, the prepayment is failed with a Multi-Path Payment (MPP) timeout. Once both payments' HTLCs have arrived, the receiver fulfills the prepayment HTLCs and broadcasts the on-chain transaction. While this proposal does not prevent service providers from stealing the prepayment, Voegtlin believes it would level the playing field among lightning service providers.Currently, Loop by Lightning Labs requires a dedicated client to use their service, leaving competitors without an established user base running a dedicated client vulnerable to mining fee attacks. Additionally, ACINQ could benefit from this proposal as it would enable them to make their pay-to-open service fully non-custodian, potentially avoiding regulatory concerns under the European MICA regulation. Voegtlin suggests that this change should be implemented in BOLT-11 and highlights potential benefits for Lightning Labs' Loop service, ACINQ, and Electrum.However, Matt Corallo expresses skepticism about adding new changes to BOLT-11, citing difficulties in achieving broad support for existing BOLT-11 features like amount-less invoices. Corallo also questions the need for the proposed extension given existing features like splice-out and suggests exploring privacy-focused Onion Messages (OMs) for building standardized swap mechanisms.In a mailing list post on the Lightning-dev mailing list hosted by the Linux Foundation, ThomasV proposed a solution for a use case in the Lightning Network without requiring the exchange of new messages. This proposal is in contrast to suggestions that involve using BOLT-12 or onion messages, which ThomasV believes would unnecessarily complicate things. Instead, he advocates for a non-interactive approach. The post was made by ThomasV, who is associated with Electrum Technologies GmbH based in Berlin, Germany. The Lightning-dev mailing list is open to discussions and developments related to the Lightning Network.Overall, ThomasV's proposal suggests an alternative method for addressing a specific use case within the Lightning Network without introducing new messages or utilizing certain existing protocols.</summary>
    <published>2023-06-20T17:16:52+00:00</published>
  </entry>
</feed>
