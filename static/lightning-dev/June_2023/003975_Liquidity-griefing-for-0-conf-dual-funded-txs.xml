<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Liquidity griefing for 0-conf dual-funded txs</title>
  <updated>2023-06-21T01:16:34.825403+00:00</updated>
  <author>
    <name>Bastien TEINTURIER 2023-06-07 09:46:36+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Liquidity griefing for 0-conf dual-funded txs</title>
    <updated>2023-06-21T01:16:34.825436+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003975.html" rel="alternate"/>
    <summary>The introduction of dual funded transactions in lightning has created challenges with protecting against liquidity griefing attacks from malicious peers. The issue arises when a peer goes silent in the middle of an instance of the protocol, locking up liquidity for a small duration. An elegant solution is to never lock utxos used in dual funded transactions, which will automatically re-use the utxos in another instance if a remote node goes silent. However, this solution falls short when using 0-conf, which forces utxos to be locked to avoid accidental double-spending and loss of funds. Nodes offering 0-conf services must ensure that the utxos they use for 0-conf are isolated from those used for non-0-conf to properly lock utxos and prevent accidental double-spending. A "soft lock" can be utilized when selecting utxos for a non 0-conf funding attempt, with 0-conf funding attempts ignoring soft locked utxos while non 0-conf attempts can reuse them. In eclair, opportunistic 0-conf can be used if certain conditions are met, such as receiving `channel_ready` immediately, being the only contributor to the funding transaction, and the transaction not being RBF-ed yet. However, mixing 0-conf and non 0-conf funding attempts can prevent upgrading to 0-conf due to soft locked utxos. A mid-term solution suggested is to use v3 transactions for channel funding and splicing, making them identifiable on-chain. In the longer term, some kind of anti-DoS token will need to be exchanged to avoid these issues, but designing and analyzing such a solution is challenging. It may also be valuable to disable inbound payments or require a longer `cltv_expiry_delta` than usual in case of mempool fee spikes delaying the 0-conf chain confirmation. Long-term solutions to mitigate channel jamming could be deployed by dual-funding market-makers beyond routing hops, utilizing the Staking Credentials framework and privacy-preserving credentials. The dual-funding initiator should pay a fee scale up on the amount of UTXOs contributed and some worst-case liquidity griefing scenario. These solutions could provide good enough protections against liquidity griefing for nodes offering 0-conf services.</summary>
    <published>2023-06-07T09:46:36+00:00</published>
  </entry>
</feed>
