<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Liquidity griefing for 0-conf dual-funded txs</title>
  <updated>2023-07-01T03:09:16.883420+00:00</updated>
  <author>
    <name>Bastien TEINTURIER 2023-06-07 09:46:36+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Liquidity griefing for 0-conf dual-funded txs</title>
    <updated>2023-07-01T03:09:16.883451+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003975.html" rel="alternate"/>
    <summary>In a discussion between Bastien and Antoine, they agree that the usual mempool pinning issues still apply regardless of whether 0-conf (zero-confirmation) is used or not. They believe that solving these issues is necessary in the long run. Bastien suggests using v3 transactions for channel funding and splicing as a reasonable mid-term solution. However, he notes that this would make the transactions identifiable on-chain unless everyone eventually moves to v3 transactions for everything.Antoine raises concerns about liquidity griefing in the context of dual-funding or splicing. He mentions that even with a "soft lock" strategy, where utxos are only locked for non 0-conf funding attempts, there are still vulnerabilities. He explains that a malicious counterparty can pin the transaction in the mempool using sneaky methods like abuse of replacement rule 3. This pinning vector allows the counterparty to batch their pinning against unrelated dual-funding, linked only in the mempool by a malicious pinning child-pays-for-parent (CPFP). Antoine suggests that solutions designed to mitigate channel jamming, such as the Staking Credentials framework, could be deployed to address this issue.Regarding 0-conf, Antoine highlights that it can still be valuable to disable inbound payments or require a longer `cltv_expiry_delta` than usual in case of mempool fee spikes delaying the confirmation on the blockchain. He concludes that liquidity griefing caused by a lack of signature release or mempool manipulation will always be present, even with package relay/nVersion deployment.In the longer term, both Bastien and Antoine acknowledge the need for a more comprehensive solution to prevent liquidity griefing. They suggest exploring options like the Staking Credentials framework or other measures to protect against locking up scarce resources without appropriate fees. Bastien emphasizes the importance of finding ways to offer good enough protections against liquidity griefing for nodes offering 0-conf services, despite the implementation challenges it presents.</summary>
    <published>2023-06-07T09:46:36+00:00</published>
  </entry>
</feed>
