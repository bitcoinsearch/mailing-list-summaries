<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Liquidity griefing for 0-conf dual-funded txs</title>
  <updated>2023-07-03T02:59:09.105329+00:00</updated>
  <author>
    <name>Bastien TEINTURIER 2023-06-07 09:46:36+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Liquidity griefing for 0-conf dual-funded txs</title>
    <updated>2023-07-03T02:59:09.105354+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003975.html" rel="alternate"/>
    <summary>In a discussion between Bastien and Antoine, they address the issue of liquidity griefing in lightning network transactions. Bastien suggests using v3 transactions for channel funding and splicing as a mid-term solution, with the caveat that it makes them identifiable on-chain. He also mentions the need for an anti-DoS token in the longer term but acknowledges the difficulty in designing and analyzing such a solution.Antoine raises concerns about the effectiveness of a "soft lock" strategy in preventing liquidity griefing. He points out that even with soft locks, a malicious counterparty can still pin the transaction in the mempool through sneaky tactics like abuse of replacement rule 3. He suggests that solutions used to mitigate channel jamming, such as the Staking Credentials framework, could be deployed to address this problem.Bastien agrees with Antoine's concerns and proposes disabling inbound payments or requiring a longer `cltv_expiry_delta` for 0-conf transactions in case of mempool fee spikes delaying chain confirmation. He acknowledges that liquidity griefing and mempool funny games will always exist, even with solutions like package relay/nVersion deployment.As a long-term solution, Bastien suggests reusing solutions developed to mitigate channel jamming, such as the Staking Credentials framework. This would involve market-makers paying a fee scale-up based on the amount of UTXOs contributed and implementing privacy-preserving credentials to protect dual-funding initiators' anonymity.In a previous email, Bastien highlights the challenges created by dual funded transactions and the risk of liquidity griefing attacks from malicious peers. He proposes a solution of never locking UTXOs used in dual-funded transactions to prevent remote nodes from locking liquidity. However, he acknowledges that this solution falls short when using 0-conf, as accidental double-spending of a 0-conf channel can result in loss of funds. He also mentions the race scenario where utxos selected for non 0-conf and 0-conf funding attempts can lead to accidental double-spending. To address this, he suggests using a "soft lock" when selecting utxos for non 0-conf funding attempts.Bastien explains that in Eclair, they currently use opportunistic 0-conf by immediately sending `channel_ready` if certain conditions are met. However, with the introduction of non 0-conf funding attempts, the presence of soft locks prevents them from upgrading to 0-conf.In conclusion, Bastien seeks ideas on how to improve the situation and offer better protection against liquidity griefing for nodes offering 0-conf services, acknowledging that 0-conf is a pain point but still popular among users.</summary>
    <published>2023-06-07T09:46:36+00:00</published>
  </entry>
</feed>
