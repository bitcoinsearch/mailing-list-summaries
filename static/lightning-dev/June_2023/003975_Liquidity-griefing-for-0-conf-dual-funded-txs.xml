<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Liquidity griefing for 0-conf dual-funded txs</title>
  <updated>2023-06-24T01:36:50.709133+00:00</updated>
  <author>
    <name>Bastien TEINTURIER 2023-06-07 09:46:36+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Liquidity griefing for 0-conf dual-funded txs</title>
    <updated>2023-06-24T01:36:50.709161+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003975.html" rel="alternate"/>
    <summary>The Lightning Network is a payment protocol that aims to solve scalability issues of the Bitcoin blockchain. The introduction of dual funded transactions in Lightning has created challenges such as liquidity griefing attacks from malicious peers. The issue arises when a remote node goes silent in the middle of an instance of the protocol, resulting in locked and unusable liquidity. A possible solution is to never lock utxos used in dual funded transactions that will automatically be re-used in another instance of the protocol. However, this falls short when using 0-conf because it could result in loss of funds for one of the peers if payments were made on that channel before detecting the double-spend.To avoid this, nodes offering 0-conf services must ensure that the utxos they use for 0-conf are isolated from the utxos they use for non-0-conf. Furthermore, a soft lock can be used when selecting utxos for a non-0-conf funding attempt. 0-conf funding attempts must ignore soft-locked utxos while non-0-conf funding attempts can reuse soft-locked utxos. In Eclair, opportunistic 0-conf is used when the transaction hasn't been RBF-ed yet, the peer doesn't have any input they could use to double-spend, and if they receive `channel_ready` immediately. Still, this cannot be done when mixing 0-conf and non-0-conf funding attempts since the utxos may be soft-locked, preventing them from upgrading to 0-conf. A mid-term solution proposed is to use v3 transactions for channel funding and splicing, making them identifiable on-chain, unless everyone moves to v3 transactions for everything in the longer term. In the longer term, anti-DoS tokens will need to be exchanged to prevent the class of issues arising from mempool pinning vectors. Nodes can also apply policies such as disabling inbound payments or requiring a longer `cltv_expiry_delta` than usual, in case of mempool fee spikes delaying the 0-conf chain confirmation. Finally, long-term solutions to mitigate channel jamming are being explored, such as deploying the Staking Credentials framework by dual-funding market-makers beyond routing hops. The dual-funding initiator should pay to the maker a fee scale up on the amount of UTXOs contributed and some worst-case liquidity griefing scenario. A privacy-preserving credential can be introduced between the payment of the fee and the redeem of the service to unlink dual-funding initiators.</summary>
    <published>2023-06-07T09:46:36+00:00</published>
  </entry>
</feed>
