<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Liquidity griefing for 0-conf dual-funded txs</title>
  <updated>2023-06-22T01:23:30.442696+00:00</updated>
  <author>
    <name>Bastien TEINTURIER 2023-06-07 09:46:36+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Liquidity griefing for 0-conf dual-funded txs</title>
    <updated>2023-06-22T01:23:30.442721+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003975.html" rel="alternate"/>
    <summary>The challenge created by the introduction of dual funded transactions in lightning is how to protect against liquidity griefing attacks from malicious peers. The dual funding protocol starts by exchanging data about the utxos each peer adds to the shared transaction, then exchange signatures and broadcast the resulting transaction. If peers lock their utxos as soon as they've decided to add them to the shared transaction, the remote node may go silent. An elegant solution to this issue is to never lock utxos used in dual funded transactions. But that solution falls short when using 0-conf, because accidentally double-spending a 0-conf channel (because of concurrent instances) can result in loss of funds for one of the peers. Nodes offering 0-conf services expose themselves to liquidity griefing issue. Nodes that want to offer 0-conf channels must ensure that the utxos they use for 0-conf are isolated from the utxos they use for non 0-conf. This can be fixed by using a "soft lock" when selecting utxos for a non 0-conf funding attempt. Eclair is currently doing "opportunistic" 0-conf. Unfortunately, we cannot do that anymore when mixing 0-conf and non 0-conf funding attempts, because the utxos may be soft locked, preventing us from "upgrading" to 0-conf.A mid-term solution could be to use v3 transactions for channel funding and splicing. In the longer term, some kind of anti-DoS token will need to be exchanged to avoid the whole class of issue. Nodes can decide to apply a policy to disable inbound payments or require a longer `cltv_expiry_delta` than usual in case of mempool fee spikes delaying the 0-conf chain confirmation. Beyond, it sounds liquidity griefing provoked by a lack of signature release or mempool funny games will always be there. As a more long-term solution, we might reuse solutions worked out to mitigate channel jamming. The Staking Credentials framework could be deployed by dual-funding market-makers beyond routing hops. The dual-funding initiator should pay to the maker a fee scale up on the amount of UTXOs contributed, and some worst-case liquidity griefing scenario. A privacy-preserving credential can be introduced between the payment of the fee and the redeem of the service to unlink dual-funding initiators.</summary>
    <published>2023-06-07T09:46:36+00:00</published>
  </entry>
</feed>
