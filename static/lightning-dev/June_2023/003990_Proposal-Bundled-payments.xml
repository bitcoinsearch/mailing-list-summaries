<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal: Bundled payments</title>
  <updated>2023-07-03T03:06:47.842148+00:00</updated>
  <author>
    <name>SomberNight 2023-06-20 16:49:05+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal: Bundled payments</title>
    <updated>2023-07-03T03:06:47.842176+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003990.html" rel="alternate"/>
    <summary>One important point to note in this proposal is that there are potentially three different entities involved in these payments, which may not be obvious at first glance. For example, in the submarine swap scenario, there are three entities: the user (Alice), the swap service provider (server), and the payer (Bob).Alice generates an invoice as she wants to receive money on-chain, and Bob wants to pay that invoice via Lightning. To facilitate this, Alice needs client-side logic for doing a swap, and Bob needs to implement a proposal (similar to Thomas') that allows him to parse and pay the new type of Lightning Network (LN) invoice containing two payment hashes.The process involves Alice contacting the swap server with her preimage hash and desired amount, the swap server generating another preimage hash for a small prepayment amount, and creating a lightning invoice that includes both preimage hashes and their corresponding amounts. Alice then checks the invoice and gives it to Bob, who pays the HTLCs (Hashed Time-Locked Contracts) to cover both amounts.The swap server holds the HTLCs until it sees enough offered money for both the prepayment and the main payment. Once this condition is met, the server fulfills the HTLCs for the prepayment and creates a swap funding transaction on-chain. Alice waits for the funding transaction to be mined and then broadcasts a claim transaction using the preimage for the main payment. The server fulfills the still pending HTLCs for the main payment using this preimage.It's worth noting that Bob, as a simple lightning wallet, does not need to know the details of the swap process. All the security checks and swap logic are implemented on Alice's side. However, one drawback is that Bob, paying via lightning, may end up waiting for on-chain transactions to be mined without his knowledge.Additionally, instead of using a special BOLT11 invoice, Alice could create a bip21 URI that contains both an on-chain address and the lightning invoice. This way, Alice would still receive funds on-chain, but Bob would have the option to pay either on-chain or via lightning.Apart from swaps, another use case mentioned is Just-In-Time (JIT) channels. Similar to the swap example, Alice can negotiate with the service provider to have a JIT channel opened to her, and the HTLC forwarded using that channel. Alice can wait for the channel funding to be mined before releasing the preimage for the main payment. Bob is agnostic to what happens between the service provider and Alice, and the only visible aspect for him is the longer time it takes for the HTLC to get fulfilled.Overall, this proposal suggests adding a new feature to BOLT-11 invoices, allowing them to contain two bundled payments with separate preimages and amounts. This feature would enable services like submarine swaps and JIT channels, where prepayment of mining fees is required. The proposed extension could be made optional during a transition period and implemented by various Lightning Network implementations, such as Lightning Labs and ACINQ.In a recent discussion on the Lightning-dev mailing list, ThomasV proposed a solution to address vulnerabilities in the current lightning network system. He highlighted the issue of double-spending attacks, where attackers force service providers like Boltz to pay on-chain fees for multiple invoices simultaneously. To protect against such attacks, ThomasV suggested implementing Just-In-Time (JIT) channels, similar to what Phoenix may already be doing.JIT channels would require providers to ask for the preimage of the main payment before opening the channel, making them custodians of the funds. However, this approach falls under European MICA regulation, which competitors like Electrum refuse to offer. To overcome this, ThomasV proposed bundling the prepayment and main payment in the same BOLT-11 invoice.Under this proposal, the BOLT-11 invoice would contain two preimages and two amounts â€“ one for the prepayment and one for the main payment. The recipient would wait until all the Hashed Time-Lock Contracts (HTLCs) of both payments have arrived before fulfilling the HTLCs of the prepayment. If the main payment fails to arrive, the prepayment would be failed with a MPP timeout. Once both payments' HTLCs are fulfilled, the recipient would broadcast their on-chain transaction.ThomasV acknowledged that this proposal does not prevent service providers from stealing the prepayment, but he believes it would level the playing field for competition among lightning service providers. Currently, Loop requires a dedicated client, leaving competitors without an established user base vulnerable to mining fee attacks. ACINQ could also benefit from this change by making its pay-to-open service fully non-custodian.ThomasV emphasized that this solution should be implemented in BOLT-11 rather than using BOLT-12 or onion messages. He argued that adding new messages would unnecessarily complicate the process, and non-interactive methods should be preferred.Overall, ThomasV's proposal</summary>
    <published>2023-06-20T16:49:05+00:00</published>
  </entry>
</feed>
