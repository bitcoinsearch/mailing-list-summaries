<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal: Bundled payments</title>
  <updated>2023-07-13T02:57:03.339671+00:00</updated>
  <author>
    <name>SomberNight 2023-06-20 16:49:05+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal: Bundled payments</title>
    <updated>2023-07-13T02:57:03.339745+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003990.html" rel="alternate"/>
    <summary>One important point to stress in this proposal is that there are potentially three different entities involved in these payments. In the case of a submarine swap, where a user wants to receive money on-chain via Lightning, there are three entities involved: the user (Alice), a swap service provider (server), and the payer (Bob). This may not be obvious at first glance, but it is an important consideration.For the submarine swap scenario, Alice generates an invoice as she wants to receive money on-chain, and Bob wants to pay that invoice via Lightning. Alice needs client-side logic for doing a swap, while Bob needs to implement a proposal (or equivalent) for parsing an invoice that can convey two payment hashes and corresponding amounts.Using a swap service, Bob could pay Alice so that he pays on Lightning and Alice receives on-chain. The process would involve Alice generating a preimage and calculating its hash for the actual amount she wants to receive. Alice then contacts the swap server, providing the hash and amount. The server generates another preimage and its hash for a small prepayment amount. The server creates a lightning invoice containing both preimages, amounts, and sends it back to Alice.Alice checks the invoice and gives it to Bob. Bob sees the invoice contains two payment hashes and amounts, and sends HTLCs to cover both. The HTLCs arrive at the swap server, who holds them and waits until it sees HTLCs with enough offered money for both the prepayment and the main payment. The server fulfills the HTLCs for the prepayment and creates a swap funding transaction on-chain. Alice sees the swap funding transaction on-chain, validates it, and broadcasts a claim transaction using the preimage for the main payment. The server fulfills the still pending HTLCs for the main payment using this preimage.It's important to note that all the security checks and swap logic are only implemented on Alice's side. Bob, as a simple lightning wallet, only needs the ability to parse and pay this new type of LN invoice containing two hashes. The drawback for Bob is that he expects the payment to go through quickly but may end up waiting for on-chain transactions to be mined.Another option instead of using a special bolt11 invoice, Alice could create a bip21 URI containing both an on-chain address and the lightning invoice. This way, Alice would still receive on-chain, but Bob has the choice of either paying on-chain or via lightning.In addition to swaps, another use case is Just-in-Time (JIT) channels. Similar to the swap example, Alice could negotiate with the service provider to have a JIT channel opened to her, and the HTLC forwarded using that. Alice can wait for the channel funding to be mined before releasing the preimage for the main payment. Bob is completely unaware of what happens between the service provider and Alice and only sees the longer time it takes for the HTLC to get fulfilled.Overall, the proposal suggests adding a new feature to BOLT-11, where an invoice can contain two bundled payments with distinct preimages and amounts. This feature is particularly useful for services that require prepayment of mining fees for non-custodian exchanges, such as submarine swaps and JIT channels. The proposal includes optional fields in the invoice for prepayment amount and prepayment hash, and the decision to make this feature required or optional remains with the service provider.In a recent discussion on the Lightning-dev mailing list, ThomasV proposed a solution to address vulnerabilities faced by Boltz, a lightning service provider, in terms of potential DoS attacks and mining fee attacks. He suggests bundling the prepayment and main payment in the same BOLT-11 invoice to mitigate these risks. By including two preimages and two amounts in the invoice, the receiver can wait for all the HTLCs of both payments to arrive before fulfilling the HTLCs of the pre-payment. If the main payment fails to arrive, the pre-payment can be failed with a MPP timeout. Once the HTLCs of both payments have arrived, the receiver fulfills the HTLCs of the prepayment and broadcasts the on-chain transaction. However, it is important to note that this proposal does not prevent the service provider from stealing the pre-payment, which is already a risk in the current system.ThomasV believes that implementing this change in the BOLT-11 protocol, rather than introducing new protocols like BOLT-12 or onion messages, would simplify the process without requiring additional message exchanges. He argues that this proposal would level the playing field for competition between lightning service providers, as it eliminates the need for a dedicated client to use Loop and protects competitors who do not have an established user base running such clients from mining fee attacks. Additionally, this change could benefit ACINQ by making their pay-to-open service fully non-custodian, potentially avoiding compliance issues with the European MICA regulation.The discussion sparked debate about the legal implications and custodian services</summary>
    <published>2023-06-20T16:49:05+00:00</published>
  </entry>
</feed>
