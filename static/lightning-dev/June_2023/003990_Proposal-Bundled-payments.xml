<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal: Bundled payments</title>
  <updated>2023-07-06T02:59:41.576547+00:00</updated>
  <author>
    <name>SomberNight 2023-06-20 16:49:05+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal: Bundled payments</title>
    <updated>2023-07-06T02:59:41.576586+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003990.html" rel="alternate"/>
    <summary>One important point to consider in the proposed idea is that there are potentially three different entities involved in these payments. This may not be obvious initially, especially in the context of submarine swaps where people typically expect just two entities - the user (customer) and the server (swap provider). However, it is crucial to understand and acknowledge this as a key use case.In the case of a submarine swap scenario, there are three entities involved: Alice (the user with a freshly installed wallet), a swap service provider (server), and Bob (who wants to pay Alice's invoice via Lightning). Only Alice is aware of the swap server's existence.To facilitate the payment, Alice needs client-side logic for the swap, while Bob needs to implement Thomas' proposal or an equivalent solution. This involves parsing an invoice that can convey two payment hashes and their corresponding amounts, with one pair serving as a "prepayment".Using a swap service, Bob can pay Alice using Lightning, where Bob pays on Lightning and Alice receives the payment on-chain. The process involves several steps, including Alice generating a preimage and calculating its hash (RHASH1) for the actual amount she wants to receive. Alice then contacts the swap server, providing RHASH1 and amount1. The swap server generates another preimage and its hash (RHASH2) for the small prepayment amount (amount2). The server creates a lightning invoice containing (RHASH1, amount1) and (RHASH2, amount2), which is sent back to Alice. Alice verifies the invoice and gives it to Bob. Bob sees that the invoice contains two payment hashes and amounts and sends HTLCs to cover both. The HTLCs arrive at the swap server, which holds them until it receives enough offered money for both the prepayment (RHASH2) and the main payment (RHASH1). The server fulfills the HTLCs for the prepayment and creates a swap funding transaction on-chain. Alice waits until the funding transaction gets mined, validates it, and broadcasts a claim transaction using the preimage for RHASH1. The server fulfills the pending HTLCs for RHASH1 using this preimage.It is important to note that Bob is a simple lightning wallet that only needs the ability to parse/pay this new type of LN invoice containing two hashes. All the security checks and swap logic are implemented on Alice's side. However, Bob may experience a delay as he expects the payment to go through quickly on Lightning but ends up waiting for on-chain transactions to be mined.Additionally, instead of using a special bolt11 invoice, Alice could create a bip21 URI containing both an on-chain address and the lightning invoice. This would allow Alice to receive funds either on-chain or via lightning, giving Bob the choice of payment method.Apart from swaps, another use case highlighted is JIT (Just-In-Time) channels. Similar to the swap example, Alice can negotiate with the service provider to have a JIT channel opened, where the HTLC is forwarded. Alice can wait for the channel funding to be mined before releasing the preimage for the main payment (RHASH1) by fulfilling the off-chain HTLC. Bob remains unaware of the details between the service provider and Alice and only experiences the delay in the fulfillment of the HTLC.In conclusion, the proposed extension to BOLT-11 suggests including a feature where an invoice can contain two bundled payments with distinct preimages and amounts. This feature caters to services like submarine swaps and JIT channels, allowing for more flexibility and efficiency in non-custodian exchanges. The implementation requires updates to sender software and introduces additional steps and considerations for both senders and receivers.In a recent discussion on the Lightning-dev mailing list, ThomasV proposed a solution to address vulnerabilities in the Boltz lightning service. Currently, Boltz is susceptible to denial-of-service (DoS) attacks where attackers can force them to pay on-chain fees. To protect against this attack, providers like Phoenix ask for the preimage of the main payment before opening the channel. However, this approach makes them custodians under European regulations.To resolve this issue, ThomasV suggests bundling the prepayment and the main payment in the same BOLT-11 invoice. This would involve including two preimages and two amounts in the invoice. The receiver would wait until all the HTLCs (Hashed Time-Locked Contracts) of both payments have arrived before fulfilling the HTLCs of the pre-payment. If the main payment does not arrive, they would fail the pre-payment with a MPP (Multi-Path Payments) timeout. Once the HTLCs of both payments have arrived, the receiver would fulfill the HTLCs of the prepayment and broadcast their on-chain transaction.ThomasV acknowledges that this proposal does not prevent service providers from stealing the pre-payment, but asserts that it is already a potential risk. He believes that implementing this change in BOLT-11 would level</summary>
    <published>2023-06-20T16:49:05+00:00</published>
  </entry>
</feed>
