<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal: Bundled payments</title>
  <updated>2023-06-30T02:55:28.410367+00:00</updated>
  <author>
    <name>SomberNight 2023-06-20 16:49:05+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal: Bundled payments</title>
    <updated>2023-06-30T02:55:28.410391+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003990.html" rel="alternate"/>
    <summary>The author of the proposal emphasizes that there are potentially three entities involved in these payments, which may not be obvious at first glance. In the submarine swap example, there are three entities: Alice (the user), a swap service provider (server), and Bob (who wants to pay Alice via Lightning). Only Alice knows about the swap server being there. To use a swap service, Alice generates a preimage and calculates its hash (RHASH1) for the actual amount she wants to receive. Alice then contacts the swap server, providing RHASH1 and the corresponding amount. The swap server generates another preimage and its hash (RHASH2) for the small prepayment amount. The swap server creates a lightning invoice containing both sets of hashes and amounts and sends it back to Alice. Alice checks the invoice and gives it to Bob. Bob sees that the invoice contains two payment hashes and amounts, and sends HTLCs to cover both.Instead of the special Bolt11 or Bolt12 invoice, Alice could create a bip21 URI containing both an onchain address and the lightning invoice. This would give Bob the choice to pay onchain or via lightning. Another use case is Just-In-Time (JIT) channels, where Alice could negotiate with the service provider to have a JIT channel opened to her, and the HTLC forwarded using that channel. Alice can wait for the channel funding to be mined before releasing the preimage for the main payment by fulfilling the HTLC offchain. Bob is unaware of what happens between the service provider and Alice and only experiences the delay in the fulfillment of the HTLC.The proposal suggests extending Bolt 11 to include a new feature where an invoice can contain two bundled payments with distinct preimages and amounts. This would cater to services that require prepayment of mining fees for non-custodian exchanges such as submarine swaps and JIT channels. The author believes this change is necessary and feasible, with potential support from Lightning Labs, ACINQ, LDK, and Electrum. However, there may be challenges in getting broad support for the new version of Bolt 11.In a recent email to the Lightning-dev mailing list, ThomasV proposed bundling the prepayment and main payment in the same BOLT-11 invoice to address vulnerability to Denial-of-Service (DoS) attacks faced by Boltz. The proposal outlines the semantics for bundled payments: the BOLT-11 invoice includes two preimages and two amounts, the receiver waits for all the Hashed Time-Locked Contracts (HTLCs) of both payments to arrive before fulfilling the HTLCs of the pre-payment, and once the HTLCs of both payments have arrived, the receiver fulfills the HTLCs of the prepayment and broadcasts their on-chain transaction.ThomasV acknowledges that his proposal does not prevent service providers from stealing the pre-payment but believes that implementing this change in BOLT-11 would level the playing field for competition among lightning service providers. Furthermore, it would enable ACINQ to make their pay-to-open service fully non-custodian, addressing potential regulatory concerns under the European MICA regulation. The proposal does not require the exchange of new messages and suggests implementing the change in BOLT-11 to simplify the process without introducing unnecessary complications.</summary>
    <published>2023-06-20T16:49:05+00:00</published>
  </entry>
</feed>
