<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal: Bundled payments</title>
  <updated>2023-07-01T03:17:01.021018+00:00</updated>
  <author>
    <name>SomberNight 2023-06-20 16:49:05+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal: Bundled payments</title>
    <updated>2023-07-01T03:17:01.021048+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003990.html" rel="alternate"/>
    <summary>One important point to note is that there are potentially three different entities involved in these payments. This may not be obvious at first glance, especially in the case of submarine swaps. In this example, there are actually three entities: the user or customer, the server or swap service provider, and Bob who wants to pay the invoice via Lightning.The user, Alice, generates an invoice and contacts the swap server to initiate the swap process. The server then generates a lightning invoice with two payment hashes and amounts, one being a prepayment. Alice checks the invoice and gives it to Bob. Bob, who is a simple lightning wallet, sees the two payment hashes and amounts and sends HTLCs to cover both. The server holds the HTLCs until it receives enough money for both the prepayment and the main payment, and then fulfills the HTLCs. The server creates a swap funding transaction on-chain and Alice waits for it to get mined. Once it's mined, Alice broadcasts a claim transaction using the preimage for the main payment. Bob is unaware of the swap server and only needs to parse and pay the new type of LN invoice.It's worth mentioning that Bob, paying through Lightning, may experience delays due to waiting for on-chain transactions to get mined, which he is unaware of. Additionally, instead of using a special bolt11 invoice, Alice could create a bip21 URI containing both an on-chain address and the lightning invoice, giving Bob the choice to pay on-chain or via Lightning.Apart from swaps, another use case mentioned is JIT (Just-In-Time) channels. Similar to the swap example, Alice can negotiate with the service provider to have a JIT channel opened to her, and the HTLC forwarded using that channel. Bob remains unaware of the details between the service provider and Alice and only experiences the delay in HTLC fulfillment.In the original email thread, Bastien highlights the importance of senders being aware of the channel creation or splice on the receiver's end. This requires existing software used by senders to be updated. Bastien suggests extending Bolt 12 instead of updating Bolt 11 for this proposal, as it would require new sender code anyway. The three strategies mentioned for providing JIT liquidity involve asking the receiver for a preimage and fee before opening a channel, opening a channel first and then forwarding the HTLC amount minus a fee, or prepaying the fee before opening a channel and forwarding the whole HTLC amount.Regarding the timing of introducing these changes, Thomas Voegtlin believes it is not too late to add a new feature to BOLT-11. He suggests a small change where invoices can contain two bundled payments with distinct preimages and amounts. This feature would be optional during a transition period and could be ignored by senders who do not support it. Thomas provides examples of Lightning Labs potentially offering their Loop service to non-LND users and ACINQ being able to open channels to Phoenix users without requesting the preimage first, which aligns with upcoming regulations. He suggests making this feature required or optional based on the service provider's decision.Matt Corallo expresses concerns about adding new features to BOLT-11, as previous attempts to introduce changes have faced challenges in achieving broad support. Matt questions the need for the proposed feature when splice-out can already address similar requirements and suggests building on OMs (Onion Messages) for more privacy.In conclusion, the proposal suggests extending BOLT-11 to include two bundled payments in an invoice, accommodating services like submarine swaps and JIT channels. The sender's awareness of channel creation or splice is emphasized, and suggestions are made to update either BOLT-11 or introduce the feature in BOLT-12. The potential impact on various implementations and the importance of trust and regulation compliance are also discussed.In a recent discussion on the Lightning-dev mailing list, ThomasV proposed a solution to address vulnerabilities in the Boltz lightning service. Currently, Boltz is vulnerable to Denial of Service (DoS) attacks where attackers can force them to pay on-chain fees. To protect against this attack, ThomasV suggests implementing Just-In-Time (JIT) channels, similar to what Phoenix may already be doing. However, this approach raises legal concerns as it involves custodial services, which fall under European MICA regulation.To overcome these challenges, ThomasV proposes bundling the prepayment and main payment in the same BOLT-11 invoice. This would involve including two preimages and two amounts in the invoice. The receiver would wait for both payments' HTLCs to arrive before fulfilling the prepayment's HTLCs. If the main payment does not arrive, the prepayment can be failed with a MPP timeout. Once the HTLCs of both payments have arrived, the receiver fulfills the HTLCs of the prepayment and broadcasts the on-chain transaction. It's worth noting that the main payment can still fail if the sender never reveals the preimage.While</summary>
    <published>2023-06-20T16:49:05+00:00</published>
  </entry>
</feed>
