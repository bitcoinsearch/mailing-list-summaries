<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal: Bundled payments</title>
  <updated>2023-07-10T02:55:19.345582+00:00</updated>
  <author>
    <name>SomberNight 2023-06-20 16:49:05+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal: Bundled payments</title>
    <updated>2023-07-10T02:55:19.345613+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003990.html" rel="alternate"/>
    <summary>One important point to stress in the context is that there are potentially three entities involved in these payments. This may not be obvious at first, especially in the case of submarine swaps. The three entities are the user (customer), the server (swap service provider), and the payer. It is crucial to understand this as it is a key use case.The proposal mentioned in the email requires senders to be aware that the payment will lead to a channel creation or splice on the receiver's end. This means that existing software used by senders would need to be updated to accommodate this. This is particularly relevant in the case of submarine swaps, where Alice generates an invoice to receive money on-chain and Bob wants to pay that invoice via Lightning.In the scenario of a swap service, Bob can pay Alice so that he pays on Lightning and she receives on-chain. The process involves Alice generating a preimage and calculating its hash for the actual amount she wants to receive. She then contacts the swap server, providing the hash and amount. The server generates another preimage and its hash for a small prepayment amount. The server creates a lightning invoice containing both sets of hashes and amounts and sends it back to Alice. She checks the invoice and gives it to Bob. Bob sees that the invoice contains two payment hashes and amounts and sends HTLCs to cover both. The HTLCs arrive at the swap server, which holds them until it receives enough money for both the prepayment and the main payment. The server fulfills the HTLCs for the prepayment and creates a swap funding transaction on-chain. Alice sees the swap funding transaction and waits for it to be mined before broadcasting a claim transaction using the preimage for the main payment. The server fulfills the still pending HTLCs for the main payment using this preimage.It's worth noting that Bob is a simple lightning wallet and only needs to be able to parse and pay the new type of LN invoice that contains two hashes. The security checks and swap logic are implemented on Alice's side. However, a drawback is that Bob, paying lightning, may expect the payment to go through quickly but will end up waiting for on-chain transactions to be mined.Apart from swaps, another use case mentioned is JIT (Just-in-Time) channels. Alice could negotiate with the service provider to have a JIT channel opened to her, and the HTLC forwarded using that channel. Alice can wait for the channel funding to be mined before releasing the preimage for the main payment by fulfilling the HTLC off-chain. Bob remains oblivious to what happens between the service provider and Alice, only experiencing the delay in the fulfillment of the HTLC.The original message also discusses the proposal to extend BOLT-11 to include a feature where an invoice can contain two bundled payments with distinct preimages and amounts. This feature would cater to services that require prepayment of a mining fee for non-custodian exchanges like submarine swaps and JIT channels. The sender's software would need to support this feature, and it could be made optional during a transition period.In a recent discussion on the Lightning-dev mailing list, ThomasV proposed a solution to address vulnerability to Denial-of-Service (DoS) attacks faced by Boltz, a lightning service provider. The vulnerability arises when providers have to show two invoices for simultaneous payment, leaving them susceptible to forced on-chain fees by attackers.To mitigate this issue, ThomasV suggests implementing bundled payments in BOLT-11 invoices. Under this proposal, the BOLT-11 invoice would contain two preimages and two amounts: a prepayment and the main payment. The receiver of the invoice would wait until all the Hash Time Locked Contracts (HTLCs) for both payments have arrived before fulfilling the HTLCs of the prepayment. If the main payment fails to arrive, the receiver would fail the pre-payment with a Multi-Path Payment (MPP) timeout. Once the HTLCs of both payments have arrived, the receiver fulfills the HTLCs of the prepayment and broadcasts their on-chain transaction. However, there is still a risk that the service provider could steal the pre-payment, although this risk exists even without the proposed change.ThomasV believes that this proposal would level the playing field for competition among lightning service providers. Presently, using Loop requires a dedicated client, which puts competitors without an established user base running a dedicated client at risk of the mining fee attack. Implementing bundled payments in BOLT-11 would also allow ACINQ to make their pay-to-open service fully non-custodian, as their current pay-to-open service falls within the scope of the European MICA regulation.Importantly, ThomasV suggests implementing this change in BOLT-11 rather than introducing new messages through BOLT-12 or onion messages. He argues that adding new messages unnecessarily complicates the process and advocates for a non-interactive solution.Overall, ThomasV's proposal aims to enhance the</summary>
    <published>2023-06-20T16:49:05+00:00</published>
  </entry>
</feed>
