<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal: Bundled payments</title>
  <updated>2023-07-07T02:51:11.076692+00:00</updated>
  <author>
    <name>SomberNight 2023-06-20 16:49:05+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal: Bundled payments</title>
    <updated>2023-07-07T02:51:11.076720+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003990.html" rel="alternate"/>
    <summary>One important point to emphasize is that there are potentially three different entities involved in these payments, as highlighted by the submarine swap example. The entities include the user/customer, the server/swap provider, and the recipient of the payment. This use case is significant and requires updating existing software used by senders.In the submarine swap scenario, there are three entities involved: Alice (the recipient), a swap service provider (server), and Bob (the sender). Only Alice is aware of the presence of the swap server. Alice needs client-side logic for the swap, while Bob needs to implement a proposal (or equivalent) for parsing an invoice containing two payment hashes and corresponding amounts.Using a swap service, Bob can pay Alice using Lightning, where Alice receives the payment on-chain. The process involves generating preimages and their corresponding hashes, creating a lightning invoice with both preimages and amounts, and sending it back to Alice. Alice checks the invoice and gives it to Bob. Bob pays using HTLCs to cover both amounts. The swap server holds the HTLCs until it sees enough money offered for both the prepayment and the main payment. The server fulfills the HTLCs for the prepayment and creates a swap funding transaction on-chain. Alice validates the transaction and broadcasts a claim transaction using the preimage for the main payment. The server fulfills the remaining HTLCs using this preimage.It's worth noting that Bob, as a simple lightning wallet, only needs to parse/pay the new type of LN invoice containing two hashes. All security checks and swap logic are implemented on Alice's side. However, one drawback is that Bob may expect the payment to go through quickly but will end up waiting for on-chain transactions to be mined.Instead of a special bolt11 invoice, Alice could create a bip21 URI containing both an on-chain address and the lightning invoice. This way, Alice can still receive on-chain payments, and Bob has the choice of paying on-chain or via lightning.Another use case is Just-In-Time (JIT) channels. Similar to the submarine swap example, Alice can negotiate with the service provider to have a JIT channel opened to her, and the HTLC forwarded using that channel. Alice can wait for the channel funding to be mined before releasing the preimage for the main payment. Bob, however, remains unaware of the details and only experiences the longer time delay for the HTLC to be fulfilled.In summary, the proposal suggests extending BOLT-11 to include a new feature where an invoice can contain two bundled payments with distinct preimages and amounts. This feature is particularly useful for services like submarine swaps and JIT channels. The sender's software needs to be updated to support this feature.In a recent discussion on the Lightning-dev mailing list, ThomasV proposed a solution to protect lightning service providers from DoS attacks and mining fee attacks. He suggested bundling the prepayment and main payment in the same BOLT-11 invoice.Under this proposal, the BOLT-11 invoice would contain two preimages and two amounts: the prepayment and the main payment. The receiver of the invoice would wait until all the HTLCs (Hash Time Locked Contracts) of both payments have arrived before fulfilling the HTLCs of the pre-payment. If the main payment does not arrive, the pre-payment would be failed with a MPP (Multi-Path Payments) timeout.Once the HTLCs of both payments have arrived, the receiver would fulfill the HTLCs of the prepayment and broadcast their on-chain transaction. However, it is noted that the main payment can still fail if the sender never reveals the preimage of the main payment.The proposal aims to level the playing field in terms of competition between lightning service providers. Currently, using a dedicated client like Loop is necessary, and competitors without an established user base running such a client are vulnerable to the mining fee attack. Implementing this change would also allow ACINQ to make their pay-to-open service fully non-custodian, addressing potential issues with European MICA regulation.ThomasV believes that this change should be implemented in BOLT-11 rather than introducing new messages through BOLT-12 or onion messages. He argues against adding unnecessary complexity and emphasizes the importance of a non-interactive solution.Overall, the proposed bundling of prepayment and main payment in BOLT-11 invoices aims to enhance security for lightning service providers and promote fair competition among them.</summary>
    <published>2023-06-20T16:49:05+00:00</published>
  </entry>
</feed>
