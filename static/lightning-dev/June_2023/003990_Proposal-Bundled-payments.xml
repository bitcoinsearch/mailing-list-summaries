<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal: Bundled payments</title>
  <updated>2023-07-11T02:38:04.218797+00:00</updated>
  <author>
    <name>SomberNight 2023-06-20 16:49:05+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal: Bundled payments</title>
    <updated>2023-07-11T02:38:04.218826+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003990.html" rel="alternate"/>
    <summary>The proposal being discussed in this email thread is an extension to BOLT-11, which suggests adding a new feature to invoices that allows for two bundled payments with distinct preimages and amounts. The purpose of this extension is to cater to services that require a prepayment of a mining fee before a non-custodial exchange can take place, specifically submarine swaps and JIT (Just-in-Time) channels.In the case of submarine swaps, where a user wants to pay via Lightning but the recipient wants to receive the payment on-chain, there are potentially three entities involved: the user (Alice), the swap service provider (server), and the payer (Bob). Alice generates an invoice with a preimage and its hash for the actual amount she wants to receive. She then contacts the swap server, providing the hash and amount. The server generates another preimage and its hash for a small prepayment amount and creates a Lightning invoice containing both sets of hashes and amounts. Alice checks the invoice and gives it to Bob. Bob, as a simple Lightning wallet, sees the two payment hashes and amounts and sends HTLCs to cover both. The swap server holds the HTLCs until it receives enough money for both the prepayment and the main payment. Once received, the server fulfills the HTLCs for the prepayment, creates a swap funding transaction on-chain, and Alice claims the funds using the preimage. Bob, unaware of the on-chain transactions, experiences a delay in the payment going through but does not need to know the details of the swap process.It should be noted that the security checks and swap logic are only implemented on Alice's side, while Bob's wallet simply needs to be able to parse and pay the new type of LN invoice containing two hashes. One drawback is that Bob, expecting a fast Lightning payment, may have to wait for on-chain transactions to be mined without knowing the reason for the delay.Another use case mentioned is JIT channels, where Alice negotiates with the service provider to have a channel opened to her and the HTLC forwarded using that channel. Alice can wait for the channel funding to be mined before releasing the preimage for the main payment. Bob remains unaware of the details and only experiences the delay in HTLC fulfillment.The email also discusses the need for senders to be aware that the payment will lead to a channel creation or splice on the receiver's end, requiring updates to existing software used by senders. It is suggested that extending Bolt 12, which requires new sender code anyway, may make more sense than updating Bolt 11.In conclusion, the proposed extension to BOLT-11 aims to accommodate services that require prepayments of mining fees for non-custodial exchanges. The discussion revolves around the implementation details and considerations for both submarine swaps and JIT channels.In a recent discussion on the lightning-dev mailing list, ThomasV proposed a solution to protect lightning service providers from mining fee attacks. These attacks occur when an attacker forces the provider to pay on-chain fees, leaving them vulnerable. ThomasV suggests implementing bundled payments in BOLT-11 invoices as a way to address this issue.The concept of bundled payments involves including two preimages and two amounts (prepayment and main payment) in the BOLT-11 invoice. The receiver of the invoice would need to wait until all the HTLCs (Hash Time-Locked Contracts) of both payments have arrived before fulfilling the HTLCs of the pre-payment. If the main payment fails to arrive, the pre-payment would be failed with a MPP (Multi-Path Payments) timeout. Once the HTLCs of both payments have arrived, the receiver can fulfill the HTLCs of the prepayment and broadcast their on-chain transaction. However, it is important to note that the main payment can still fail if the sender does not reveal the preimage of the main payment.While this proposal does not prevent the service provider from potentially stealing the pre-payment, ThomasV argues that this risk already exists in the current system. He believes that implementing bundled payments would level the playing field for competition between lightning service providers. Currently, using dedicated clients like Loop is necessary to avoid mining fee attacks, which puts competitors without established user bases at a disadvantage. Additionally, ACINQ, the company behind Phoenix, could benefit from this change as it would allow them to make their pay-to-open service non-custodian, potentially avoiding regulatory issues under the European MICA regulation.ThomasV suggests that this change should be implemented in BOLT-11 rather than using BOLT-12 or onion messages. He argues that adding new messages would unnecessarily complicate the system and that the proposed solution can be achieved in a non-interactive way.Overall, ThomasV's proposal aims to protect lightning service providers from DoS attacks and create a more competitive environment in the lightning network. The discussion on the mailing list provides insights into the potential benefits and considerations of implementing bundled payments in BOLT-11 invoices</summary>
    <published>2023-06-20T16:49:05+00:00</published>
  </entry>
</feed>
