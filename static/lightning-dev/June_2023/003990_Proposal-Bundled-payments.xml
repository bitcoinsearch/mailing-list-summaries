<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal: Bundled payments</title>
  <updated>2023-06-22T01:28:31.805597+00:00</updated>
  <author>
    <name>SomberNight 2023-06-20 16:49:05+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal: Bundled payments</title>
    <updated>2023-06-22T01:28:31.805622+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003990.html" rel="alternate"/>
    <summary>The proposal is to add a new feature to BOLT-11 which would enable an invoice to contain two bundled payments with distinct preimages and amounts. This feature is primarily intended for services that require the prepayment of a mining fee to facilitate non-custodial exchange, such as submarine swaps and JIT channels. The implementation of this feature would allow lightning service providers to protect themselves against DoS attacks that result from multiple invoices being presented for payment simultaneously.There are potentially three different entities involved in these payments, which may not be immediately obvious. For example, in the case of a submarine swap, there are three entities: the user (customer), the server (swap provider), and the person paying the invoice (Bob). Alice, the user, generates the invoice as she wants to receive some money on-chain. Bob, who wants to pay that invoice via Lightning, pays Alice so that he pays on Lightning, and Alice receives on-chain. Bob is completely unaware of what happens between the service provider and Alice.It is suggested that a new feature bit is defined, BUNDLE_PREPAYMENT, and two extra fields be defined: prepayment_amount and prepayment_hash. If the sender supports BUNDLE_PREPAYMENT, they send (amount - prepayment_amount) with payment_hash and prepayment_amount with prepayment_hash. The decision to make this feature required or optional remains with the service provider. Instead of updating BOLT-11, it makes more sense to extend BOLT 12 since all implementations are actively working on this.ThomasV, a developer of Bitcoin Lightning Network, proposed a solution to the vulnerability of Boltz and other Lightning service providers against DoS attack. He suggested bundling prepayment and main payment in the same BOLT-11 invoice. He explained that the receiver should wait until all HTLCs of both payments have arrived before fulfilling the HTLCs of the pre-payment. If the main payment does not arrive, they should fail the pre-payment with a MPP timeout. Once both payments' HTLCs have arrived, the receiver fulfills the HTLCs of the prepayment and broadcasts their on-chain transaction.ThomasV believes that his proposal would level the field in terms of competition among lightning service providers. It would also benefit ACINQ by making its pay-to-open service fully non-custodian. Finally, he suggested implementing this change in BOLT-11 rather than using BOLT-12 or onion messages to avoid adding new messages when things can be done in a non-interactive way.</summary>
    <published>2023-06-20T16:49:05+00:00</published>
  </entry>
</feed>
