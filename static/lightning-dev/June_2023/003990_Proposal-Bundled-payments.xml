<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal: Bundled payments</title>
  <updated>2023-06-28T03:23:48.257097+00:00</updated>
  <author>
    <name>SomberNight 2023-06-20 16:49:05+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal: Bundled payments</title>
    <updated>2023-06-28T03:23:48.257128+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003990.html" rel="alternate"/>
    <summary>In a recent discussion about extending BOLT-11, the Lightning Network protocol, several use cases were explored. The main focus was on two scenarios: submarine swaps and JIT (Just-In-Time) channels. These scenarios involve multiple entities and require certain updates to existing software.In the case of submarine swaps, there are three entities involved: Alice, who wants to receive money onchain, a swap service provider (server), and Bob, who wants to pay Alice via Lightning. Alice generates an invoice with a preimage and its hash for the actual amount she wants to receive. She contacts the swap server, providing the hash and amount. The server generates another preimage and its hash for a small prepayment amount. It creates a lightning invoice with both preimages and amounts and sends it back to Alice. Alice checks the invoice and gives it to Bob. Bob sees the two payment hashes and amounts in the invoice and sends HTLCs to cover both. The swap server holds the HTLCs until it receives enough money for both the prepayment and the main payment. It then fulfills the HTLCs for the prepayment and creates a swap funding transaction onchain. Alice waits for the transaction to be mined and then claims the funds using the preimage. The server fulfills the remaining HTLCs using the preimage.It should be noted that Bob, as a simple lightning wallet, only needs to have the ability to parse and pay this new type of LN invoice containing two hashes. All the security checks and swap logic are implemented on Alice's side. However, Bob may experience delays as he pays via Lightning but ends up waiting for onchain transactions to be mined.Another possibility discussed is the use of JIT channels. Similar to the submarine swap example, Alice could negotiate with the service provider to open a JIT channel to her. The HTLC would be forwarded through this channel. Alice can wait for the channel funding to be mined before releasing the preimage for the main payment. Bob is unaware of the details between the service provider and Alice and only experiences a delay in HTLC fulfillment.The proposal to extend BOLT-11 with a new invoice feature that describes the prepayment of a fee using a different preimage was also discussed. This feature would be optional during a transition period and could be ignored by senders who do not support it. The decision to make this feature required or optional would be up to the service provider.In a recent discussion on the lightning-dev mailing list, ThomasV proposes a solution to address vulnerabilities in Boltz, a lightning service provider. He points out that Boltz is susceptible to denial-of-service (DoS) attacks where attackers force them to pay on-chain fees by presenting two invoices simultaneously. To protect against this attack, ThomasV suggests implementing Just-in-Time (JIT) channels, wherein providers ask for the preimage of the main payment before opening the channel. However, this approach makes the service custodian and subject to European MICA regulation.To overcome this issue, ThomasV proposes bundling the prepayment and main payment in the same BOLT-11 invoice. The semantics of bundled payments involve including two preimages and two amounts in the invoice. The receiver waits for all the HTLCs (Hashed Time Lock Contracts) of both payments to arrive before fulfilling the HTLCs of the pre-payment. If the main payment fails to arrive, the pre-payment is failed with a MPP timeout. Once both payments' HTLCs are received, the receiver fulfills the prepayment's HTLCs and broadcasts the on-chain transaction. Notably, the main payment can still fail if the sender never reveals the preimage.ThomasV acknowledges that this proposal does not prevent service providers from stealing the pre-payment, but he believes it will level the competition among lightning service providers. Currently, Loop, a lightning service provided by ACINQ, requires a dedicated client, leaving competitors without an established user base vulnerable to the mining fee attack. This change would also enable ACINQ to make their pay-to-open service fully non-custodian, addressing potential regulatory concerns under the European MICA regulation.Furthermore, ThomasV suggests implementing the proposed changes in BOLT-11 rather than introducing new messages through BOLT-12 or onion messages. He argues that adding unnecessary complexity through new message exchanges should be avoided, and non-interactive methods should be favored.In conclusion, ThomasV's proposal aims to enhance the security and competition among lightning service providers by bundling prepayment and main payment in BOLT-11 invoices. This approach addresses vulnerabilities and potential regulatory issues while maintaining a non-custodian model. The implementation of these changes would require adjustments to the existing lightning infrastructure.</summary>
    <published>2023-06-20T16:49:05+00:00</published>
  </entry>
</feed>
