<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Proposal: Bundled payments</title>
  <updated>2023-07-29T19:14:57.267060+00:00</updated>
  <author>
    <name>Thomas Voegtlin 2023-06-13 08:10:29+00:00</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2023-06-14 02:56:54+00:00</name>
  </author>
  <author>
    <name>Thomas Voegtlin 2023-06-14 08:09:45+00:00</name>
  </author>
  <author>
    <name>Matt Corallo 2023-06-14 17:28:04+00:00</name>
  </author>
  <author>
    <name>Thomas Voegtlin 2023-06-15 08:22:39+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-06-15 09:01:32+00:00</name>
  </author>
  <author>
    <name>David A. Harding 2023-06-19 20:29:34+00:00</name>
  </author>
  <author>
    <name>Thomas Voegtlin 2023-06-20 07:32:15+00:00</name>
  </author>
  <author>
    <name>Thomas Voegtlin 2023-06-20 08:45:34+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-06-20 16:44:17+00:00</name>
  </author>
  <author>
    <name>SomberNight 2023-06-20 16:49:05+00:00</name>
  </author>
  <author>
    <name>Matt Corallo 2023-06-20 17:00:45+00:00</name>
  </author>
  <author>
    <name>Steve Lee 2023-06-20 17:16:52+00:00</name>
  </author>
  <link href="lightning-dev/June_2023/003977_Proposal-Bundled-payments.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003978_Proposal-Bundled-payments.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003979_Proposal-Bundled-payments.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003980_Proposal-Bundled-payments.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003981_Proposal-Bundled-payments.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003982_Proposal-Bundled-payments.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003985_Proposal-Bundled-payments.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003987_Proposal-Bundled-payments.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003988_Proposal-Bundled-payments.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003989_Proposal-Bundled-payments.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003990_Proposal-Bundled-payments.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003991_Proposal-Bundled-payments.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003992_Proposal-Bundled-payments.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Proposal: Bundled payments</title>
    <updated>2023-07-29T19:14:57.267060+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003977.html" rel="alternate"/>
    <summary>In a proposal by Thomas Voegtlin, an extension to BOLT-11 is suggested to include two bundled payments with distinct preimages and amounts in an invoice. This proposal addresses the use case of services that require prepayment of a mining fee for non-custodial exchanges, such as submarine swaps and JIT channels.Currently, some services can ask for prepayment due to their dedicated client software's ability to handle it. However, competitors like Boltz exchange that do not require a dedicated wallet find it impractical to show two invoices simultaneously to users whose wallets are agnostic about the swap. This vulnerability exposes Boltz to DoS attacks where attackers force them to pay on-chain fees.Similarly, providers of JIT channels who want to protect themselves against mining fee attacks need to ask for the preimage of the main payment before opening the channel. However, this makes their service custodian, subject to legal regulations like the European MICA regulation. Competitors like Electrum, who refuse to offer custodian services, are excluded from this game.To address these issues, Voegtlin proposes bundling the prepayment and main payment in the same BOLT-11 invoice. The semantics of bundled payments involve waiting for all HTLCs of both payments to arrive before fulfilling the HTLCs of the prepayment. If the main payment fails to arrive, the pre-payment is failed with a MPP timeout. Once all HTLCs have arrived, the receiver fulfills the HTLCs of the prepayment and broadcasts the on-chain transaction.Voegtlin acknowledges that this proposal does not prevent service providers from stealing the prepayment but emphasizes that this risk already exists. Implementing this change in BOLT-11 would level the playing field for competition between lightning service providers. It would allow competitors without an established user base running a dedicated client to be protected from mining fee attacks. ACINQ, in particular, could benefit by making their pay-to-open service fully non-custodial and avoiding potential regulatory issues.Voegtlin suggests implementing this change in BOLT-11 rather than using BOLT-12 or onion messages, as it does not require the exchange of new messages and can be done in a non-interactive way.In a recent email exchange, the topic of bundled payments and the semantics of BOLT-11 invoices was discussed between Thomas Voegtlin and Dave. Voegtlin explained that a BOLT-11 invoice for bundled payments contains two preimages and two amounts: a prepayment and a main payment. The receiver should wait for all the HTLCs (Hash Time-Locked Contracts) of both payments to arrive before fulfilling the HTLCs of the pre-payment. If the main payment does not arrive, the receiver should fail the pre-payment with a MPP (Multi-Path Payments) timeout. Once both sets of HTLCs have arrived, the receiver can fulfill the HTLCs of the prepayment and broadcast their on-chain transaction.Dave suggested extending BOLT11 invoices with an extra_fee_via_keysend field, which would make the invoice smaller. This field could be encoded in an existing BOLT11 field like the description or metadata field. This would allow for immediate implementation until an updated version of BOLT11 or an alternative using offers becomes widely deployed.In another email exchange between Thomas and David, they discussed the semantics of bundled payments and the possibility of using keysend payments for the prepayment instead of including it in the BOLT11 invoice. Thomas explained that it would be acceptable to use a keysend payment and proposed extending BOLT11 invoices with an extra_fee_via_keysend field. This approach would be smaller in size and allow for immediate implementation until an updated version of BOLT11 becomes widely deployed.The conversation also involved Bastien TEINTURIER, who highlighted the importance of senders understanding the new fields involved in bundled payments. TEINTURIER suggested extending BOLT-12 instead of updating BOLT-11 since it requires new sender code anyway. He also discussed strategies for providing JIT liquidity and mentioned the use of 0-conf transactions until BOLT-12 is deployed.Overall, the conversation revolved around the possibility of combining pre-payment with 0-conf in Lightning Network, the potential use of bundled payments, and the advantages and challenges of implementing these features in BOLT-12 and BOLT-11. The goal is to provide a more satisfying payment solution and level the competition between Lightning service providers.In another conversation between Thomas and Bastien, they discussed the possibility of combining pre-payment of the mining fee with 0-conf in Lightning Network. Bastien expressed his belief that even with BOLT-12, 0-conf will not be eliminated. Thomas sought clarification on whether bundled payments would work with the current specification or require changes to BOLT-12. Bastien suggested adding a TLV field to Bolt 12 invoices or onion messages to enable bundled payments. He also mentioned that it may take years for B</summary>
    <published>2023-06-13T08:10:29+00:00</published>
  </entry>
</feed>
