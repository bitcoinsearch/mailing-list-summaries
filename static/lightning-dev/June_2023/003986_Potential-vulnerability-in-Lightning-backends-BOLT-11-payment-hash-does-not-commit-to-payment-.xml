<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-06-28T03:44:31.773154+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-19 20:34:10+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-06-28T03:44:31.773184+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003986.html" rel="alternate"/>
    <summary>The email exchange discusses a recently discovered exploit in LNbits, a lightning network application. The exploit allows an attacker to create balances by manipulating invoices. The vulnerability arises from LNBits backend not properly checking the external received HTLC `amount_msat` against the invoice amount for both matching preimage and payment secret. This vulnerability was patched in LNbits version 0.10.5, and users are urged to update their software.The attack involves the attacker creating two invoices, A and B'. The attacker then manipulates invoice B' by inserting the payment hash of invoice A into it, creating a malicious invoice B. The attacker then creates a new account in LNbits and pays invoice B. The LNbits backend, using the payment hash of invoice B, mistakenly identifies it as an internal payment and finds invoice A in its database. As payment hashes only commit to the preimage and not to payment details like the amount, the backend settles the payment by crediting invoice A and debiting invoice B, effectively "creating" 999 satoshis.To mitigate this vulnerability, backends should use self-generated unique "checking ids" for looking up internal payments or implement additional checks to ensure that the invoice details have not been tampered with, such as asserting that the amounts of the invoices match.The email also highlights two lessons learned from this exploit. Firstly, it demonstrates the sophistication of attackers familiar with lightning network technology. This attack requires a deep understanding of bolt-11 and custom tooling to create the malicious invoice. Secondly, it emphasizes that the "payment hash" of an invoice is actually a "preimage" hash and does not commit to payment details like the amount or pubkey. The email suggests calling this field the "preimage hash" to avoid developers implicitly assuming that it includes payment details.Overall, the email serves as a warning to custodial wallet providers, payment processors, and account management software developers to be aware of this vulnerability and take appropriate measures to protect against it. Patch coordination and communication with Lightning implementation maintainers is also recommended for proper security practices.</summary>
    <published>2023-06-19T20:34:10+00:00</published>
  </entry>
</feed>
