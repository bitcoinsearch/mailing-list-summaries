<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-07-01T03:23:41.002969+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-19 20:34:10+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-07-01T03:23:41.003000+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003986.html" rel="alternate"/>
    <summary>The email thread discusses a recent exploit discovered by LNbits that allows an attacker to create balances by manipulating invoices. The exploit has been patched in LNbits version 0.10.5, and the team urges users to update their software. The attack involves inserting a payment hash from one payment into a different payment, tricking the backend into believing they are equal.The attacker creates two invoices, A and B', with different amounts. They then modify invoice B' by replacing its payment hash with the payment hash from invoice A, creating a malicious invoice B. The attacker then creates a new account in LNbits and pays invoice B. The LNbits backend, which checks payment hashes to determine if payments are internal or via the Lightning Network, finds invoice A in its database. However, the critical flaw is that payment hashes only commit to the preimage and not to payment details like amount. As a result, the backend settles the payment internally by crediting invoice A and debiting invoice B, effectively creating 999 satoshis out of thin air.To mitigate this issue, backends should use unique "checking ids" to look up internal payments or implement additional checks to ensure that invoice details have not been tampered with. The email also highlights the sophistication of LN-savvy attackers and emphasizes the need to understand the nature of payment hashes, which are actually preimage hashes and do not commit to payment details.Overall, the email serves as a warning to custodial wallets, payment processors, and account management software developers to be aware of this exploit and take necessary precautions. It also suggests following good disclosure security practices by informing Lightning implementation maintainers about potential security vulnerabilities.</summary>
    <published>2023-06-19T20:34:10+00:00</published>
  </entry>
</feed>
