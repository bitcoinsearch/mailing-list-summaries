<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-06-21T01:27:50.442126+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-19 20:34:10+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-06-21T01:27:50.442153+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003986.html" rel="alternate"/>
    <summary>The report describes an exploit discovered by the LNbits team that allows an attacker to create balances out of thin air by abusing a quirk in how invoices are handled internally. The attacker is able to insert a bolt-11 payment hash of payment A into a different payment, creating a malicious invoice B that can trick the backend into believing that B == A. This is possible because LNBits backend does not check that an external received HTLC `amount_msat` satisfies the invoice amount for both matching preimage and payment secret. Potential safety issues with invoices have been known since CVE-2020-26896. If you're a custodial wallet, payment processor or account management software based on LDK, and you respect the API recommendations of using `create_inbound_payment`, you should not be affected as amount equivalence checks are handled by the implementation.The mitigation suggested is quite simple. Backends should either use self-generated unique "checking id's" for looking up internal payments or use additional checks to make sure that the invoice details have not been messed around with (e.g., asserting amount(A) == amount(B)). The critical part of the attack involves payment hashes not committing to any payment details (like amount) but only to the preimage. This increases the chance of developers implicitly assuming that the hash commits to payment details like amount, pubkey, etc. The report suggests good disclosure security practice, which suggests having previously warned the Lightning implementation maintainers on their respective security communication channels to ease patch coordination if needed with second-line vendors like wallets and processors.</summary>
    <published>2023-06-19T20:34:10+00:00</published>
  </entry>
</feed>
