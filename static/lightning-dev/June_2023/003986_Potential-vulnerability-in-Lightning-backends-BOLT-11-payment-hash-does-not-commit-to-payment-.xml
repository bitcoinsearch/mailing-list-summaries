<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-06-24T01:46:34.353760+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-19 20:34:10+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-06-24T01:46:34.353788+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003986.html" rel="alternate"/>
    <summary>The LNbits team discovered an exploit which allows attackers to create balances out of thin air by abusing a quirk in how invoices are handled internally. In short, the attacker inserts a bolt-11 payment hash of payment A into a different payment, creating a malicious invoice B that can trick the backend into believing that B == A. The mitigation is quite simple. Backends should either use self-generated unique "checking id's" for looking up internal payments or use additional checks to make sure that the invoice details have not been messed around with. If you're working on custodial wallets, payment processors, account management software, etc. and respect the API recommendations of using `create_inbound_payment`, you should not be affected as amount equivalence checks are handled by the implementation. Potential safety issues with invoices have been known since CVE-2020-26896. Good disclosure security practice suggests having previously warned the Lightning implementation maintainers on their respective security communication channels to ease patch coordination if needed with second-line vendors like wallets and processors.It's good to realize the level of sophistication of LN-savvy attackers. This attack clearly involves a fundamental understanding of bolt-11 and requires custom tooling to produce the malicious invoice. The "payment hash" of an invoice is not a "payment" hash but merely a "preimage" hash â€“ and nothing else. Naming this field as such increases the chance of developers implicitly assuming that the hash commits to payment details like amount, pubkey, etc. It is suggested to call this simply the "preimage hash".</summary>
    <published>2023-06-19T20:34:10+00:00</published>
  </entry>
</feed>
