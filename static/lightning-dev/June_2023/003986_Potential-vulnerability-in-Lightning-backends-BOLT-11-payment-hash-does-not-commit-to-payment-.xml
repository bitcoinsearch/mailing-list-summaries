<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-06-30T03:03:24.261298+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-19 20:34:10+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-06-30T03:03:24.261320+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003986.html" rel="alternate"/>
    <summary>LNbits, a Lightning Network application, has patched an exploit that allowed attackers to create balances by manipulating invoices. The exploit involved inserting the payment hash of one payment into a different payment, tricking the backend into thinking they were equivalent. The attacker would create two invoices, one in LNbits and one on their own node, and then modify the second invoice to include the payment hash of the first. When the attacker paid the modified invoice using a new account in LNbits, the backend would mistakenly credit the first invoice and debit the second, effectively creating 999 satoshis out of thin air. To mitigate this type of attack, backends should use unique "checking ids" for internal payments or perform additional checks to ensure the integrity of the invoice details. It is important to note that the "payment hash" of an invoice is actually a "preimage" hash and does not commit to payment details such as the amount or public key. The naming of this field can lead to developers making incorrect assumptions about its functionality. LNbits recommends that custodial wallets, payment processors, and account management software update to the patched version (0.10.5) to prevent exploitation. This attack highlights the sophistication of LN-savvy attackers and the need for increased awareness of potential vulnerabilities within Lightning applications.</summary>
    <published>2023-06-19T20:34:10+00:00</published>
  </entry>
</feed>
