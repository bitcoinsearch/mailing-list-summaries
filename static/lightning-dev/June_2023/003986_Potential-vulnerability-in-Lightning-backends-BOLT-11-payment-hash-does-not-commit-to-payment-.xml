<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-07-07T02:56:45.098251+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-19 20:34:10+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-07-07T02:56:45.098279+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003986.html" rel="alternate"/>
    <summary>The message is a response to a report about a possible attack on LNBits backend. The attack is possible because the backend does not check if an external received HTLC (Hashed Time-Locked Contract) amount satisfies the invoice amount for both matching preimage and payment secret. The sender suggests that custodial wallets, payment processors, and account management software based on LDK (Lightning Development Kit) should not be affected if they use the recommended API method 'create_inbound_payment'. The implementation of this method handles amount equivalence checks.The sender mentions that there have been potential safety issues with invoices since CVE-2020-26896. They also suggest that good disclosure security practice involves previously warning the Lightning implementation maintainers to facilitate patch coordination with second-line vendors like wallets and processors.The context of the original email is the discovery of an exploit in LNbits that allows an attacker to create balances by abusing a quirk in how invoices are handled internally. The exploit has been patched in LNbits version 0.10.5. The sender believes that the same exploit may be possible in other Lightning applications, particularly those related to custodial wallets, payment processors, and account management software.The attack involves the attacker creating two invoices, A and B', and manipulating B' by inserting the payment hash of A. This creates a malicious invoice B that can trick the backend into believing that B is equal to A. The attacker then creates a new account in LNbits and pays invoice B. The backend, using the payment hash of B, mistakenly identifies it as an internal payment and settles it by crediting A and debiting B. As a result, the attacker effectively "creates" 999 sats (satoshis).To mitigate this vulnerability, the sender suggests that backends should use self-generated unique "checking ids" for looking up internal payments or employ additional checks to ensure that the invoice details have not been tampered with, such as asserting the equality of amounts.The sender also provides two lessons from this attack. First, it highlights the level of sophistication of LN-savvy attackers, as the exploit requires a fundamental understanding of bolt-11 (the payment protocol) and custom tooling. Second, the sender emphasizes that the "payment hash" of an invoice should be recognized as a "preimage" hash and not assumed to commit to payment details like amount or pubkey.Overall, the email serves as a warning about the discovered exploit, provides information on how it works, suggests mitigations, and shares important lessons learned from the attack.</summary>
    <published>2023-06-19T20:34:10+00:00</published>
  </entry>
</feed>
