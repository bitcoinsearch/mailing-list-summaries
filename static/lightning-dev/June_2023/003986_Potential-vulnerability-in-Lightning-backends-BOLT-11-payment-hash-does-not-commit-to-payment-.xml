<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-07-11T02:42:46.307804+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-19 20:34:10+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-07-11T02:42:46.307834+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003986.html" rel="alternate"/>
    <summary>The email thread discusses a recently discovered exploit in LNbits, a Lightning Network application. The exploit allows an attacker to create balances by manipulating invoices. LNbits has released a patch for this vulnerability and urges users to update to version 0.10.5. The attack involves inserting the payment hash of one payment into a different payment, tricking the backend into believing that they are the same. This can result in the attacker creating "balances out of thin air."To carry out the attack, the attacker creates two invoices: A and B'. Invoice A is created in LNbits with an amount of 1000 sat, while invoice B' is created on the attacker's own node with an amount of 1 sat. The attacker then modifies invoice B' by inserting the payment hash of invoice A into it. They re-sign the invoice, producing the malicious invoice B. The attacker then creates a new account in LNbits and pays invoice B. The backend uses the payment hash of invoice B to determine whether the payment is internal or via the Lightning Network. Since the payment hash matches invoice A, the backend settles the payment internally by crediting invoice A and debiting invoice B. As a result, the attacker effectively "creates" 999 sats.To mitigate this vulnerability, backends should use unique "checking ids" for looking up internal payments or implement additional checks to ensure that invoice details have not been tampered with (e.g., verifying that the amounts of both invoices match). It is important for developers to understand the sophistication of LN-savvy attackers and not assume that the payment hash commits to payment details like amount or pubkey.Overall, this exploit highlights the need for caution when handling invoices and emphasizes that the payment hash is merely a preimage hash and not a comprehensive representation of payment details.</summary>
    <published>2023-06-19T20:34:10+00:00</published>
  </entry>
</feed>
