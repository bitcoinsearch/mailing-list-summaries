<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Computing Blinding Factors in a PTLC and Trampoline World</title>
  <updated>2023-08-01T01:17:14.393469+00:00</updated>
  <author>
    <name>ZmnSCPxj 2023-07-04 20:55:34+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-07-03 12:25:57+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-06-28 20:34:37+00:00</name>
  </author>
  <link href="lightning-dev/July_2023/004003_Computing-Blinding-Factors-in-a-PTLC-and-Trampoline-World.xml" rel="alternate"/>
  <link href="lightning-dev/July_2023/004002_Computing-Blinding-Factors-in-a-PTLC-and-Trampoline-World.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003999_Computing-Blinding-Factors-in-a-PTLC-and-Trampoline-World.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Computing Blinding Factors in a PTLC and Trampoline World</title>
    <updated>2023-08-01T01:17:14.393469+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004003.html" rel="alternate"/>
    <summary>Bastien and ZmnSCPxj engaged in a discussion regarding a proposal for a schnorr multi-hop locks mechanism. Bastien was confused because ZmnSCPxj's proposal differed from the one specified in the latest schnorr multi-hop locks proposal found in [1]. However, ZmnSCPxj argued that their proposal was simply a restatement of the same scheme. Bastien pointed out that using a trampoline did not seem to impact the protocol when using the construction from [1]. The sender would follow the exact steps of the protocol and send the left/right locks in the trampoline onion. Surprisingly, ZmnSCPxj did not expect the left and right locks to be sent. They believed that since the PTLC (Payment-Point Lock Contract) arrived at the trampoline node and served as the left lock, only the delta scalar between its left and right locks needed to be sent to the trampoline node. ZmnSCPxj explained that their scheme allowed implementations to define a function called `buildPath`, which took inputs such as a random source, gossip map, final or next trampoline payment point, final hop or next trampoline hop, and delta scalar. This function used a pathfinding algorithm to generate a raw path, generated a new scalar for each hop, decorated the path with the generated scalars, took the sum, and subtracted it from the input delta scalar to generate the first hop scalar. This scalar was then added to the input final or next trampoline payment point (after multiplication by `G`) to obtain the output PTLC point. The last hop was decorated with the delta scalar. For a flat payment function, the payment function could generate its own delta scalar for each attempt and pass the paths as-is to the onion encoder. The same `buildPath` function could also be used by a trampoline node. The trampoline node would simply pass in the received delta scalar from the input onion. Additionally, a payment function through trampoline nodes could reuse the same function by assigning individual deltas to be sent to each trampoline node selected by the pathfinding algorithm. In summary, ZmnSCPxj's proposal for a schnorr multi-hop locks mechanism was a variation that allowed flexibility and reusability of the `buildPath` function. It simplified the process by eliminating the need to send left and right locks when using a trampoline node.Moving on to another conversation between Bastien and ZmnSCPxj, Bastien expressed confusion about ZmnSCPxj's use of a different mechanism in the schnorr multi-hop locks proposal. Bastien referred to a construction from a specific source [1] and believed that using a trampoline did not impact the protocol. He suggested creating a diagram to illustrate this concept if needed. ZmnSCPxj responded by providing a mathematical demonstration of computing blinding factors in a way that met certain conditions. These conditions included the ultimate receiver and non-Trampoline intermediate nodes only needing to know one blinding factor each, and Trampoline nodes being able to provide blinding factors to sub-routes without revealing their role as trampolines. ZmnSCPxj started with a simple case where the ultimate sender was directly connected to the ultimate receiver. The ultimate sender chose a random error blinding factor and constructed an onion that could be decrypted by the ultimate receiver. The sender also offered a PTLC with a specific point. The ultimate receiver could claim the PTLC by revealing a certain value and learn the error blinding factor from the onion. ZmnSCPxj then extended the scenario to include an intermediate node, Carol. In this case, the ultimate sender needed to generate two additional scalars, c and d, such that their sum equaled the error blinding factor. The ultimate sender encrypted the onion with the error blinding factor for the ultimate receiver and the other scalar for Carol. Each non-Trampoline intermediate node added its per-hop blinding factor to the input point and passed it to the next hop. Furthermore, ZmnSCPxj introduced a scenario where Carol was a Trampoline node and the ultimate sender did not provide a detailed route from Carol to the next Trampoline hop. The ultimate sender selected a random error blinding factor and created a Trampoline-level onion with encrypted values for the ultimate receiver, Carol, and the next Trampoline hop. Carol decrypted the onion, found a route to the ultimate receiver, and created a new onion for the next hop. The ultimate receiver could not differentiate whether it was reached via a Trampoline, a non-Trampoline intermediate node, or directly. In both scenarios, every intermediate node had enough data to claim its incoming PTLC, but only the ultimate sender knew the necessary information to recover the original secret.In this discussion, ZmnSCPxj presented a mathematical demonstration of a method to compute blinding factors for onion routing. The objective was to</summary>
    <published>2023-07-04T20:55:34+00:00</published>
  </entry>
</feed>
