<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Computing Blinding Factors in a PTLC and Trampoline World</title>
  <updated>2023-07-11T02:44:21.365034+00:00</updated>
  <author>
    <name>ZmnSCPxj 2023-06-28 20:34:37+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Computing Blinding Factors in a PTLC and Trampoline World</title>
    <updated>2023-07-11T02:44:21.365062+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003999.html" rel="alternate"/>
    <summary>In this discussion, the author presents a mathematical demonstration of a method to compute blinding factors in a way that allows for efficient routing and privacy in payment channels.The demonstration begins with the ultimate receiver having a secret value `r`. The ultimate receiver provides the ultimate sender with the point `R = r * G`, where `G` is a generator point on a curve.In the simplest case where there are no intermediate nodes, the ultimate sender chooses a random scalar `e` as the error blinding factor. It constructs an onion with `e` encrypted for the ultimate receiver and offers a PTLC (Point-Time Locked Contract) with the point `e * G + R`. The ultimate receiver can claim the PTLC by revealing `e + r`.When an intermediate node, Carol, is introduced, the ultimate sender still chooses a random scalar `e`, but also generates two scalars `c` and `d` such that `c + d = e`. The onion now includes `e` encrypted for the ultimate receiver and `d` encrypted for Carol. Carol receives `c * G + R`, adds `d * G`, and sends a PTLC with the point `c * G + R + d * G`. In this case, the ultimate receiver cannot distinguish whether it received the payment from Carol or directly.If Carol is a Trampoline node and the ultimate receiver is the final Trampoline hop, the ultimate sender still learns `R` and selects a random `e`. It then selects `c` and `d` such that `c + d = e`. The onion now includes `e` encrypted for the ultimate receiver and `d` encrypted for Carol, along with the next Trampoline hop encrypted for Carol. Carol decrypts the onion, obtains `d`, and searches for a route to the ultimate receiver. Let's say the route is Carol -&gt; Alice -&gt; ultimate receiver. Carol generates an onion with `b` encrypted for Alice and sends a PTLC with the point `c * G + R + a * G` to Alice. Alice decrypts the onion, obtains `b`, and forwards the PTLC to the ultimate receiver. In this case as well, the ultimate receiver cannot differentiate between receiving the payment through a Trampoline node or directly.In both cases, every intermediate node has enough information to claim its incoming PTLC, but only the ultimate sender knows `c`, allowing it to recover the secret `r`.This demonstration shows a method for efficient and private routing in payment channels by using blinding factors and encryption techniques.</summary>
    <published>2023-06-28T20:34:37+00:00</published>
  </entry>
</feed>
