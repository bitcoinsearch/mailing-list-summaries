<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Computing Blinding Factors in a PTLC and Trampoline World</title>
  <updated>2023-07-06T03:07:45.795279+00:00</updated>
  <author>
    <name>ZmnSCPxj 2023-06-28 20:34:37+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Computing Blinding Factors in a PTLC and Trampoline World</title>
    <updated>2023-07-06T03:07:45.795319+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003999.html" rel="alternate"/>
    <summary>In this mathematical demonstration, the author explains a method for computing blinding factors in a way that allows for secure communication between different nodes. The goal is to ensure that non-Trampoline intermediate nodes only need to know one blinding factor, the receiver only needs to know one blinding factor, and Trampoline nodes can provide blinding factors without revealing that they are on a trampoline route.The demonstration begins with an ultimate receiver who has a secret value 'r'. This receiver gives the sender a point 'R' which is equal to 'r * G', where G is a predefined constant. In the simplest case where there are no intermediate nodes, the sender chooses a random scalar 'e' as the error blinding factor and constructs an onion with 'e' encrypted for the receiver. The sender also offers a PTLC (Payment-Triggered Contract) with the point 'e * G + R'. The receiver can claim this PTLC by revealing 'e + r' since it knows 'e' from the onion and knows 'r' from the contract.However, when an intermediate node, Carol, is introduced, the sender needs to generate two scalars, 'c' and 'd', such that 'c + d = e'. This can be achieved by selecting a random 'd' and computing 'c = e - d'. The sender encrypts 'e' for the receiver and 'd' for Carol in the onion. The sender then sends a PTLC with the point 'c * G + R' to Carol.Each non-Trampoline intermediate node adds its per-hop blinding factor times 'G' to the input point and uses the result as the output point to the next hop. In this case, Carol receives 'c * G + R', adds 'd * G' received from the onion, and sends a PTLC with the point 'c * G + R + d * G'. Since 'e = c + d', the PTLC sent by Carol is equivalent to '(c + d) * G + R' which is equal to 'e * G + R'.When the receiver releases 'e + r', Carol can compute 'c + r' by taking 'e + r - d'. Carol can then claim the incoming 'c * G + R' with scalar 'c + r'. Since Carol only knows 'd' and not 'c', it cannot compute 'r'.In the case where Carol is a Trampoline node and the sender does not provide a detailed route from Carol to the next Trampoline hop, the sender still selects 'e', 'c', and 'd' as before. However, the sender now creates a Trampoline-level onion with 'e' encrypted for the receiver and 'd' and the next Trampoline hop encrypted for Carol. The sender sends a PTLC with this onion and the point 'c * G + R' to Carol.Carol decrypts the onion and obtains 'd'. It then searches for a route from itself to the ultimate receiver. Once a route is found (e.g., Carol -&gt; Alice -&gt; ultimate receiver), Carol needs to make 'c * G + d * G + R' reach the ultimate receiver. Carol achieves this by selecting two scalars, 'a' and 'b', such that 'a + b = d'. Carol creates an onion with the ciphertext from the sender, 'd' encrypted for Alice, and 'b' encrypted for Alice. Carol sends a PTLC with the point 'c * G + R + a * G' to Alice.Alice decrypts the onion and learns 'b'. Alice then gives the PTLC with the point 'c * G + R + a * G + b * G' to the next hop, the ultimate receiver. Note that 'a + b = d' and 'c + d = e', so the ultimate receiver still sees 'e * G + R' regardless of whether it was reached via a Trampoline or non-Trampoline intermediate node.In claiming, every intermediate node has enough data to claim its incoming PTLC. Only the ultimate sender knows 'c', which allows it to recover the 'r'.This demonstration showcases a method for secure communication between different nodes while maintaining privacy and anonymity.</summary>
    <published>2023-06-28T20:34:37+00:00</published>
  </entry>
</feed>
