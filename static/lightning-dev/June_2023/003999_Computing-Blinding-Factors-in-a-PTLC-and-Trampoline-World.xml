<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Computing Blinding Factors in a PTLC and Trampoline World</title>
  <updated>2023-07-02T03:23:05.539869+00:00</updated>
  <author>
    <name>ZmnSCPxj 2023-06-28 20:34:37+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Computing Blinding Factors in a PTLC and Trampoline World</title>
    <updated>2023-07-02T03:23:05.539895+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003999.html" rel="alternate"/>
    <summary>In this discussion, the author presents a mathematical demonstration of a method for computing blinding factors in a way that allows for efficient and secure routing in a network. The goal is to ensure that each node in the network only needs to know one blinding factor, while still maintaining privacy and security.The demonstration starts with the assumption that there is an ultimate receiver with a secret value 'r'. This receiver provides a point 'R' to the ultimate sender, which is equal to 'r' multiplied by a generator point 'G'.In the simplest case where there are no intermediate nodes, the ultimate sender chooses a random scalar 'e' as the error blinding factor and constructs an onion with 'e' encrypted to the ultimate receiver. The ultimate sender also offers a PTLC (Payment-Time Lock Contract) with the point 'e * G + R' to facilitate payment.To claim the PTLC, the ultimate receiver reveals 'e + r', as it learns 'e' from the onion and knows 'r'. This proves that the receiver has fulfilled the contract by providing 'r' in exchange for payment.Next, the discussion considers the case where there is an intermediate node, named Carol, between the ultimate sender and receiver. In this scenario, the ultimate sender still chooses a random error scalar 'e' but also generates two scalars, 'c' and 'd', such that 'c + d = e'. By encrypting 'e' to the ultimate receiver and 'd' to Carol, the ultimate sender creates an onion.When Carol receives the onion, it adds its per-hop blinding factor times 'G' to the input point and sends a PTLC with the point 'c * G + R + d * G' to the next hop. Importantly, the PTLC sent by Carol can be rearranged as '(c + d) * G + R', which is equivalent to 'e * G + R'. This means that the ultimate receiver cannot determine whether it received the payment from Carol or a further node, as both cases result in the same point 'e * G + R'.To claim the PTLC, Carol can compute 'c + r' by taking 'e + r - d', and since 'c = e - d', the computation simplifies to 'c + r'. However, Carol does not know 'c', only 'd', so it cannot compute 'r'.Finally, the discussion explores the scenario where Carol is a Trampoline node and the ultimate sender does not provide a detailed route from Carol to the next Trampoline hop. The ultimate sender still learns 'R' and selects a random 'e'. It then encrypts 'e' to the ultimate receiver and 'd' along with the next Trampoline hop to Carol.Carol decrypts the onion, obtaining 'd', and searches for a route from itself to the ultimate receiver. Once Carol finds a route, let's say Carol -&gt; Alice -&gt; ultimate receiver, it needs to make the point 'c * G + d * G + R' reach the ultimate receiver. To achieve this, Carol selects two scalars, 'a' and 'b', such that 'a + b = d', and creates an onion with 'b' encrypted to Alice.Alice decrypts the onion and learns 'b'. She then forwards the PTLC with the point 'c * G + R + a * G + b * G' to the next hop, the ultimate receiver. By carefully constructing the onions and using the properties of scalar multiplication, it can be shown that the ultimate receiver receives the same point 'e * G + R' regardless of whether it was reached via a Trampoline node, a non-Trampoline intermediate node, or directly.In conclusion, this mathematical demonstration shows a method for computing blinding factors that enables efficient and secure routing in a network. It ensures that each node only needs to know one blinding factor, while maintaining privacy and security throughout the process.</summary>
    <published>2023-06-28T20:34:37+00:00</published>
  </entry>
</feed>
