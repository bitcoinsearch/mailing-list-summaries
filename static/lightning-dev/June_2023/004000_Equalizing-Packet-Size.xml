<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Equalizing Packet Size</title>
  <updated>2023-07-05T02:58:52.680385+00:00</updated>
  <author>
    <name>ZmnSCPxj 2023-06-29 18:13:10+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Equalizing Packet Size</title>
    <updated>2023-07-05T02:58:52.680424+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/004000.html" rel="alternate"/>
    <summary>Recently, it has been discovered that even with Noise encryption, a third-party eavesdropper can determine the content of messages being sent between Lightning Network (LN) nodes by analyzing the sizes of IP packets transmitted between them. This poses a threat to the privacy and security of payments being routed across the network. To address this issue, a solution is proposed to ensure that all packet sizes are the same.The BOLT8 specification, which is built on top of TCP, presents the receiver with a stream of bytes, although the actual underlying IP is packetized. Most implementations have an object or similar software construction responsible for encrypting messages for BOLT8 tunnels. To enhance privacy, this object can be transformed into a "buffer" in addition to its role as a tunnel encrypter.The interface of this object would include entry points for sending BOLT8 messages and flushing the buffer. The object would maintain an internal buffer of fixed size, which would be filled with ciphertext from the "send BOLT8 message" interface. When the buffer reaches its capacity, the object would use the POSIX `send` API to send it as a packet, ensuring that packets are of fixed size.The "flush" entry point would examine the level of filling in the buffer and add a `pong` message to pad it until the entire buffer is full. It should handle the scenario where the buffer is almost full and adding the mandatory 2-byte message length and 2-byte message ID would cause an overflow.Since the object inserts `pong` messages, it cannot be a simple buffer; it must modify the encryptor state by inserting the `pong` message into the stream of BOLT8 messages. This approach allows a sequence of `update_add_htlc`s followed by a `commitment_signed` to potentially be combined into a single fixed-size packet or a series of fixed-size packets. The implementation must then invoke the "flush" entry point to ensure that the counterparty receives the complete tail end of the `commitment_signed`.To enhance robustness and defensive programming, the object could include a randomized timer where it periodically triggers a self-flush. This serves as a safeguard against bugs in the implementation that may fail to properly initiate flushing when waiting for a response from the counterparty. By addressing such bugs, they are transformed from interop bugs into performance bugs.It is suggested that the buffer size be aligned with the packet size of `update_add_htlc` to optimize latency, as this size is expected to fit within a single IP packet.Regards,ZmnSCPxj</summary>
    <published>2023-06-29T18:13:10+00:00</published>
  </entry>
</feed>
