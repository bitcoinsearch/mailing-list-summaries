<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Equalizing Packet Size</title>
  <updated>2023-07-07T02:59:10.816739+00:00</updated>
  <author>
    <name>ZmnSCPxj 2023-06-29 18:13:10+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Equalizing Packet Size</title>
    <updated>2023-07-07T02:59:10.816770+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/004000.html" rel="alternate"/>
    <summary>Recently, it has been highlighted that even with Noise encryption, a third-party eavesdropper can make educated guesses about the messages being exchanged between Lightning Network (LN) nodes by analyzing the sizes of IP packets transmitted between them. This poses a potential threat to the privacy and security of payment routing across the network.To address this issue, it is proposed to ensure that all packet sizes are uniform. The BOLT8 specification, which builds on top of TCP, treats the receiver's perspective as receiving a stream of bytes despite the underlying IP being packetized.Most implementations of LN have an object or software construction responsible for encrypting messages for BOLT8 tunnels. To enhance privacy, this object can be modified to include a "buffer" functionality in addition to its tunnel encryption capabilities.The interface of this object would have two entry points: "send BOLT8 message" and "flush". The object would maintain an internal buffer of fixed size, into which it would fill ciphertext obtained from the "send BOLT8 message" interface. Once the buffer is full, the object would utilize the POSIX `send` API to transmit the data as a packet. This ensures that packets sent have a consistent size.The "flush" entry point monitors the buffer's fill level and adds a `pong` message as padding until the buffer reaches its maximum capacity. It should handle the edge case where the buffer is just filled enough that the mandatory 2-byte message length and 2-byte message ID would overflow the buffer.Since the object inserts `pong` messages, it cannot function solely as a simple buffer. It must also modify the encryptor state by inserting the `pong` message into the stream of BOLT8 messages.This approach enables the possibility of combining a sequence of `update_add_htlc` messages followed by a `commitment_signed` message into a single fixed-size packet or a sequence of fixed-size packets. The implementation needs to invoke the "flush" entry point to ensure that the counterparty receives the complete tail end of the `commitment_signed` message.To enhance robustness against internal bugs and practice defensive programming, the object could incorporate an individual randomized timer. This periodic timer would trigger the object to perform a "flush" on itself, even if the implementation fails to do so when waiting for a response from the counterparty. This safeguards against potential bugs, shifting them from interop issues to performance concerns.It is recommended that the buffer size align with the packet size of `update_add_htlc`, as this is expected to fit within a single IP packet, offering optimal latency.Overall, implementing a buffer functionality in the encryption object used for BOLT8 tunnels can help mitigate the risk of third-party eavesdroppers deducing information about messages exchanged between LN nodes based on packet sizes.</summary>
    <published>2023-06-29T18:13:10+00:00</published>
  </entry>
</feed>
