<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - PTLCs early draft specification</title>
  <updated>2023-06-03T06:47:36.892905+00:00</updated>
  <author>
    <name>ZmnSCPxj 2021-12-07 00:08:24</name>
  </author>
  <author>
    <name>ZmnSCPxj 2021-12-07 08:04:09</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2021-12-08 10:00:18</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2021-12-08 15:02:02</name>
  </author>
  <author>
    <name>Anthony Towns 2021-12-09 05:00:16</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2021-12-06 17:21:12</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2021-12-07 13:11:00</name>
  </author>
  <author>
    <name>Lloyd Fournier 2021-12-09 01:34:00</name>
  </author>
  <author>
    <name>Anthony Towns 2021-12-19 22:23:44</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2021-12-21 15:25:41</name>
  </author>
  <author>
    <name>Anthony Towns 2021-12-21 16:04:03</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2021-12-22 08:02:23</name>
  </author>
  <author>
    <name>Lloyd Fournier 2021-12-07 06:09:06</name>
  </author>
  <author>
    <name>ZmnSCPxj 2021-12-07 23:52:04</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2021-12-08 08:40:35</name>
  </author>
  <author>
    <name>Anthony Towns 2021-12-08 09:28:53</name>
  </author>
  <link href="lightning-dev/Dec_2021/003378_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003380_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003387_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003389_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003394_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003377_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003381_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003393_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003429_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003433_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003434_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003435_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003379_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003382_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003385_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003386_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - PTLCs early draft specification</title>
    <updated>2023-06-03T06:47:36.893906+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-December/003378.html" rel="alternate"/>
    <summary>In a mailing list conversation, it was pointed out that the final message "Bob -&gt; Alice: revoke_and_ack" is not necessary if Alice is only sending new transactions paying Bob. However, it's intended to cover all update messages, and if Alice is also including any `update_fulfill_htlc` or `update_fail_htlc` messages in the commitment, she's potentially gaining funds. Instead, an approach was suggested where each node can unilaterally send various messages that always update the state asynchronously and nodes can track the state by having a list of htlcs/ptlcs/balances, etc for state (n), and a list of unapplied update messages for themselves and the other party (a+1,...,a') and (b+1,...,b'), and apply them in order when constructing the new state (n+1) for a new commitment signing round.A proposal has been made to add an additional feature bit that allows a channel to forward PTLCs only, no HTLCs, which ensures that state information is bounded no matter how long the channel remains open or how many transactions travel over the channel. However, it leaves you at risk of losing funds if the other party never attempts to claim them, so it's not recommended.In a recent email exchange, concerns were raised about the "toxic waste" issue that arises with HTLCs in Bitcoin due to committing to the payment_hash directly inside the transaction scripts, which requires remembering all payment_hashes seen to recreate the scripts and spend the outputs even if they are revoked. Using revkey would prevent bumping the current remote commitment if it appears on-chain as the private revkey is not yet known for the latest commitment, but if someone else's commitment is being bumped, the remote_anchor they provided will be used instead of the local_anchor.In a discussion on Lightning-dev, it was stated that fast-forwards could be an alternative to updating the commitment transactions on the payment-forwarding path, but this creates a problem where previous adaptor signatures would be invalidated, even if the B-&gt;A PTLC conditional on Y is within a fast-forward child-transaction. The author suggests doing a synchronous update of commitments to the channel state, reducing latency when forwarding by reducing the 2 round-trip protocol to update the state commitment to a 0.5 round-trip update.</summary>
    <published>2021-12-07T00:08:24+00:00</published>
  </entry>
</feed>
