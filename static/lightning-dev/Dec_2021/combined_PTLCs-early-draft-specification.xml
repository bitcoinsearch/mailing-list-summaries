<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - PTLCs early draft specification</title>
  <updated>2023-06-04T02:45:18.142012+00:00</updated>
  <author>
    <name>Lloyd Fournier 2021-12-07 06:09:06</name>
  </author>
  <author>
    <name>ZmnSCPxj 2021-12-07 23:52:04</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2021-12-08 08:40:35</name>
  </author>
  <author>
    <name>Anthony Towns 2021-12-08 09:28:53</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2021-12-22 08:02:23</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2021-12-08 15:02:02</name>
  </author>
  <author>
    <name>Anthony Towns 2021-12-09 05:00:16</name>
  </author>
  <author>
    <name>ZmnSCPxj 2021-12-07 00:08:24</name>
  </author>
  <author>
    <name>ZmnSCPxj 2021-12-07 08:04:09</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2021-12-08 10:00:18</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2021-12-06 17:21:12</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2021-12-07 13:11:00</name>
  </author>
  <author>
    <name>Lloyd Fournier 2021-12-09 01:34:00</name>
  </author>
  <author>
    <name>Anthony Towns 2021-12-19 22:23:44</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2021-12-21 15:25:41</name>
  </author>
  <author>
    <name>Anthony Towns 2021-12-21 16:04:03</name>
  </author>
  <link href="lightning-dev/Dec_2021/003379_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003382_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003385_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003386_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003435_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003389_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003394_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003378_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003380_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003387_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003377_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003381_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003393_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003429_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003433_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003434_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - PTLCs early draft specification</title>
    <updated>2023-06-04T02:45:18.143200+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-December/003379.html" rel="alternate"/>
    <summary>On the Lightning-dev mailing list, there have been discussions about various updates to the Lightning Network. One proposed update involves using an adaptor signature in the `update_add_ptlc` message for PTLC-offerers. However, concerns were raised about whether previous PTLC adaptor signatures would need to be re-sent for each `update_add_ptlc` message due to changes in the commit tx. Alternatives discussed included putting the adaptor signature in `commitment_signed` or using MuSig2 and pre-sharing of signature nonces. Another proposal involved fast-forwards to avoid changing commitment transactions on the payment-forwarding path.Another discussion involved using revkey or pubkey in commitment transactions for Lightning Network. While using pubkey allows for claiming anchors in the latest commitment, it defeats the purpose of the `OP_16 OP_CHECKSEQUENCEVERIFY` script branch. Revkey is not revealed when channels close with the latest commit, but it cannot be used to clean up the utxo set. A smarter solution may be needed to address these issues.A new update protocol for commitment transactions was proposed by Bastien Teinturier. The proposed solution involves modifying the protocol messages by splitting the data into several messages and adding a new message before the commit/revoke dance. Adaptor signatures are moved to commitment_proposed instead of commitment_signed. The reversal of the order in which participants sign new commitments was also suggested. The protocol should work fine with revocable signatures on a single tx approach too. Fast forwards would reduce the 2 round-trip protocol to update the state commitment to a 0.5 round-trip update.The final message "Bob -&gt; Alice: revoke_and_ack" was deemed unnecessary if Alice is only sending new transactions paying Bob. An alternative approach was suggested where each node can unilaterally send various messages that always update the state asynchronously. The proposal message should include both update values. Avoiding sending unnecessary messages is usually more performant and simpler.A script path has been proposed to reduce the number of communication rounds needed to generate signatures with MuSig. With taproot, it is possible to have a script path as well, which allows for supplying a partial signature to satisfy "A CHECKSIGVERIFY" if the receiver knows the discrete log of X.In terms of providing an adaptor signature in the `update_add_ptlc` message, it was suggested that it's better to put the adaptor signature in `commitment_signed` rather than re-sending previous PTLC adaptor signatures.The Lightning Network developers are proposing a new protocol for channel updates that would reduce the number of round-trips between nodes by half, by having both parties agree to a new commitment including adaptor signatures and signatures for spending HTLCs and PTLCs from their own commitment transaction. The proposed synchronous update of commitments to the channel state works with revocable signatures on a single tx approach and allows both peers to keep their commitments synchronized to a single channel state. Fast forwards will reduce the 2 round-trip protocol to a 0.5 round-trip update, reducing forwarding latency. A minimal set of changes is being explored to enable deployment of PTLCs on the network as soon as possible.Discussions are centered around using payment points and hashes in Lightning Network transactions, with PTLCs allowing for independent recreation of scripts without revealing the payment details on-chain, and concerns raised about "toxic waste" issue arising with HTLCs in Bitcoin. Additionally, a proposal has been made to add an additional feature bit that allows a channel to forward PTLCs only, no HTLCs, ensuring that state information is bounded no matter how long the channel remains open or how many transactions travel over the channel.In a discussion about revkey usage on local and remote commitments, it was suggested that utilizing revkey could prevent the current remote commitment from being bumped if it appears on-chain. This is because the private revkey is not yet known for the latest commitment. However, in cases where someone else's commitment is being bumped, the remote_anchor they provided will be used instead of the local_anchor.</summary>
    <published>2021-12-07T06:09:06+00:00</published>
  </entry>
</feed>
