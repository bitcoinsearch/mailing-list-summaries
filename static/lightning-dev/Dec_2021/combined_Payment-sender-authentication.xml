<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Payment sender authentication</title>
  <updated>2023-06-03T07:05:13.785699+00:00</updated>
  <author>
    <name>Peter Todd 2021-12-18 17:56:09</name>
  </author>
  <author>
    <name>Joost Jager 2021-12-20 08:01:37</name>
  </author>
  <author>
    <name>Peter Todd 2021-12-20 12:56:28</name>
  </author>
  <author>
    <name>Joost Jager 2021-12-17 10:37:12</name>
  </author>
  <author>
    <name>fiatjaf 2021-12-18 13:07:56</name>
  </author>
  <author>
    <name>fiatjaf 2021-12-20 16:06:41</name>
  </author>
  <link href="lightning-dev/Dec_2021/003428_Payment-sender-authentication.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003430_Payment-sender-authentication.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003431_Payment-sender-authentication.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003422_Payment-sender-authentication.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003427_Payment-sender-authentication.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003432_Payment-sender-authentication.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Payment sender authentication</title>
    <updated>2023-06-03T07:05:13.785699+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-December/003428.html" rel="alternate"/>
    <summary>In the Lightning network, sender authentication is not a requirement, but there are some cases where it may be useful. Joost Jager inquired about implementing opt-in sender authentication in Lightning to protect sender identity while still allowing certain use cases. However, Lightning already has sender authentication through giving someone a pre-image hash over an authenticated channel. A temporary solution was suggested for adding additional information to a BOLT11 payment request that can be found in the lnurl-rfc repository. The solution involves providing a lone pubkey, a domain-specific pubkey along with a signature of a challenge provided by the receiver, or an unauthenticated name or email. Jager suggested using a custom record containing an ECDSA signature or deriving a shared secret using ECDH with the sender and receiver node keys and attaching a custom record to the payment containing the sender node key and an HMAC of the payment hash using the shared secret as a key. While routing nodes learn pre-image hash as well, this is solved by the payment secret that is also part of the invoice. Sender authentication can also be beneficial for regular payments, especially for donations, where a donor may want to reveal themselves. Additionally, sender authentication offers another field that can be used to retrieve lost payment information. Joost seeks opinions from people more knowledgeable in cryptography on the best technical way to implement sender authentication. In a message to the Lightning-dev mailing list, he noted that while Lightning provides anonymity for senders, there are cases where authentication could be useful, such as chat over Lightning or donation payments where a donor may want to reveal themselves. The discussion sought technical opinions on the best way to implement opt-in sender authentication while considering cryptographic authentication and non-repudiation issues.</summary>
    <published>2021-12-18T17:56:09+00:00</published>
  </entry>
</feed>
