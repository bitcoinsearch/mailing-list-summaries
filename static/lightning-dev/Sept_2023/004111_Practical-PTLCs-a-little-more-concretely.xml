<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Practical PTLCs, a little more concretely</title>
  <updated>2023-09-22T01:54:24.549749+00:00</updated>
  <author>
    <name>Anthony Towns 2023-09-21 01:56:10+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Practical PTLCs, a little more concretely</title>
    <updated>2023-09-22T01:54:24.549790+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-September/004111.html" rel="alternate"/>
    <summary>The email discusses the concept of performing Payment Channel Timelocked Contracts (PTLCs) scriptlessly. This can be achieved by using a 2-of-2 MuSig public key and an adaptor signature. The email mentions two approaches to achieve this: via the key path or via the script path.In the key path approach, nonce exchanges are required, leading to extra communication rounds. On the other hand, in the script path approach, the "hash160 equalverify b checksig" part in the script is replaced with "a checksigverify b checksig". Alice provides Bob with an adaptor signature, which Bob completes when claiming the output.The question raised in the email is how to implement the latter approach. The author suggests that it can be done by having Alice perform a "single party musig2" calculation, rather than needing a separate API.Overall, the email discusses the possibility of performing PTLCs scriptlessly using various approaches, and proposes a solution involving a 2-of-2 MuSig public key and an adaptor signature.</summary>
    <published>2023-09-21T01:56:10+00:00</published>
  </entry>
</feed>
