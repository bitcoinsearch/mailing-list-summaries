<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Scaling Lightning With Simple Covenants</title>
  <updated>2023-09-19T01:56:23.179394+00:00</updated>
  <author>
    <name>ZmnSCPxj 2023-09-18 04:14:55+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Scaling Lightning With Simple Covenants</title>
    <updated>2023-09-19T01:56:23.179433+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-September/004106.html" rel="alternate"/>
    <summary>Based on the email received, the main point discussed is the safety of user `B` creating something without a signature from user `A_i`. It is suggested that if the funding for the project comes solely from user `B`, it may not be safe unless user `A_i` provides a signature. The email mentions that if a specific user `A_i` never contacts user `B`, but still confirms the entire path from the funding transaction output to the `A_i &amp;&amp; B` output, then the funds allocated by `B` are locked unless `B` receives a unilateral close signature from `A_i` to spend from the `A_i &amp;&amp; B` output.The email emphasizes the need for `A_i` to be online when `B` signs the funding transaction that anchors the entire tree. It also mentions that many people lost funds when implementing `multifundchannel` because they didn't ensure that all counterparties in the same batch of openings had provided unilateral close signatures before broadcasting the funding transaction. Another alternative mentioned is to use a Spilman channel variant, where the leaf itself is infected with a lifetime `(A_i &amp;&amp; B) || (B &amp;&amp; CLTV)`. In this case, `B` can dedicate the leaf output to a separate transaction that spends from the `(A_i &amp;&amp; B)` branch to a plain `A &amp;&amp; B` Lightning channel. `B` can fund the tree and when `A_i` comes online and agrees to accept the channel from `B`, `A_i` creates two signatures: one for the transaction spending from `(A_i &amp;&amp; B) || (B &amp;&amp; CLTV)` to `A &amp;&amp; B`, and another for the unilateral close transaction from the above output.Overall, the email discusses the importance of obtaining signatures from `A_i` for the safety of the project and highlights issues related to funding transactions and unilateral close signatures.</summary>
    <published>2023-09-18T04:14:55+00:00</published>
  </entry>
</feed>
