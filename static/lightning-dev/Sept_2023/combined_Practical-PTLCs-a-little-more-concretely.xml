<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Practical PTLCs, a little more concretely</title>
  <updated>2023-09-22T01:54:59.739448+00:00</updated>
  <author>
    <name>Anthony Towns 2023-09-21 01:56:10+00:00</name>
  </author>
  <author>
    <name>Lloyd Fournier 2023-09-21 01:44:47+00:00</name>
  </author>
  <author>
    <name>Anthony Towns 2023-09-19 12:29:53+00:00</name>
  </author>
  <author>
    <name>Greg Sanders 2023-09-06 16:14:08+00:00</name>
  </author>
  <link href="lightning-dev/Sept_2023/004111_Practical-PTLCs-a-little-more-concretely.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2023/004110_Practical-PTLCs-a-little-more-concretely.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2023/004109_Practical-PTLCs-a-little-more-concretely.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2023/004088_Practical-PTLCs-a-little-more-concretely.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Practical PTLCs, a little more concretely</title>
    <updated>2023-09-22T01:54:59.739544+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-September/004111.html" rel="alternate"/>
    <summary>The email conversation revolves around the implementation of a new feature called PTLC (Point Time Lock Contract) in node software. The sender suggests starting with writing an optional BLIP (BOLT Improvement Proposal) to roll out the feature, focusing on interop requirements such as routing gossip, onion messages, invoices, tx format, and peer messaging. They emphasize the importance of getting the first three requirements right as soon as possible while suggesting that the latter two can be renegotiated between peers without affecting others.The sender provides a link to a GitHub pull request that describes how to do a single-signer adaptor using musig2. They believe this approach combines the benefits of a "single-sig adaptor" while utilizing the musig2 API. Additionally, they mention the need to add or re-order peer messages when updating commitment transactions.Efficiency is a key consideration, and the chosen approach should be comparable to HTLCs (Hash Time Lock Contracts) currently used. It should be relatively easy to think about and implement and should not worsen the user experience due to a 1.5 round-trip time (RTT) forwarding delay.Once the initial implementation is working, the sender suggests adding feature flags for upgrading the single-sig adaptor to claimable via a musig2 double-sig key path, APO support (signing each PTLC once), 0.5 RTT fast-forwards, and supporting async updates. However, they advise deferring these additions unless the implementer is particularly enthusiastic about them to keep things simple at the start.In another email, Greg highlights the importance of turning attention to PTLCs as taproot channels are soon to be deployed. He believes it is helpful to recap technical topics like PTLCs, which have been ongoing for over half a decade. Greg shares a gist on GitHub that delves deeper into PTLCs, considering factors such as single-sig adaptors vs MuSig2, async updates vs sync, message re-ordering, and future updates to mempool/consensus.Greg includes detailed messages in the email, explaining that he included them to track correctness. He does not mention "fast-forward" as it is considered future work. Greg believes that once fast-forward is included, there will be various engineering choices to consider. He concludes by suggesting that the information provided can serve as a refresher and spark discussions about PTLC performance and engineering considerations. He also invites feedback and acknowledges the possibility of his understanding being incorrect.</summary>
    <published>2023-09-21T01:56:10+00:00</published>
  </entry>
</feed>
