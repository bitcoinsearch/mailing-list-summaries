<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Scaling Lightning With Simple Covenants</title>
  <updated>2023-09-19T01:57:55.898718+00:00</updated>
  <author>
    <name>ZmnSCPxj 2023-09-18 04:14:55+00:00</name>
  </author>
  <author>
    <name>Erik Aronesty 2023-09-17 11:32:52+00:00</name>
  </author>
  <author>
    <name>jlspc 2023-09-17 00:59:39+00:00</name>
  </author>
  <author>
    <name>jlspc 2023-09-17 00:56:04+00:00</name>
  </author>
  <author>
    <name>jlspc 2023-09-17 00:52:13+00:00</name>
  </author>
  <author>
    <name>Antoine Riard 2023-09-11 05:27:25+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2023-09-11 02:13:52+00:00</name>
  </author>
  <author>
    <name>Anthony Towns 2023-09-11 00:56:40+00:00</name>
  </author>
  <author>
    <name>jlspc 2023-09-08 18:54:46+00:00</name>
  </author>
  <link href="lightning-dev/Sept_2023/004106_Scaling-Lightning-With-Simple-Covenants.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2023/004105_Scaling-Lightning-With-Simple-Covenants.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2023/004104_Scaling-Lightning-With-Simple-Covenants.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2023/004103_Scaling-Lightning-With-Simple-Covenants.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2023/004102_Scaling-Lightning-With-Simple-Covenants.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2023/004098_Scaling-Lightning-With-Simple-Covenants.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2023/004097_Scaling-Lightning-With-Simple-Covenants.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2023/004095_Scaling-Lightning-With-Simple-Covenants.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2023/004092_Scaling-Lightning-With-Simple-Covenants.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Scaling Lightning With Simple Covenants</title>
    <updated>2023-09-19T01:57:55.898805+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-September/004106.html" rel="alternate"/>
    <summary>The email exchange discusses various topics related to Lightning channels and off-chain constructions. Antoine praises Lightning for its ability to provide numerous payments per channel without on-chain transactions. He also suggests the use of hierarchical channels and timeout-trees for resizing channels and changing pairings.In response, John acknowledges the tradeoff between trust/safety and capital efficiency and agrees with Antoine's analysis. He proposes that dedicated user B pairs with another dedicated user C to create hierarchical channels funded by a timeout-tree. This allows casual users to perform active rollovers, enabling B and C to route payments unrelated to these casual users. John also addresses the "thundering herd" problem and proposes changes to prevent theft attempts by dedicated users.The sender of the email questions the accuracy of a statement regarding the creation of Lightning channels from a single on-chain UTXO. They highlight the difficulty of coordinating casual users for signing transactions and express concerns about draining funds in a network where jamming is possible. The challenges of pre-signed transactions not propagating on the network are also mentioned.The tradeoff between trust and capital efficiency is discussed in relation to a single UTXO claimable by user B at a specific time. The "thundering herd" problem is mentioned, which could result in a large number of on-chain transactions if B cheats. To address this, casual users can calculate the extra transactions generated and determine when to roll over their funds to a new UTXO. A scenario with a provider issuing a new UTXO every week is presented, discussing the impact on capital efficiency and balancing of timeouts.Scaling Lightning channels for casual users is identified as a challenge, and solutions using simple covenants and timeout-trees are proposed. Simple covenants would allow the creation of channels for millions of casual users without complex coordination or signatures. Timeout-trees enable long-term scaling by allowing balances to be rolled over to new trees, avoiding on-chain transactions. The problem of availability when draining funds from old to new timeout-trees is addressed, and variations of the FFO-WF protocol and HTLC handling are suggested.The email also mentions the delay in accessing funds on-chain for paying transaction fees and suggests using timeout-trees to provide immediately-accessible off-chain bitcoin. It concludes by stating that implementing simple covenants and timeout-trees can greatly improve the scalability of Lightning and make it more widely used for payments. Usability concerns and limitations are mentioned, with hopes that mechanisms like CTV or APO will be added to Bitcoin's consensus rules to support Lightning as a means of payment.</summary>
    <published>2023-09-18T04:14:55+00:00</published>
  </entry>
</feed>
