<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - crowdfunding with SIGHASH_ANYONE_CAN_PAY</title>
  <updated>2023-06-03T15:51:40.359567+00:00</updated>
  <author>
    <name>Rusty Russell 2015-11-24 23:04:31</name>
  </author>
  <author>
    <name>Ryan Grant 2015-11-23 22:44:05</name>
  </author>
  <author>
    <name>Ryan Grant 2015-11-23 20:12:55</name>
  </author>
  <link href="lightning-dev/Nov_2015/000342_crowdfunding-with-SIGHASH-ANYONE-CAN-PAY.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2015/000333_crowdfunding-with-SIGHASH-ANYONE-CAN-PAY.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2015/000332_crowdfunding-with-SIGHASH-ANYONE-CAN-PAY.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - crowdfunding with SIGHASH_ANYONE_CAN_PAY</title>
    <updated>2023-06-03T15:51:40.359567+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-November/000342.html" rel="alternate"/>
    <summary>The discussion starts with Ryan Grant proposing a thought experiment of using Lightning for crowdfunding, but he concludes that it's pointless. He suggests that anyone who holds coins on the Bitcoin blockchain can sign their part of the transaction for free, and only the initiator needs to pay a transaction fee. The discussion then moves on to analyzing the possibility of extending the protocol to pay to anything, which is called "Atomic swap to X." To solve the problem of swapping onto the blockchain, a small output with scriptPubkey of form "pay to me, or after pay to anyone" can be created, which can be used as one input to the crowdfunding transaction. Furthermore, Alice plans to pledge to Bob's crowdfunded project using a one-input, one-output, anyone-can-pay transaction valid for one month. Bob has provided his address anchored to an open channel on the Lightning Network, and Alice has received Bob's hashed preimage R. To facilitate the transaction, Alice will use an intermediary node run by Hubab. However, Alice needs a special Lightning protocol option to indicate that only the final hop should be rewritten and signed as anyone-can-pay. Alice can send Hubab a normal channel transaction using the HTLC and then send Hubab special instructions on how to create a SIGHASH_ANYONE_CAN_PAY for Bob using the HTLC. Once Bob receives the pledge transaction from Alice, it should not be revoked until the anyone-can-pay output is claimed. However, crowdfunding events could lock up money for a long time, and the Lightning Network nodes will price their fees accordingly. Additionally, there is a need for an update_revoke_pledge_htlc to revoke accepted pledges that have not yet expired or caused other errors. If Hubab needs to route further to Carol, she must be aware of more in the route than her handoff address, such as whether the next destination is final. Finally, when signing the SIGHASH_ANYONE_CAN_PAY transaction, Hubab (or Carol) needs to select an input matching the exact amount. Overall, while there are some complexities involved in crowdfunding with the Lightning Network, the routed option described above provides a viable solution. The discussion ends with Rusty, the author, signing off with "Cheers."</summary>
    <published>2015-11-24T23:04:31+00:00</published>
  </entry>
</feed>
