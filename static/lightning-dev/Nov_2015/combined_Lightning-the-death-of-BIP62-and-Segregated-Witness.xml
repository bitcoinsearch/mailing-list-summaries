<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Lightning, the death of BIP62, and Segregated Witness</title>
  <updated>2023-05-18T16:31:45.495228+00:00</updated>
  <author>
    <name>Matt Corallo 2015-11-19 19:48:04</name>
  </author>
  <author>
    <name>Matt Corallo 2015-11-19 19:38:46</name>
  </author>
  <link href="lightning-dev/Nov_2015/000325_Lightning-the-death-of-BIP62-and-Segregated-Witness.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2015/000323_Lightning-the-death-of-BIP62-and-Segregated-Witness.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Lightning, the death of BIP62, and Segregated Witness</title>
    <updated>2023-05-18T16:31:45.495228+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-November/000325.html" rel="alternate"/>
    <summary>Developers have been discussing the possibility of implementing Segregated Witness in Bitcoin and its potential to address transaction malleability. This has been a long-standing issue for the digital currency. The idea behind Segregated Witness is to separate signature data from transaction data so that signatures are not an integral part of the transaction ID or TXID. This concept has been met with enthusiasm by developers, particularly because it could be implemented via a soft fork. The functionality needed is to be able to reliably spend from unconfirmed transactions and Segregated witness can accomplish that. However, it is quite a large hard-fork change. Sighash_noinput can also accomplish that: as input txids are not signed, if they change, the spending transaction can be modified while leaving counterparty signatures intact.Tadge Dryja proposed starting a new "testnet-L" similar to testnet3, with this sighash type so that we can test malleability mitigation out. In terms of implementation, Mark Friedenbach suggests having the scriptPubKey be just the 20-byte hash of the redeem script. The scriptSig of the spending input is empty. The actual scriptSig with the redeem script and signatures is contained in a separate Merkle tree committed to elsewhere in the block. The hardfork variant is quite simple, according to Greg Sanders, who explained that you just stick the signatures in another parallel Merkle tree. So if you don't want to validate signatures, just don't download them, and validate everything else. The basic idea of the soft-fork plan is to have the scriptPubKey be just the 20-byte hash of the redeem script, while the scriptSig of the spending input is empty. The actual scriptSig, with the redeem script and signatures, is contained in a separate Merkle tree committed elsewhere in the block. Similarly, the hardfork variant involves sticking the signatures in another parallel Merkle tree, so if one doesn't want to validate signatures, they just don't download them, and validate everything else. TXIDs don't use the signature at all, resulting in nothing to malleate.While there hasn't been significant public discussion on the changes yet, Pieter may have wanted to retract BIP62 to push the soft-fork plan forward. There isn't much information available on Segregated Witness, but it seems that its apparently possible to do it with a soft fork similar to Pay-to-Script-Hash (P2SH).</summary>
    <published>2015-11-19T19:48:04+00:00</published>
  </entry>
</feed>
