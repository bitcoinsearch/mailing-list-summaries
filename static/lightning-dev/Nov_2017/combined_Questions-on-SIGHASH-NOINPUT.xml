<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Questions on SIGHASH_NOINPUT</title>
  <updated>2023-06-03T17:41:46.467846+00:00</updated>
  <author>
    <name>Tomas 2017-11-13 09:38:41</name>
  </author>
  <author>
    <name>Rusty Russell 2017-11-12 03:04:55</name>
  </author>
  <author>
    <name>Rusty Russell 2017-11-15 10:37:22</name>
  </author>
  <author>
    <name>Tomas 2017-11-10 12:27:35</name>
  </author>
  <link href="lightning-dev/Nov_2017/000780_Questions-on-SIGHASH-NOINPUT.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2017/000779_Questions-on-SIGHASH-NOINPUT.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2017/000785_Questions-on-SIGHASH-NOINPUT.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2017/000776_Questions-on-SIGHASH-NOINPUT.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Questions on SIGHASH_NOINPUT</title>
    <updated>2023-06-03T17:41:46.468859+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2017-November/000780.html" rel="alternate"/>
    <summary>In a recent conversation between Tomas and Rusty Russell, the issue of malleation in commitment transactions was discussed. Rusty explained that malleation is a problem for every commitment transaction that uses HTLC transactions, but suggested that SIGHASH_NOINPUT could be used to work around this issue. However, he pointed out that separate keys are needed on every output to ensure transactions can't be connected to the wrong outputs. Tomas questioned whether the current specification already ensures that every key is only used once. Rusty clarified that while it is true for different commitment transactions, it's not the case for different HTLC outputs attached to the same transaction.Rusty then went on to explain that SIGHASH_NOINPUT cuts the number of updates down by about a factor of 2 under typical use, and it's generally nice to have, though extremely dangerous if keys are reused. If addresses are reused, a signed SIGHASH_NOINPUT input can be attached to either one, which may or may not be a problem depending on the exact usage. Tomas van der Wansem from bitcrust has raised some questions regarding the proposal to use SIGHASH_NOINPUT on the bitcoin-dev mailing list.He first asks if LN's problem of malleated transactions is limited to the punishment transaction, which is the only one that spends an unconfirmed transaction. He wants to know if LN could function with (roughly) the same design without SegWit if SIGHASH_NOINPUT would be in place. Secondly, it was argued on the mailing list that SIGHASH_NOINPUT is important to prevent excessive recreation and routing of punishment transaction to 3rd party monitoring services. Tomas wants to know if this is still important or if other solutions have presented themselves.</summary>
    <published>2017-11-13T09:38:41+00:00</published>
  </entry>
</feed>
