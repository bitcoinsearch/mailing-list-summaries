<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Liquidity griefing for 0-conf dual-funded txs</title>
  <updated>2023-06-23T01:39:54.260449+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-07 00:41:12+00:00</name>
  </author>
  <author>
    <name>Matt Morehouse 2023-05-09 17:38:55+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-07 22:54:50+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-10 00:07:06+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-10 09:15:25+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-05 16:21:50+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-06-07 09:46:36+00:00</name>
  </author>
  <author>
    <name>Matt Morehouse 2023-05-09 17:38:55+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-07 22:54:50+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-10 00:07:06+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-10 09:15:25+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-05 16:21:50+00:00</name>
  </author>
  <link href="lightning-dev/June_2023/003974_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003938_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003931_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003942_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003943_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003920_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003975_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003938_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003931_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003942_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003943_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003920_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Liquidity griefing for 0-conf dual-funded txs</title>
    <updated>2023-06-23T01:39:54.260576+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003974.html" rel="alternate"/>
    <summary>Bastien Teinturier, a member of the Lightning Network development team, sent a message to the Lightning-dev mailing list regarding the challenge of protecting against liquidity griefing attacks from malicious peers in dual funded transactions. The Lightning Network's dual funded transactions protocol has created challenges, particularly with regards to protecting against liquidity griefing attacks from malicious peers. One solution is to never lock utxos used in dual funded transactions, but this falls short when using 0-conf as accidental double-spending can result in loss of funds for one of the peers.Nodes offering 0-conf services expose themselves to liquidity griefing by locking utxos. Another issue arises when nodes offering 0-conf channels must ensure that the utxos they use for 0-conf are isolated from the utxos they use for non-0-conf. This can be fixed by using a "soft lock" when selecting utxos for a non-0-conf funding attempt. The aim is to gather ideas on how to improve the situation and offer good enough protections against liquidity griefing for nodes offering 0-conf services.In eclair, opportunistic 0-conf approach is used, but it cannot be used anymore when mixing 0-conf and non-0-conf funding attempts due to soft locked utxos. Matt Morehouse proposed that UTXOs should be locked after tx_completes have been exchanged only if the node is the only contributor. Although this proposal enables the common use case for 0-conf, ZmnSCPxj argued that it means "do not dual-fund 0-conf," and the simpler openv1 flow should be used instead. Nodes that want to offer 0-conf channels must ensure that the utxos they use for 0-conf are isolated from the utxos they use for non 0-conf. Ultimately, the post was made to raise awareness for implementers to make sure they do not accidentally double-spend 0-conf channels when implementing dual funding. Bastien Nocera, a developer of the Lightning Network, has suggested adding 0-conf support to Lightning. In an email to the Lightning-dev mailing list, Nocera acknowledged that 0-conf is a "massive implementation pain point" but that users still like it. He proposed adding support for 0-conf in Lightning's `pay` command through a pull request on GitHub.The introduction of dual funded transactions in lightning has created challenges, particularly regarding protecting against liquidity griefing attacks from malicious peers. The dual funding protocol involves exchanging data about UTXOs and broadcasting the resulting transaction. One solution is to never lock UTXOs used in dual funded transactions as they will automatically be reused in another instance of the protocol if a remote node goes silent. However, this approach falls short when using 0-conf as accidentally double-spending a 0-conf channel can result in loss of funds for one of the peers.</summary>
    <published>2023-06-07T00:41:12+00:00</published>
  </entry>
</feed>
