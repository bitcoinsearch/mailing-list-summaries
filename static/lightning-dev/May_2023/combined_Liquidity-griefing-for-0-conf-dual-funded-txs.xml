<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Liquidity griefing for 0-conf dual-funded txs</title>
  <updated>2023-07-06T02:56:08.899236+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-07 00:41:12+00:00</name>
  </author>
  <author>
    <name>Matt Morehouse 2023-05-09 17:38:55+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-10 00:07:06+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-10 09:15:25+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-05 16:21:50+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-07 22:54:50+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-06-07 09:46:36+00:00</name>
  </author>
  <author>
    <name>Matt Morehouse 2023-05-09 17:38:55+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-10 00:07:06+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-10 09:15:25+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-05 16:21:50+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-07 22:54:50+00:00</name>
  </author>
  <link href="lightning-dev/June_2023/003974_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003938_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003942_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003943_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003920_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003931_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003975_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003938_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003942_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003943_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003920_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003931_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Liquidity griefing for 0-conf dual-funded txs</title>
    <updated>2023-07-06T02:56:08.899410+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003974.html" rel="alternate"/>
    <summary>The Lightning Network developer, Bastien Nocera, has proposed adding support for 0-conf (zero-confirmation) transactions in the Lightning Network's `pay` command. However, there are concerns about the security implications of implementing 0-conf. The discussion on this proposal is ongoing.One of the challenges introduced by dual-funded transactions in Lightning is liquidity griefing attacks from malicious peers. If a peer locks their utxos and goes silent, the honest node's liquidity becomes locked and unusable. To mitigate this issue, one solution is to never lock utxos used in dual-funded transactions, allowing them to be automatically re-used if a remote node goes silent. However, this approach is not suitable for 0-conf channels, as accidentally double-spending a 0-conf channel can result in loss of funds for one of the peers. Nodes offering 0-conf services expose themselves to liquidity griefing by locking utxos.Another issue arises when nodes offering 0-conf channels must ensure that the utxos they use for 0-conf are isolated from the utxos they use for non-0-conf. This is because accidentally double-spending a 0-conf channel can occur if a non-0-conf funding attempt confirms before the 0-conf channel's funding transaction. To address this, a "soft lock" can be used when selecting utxos for non-0-conf funding attempts, with 0-conf funding attempts ignoring soft locked utxos.To improve the situation and offer protections against liquidity griefing for nodes offering 0-conf services, several ideas have been proposed. One suggestion is to use swap-in-potentiam addresses with the acceptor in dual-funded 0-conf transactions. If the initiator stalls, the acceptor can refuse to sign the swap-in-potentiam UTXOs, effectively locking their funds until the swap-in-potentiam times out. This prevents liquidity griefing from being cost-free. Additionally, an LSPS3 Promise To Unconditionally Fund 0-conf could address concerns about double-spending. Trust between initiator and acceptor is also important in the dual-funding flow.In the long term, solutions to mitigate channel jamming and prevent liquidity griefing could be deployed. The Staking Credentials framework, for example, could be used by dual-funding market-makers. The initiator would pay a fee to the maker based on the amount of UTXOs contributed and worst-case liquidity griefing scenarios. Privacy-preserving credentials could be used to unlink dual-funding initiators, creating a reasonable anonymity set if the maker has enough volume.Overall, the discussion aims to find ways to improve the safety of dual-funded 0-conf transactions and protect against liquidity griefing attacks.</summary>
    <published>2023-06-07T00:41:12+00:00</published>
  </entry>
</feed>
