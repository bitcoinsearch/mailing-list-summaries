<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Liquidity griefing for 0-conf dual-funded txs</title>
  <updated>2023-06-27T03:53:15.066746+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-07 00:41:12+00:00</name>
  </author>
  <author>
    <name>Matt Morehouse 2023-05-09 17:38:55+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-07 22:54:50+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-10 00:07:06+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-10 09:15:25+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-05 16:21:50+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-06-07 09:46:36+00:00</name>
  </author>
  <author>
    <name>Matt Morehouse 2023-05-09 17:38:55+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-07 22:54:50+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-10 00:07:06+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-10 09:15:25+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-05 16:21:50+00:00</name>
  </author>
  <link href="lightning-dev/June_2023/003974_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003938_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003931_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003942_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003943_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003920_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003975_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003938_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003931_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003942_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003943_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003920_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Liquidity griefing for 0-conf dual-funded txs</title>
    <updated>2023-06-27T03:53:15.066850+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003974.html" rel="alternate"/>
    <summary>The Lightning Network development team is currently discussing the challenges of protecting against liquidity griefing attacks from malicious peers in dual-funded transactions. Bastien Teinturier has raised concerns about this issue and proposed a solution that involves never locking UTXOs used in dual-funded transactions. The current solution is to lock UTXOs only after the tx_complete exchange for option_zeroconf channels. However, when mixing 0-conf and non-0-conf funding attempts, soft locks may prevent upgrading to 0-conf. Nodes offering 0-conf services must ensure that the UTXOs they use for 0-conf are isolated from those used for non-0-conf. In eclair, opportunistic 0-conf is used, but it cannot be used anymore when mixing 0-conf and non-0-conf funding attempts due to soft locked UTXOs. To address this issue, Bastien suggests never locking UTXOs used in dual-funded transactions and proposes that UTXOs be locked after tx_completes have been exchanged if the channel has option_zeroconf. If the peer adds any inputs to the funding transaction, the process should be aborted as 0-conf is unsafe in this case.The email thread also discusses the safety of dual-funded 0-conf transactions and proposes using swap-in-potentiam addresses with the acceptor. The initiator still needs to trust that the acceptor does not double-spend out from under the initiator. The author notes that LSPS3 Promise To Unconditionally Fund 0-conf could address this concern. Furthermore, the discussion on the pull request made by Bastien Nocera, which proposes adding support for 0-conf in Lightning's `pay` command, is ongoing. Some developers have expressed concerns about the security implications of implementing 0-conf in Lightning. The Staking Credentials framework could be deployed by dual-funding market-makers beyond routing hops to mitigate channel jamming. In summary, the email thread highlights the challenges of offering 0-conf services while protecting against liquidity griefing attacks from malicious peers in dual-funded transactions. The current solution is to never lock UTXOs used in dual-funded transactions and only lock them after tx_complete exchange for option_zeroconf channels. However, mixing 0-conf and non-0-conf funding attempts can result in soft locks that prevent upgrading to 0-conf. The safety of dual-funded 0-conf transactions can be improved with the use of swap-in-potentiam addresses and the LSPS3 Promise To Unconditionally Fund 0-conf. Developers are discussing the implementation of 0-conf in Lightning's `pay` command, but security concerns have been raised. Finally, the Staking Credentials framework could be used to mitigate channel jamming.</summary>
    <published>2023-06-07T00:41:12+00:00</published>
  </entry>
</feed>
