<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Liquidity griefing for 0-conf dual-funded txs</title>
  <updated>2023-06-21T01:17:44.236148+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-07 00:41:12+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-10 09:15:25+00:00</name>
  </author>
  <author>
    <name>Matt Morehouse 2023-05-09 17:38:55+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-07 22:54:50+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-05 16:21:50+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-10 00:07:06+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-06-07 09:46:36+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-10 09:15:25+00:00</name>
  </author>
  <author>
    <name>Matt Morehouse 2023-05-09 17:38:55+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-07 22:54:50+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2023-05-05 16:21:50+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-10 00:07:06+00:00</name>
  </author>
  <link href="lightning-dev/June_2023/003974_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003943_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003938_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003931_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003920_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003942_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003975_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003943_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003938_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003931_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003920_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003942_Liquidity-griefing-for-0-conf-dual-funded-txs.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Liquidity griefing for 0-conf dual-funded txs</title>
    <updated>2023-06-21T01:17:44.236255+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003974.html" rel="alternate"/>
    <summary>The Lightning Network mailing list has been discussing the challenges of protecting against liquidity griefing attacks from malicious peers in dual funded transactions. The post suggests that UTXOs used in dual funded transactions should not be locked to prevent such attacks, but this falls short when using 0-conf. To address this issue, Matt Morehouse proposed that UTXOs should be locked after tx_completes have been exchanged only if the node is the only contributor. Bastien Nocera, a developer of the Lightning Network, has suggested adding 0-conf support to Lightning's `pay` command through a pull request on GitHub, but some developers have expressed concerns about the security implications of implementing 0-conf in Lightning. The discussion also highlights other related issues, including preventing nodes offering 0-conf channels from exposing themselves to liquidity griefing and ensuring that UTXOs used for 0-conf are isolated from those used for non 0-conf. The post seeks ideas for improving the situation and offering good-enough protections against liquidity griefing for nodes offering 0-conf services.Moreover, the message discusses the safety of dual-funded 0-conf transactions, suggesting that such transactions can be made safe by using swap-in-potentiam addresses with the acceptor. However, the initiator still needs to trust that the acceptor does not double-spend out from under the initiator. Another issue arises when nodes offering 0-conf channels must ensure that the utxos they use for 0-conf are isolated from the utxos they use for non-0-conf.Dual funding protocol involves exchanging data about the utxos and broadcasting the resulting transaction, which creates challenges to protect against liquidity griefing attacks from malicious peers. Nodes offering 0-conf services expose themselves to liquidity griefing by locking utxos. Another issue arises when nodes offering 0-conf channels must ensure that the utxos they use for 0-conf are isolated from the utxos they use for non 0-conf. In eclair, they are currently doing "opportunistic" 0-conf. However, it cannot be used anymore when mixing 0-conf and non 0-conf funding attempts due to soft locked utxos.The expected use-case for dual-funded 0-conf transactions is when a user expects onchain operations to be slow and take multiple confirmations to receive. Once there is deep confirmation that a swap-in-potentiam address has been funded, it can be transferred immediately to a 0-conf channel. Bastien seeks ideas for improving the situation and offering good-enough protections against liquidity griefing for nodes offering 0-conf services.One solution proposed in the email was to use v3 transactions for channel funding and splicing, with some limitations. Another possible solution is to deploy the Staking Credentials framework by dual-funding market-makers beyond routing hops to mitigate channel jamming. The framework could be used to pay a fee scale up on the amount of UTXOs contributed and protect against some worst-case liquidity griefing scenarios.</summary>
    <published>2023-06-07T00:41:12+00:00</published>
  </entry>
</feed>
