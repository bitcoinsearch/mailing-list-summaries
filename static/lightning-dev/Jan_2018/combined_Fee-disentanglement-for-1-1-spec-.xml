<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Fee disentanglement for 1.1 spec?</title>
  <updated>2023-06-03T18:06:09.060029+00:00</updated>
  <author>
    <name>Johan Tor√•s Halseth 2018-01-16 23:37:11</name>
  </author>
  <author>
    <name>Rusty Russell 2018-01-15 23:55:09</name>
  </author>
  <link href="lightning-dev/Jan_2018/000942_Fee-disentanglement-for-1-1-spec-.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2018/000935_Fee-disentanglement-for-1-1-spec-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Fee disentanglement for 1.1 spec?</title>
    <updated>2023-06-03T18:06:09.060029+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-January/000942.html" rel="alternate"/>
    <summary>The Lightning Network protocol has two main problems, according to a post by an unknown author. Firstly, only one side of the transaction is able to set fees, which can lead to disagreements over whether the fees are sufficient or too high and even result in channel closures. The proposed solution is to have both sides set fees independently at the beginning of the channel creation process, as implemented in c-lightning. Any fee updates that the other side cannot afford based on their current HTLCs and max accepted HTLCs should be disallowed, as well as new HTLCs that cannot be paid for based on the same calculation.Secondly, predicting future fees is difficult, so multiple simultaneous fee levels should be allowed. This would require more work and storage due to multiple signatures in each commitment_signed message. The post concludes by inviting feedback on these proposals.</summary>
    <published>2018-01-16T23:37:11+00:00</published>
  </entry>
</feed>
