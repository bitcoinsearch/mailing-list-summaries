<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Fee disentanglement for 1.1 spec?</title>
  <updated>2023-06-02T01:55:08.075932+00:00</updated>
  <author>
    <name>Johan Tor√•s Halseth 2018-01-16 23:37:11</name>
  </author>
  <author>
    <name>Rusty Russell 2018-01-15 23:55:09</name>
  </author>
  <link href="lightning-dev/Jan_2018/000942_Fee-disentanglement-for-1-1-spec-.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2018/000935_Fee-disentanglement-for-1-1-spec-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Fee disentanglement for 1.1 spec?</title>
    <updated>2023-06-02T01:55:08.075932+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-January/000942.html" rel="alternate"/>
    <summary>The Lightning Network protocol has two main problems that need to be addressed, according to a post by an author. The first issue is that only one side sets fees, which can lead to disputes over their sufficiency or excessiveness, leading to channel closures. The solution proposed is having both sides set fees independently during the beginning of the channel creation process, which has been implemented in c-lightning. To prevent unaffordable fee updates and new HTLCs, the author suggests disallowing any such transactions based on current and max accepted HTLCs.The second problem highlighted is the difficulty in predicting future fees. The author proposes allowing multiple simultaneous fee levels, although it requires more work and storage due to multiple signatures in each commitment_signed message. The post concludes by seeking feedback on these proposals.</summary>
    <published>2018-01-16T23:37:11+00:00</published>
  </entry>
</feed>
