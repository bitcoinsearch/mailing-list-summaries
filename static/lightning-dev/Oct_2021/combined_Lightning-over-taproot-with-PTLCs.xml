<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Lightning over taproot with PTLCs</title>
  <updated>2023-06-03T06:21:28.755269+00:00</updated>
  <author>
    <name>Lloyd Fournier 2021-10-13 04:15:14</name>
  </author>
  <author>
    <name>Anthony Towns 2021-10-11 06:29:51</name>
  </author>
  <author>
    <name>Lloyd Fournier 2021-10-11 10:23:19</name>
  </author>
  <author>
    <name>Anthony Towns 2021-10-12 03:26:58</name>
  </author>
  <author>
    <name>ZmnSCPxj 2021-10-12 04:18:37</name>
  </author>
  <author>
    <name>Anthony Towns 2021-10-12 04:48:56</name>
  </author>
  <author>
    <name>ZmnSCPxj 2021-10-09 01:49:38</name>
  </author>
  <author>
    <name>Anthony Towns 2021-10-09 02:15:19</name>
  </author>
  <author>
    <name>ZmnSCPxj 2021-10-09 02:27:37</name>
  </author>
  <author>
    <name>Jonas Nick 2021-10-10 18:01:55</name>
  </author>
  <author>
    <name>Lloyd Fournier 2021-10-11 06:05:05</name>
  </author>
  <author>
    <name>Anthony Towns 2021-10-19 04:16:13</name>
  </author>
  <author>
    <name>Anthony Towns 2021-10-19 06:26:50</name>
  </author>
  <author>
    <name>Anthony Towns 2021-10-09 01:12:07</name>
  </author>
  <author>
    <name>Jonas Nick 2021-10-09 12:21:03</name>
  </author>
  <author>
    <name>Anthony Towns 2021-10-09 13:59:39</name>
  </author>
  <author>
    <name>Lloyd Fournier 2021-10-11 21:12:14</name>
  </author>
  <author>
    <name>Anthony Towns 2021-10-12 03:08:21</name>
  </author>
  <link href="lightning-dev/Oct_2021/003306_Lightning-over-taproot-with-PTLCs.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003287_Lightning-over-taproot-with-PTLCs.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003288_Lightning-over-taproot-with-PTLCs.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003294_Lightning-over-taproot-with-PTLCs.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003295_Lightning-over-taproot-with-PTLCs.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003296_Lightning-over-taproot-with-PTLCs.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003279_Lightning-over-taproot-with-PTLCs.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003280_Lightning-over-taproot-with-PTLCs.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003281_Lightning-over-taproot-with-PTLCs.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003284_Lightning-over-taproot-with-PTLCs.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003286_Lightning-over-taproot-with-PTLCs.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003324_Lightning-over-taproot-with-PTLCs.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003325_Lightning-over-taproot-with-PTLCs.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003278_Lightning-over-taproot-with-PTLCs.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003282_Lightning-over-taproot-with-PTLCs.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003283_Lightning-over-taproot-with-PTLCs.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003291_Lightning-over-taproot-with-PTLCs.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003293_Lightning-over-taproot-with-PTLCs.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Lightning over taproot with PTLCs</title>
    <updated>2023-06-03T06:21:28.755269+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-October/003306.html" rel="alternate"/>
    <summary>In recent email conversations, various proposals and concerns were raised regarding the Lightning Network's payment forwarding system, eltoo protocol, implementation complexity of transactions, and BOLT#2 and BOLT#3 replacements. Anthony Towns proposed a layering system for transactions in Lightning Network consisting of funding, balance, inflight, and layered transactions. However, he pointed out potential issues with the layering system, emphasizing the need for a robust and secure layering system.Lloyd Fournier mentioned that scorched earth punishments could be enabled using revocable signatures. aj suggested simulating eltoo's behavior using RP/2/k notation and explained that scriptless PTLC was not used due to the need to share nonce pairs in advance. ZmnSCPxj brought up concerns about the game theory behind eltoo but proposed adding a "max" part to prevent costless theft attempts. ZmnSCPxj also discussed the advantages of maintaining the historical longevity of a channel and proposed establishing a new taproot-based shadow channel alongside an existing bolt#3 based channel. Additionally, a proposal was made regarding the use of deterministic nonces in MuSig.The Lightning Network protocol is set to receive a replacement for BOLT#2 and BOLT#3, focusing on implementing PTLCs while minimizing data storage requirements, latency, on-chain footprint, and third-party analysis. The protocol introduces four layers of transactions and uses musig and musig2 to combine keys and sign for them. Adaptor signatures and revocable secrets are also used in this proposal.Lastly, discussions revolved around improving the payment forwarding system with low latency by introducing two channel parameters: payment delay and channel recovery delay. The proposed solution involves lifting the HTLC out of an in-flight transaction into a balance transaction to forward payments optimally. However, this proposal adds complexity and requires additional features to prevent Bob from posting the "low-latency" tx if he doesn't react within the payment delay period.The proposed solution to avoid nonce reuse in zero knowledge is DA1,DA2 = f(seed,n) where n increases each round. The proposal also suggested using an adaptor signature scheme that cannot treat MuSig2 as a black box. Bob generates RB1_n and RB2_n as H(s_n, 1)*G and H(s_n, 2)*G and sends those values to Alice. Alice then signs for her nonce which da1_n+k*da2_n, and sends da1_n*G and da2_n*G and the partial signature to Bob. Bob checks and records Alice's musig2 derivation and partial signature but does not sign himself. If Bob wants to close the channel and publish the tx, he completes the signature by signing with nonce RB1_n + k*RB2_n.In a discussion thread on layering payments, Anthony Towns questioned whether the current payment system would work if Alice forwarded a payment to Bob with timeout T. However, Lloyd Fournier pointed out that this problem may not be as bad as it seems, and suggested breaking down the delays into three categories: refund delay, channel recovery delay, and payment recovery delay. Layered transactions can solve the issue of different recovery delays.The proposed transaction structure for low-latency forwarding includes a commitment tx, low-latency inflight tx, Bob claim, and too-slow. Alice sends the low-latency inflight tx which Bob then forwards immediately. Bob then tries to update the base channel state with Alice, so both sides have a commitment to the new payment, and the low-latency inflight tx is voided. However, if Alice is unavailable to confirm that update, Bob closes the channel prior to (payment-timeout - payment-recover-delay), and posts "Bob claim". After an additional payment recovery delay (and prior to payment-timeout) Bob posts Bob claim, ensuring that the only way Alice can claim the funds is if he had posted a revoked state. This approach only allows for one low-latency payment to be inflight, which may not be interesting, but it's a complicated solution that doesn't cover both low-latency and offline cases.</summary>
    <published>2021-10-13T04:15:14+00:00</published>
  </entry>
</feed>
