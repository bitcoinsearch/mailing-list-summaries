<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Mitigations for loop attacks</title>
  <updated>2023-06-02T03:25:26.487503+00:00</updated>
  <author>
    <name>Jim Posen 2018-05-02 06:59:16</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-05-09 07:31:56</name>
  </author>
  <author>
    <name>Jim Posen 2018-05-09 17:41:56</name>
  </author>
  <author>
    <name>Jim Posen 2018-05-10 23:18:08</name>
  </author>
  <author>
    <name>Jim Posen 2018-05-15 18:43:07</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-05-16 00:04:44</name>
  </author>
  <author>
    <name>Jim Posen 2018-05-16 01:48:33</name>
  </author>
  <author>
    <name>Jim Posen 2018-05-09 17:23:38</name>
  </author>
  <author>
    <name>Chris Gough 2018-05-11 00:17:22</name>
  </author>
  <author>
    <name>Rusty Russell 2018-05-14 03:40:19</name>
  </author>
  <author>
    <name>Rusty Russell 2018-05-18 05:27:15</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-05-18 23:38:26</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-05-22 22:50:02</name>
  </author>
  <author>
    <name>Rusty Russell 2018-05-09 06:50:27</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-05-10 04:40:19</name>
  </author>
  <author>
    <name>Chris Gough 2018-05-10 21:56:38</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-05-16 09:44:35</name>
  </author>
  <author>
    <name>Jim Posen 2018-05-19 00:54:49</name>
  </author>
  <author>
    <name>Corné Plooy 2018-05-22 15:47:48</name>
  </author>
  <author>
    <name>Jim Posen 2018-05-23 07:41:25</name>
  </author>
  <link href="lightning-dev/May_2018/001232_Mitigations-for-loop-attacks.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001261_Mitigations-for-loop-attacks.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001263_Mitigations-for-loop-attacks.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001270_Mitigations-for-loop-attacks.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001284_Mitigations-for-loop-attacks.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001285_Mitigations-for-loop-attacks.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001286_Mitigations-for-loop-attacks.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001262_Mitigations-for-loop-attacks.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001271_Mitigations-for-loop-attacks.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001275_Mitigations-for-loop-attacks.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001289_Mitigations-for-loop-attacks.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001290_Mitigations-for-loop-attacks.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001295_Mitigations-for-loop-attacks.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001260_Mitigations-for-loop-attacks.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001268_Mitigations-for-loop-attacks.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001269_Mitigations-for-loop-attacks.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001287_Mitigations-for-loop-attacks.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001291_Mitigations-for-loop-attacks.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001293_Mitigations-for-loop-attacks.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001296_Mitigations-for-loop-attacks.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Mitigations for loop attacks</title>
    <updated>2023-06-02T03:25:26.487503+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-May/001232.html" rel="alternate"/>
    <summary>The Lightning Network is vulnerable to loop attacks, which involve collusion between a sender and receiver to create a long circuit and refuse to settle or fail the HTLC at the end until the last possible moment. The author proposes three potential solutions: 1) protocol support for decrypting the onion route if the HTLC is kept in-flight for too long, 2) requiring fees even if the payment fails as a cost to the attacker, and 3) implementing a reputation system for nodes.Option 3, the author's preferred solution, involves forwarding payments through nodes with a good reputation, based on their history of quickly fulfilling or failing offered HTLCs. Reputation loss occurs only if the reply (`update_htlc_fail` or `update_htlc_success`) is delayed. The discussion centers around the issue of information leakage and reputation loss in the Lightning Network. One proposal suggests adding noise to the "rate of losing reputation" field to obscure the number of upstream hops, but it presents a risk of insufficient punishment for bad nodes or heightened risk of payment failure. The reputation system has advantages over deobfuscating the route, even though it adds complexity. A participant raises the issue of asymmetrical resources and the potential for malevolent nodes to direct normal traffic to sacrificial nodes they control in order to harm a specific small node without acquiring a bad reputation. They could then understate the reputation-risk while having out-of-band influence over the sacrificial node.The context discusses the reputation system in Lightning Network and how it can be manipulated by malicious nodes to route payments inefficiently. Rusty1 is shown to be able to manipulate the reputation view of other nodes towards Rusty2, while also making Jim look bad. However, Jim argues that this manipulation can be avoided by stopping forwarding to Rusty2, and the reputation loss rate needs to be tuned carefully. The trade-off between network efficiency and privacy is also discussed.The Lightning Network is exploring solutions to prevent opportunistic attackers from delaying payments. One suggestion is a reputation system for nodes, which involves only forwarding payments through nodes with a good history. However, there are concerns about the risks involved with this solution, including de-anonymizing payments and creating an incentive not to forward payments. Another proposal is CLTV-delay randomization for payments, which can obfuscate intermediate node distance from the payee. Additionally, there are discussions about leaking information, including the potential for asymmetrical resources to be used by malevolent nodes to harm smaller nodes without acquiring a bad reputation.There are also concerns about manipulating the reputation of nodes in a payment channel network by routing payments that stall, thus degrading the reputation of the victim node. Overall, the email thread provides a detailed analysis of the proposed reputation system and its potential benefits and drawbacks.The Lightning Network's reputation loss rates and pricing payment delays were discussed, with the suggestion that attackers on the network should compensate for any resources they waste. The increase in reputation loss was viewed as compensation for time-value lost in locked HTLCs, with each node paying in reputation for all of the time-value locked in HTLCs upstream from them. Further considerations were given to the reputation bins being assigned to half-chans rather than nodes in a line network, with the total reputation destroyed forming a triangle, increasing as N increased.In another discussion on proving channel closure, failure to do so would result in a penalty for the unresponsive party, which was not specified in a BOLT document. The discussion on onion peeling in the Lightning Network was brought up on a thread in Github, with questions about whether it made it into the BOLT spec due to problems with it. ZmnSCPxj replied that it did not make it into the BOLT spec, but he did not have information about where the discussion regarding it is archived. Corné Plooy asked where the specification was mentioned in a BOLT, but no answer to this question was given in the thread. The discussion took place on the Lightning-dev mailing list, and the thread is archived online.</summary>
    <published>2018-05-02T06:59:16+00:00</published>
  </entry>
</feed>
