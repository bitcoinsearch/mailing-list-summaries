<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - BIP sighash_noinput</title>
  <updated>2023-06-03T19:11:53.718447+00:00</updated>
  <author>
    <name>Gregory Maxwell 2018-07-02 18:11:54</name>
  </author>
  <author>
    <name>Peter Todd 2018-07-03 05:21:00</name>
  </author>
  <author>
    <name>Rusty Russell 2018-05-09 23:04:58</name>
  </author>
  <author>
    <name>Anthony Towns 2018-05-14 09:23:29</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-07-03 06:58:36</name>
  </author>
  <author>
    <name>Gregory Maxwell 2018-07-03 23:45:22</name>
  </author>
  <author>
    <name>DING FENG 2018-07-11 04:37:27</name>
  </author>
  <author>
    <name>Christian Decker 2018-04-30 16:29:53</name>
  </author>
  <author>
    <name>Dario Sneidermanis 2018-04-30 18:25:42</name>
  </author>
  <author>
    <name>Christian Decker 2018-07-03 12:05:09</name>
  </author>
  <author>
    <name>Luke Dashjr 2018-07-03 12:13:44</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-07-11 07:43:49</name>
  </author>
  <author>
    <name>Rusty Russell 2018-07-13 00:04:14</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2018-05-09 23:01:39</name>
  </author>
  <author>
    <name>Christian Decker 2018-05-15 14:28:22</name>
  </author>
  <author>
    <name>Bram Cohen 2018-05-07 20:51:11</name>
  </author>
  <author>
    <name>William Casarin 2018-07-03 11:54:37</name>
  </author>
  <author>
    <name>Peter Todd 2018-07-09 09:41:39</name>
  </author>
  <author>
    <name>Rusty Russell 2018-07-03 04:56:53</name>
  </author>
  <author>
    <name>Christian Decker 2018-05-07 19:40:46</name>
  </author>
  <author>
    <name>Anthony Towns 2018-05-08 14:40:21</name>
  </author>
  <link href="lightning-dev/July_2018/001333_BIP-sighash-noinput.xml" rel="alternate"/>
  <link href="lightning-dev/July_2018/001336_BIP-sighash-noinput.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001266_BIP-sighash-noinput.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001274_BIP-sighash-noinput.xml" rel="alternate"/>
  <link href="lightning-dev/July_2018/001338_BIP-sighash-noinput.xml" rel="alternate"/>
  <link href="lightning-dev/July_2018/001345_BIP-sighash-noinput.xml" rel="alternate"/>
  <link href="lightning-dev/July_2018/001356_BIP-sighash-noinput.xml" rel="alternate"/>
  <link href="lightning-dev/April_2018/001224_BIP-sighash-noinput.xml" rel="alternate"/>
  <link href="lightning-dev/April_2018/001225_BIP-sighash-noinput.xml" rel="alternate"/>
  <link href="lightning-dev/July_2018/001340_BIP-sighash-noinput.xml" rel="alternate"/>
  <link href="lightning-dev/July_2018/001341_BIP-sighash-noinput.xml" rel="alternate"/>
  <link href="lightning-dev/July_2018/001357_BIP-sighash-noinput.xml" rel="alternate"/>
  <link href="lightning-dev/July_2018/001359_BIP-sighash-noinput.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001265_BIP-sighash-noinput.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001282_BIP-sighash-noinput.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001288_BIP-sighash-noinput.xml" rel="alternate"/>
  <link href="lightning-dev/July_2018/001339_BIP-sighash-noinput.xml" rel="alternate"/>
  <link href="lightning-dev/July_2018/001354_BIP-sighash-noinput.xml" rel="alternate"/>
  <link href="lightning-dev/July_2018/001334_BIP-sighash-noinput.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001242_BIP-sighash-noinput.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001253_BIP-sighash-noinput.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - BIP sighash_noinput</title>
    <updated>2023-06-03T19:11:53.718447+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-July/001333.html" rel="alternate"/>
    <summary>The bitcoin-dev mailing list has been discussing the proposed `SIGHASH_NOINPUT` feature, which removes the commitment to the previous output and is useful for Lightning. However, there are concerns about its security risks and potential loss of funds if used in traditional applications where a third party might pay to an address a second time.Some developers suggest alternative names for the flag, such as 'SIGHASH_REPLAY_VULNERABLE' or 'SIGHASH_WEAK_REPLAYABLE,' and propose using a different Segwit version for NOINPUT signatures. There are also debates over the necessity and vulnerabilities of the `SIGHASH_REUSE_VULNERABLE` flag, with some arguing that it's necessary for certain use cases while others believe it poses significant risks for double-spending attacks. A junior developer expresses concern over the use of "SIGHASH_NOINPUT" which could make reuse addresses more dangerous, and Luke Dashjr does not believe that address reuse should be assumed safe or works. Overall, the proposal is still being discussed, and implementation details are still being debated.Bitcoin Core developer Gregory Maxwell has suggested that the formal name of the 'noinput' flag, designed to simplify Bitcoin transactions, should include a reference to its vulnerability. Another developer, Johnson Lau, agrees that the potential risks of using non-sighash_all sighashes are significant. The proposal for 'SIGHASH_NOINPUT' has received positive response but it is believed to be unlikely to pass review due to lack of groundwork on witness V1 scripts and the potential risk of replay attacks.On May 7, 2018, Christian Decker expressed excitement for the `SIGHASH_NOINPUT` proposal as it aims to eliminate transaction malleability issues and enhance privacy. The implementation of this proposal is expected to enable the Lightning Network to function more efficiently by enabling lightning channels creation without broadcasting to the network, resulting in cost savings for users, and reducing the blockchain's load. However, user aj raised some concerns regarding the proposal in response to Christian's email to bitcoin-dev. Aj suggested using a hypothetical "OP_CHECK_SIG_FOR_SINGLE_USE_KEY" opcode instead of _NOINPUT to mitigate the issue of someone using the same key for multiple inputs and accidentally authorizing spends of other inputs as well. Aj also proposed an alternative idea of using OP_CHECKSIG_1USE or OP_CHECKMULTISIG_1USE, which would ensure that a _NOINPUT signature is only valid for keys deliberately intended to be single-use. Although these opcodes would result in ~34 witness bytes being added, aj argued that it is not worse than the normal taproot tradeoff.Aj acknowledged that a different opcode may make sense at a philosophical level since normal signatures sign a spend of a particular coin, while _NOINPUT signatures sign a spend of an entire wallet. Overall, aj raises some valid concerns about potential risks associated with the `SIGHASH_NOINPUT` proposal and suggests alternative approaches that could address these issues. Nonetheless, Christian looks forward to discussing how to move forward in implementing this proposal and how multiple proposals can be combined into the next soft-fork.It is important to note that existing wallets will not sign things with unknown flags. Haskell libraries propose a new postfix convention for unsafe functions to make the usage more intuitive and easier to understand. Discussions are being held on how to move forward with implementing this proposal and combining multiple proposals into the next soft-fork. It has been suggested that having NOINPUT be a flag to a signature for an OP_CHECK_SIG_FOR_SINGLE_USE_KEY opcode instead may be more realistic. This would mean that it's fundamentally not possible to trick someone who regularly reuses keys to sign something for one input that accidentally authorizes spends of other inputs as well.</summary>
    <published>2018-07-02T18:11:54+00:00</published>
  </entry>
</feed>
