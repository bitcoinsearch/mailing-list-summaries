<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Clearing process in BOLT #2</title>
  <updated>2023-06-03T16:26:13.026660+00:00</updated>
  <author>
    <name>Rusty Russell 2016-04-30 10:11:34</name>
  </author>
  <author>
    <name>Rusty Russell 2016-04-30 10:15:54</name>
  </author>
  <author>
    <name>Pierre 2016-04-29 11:38:53</name>
  </author>
  <link href="lightning-dev/April_2016/000526_Clearing-process-in-BOLT-2.xml" rel="alternate"/>
  <link href="lightning-dev/April_2016/000527_Clearing-process-in-BOLT-2.xml" rel="alternate"/>
  <link href="lightning-dev/April_2016/000524_Clearing-process-in-BOLT-2.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Clearing process in BOLT #2</title>
    <updated>2023-06-03T16:26:13.026660+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-April/000526.html" rel="alternate"/>
    <summary>During a discussion on the Lightning Network protocol, Rusty Russell addressed issues with the clearing process as described in BOLT #2. The protocol had a contradiction between ยง4.1 and ยง3.3, where the former stated that a node must respond with update_fail_htlc to any HTLC received after it sent close_clearing, while the latter listed three reasons for removing an HTLC. In this version of the protocol, there is no way to decline an HTLC, and a sender could only fail the connection instead of declining it. Additionally, if the sender of a close_clearing message subsequently receives an update_add_htlc, there is no way to tell if the other party had received the close_clearing prior to sending the HTLC since update_add_htlc message doesn't have an 'ack' field.To address these issues, Rusty suggested changes to the protocol. For example, he proposed that 4.1 should say: "A node must fail to route any HTLC received after it sent close_clearing." He also added that a node must acknowledge the previous `update_revocation` (if any) in the `update_commit` message and should fail the connection if it receives an `update_commit` which does not acknowledge its previously sent `update_revocation`. Lastly, a node must not send out a message with an `ack` field lower than any previous `ack` field.Pierre, in an email to Bitcoin developers, raised concerns about the clearing process as described in BOLT #2. They noted that there was a contradiction between ยง4.1 and ยง3.3 and suggested that 4.1 should state that a node must fail to route any HTLC received after it sent close_clearing. Pierre also pointed out that in this version of the protocol, an HTLC can only be accepted, committed, then removed, and there is no way to decline an HTLC. They also highlighted the issue that if the sender of a close_clearing message subsequently receives an update_add_htlc, there is no way to tell if the other party had received the close_clearing prior to sending the HTLC since the update_add_htlc message doesn't have an 'ack' field.Moreover, Pierre raised concerns about the signature process, as when node A sends an update_commit message to B, there is no way for A to know if B received the update_commit if B keeps sending new HTLCs instead of responding with an update_revocation message. In response, Rusty proposed a patch to clarify that B can't get more than one step ahead. At some point, it has to send update_commit to A, and then A sends update_revocation. While B could ignore update_commit, it cannot send another update_commit before receiving the previous update_revocation.</summary>
    <published>2016-04-30T10:11:34+00:00</published>
  </entry>
</feed>
