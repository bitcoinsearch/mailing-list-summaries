<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Jamming Mitigation Dry Run</title>
  <updated>2023-08-03T02:10:52.705974+00:00</updated>
  <author>
    <name>Carla Kirk-Cohen 2023-08-01 18:44:57+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Jamming Mitigation Dry Run</title>
    <updated>2023-08-03T02:10:52.706013+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-August/004034.html" rel="alternate"/>
    <summary>We're moving forward with the plan discussed at the summit to conduct a "dry run" of HTLC endorsement and local reputation tracking. The main goals of this plan are to use real-world data to validate the behavior of local reputation algorithms, obtain liquidity and slot utilization data, and provide a common data export format for analysis. The plan consists of several phases, including collecting anonymized forwarding data, propagating an experimental `endorsement` TLV, and implementing local reputation algorithms.The research plan starts with collecting anonymized data using a common CSV file format. The proposed format includes fields such as the version number, short channel IDs of incoming and outgoing channels, public keys of remote peers, fee offered by the HTLC, outgoing liquidity and slots occupied on the outgoing channel, timestamps of when the HTLC was added and removed, and a boolean indicating if the HTLC was settled or failed. The last two fields, incoming and outgoing endorsement statuses, will be set to -1 before the experimental TLV is propagated.To propagate the experimental endorsement TLV, the signal will be included in the `update_add_htlc` message using a reserved range TLV. Forwarding nodes will handle the TLV in the following manner: if the `endorsed` field is present in the incoming `update_add_htlc`, the same value will be set for the outgoing `update_add_htlc`; otherwise, `endorsed` will be set to 0 for the outgoing `update_add_htlc`.The final step involves implementing local reputation algorithms and actively setting the value of the `endorsed` TLV for outgoing HTLCs, instead of simply copying the value presented by the sending node. This signal will only be used for data collection purposes and will not affect the actual transaction. Experimenters have the freedom to use the full range of bits to express endorsement values, but any non-zero value will be interpreted as a positive endorsement signal. The privacy risk of indicating that they are the sending node during upgrade will be borne by the original sender of an HTLC that sets a non-zero value.The research plan is a multi-team effort, with each team working on different aspects of the plan. Eclair is focusing on collecting local reputation data, CLN is working on propagating the endorsement field and creating a plugin for local reputation scoring, LND is working on data export and HTLC endorsement, and LDK requires additional plumbing work.To reference the work being done by each team, links to their respective GitHub repositories and pull requests are provided:- Eclair: [1]- CLN: [4]- LND: [2]- LDK: [3]In conclusion, the research plan aims to collect real-world data to validate local reputation algorithms and inform the creation of synthetic data for simulating attack scenarios. It also seeks to obtain liquidity and slot utilization data to set sane defaults for resource bucketing. A common data export format will be used as a basis for analysis. The plan includes collecting anonymized data, propagating an experimental endorsement TLV, and implementing local reputation algorithms. The plan involves multiple teams, each focusing on different aspects of the plan. Links to the relevant GitHub repositories and pull requests are provided for further reference.References:[1] Eclair: https://github.com/ACINQ/eclair/pull/2716[2] LND: https://github.com/lightningequipment/circuitbreaker/issues/77[3] LDK: https://github.com/lightningdevkit/rust-lightning/issues/2425[4] CLN: https://github.com/lightning/blips/pull/27[5] Bolts: https://github.com/lightning/bolts/pull/1071</summary>
    <published>2023-08-01T18:44:57+00:00</published>
  </entry>
</feed>
