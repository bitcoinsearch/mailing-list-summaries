<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Lightning JavaScript implementation that conforms BOLT</title>
  <updated>2023-06-02T02:44:18.807429+00:00</updated>
  <author>
    <name>Igor Cota 2018-04-23 06:27:11</name>
  </author>
  <author>
    <name>Быхун, Алексей Викторович 2018-04-12 14:39:00</name>
  </author>
  <author>
    <name>Tyler H 2018-04-23 13:23:34</name>
  </author>
  <link href="lightning-dev/April_2018/001218_Lightning-JavaScript-implementation-that-conforms-BOLT.xml" rel="alternate"/>
  <link href="lightning-dev/April_2018/001217_Lightning-JavaScript-implementation-that-conforms-BOLT.xml" rel="alternate"/>
  <link href="lightning-dev/April_2018/001219_Lightning-JavaScript-implementation-that-conforms-BOLT.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Lightning JavaScript implementation that conforms BOLT</title>
    <updated>2023-06-02T02:44:18.807429+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-April/001218.html" rel="alternate"/>
    <summary>Aleksey Bykhun is seeking suggestions on how to run a Lightning Network node within a browser. One option would be to implement the BOLT protocol from scratch in JavaScript, but the writer is looking for an easier method. Aleksey asks if anyone has had success compiling the c-lightning project under WebAssembly, which can create browser-compatible byte-code. However, some functions that c-lighting uses, such as sockets, may prevent it from compiling easily, although Emscripten lib provides wrappers for many C-functions. Tyler suggests a better approach in an email thread, recommending writing a browser extension that interfaces with a daemon already running on the system through REST or similar. Igor notes that Aleksey's biggest obstacle is probably the fact that c-lightning spawns several processes and depends on the bitcoin-cli binary for bitcoind RPC. If WebAssembly supports multiple processes, that could be a good start. There is a c-lightning specific mailing list available for further information.Tyler suggests using Lightning Charge for c-lightning or lnd, which has REST and gRPC built-in. The key difference is that the key material isn't accessed by the browser and secured by the browser's security, but instead lives in the usual directory and the daemon handles it normally. Aleksey could even bundle the daemon with the browser in a neat package, similar to the Tor Browser Bundle. Overall, the writer is requesting advice on what to look for when trying to run a LN node inside the browser and general feedback on the idea.</summary>
    <published>2018-04-23T06:27:11+00:00</published>
  </entry>
</feed>
