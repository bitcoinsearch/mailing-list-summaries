<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - [RFC] Simplified (but less optimal) HTLC Negotiation</title>
  <updated>2023-06-03T02:52:25.035837+00:00</updated>
  <author>
    <name>Christian Decker 2020-10-15 09:47:59</name>
  </author>
  <author>
    <name>Christian Decker 2020-10-26 12:46:44</name>
  </author>
  <author>
    <name>Rusty Russell 2021-04-20 21:19:24</name>
  </author>
  <author>
    <name>Rusty Russell 2021-05-04 04:50:40</name>
  </author>
  <author>
    <name>Rusty Russell 2020-10-12 23:37:07</name>
  </author>
  <author>
    <name>Christian Decker 2020-10-13 11:58:49</name>
  </author>
  <author>
    <name>Rusty Russell 2020-10-15 01:02:13</name>
  </author>
  <author>
    <name>Rusty Russell 2020-10-20 23:40:48</name>
  </author>
  <author>
    <name>Matt Corallo 2021-04-24 04:20:44</name>
  </author>
  <author>
    <name>Matt Corallo 2021-04-24 14:11:33</name>
  </author>
  <author>
    <name>Rusty Russell 2021-04-27 21:32:20</name>
  </author>
  <author>
    <name>Matt Corallo 2021-04-28 02:16:30</name>
  </author>
  <author>
    <name>Rusty Russell 2021-05-04 05:03:35</name>
  </author>
  <author>
    <name>Rusty Russell 2021-04-24 05:55:55</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2020-10-14 09:22:51</name>
  </author>
  <author>
    <name>Rusty Russell 2020-10-15 01:00:12</name>
  </author>
  <author>
    <name>Rusty Russell 2021-04-27 05:04:06</name>
  </author>
  <author>
    <name>Matt Corallo 2021-04-28 02:13:01</name>
  </author>
  <link href="lightning-dev/Oct_2020/002848_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2020/002871_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2021/003000_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/May_2021/003031_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2020/002831_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2020/002837_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2020/002846_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2020/002860_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2021/003011_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2021/003016_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2021/003021_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2021/003025_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/May_2021/003032_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2021/003013_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2020/002844_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2020/002845_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2021/003020_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2021/003024_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - [RFC] Simplified (but less optimal) HTLC Negotiation</title>
    <updated>2023-06-03T02:52:25.036837+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-October/002848.html" rel="alternate"/>
    <summary>Rusty Russell, one of the developers behind the Lightning Network, has been revisiting the issue of protocol optimization to make things like splicing easier. He suggests that avoiding bugs entirely is preferable to catching them all and recommends using splice messages instead of turn-based messages to improve the protocol. Under this system, both sides have to send a splice message to synchronize, and they can only do so once all in-flight changes have cleared. In an email exchange with Matt Corallo, they discuss a proposal for a simplified protocol for the Lightning Network. The proposed protocol would involve additional state machine logic to enforce when a message can or cannot be sent and additional logic for when pending changes buffers can be flushed.Matt Corallo suggests that fuzzing could help catch message-non-delivery-and-resending production desync bugs in the protocol. He notes that there is already a fuzzer that aggressively tests for these types of bugs and that it has caught many in the past. While simplifying the state machine where possible is nice, replacing code with fresh code would require similar testing and is not necessarily the most obvious decrease in complexity.On April 27th, Rusty Russell announced on the Lightning Network GitHub page that a draft is up for a potential update to the network. The update would require that update_fee messages be on their own, which would eliminate any debate on the state of the channel when the update is being applied. While this implementation is currently voluntary, making it compulsory is a goal for the future.Matt suggests that if they do not do turns for splicing, they could take the rules around splicing pausing other HTLC updates and make them generic for future use. This could also be used for update_fee in a simpler-to-make-compulsory change.</summary>
    <published>2020-10-15T09:47:59+00:00</published>
  </entry>
</feed>
