<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - RFC: simplifications and suggestions on open/accept limits.</title>
  <updated>2023-06-02T04:04:02.247814+00:00</updated>
  <author>
    <name>Gert-Jaap Glasbergen 2018-11-05 08:48:56</name>
  </author>
  <author>
    <name>Christian Decker 2018-11-06 03:40:12</name>
  </author>
  <author>
    <name>Anthony Towns 2018-11-07 01:31:55</name>
  </author>
  <author>
    <name>Gert-Jaap Glasbergen 2018-11-06 22:22:56</name>
  </author>
  <author>
    <name>Gert-Jaap Glasbergen 2018-11-07 02:26:29</name>
  </author>
  <author>
    <name>Pierre 2018-11-07 04:51:21</name>
  </author>
  <author>
    <name>Conner Fromknecht 2018-11-09 06:53:56</name>
  </author>
  <author>
    <name>Gert-Jaap Glasbergen 2018-10-30 10:56:13</name>
  </author>
  <author>
    <name>Rusty Russell 2018-11-01 01:03:19</name>
  </author>
  <author>
    <name>Rusty Russell 2018-10-17 03:22:41</name>
  </author>
  <author>
    <name>Anthony Towns 2018-11-07 09:39:15</name>
  </author>
  <author>
    <name>alexis petropoulos 2018-11-09 06:47:55</name>
  </author>
  <link href="lightning-dev/Nov_2018/001517_RFC-simplifications-and-suggestions-on-open-accept-limits-.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001525_RFC-simplifications-and-suggestions-on-open-accept-limits-.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001529_RFC-simplifications-and-suggestions-on-open-accept-limits-.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001526_RFC-simplifications-and-suggestions-on-open-accept-limits-.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001530_RFC-simplifications-and-suggestions-on-open-accept-limits-.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001533_RFC-simplifications-and-suggestions-on-open-accept-limits-.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001549_RFC-simplifications-and-suggestions-on-open-accept-limits-.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2018/001483_RFC-simplifications-and-suggestions-on-open-accept-limits-.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001487_RFC-simplifications-and-suggestions-on-open-accept-limits-.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2018/001464_RFC-simplifications-and-suggestions-on-open-accept-limits-.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001537_RFC-simplifications-and-suggestions-on-open-accept-limits-.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001548_RFC-simplifications-and-suggestions-on-open-accept-limits-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - RFC: simplifications and suggestions on open/accept limits.</title>
    <updated>2023-06-02T04:04:02.247814+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-November/001517.html" rel="alternate"/>
    <summary>Bitcoin's dust limit is a set value that prevents outputs smaller than 546 satoshis, which means transferred values and fees must always be multiples of that dust limit. However, there have been discussions among Bitcoin developers about allowing users to choose between using satoshis or millisatoshis as the smallest fraction of a Bitcoin in transactions. Gert-Jaap Glasbergen argues for this choice to allow for broader applicability and user preference, but Rusty Russell expresses concerns about the potential compromise of security and the network's operability.Other discussions include negotiation values in the Lightning Network protocol, such as limiting channel depths and varying the definition of "dust" with fees. While some developers suggest removing htlc_minimum_msat, others argue that it is the only protection measure against trimmed HTLCs and should be kept. Ultimately, finding the right configuration options is important, while keeping in mind the complexities and potential trade-offs involved.The message under discussion highlights the challenges faced in payment protocols due to disagreement on values, leading to generally-accepted values outside of the specification. The writer suggests re-examining variables such as funding_satoshis, dust_limit_satoshis, max_htlc_value_in_flight_msat, channel_reserve_satoshis, and minimum_depth. They propose improving these variables based on their current values and suggest rejecting any channel under 3 x min(our_dust_limit, their_dust_limit). The suggestion is also made to drop max_htlc_value_in_flight_msat and revise the value for channel_reserve_satoshis to 483. Additionally, the minimum_depth value should be increased to 6. In terms of routing payments with fractions, it's expected that a payment protocol can handle fractions provided they are above the set minimum. The writer recommends setting fee_base_msat to 2000 msat to ensure every HTLC routed pays at least one satoshi, even with losses from rounding. Alternatively, if willing to route payments for free (after rounding), then setting it to 1000 msat should work too.In another thread, Gert-Jaap Glasbergen proposes using millisatoshis as the smallest fraction in Lightning Network while Rusty Russell argues that not using them would render the network inoperable since fees often fall below the sub-satoshi level. Gert-Jaap believes it's important to allow freedom of choice and proposes further analysis on the consequences of allowing this choice. Ultimately, he seeks to achieve the freedom of choice without negatively impacting other clients or users that decide to accept some level of trust.Overall, the message highlights the need for improvements to certain variables within payment protocols and the possibility of open-source configuration by end-users. The importance of allowing freedom of choice within the Lightning Network is also under discussion in separate email threads.</summary>
    <published>2018-11-05T08:48:56+00:00</published>
  </entry>
</feed>
