<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Strawman BOLT11 static "offer" format using probes.</title>
  <updated>2023-06-03T20:19:10.894266+00:00</updated>
  <author>
    <name>ZmnSCPxj 2018-11-16 03:07:15</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-15 04:42:28</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-15 16:22:29</name>
  </author>
  <author>
    <name>Rusty Russell 2018-11-16 00:15:28</name>
  </author>
  <author>
    <name>René Pickhardt 2018-11-16 07:47:15</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-16 09:01:35</name>
  </author>
  <author>
    <name>Rusty Russell 2018-11-17 23:20:56</name>
  </author>
  <author>
    <name>Rusty Russell 2018-11-15 03:56:31</name>
  </author>
  <link href="lightning-dev/Nov_2018/001616_Strawman-BOLT11-static-offer-format-using-probes-.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001603_Strawman-BOLT11-static-offer-format-using-probes-.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001611_Strawman-BOLT11-static-offer-format-using-probes-.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001615_Strawman-BOLT11-static-offer-format-using-probes-.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001623_Strawman-BOLT11-static-offer-format-using-probes-.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001625_Strawman-BOLT11-static-offer-format-using-probes-.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001633_Strawman-BOLT11-static-offer-format-using-probes-.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001602_Strawman-BOLT11-static-offer-format-using-probes-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Strawman BOLT11 static "offer" format using probes.</title>
    <updated>2023-06-03T20:19:10.894266+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-November/001616.html" rel="alternate"/>
    <summary>ZmnSCPxj acknowledges overestimating the power of Scriptless Scripts before the summit, but recognizes its difficulty in implementation without Schnorr due to script magic with OP_CODESEPARATOR. Static invoices are not possible for proof-of-payment as the payee needs to dynamically provide a new payment hash or payment point under SS. ZmnSCPxj proposes a separate BOLT for type, len, data format in the final-hop lightning onion and suggests documenting various consistent designs of messages. The proposal includes having reusable BOLT11 "offers" for almost-spontaneous payments without generating a BOLT11 invoice for each potential sale. The proposal is handwaved over the detailed format and provides a platform for recurring payments and static invoicing. ZmnSCPxj discusses generating a `payment_hash` from random data and sending it to the payee to stream invoices instead of anime. He also proposes adding separate BOLT15 offers that let users get any number of BOLT11 invoices. ZmnSCPxj suggests including a connection-oriented communication layer on top of the current protocol to allow for more efficient payment communication.In a conversation with Rusty Russell, René Pickhardt asks for clarification on the term "lightning probe message" which he couldn't find in the current BOLTs. Rusty responds that it would be a new message and explains how the payer should create an onion package which triggers the offering of HTLCs with additional metadata so that the recipient of the final onion can answer with a BOLT11 invoice. Rusty further clarifies that there is no need for payment hash to offer HTLCs. René suggests having a connection-oriented communication layer on top of the current protocol and Rusty responds by recommending reading the paper on HORNET and explains the lack of incentives and privacy concerns.The proposal suggests using reusable BOLT11 "offers" to provide almost-spontaneous payments without needing to generate a BOLT11 invoice for each sale. The offer will have a `p` field of 26 bytes, which is ignored by existing nodes. The payer will use a new lightning probe message using the current onion format for HTLCs to retrieve the complete invoice. The final-hop lightning onion would contain a marker, a 128-bit `p` field, and optional types such as quantity, delivery-address, and signature. The return lightning message would contain a new bolt11 invoice, possibly optimized by copying fields from the bolt11 offer if they don't appear, and an additional field `m` (27) `data_length` 52. Refinements suggested include generating alternate leaves for the merkle tree, listing the fields that weren't included in the merkle, adding a `k` field to delegate the final invoice to a separate key, setting a default expiry field for pure offers to infinite, and merkelizing the delivery-address too. This proposal provides a way to have static invoicing and a single static invoice can thus be used to approximate spontaneous donations while still providing proof of payment. It also provides a platform for recurring payments, which cannot be done with preimage-is-next-payment_hash.</summary>
    <published>2018-11-16T03:07:15+00:00</published>
  </entry>
</feed>
