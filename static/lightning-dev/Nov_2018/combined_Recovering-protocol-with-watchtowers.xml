<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Recovering protocol with watchtowers</title>
  <updated>2023-06-03T20:10:41.537107+00:00</updated>
  <author>
    <name>Margherita Favaretto 2018-11-12 18:59:31</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-12 23:33:41</name>
  </author>
  <author>
    <name>Margherita Favaretto 2018-11-13 20:30:20</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-13 23:08:40</name>
  </author>
  <link href="lightning-dev/Nov_2018/001568_Recovering-protocol-with-watchtowers.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001570_Recovering-protocol-with-watchtowers.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001583_Recovering-protocol-with-watchtowers.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001586_Recovering-protocol-with-watchtowers.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Recovering protocol with watchtowers</title>
    <updated>2023-06-03T20:10:41.537107+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-November/001568.html" rel="alternate"/>
    <summary>Margherita Favaretto from the dev-lightning community has proposed a solution for the backup mechanism of false positives in the Lightning network. The proposed solution involves using watchtowers that act as full nodes and are online 24/7 to back up commitments data. Margherita defines two new concepts, nonce-time Tn, and payload P, and encrypts the payload with the public key of the node A so that watchtowers cannot know the status channel of A. She proposes sending the actual nonce-time and the actual payload to one of the watchtowers and just send the new nonce-time to the others to split the data into different watchtowers without sending the payload after each transaction to all of them.Margherita suggests that fee be sent every time that the node A requests data to the watchtower for the backup. This money encourages the watchtowers to guarantee the service every time. Margherita's design mitigates risks such as a watchtower sending an older payload instead of the last one and watchtowers changing the nonce-time. However, there is still a risk if 51% of the watchtower agrees to cheat and sends another nonce-time to the node. Margherita asks for feedback on overlapping the concept of watchtower with the mechanism of backup.Margherita's solution protects the privacy of the node because the payload contains information of a status channel and nonce-time that are encrypted on the public key of A. Therefore, watchtowers cannot decrypt the payload or modify it. The payload must contain the channel ID between A and the specific watchtower, and this information is not known by the other nodes of the network. Margherita defines two new concepts: nonce-time Tn, which is the current value of nonce-time, and payload P, which consists of a zip of all status channels of a node A at a specific time T1. The use of a node public key as the key for backup in a solution and its incompatibility with watchtowers, which are currently designed to be keyed to a txid, is discussed. The use of txid is important for privacy reasons as it does not identify the node. A scheme that encrypts payload information on the public key of the node and uses channel ID to prevent malicious activity is suggested. However, this solution is vulnerable to corrupted backup data, which would render the operation of the node irrecoverable.DHT is recommended as a better alternative for distributed backup implementation. It is also noted that each watchtower must have a distinct payment channel, thus raising questions about why the watchtower is keyed to the node rather than something specific to each payment channel.</summary>
    <published>2018-11-12T18:59:31+00:00</published>
  </entry>
</feed>
