<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Towards a Market for Liquidity Providers -- Enforcing Minimum Channel Lifetime</title>
  <updated>2023-06-03T20:09:05.521845+00:00</updated>
  <author>
    <name>ZmnSCPxj 2018-11-10 13:46:24</name>
  </author>
  <author>
    <name>Pierre 2018-11-11 03:40:16</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-12 00:35:55</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-12 00:15:47</name>
  </author>
  <link href="lightning-dev/Nov_2018/001555_Towards-a-Market-for-Liquidity-Providers-Enforcing-Minimum-Channel-Lifetime.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001557_Towards-a-Market-for-Liquidity-Providers-Enforcing-Minimum-Channel-Lifetime.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001560_Towards-a-Market-for-Liquidity-Providers-Enforcing-Minimum-Channel-Lifetime.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001558_Towards-a-Market-for-Liquidity-Providers-Enforcing-Minimum-Channel-Lifetime.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Towards a Market for Liquidity Providers -- Enforcing Minimum Channel Lifetime</title>
    <updated>2023-06-03T20:09:05.521845+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-November/001555.html" rel="alternate"/>
    <summary>The discussion around the concept of dual-funding and a liquidity market for providing incoming capacity is explored in this thread. The proposal suggests adding an additional CLTV constraint to determine the minimum channel lifetime after symmetric CSV. However, it is noted that parties have to exchange the first commitment txes before the funding tx is even published, which means the absolute CLTV delay wouldn't really constrain the duration of the channel as the timer starts running before the channel is created. In a Lightning-dev discussion, ZmnSCPxj brings up the "initiator pays" principle in relation to liquidity providers. It is analyzed how onchain fees are split between the liquidity provider and party buying liquidity. The liquidity provider would increase its liquidity fees until it reaches the level where it would still earn the opportunity cost of locking its funds, taking into account the onchain fee that the provider would provide. Therefore, the onchain fee from the liquidity provider's side would still end up being paid by the buyer of liquidity. ZmnSCPxj presents the full contract that Mercy and Licky would agree to in this scenario, where Mercy agrees to pay N satoshi to Licky, Licky agrees to have L satoshi locked for use in the channel until blockheight B, either side may void this contract by paying a miner fee until the funding transaction confirms, and Mercy is responsible for getting the funding transaction confirmed. It is noted that if the funding transaction gets confirmed and it is possible for one party to broadcast the commitment transaction, then the same analysis applies.The conversation between Pierre and ZmnSCPxj also mentions the possibility of lowballing the onchain fee for the funding transaction and doubling-spending only one's own inputs to invalidate the funding transaction, which would mean Licky loses all ability to earn. The time from when both sides agree to open the channel and exchange signatures for the funding transaction to the time the funding transaction confirms may be sensitive due to the possibility of one side unilaterally RBFing their inputs.</summary>
    <published>2018-11-10T13:46:24+00:00</published>
  </entry>
</feed>
