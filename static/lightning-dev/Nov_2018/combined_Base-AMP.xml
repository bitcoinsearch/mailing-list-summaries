<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Base AMP</title>
  <updated>2023-06-02T04:29:38.095262+00:00</updated>
  <author>
    <name>Rusty Russell 2018-12-02 22:48:04</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-12-04 18:52:58</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-13 22:39:05</name>
  </author>
  <author>
    <name>Rusty Russell 2018-11-14 00:13:30</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-14 01:59:18</name>
  </author>
  <author>
    <name>Johan Torås Halseth 2018-11-27 22:25:18</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-21 02:54:28</name>
  </author>
  <author>
    <name>Rusty Russell 2018-11-21 22:52:28</name>
  </author>
  <author>
    <name>Conner Fromknecht 2018-11-21 23:38:20</name>
  </author>
  <author>
    <name>Christian Decker 2018-12-04 11:40:00</name>
  </author>
  <author>
    <name>Anthony Towns 2018-11-16 15:45:27</name>
  </author>
  <author>
    <name>Rusty Russell 2018-11-21 00:29:43</name>
  </author>
  <author>
    <name>Johan Torås Halseth 2018-11-21 13:04:00</name>
  </author>
  <author>
    <name>Rusty Russell 2018-11-22 04:50:22</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-22 08:20:20</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-13 12:28:06</name>
  </author>
  <author>
    <name>Johan Torås Halseth 2018-11-13 16:33:00</name>
  </author>
  <author>
    <name>Conner Fromknecht 2018-11-13 19:00:48</name>
  </author>
  <author>
    <name>Christian Decker 2018-11-15 19:46:26</name>
  </author>
  <author>
    <name>Johan Torås Halseth 2018-11-26 07:58:24</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-26 08:10:11</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-28 03:54:45</name>
  </author>
  <author>
    <name>René Pickhardt 2018-11-20 13:53:04</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-20 15:26:27</name>
  </author>
  <author>
    <name>Rusty Russell 2018-11-21 22:50:17</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-13 22:47:19</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-14 23:35:30</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-15 23:54:22</name>
  </author>
  <author>
    <name>Rusty Russell 2018-11-28 00:00:48</name>
  </author>
  <author>
    <name>Rusty Russell 2018-11-29 23:46:16</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-30 05:53:26</name>
  </author>
  <link href="lightning-dev/Dec_2018/001707_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2018/001718_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001584_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001590_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001592_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001679_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001645_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001650_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001652_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2018/001714_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001629_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001642_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001646_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001655_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001657_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001577_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001580_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001581_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001612_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001670_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001671_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001684_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001638_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001639_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001649_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001585_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001600_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001613_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001680_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001698_Base-AMP.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001701_Base-AMP.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Base AMP</title>
    <updated>2023-06-02T04:29:38.095262+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-December/001707.html" rel="alternate"/>
    <summary>In a recent communication thread on the Lightning-dev mailing list, the concept of merging failed payment paths into a single payment along the more expensive path was proposed by ZmnSCPxj. This proposal was backed by Rusty Russell who stated that using 'numpaths' to commit to future actions is unnecessary since the payee is only interested in the total value of the payment. The discussion also touched upon the issue of implementing Base AMP with the suggestion being to have an opt-in flag rather than relying on assumptions about incoming payments.The email thread between Johan and ZmnSCPxj discussed the concept of merge nodes, which wait for the entire payment to be available and committed to as HTLCs before making claims. They assume that proof-of-payment is valuable and if the ultimate payee has not received all payments, it would be irrational to claim a partial payment since it would release the proof-of-payment for a value less than the value implied by the invoice. Similarly, intermediate nodes should forward a value only if it's greater than the current total value merging into it and it has assurances it can claim all values in a commitment transaction.ZmnSCPxj suggested a new method to support Base AMP, but Rusty Russell argued that the complexity of this proposal outweighs its benefits for now. Instead, he suggested sticking with BOLT #4 which defines the per hop data structure for payments. He proposes defining bit 0 of `flags` as `incomplete_payment` in BOLT #4 and allowing it only for final nodes who put it in their BOLT11 field.René Pickhardt via Lightning-dev has proposed adding a base AMP proposal to BOLT04 and BOLT11. The proposal contains some verification, clarification, and proposing of an algorithm for executing multipath payment. René suggests that the receiving node signals support for Base AMP by setting a feature bit in the BOLT11 String. The sending node signals a multipath payment by setting a feature bit and using the same `amount to forward` value in the last hop of the onion for all.AMP in BOLT11 is discussed. They suggest using a flag to explicitly opt-in for both sides and not affect existing nodes. The proposal aims to support Base AMP by allowing arbitrary merges of payment paths but not arbitrary splits. An algorithm such as the divide and conquer scheme is suggested, but Rusty does not think it is useful and suggests using more random split instead. They also propose adapting a convention for a lower limit at which they disable the channel if they can't forward. The proposed `multipath_merge_per_hop` type indicates that payment has been split by the sender using Base AMP, and the receiver should wait for the total intended payment before forwarding or claiming the payment. If the receiving node is not the last node in the path, then succeeding hops must be the same across all splits. The contents of this hop will be the same across all paths of the Base AMP. Intended_total_payment is the total amount of money that this node should expect to receive in all incoming paths to the same payment_hash. In case the payment is held, it may exclude the possibility of iterative path finding as the entire payment flow must be known up front during onion packet construction.Rusty explains that recipients do not need to know the total amount meant to be paid; they just need to return the receipt once it exceeds the amount they want. Johan suggests naming the payments accordingly since they are no longer atomic. ZmnSCPxj proposed the `multipath_merge_per_hop` type to support Base AMP, and the proposal includes technical details about the new feature, including the data format and behavior of nodes in the network.Overall, the proposal suggests that there is very little benefit to adding arbitrary merge points as it adds complexity, and we get to save some HTLC setups and teardown for just one C-D HTLC, which does not justify the added complexity. Therefore, the proposal suggests sticking with the simple mechanism of having the recipient be the only merge point. The implementation should be opt-in for both sides, and they agree that the receiver should assume NAMP for incoming payments, but this could result in partial payment errors if the recipient doesn't support Base AMP.In a recent email discussion, ZmnSCPxj proposed using a two-byte "number of total pieces" system to split the bill, however, Rusty Russell explained that this method would not work well for all cases. Russell went on to explain that committing to a certain number of paths in advance is unnecessary and that the payee is more interested in the total value than the details of the split. The conversation then turned to a hypothetical network with four paths between the payer and payee. Three of these paths have low capacity but negligible feerates, while the fourth has high capacity with expensive feerates. In order to minimize fees when paying a large amount, it would make sense to split the payment among the three low-cost</summary>
    <published>2018-12-02T22:48:04+00:00</published>
  </entry>
</feed>
