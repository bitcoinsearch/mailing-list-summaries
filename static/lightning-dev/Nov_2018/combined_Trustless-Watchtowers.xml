<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Trustless Watchtowers</title>
  <updated>2023-06-02T04:22:17.789867+00:00</updated>
  <author>
    <name>ZmnSCPxj 2018-11-12 09:17:36</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-15 08:23:36</name>
  </author>
  <author>
    <name>Conner Fromknecht 2018-11-14 00:12:05</name>
  </author>
  <author>
    <name>Conner Fromknecht 2018-11-14 00:28:38</name>
  </author>
  <link href="lightning-dev/Nov_2018/001562_Trustless-Watchtowers.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001608_Trustless-Watchtowers.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001589_Trustless-Watchtowers.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001591_Trustless-Watchtowers.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Trustless Watchtowers</title>
    <updated>2023-06-02T04:22:17.789867+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-November/001562.html" rel="alternate"/>
    <summary>The Lightning-dev mailing list has been discussing watchtowers in relation to lnd and Decker-Russell-Osuntokun channels. Conner Fromknecht has implemented much of the server side for watchtower design, which accepts encrypted blobs from clients and stores them. The functionality related to scanning blocks and publishing justice transactions has also been implemented but hasn't been merged yet. The email exchange highlights concerns about potential spam attacks on watchtowers and the need for watchtowers to keep all encrypted blobs keyed to the same partial txid. To counter attack, a session-based, two-level bucketing structure is suggested that maps client public keys to encrypted blobs. Regarding watchtowers compatible with Decker-Russell-Osuntokun (DRO) channels, there is concern about privacy leakage if the watchtower identifies the user. Laolu suggests that DRO channels can simply "update" the blob side of a txid-blob entry, but this is unsafe unless the watchtower identifies the user somehow. ZmnSCPxj asks what plans the lnd developers have for these issues and expresses curiosity about their first moves into this area. There is also the issue of privacy leakage if the watchtower identifies the user.The watchtower design should be able to serve eltoo clients, with some slight modifications to breach detection and justice txn construction. However, the update-and-replace model leaks timing information about a particular channel to the tower, since the tower must know which prior state needs replacing. Overall, the watchtower design seems mostly solidified, and there will likely be follow-up posts on the ML. The tower could raise its price point if it detects such behavior and should only ever accept sessions if it can be certain it has the appropriate disk-space to facilitate them, so there isn't much risk in the node crashing due to a spam attack. Finally, the tower can't be sure which client is uploading the "real" blob, so the chosen design uses a two-level bucketing structure that maps client_pubkey1 to encrypted_blob1 and client_pubkey2 to encrypted_blob2.</summary>
    <published>2018-11-12T09:17:36+00:00</published>
  </entry>
</feed>
