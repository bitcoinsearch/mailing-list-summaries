<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Invoice Address Format</title>
  <updated>2023-06-03T20:21:32.276899+00:00</updated>
  <author>
    <name>Varunram Ganesh 2018-11-20 17:33:59</name>
  </author>
  <author>
    <name>Rusty Russell 2018-11-21 00:32:24</name>
  </author>
  <link href="lightning-dev/Nov_2018/001640_Invoice-Address-Format.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001641_Invoice-Address-Format.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Invoice Address Format</title>
    <updated>2023-06-03T20:21:32.276899+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-November/001640.html" rel="alternate"/>
    <summary>Bech32 and raw hex encoded pubkeys have been a mystery for some time, particularly in the context of invoice addresses. A sample testnet invoice was created from an exhaustive list of 159605 BCH codes designed to detect errors up to various lengths. Only codes that could detect 4 errors up to length 71 were chosen, resulting in 28825 remaining codes. In a post, Varunram Ganesh suggests that the error encoding format bech32 is under-optimized for invoices longer than 71 characters and questions why hex encoded pubkeys are used in lightning instead of bech32. Rusty Russell responds by acknowledging that Ganesh is correct in thinking that bech32 is better for this purpose, but explains that hex encoded pubkeys were chosen because it is an existing encoding in the bitcoin ecosystem. He adds that the signature on an invoice provides a stronger guarantee than the 6-char checksum anyway.</summary>
    <published>2018-11-20T17:33:59+00:00</published>
  </entry>
</feed>
