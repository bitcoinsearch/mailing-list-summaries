<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Invoice Address Format</title>
  <updated>2023-06-02T04:37:35.550736+00:00</updated>
  <author>
    <name>Varunram Ganesh 2018-11-20 17:33:59</name>
  </author>
  <author>
    <name>Rusty Russell 2018-11-21 00:32:24</name>
  </author>
  <link href="lightning-dev/Nov_2018/001640_Invoice-Address-Format.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001641_Invoice-Address-Format.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Invoice Address Format</title>
    <updated>2023-06-02T04:37:35.550736+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-November/001640.html" rel="alternate"/>
    <summary>The use of bech32 and raw hex encoded pubkeys for invoice addresses has been a mystery. A sample testnet invoice was created using one of 28825 remaining codes out of an exhaustive list of 159605 BCH codes designed to detect errors up to various lengths. In a post, Varunram Ganesh suggests that the error encoding format bech32 is not optimized for invoices with lengths greater than 71, and questions why hex encoded pubkeys are used instead of bech32 in lightning. Rusty Russell responds by agreeing with Varunram Ganesh that bech32 is better suited for this context, but explains that hex encoded pubkeys were chosen because they already exist in the bitcoin ecosystem. He also states that the signature on an invoice provides a stronger guarantee than the 6-char checksum.</summary>
    <published>2018-11-20T17:33:59+00:00</published>
  </entry>
</feed>
