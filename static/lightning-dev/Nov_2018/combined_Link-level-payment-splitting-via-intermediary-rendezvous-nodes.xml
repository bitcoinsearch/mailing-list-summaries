<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Link-level payment splitting via intermediary rendezvous nodes</title>
  <updated>2023-06-02T04:19:47.531700+00:00</updated>
  <author>
    <name>ZmnSCPxj 2018-11-09 11:32:27</name>
  </author>
  <author>
    <name>Christian Decker 2018-11-13 03:45:52</name>
  </author>
  <author>
    <name>Conner Fromknecht 2018-11-13 20:21:28</name>
  </author>
  <author>
    <name>Christian Decker 2018-11-14 11:40:46</name>
  </author>
  <author>
    <name>Christian Decker 2018-11-15 07:22:09</name>
  </author>
  <author>
    <name>Johan Tor√•s Halseth 2018-11-09 08:07:51</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-13 04:46:53</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-14 23:29:30</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-09 05:46:36</name>
  </author>
  <link href="lightning-dev/Nov_2018/001551_Link-level-payment-splitting-via-intermediary-rendezvous-nodes.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001573_Link-level-payment-splitting-via-intermediary-rendezvous-nodes.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001582_Link-level-payment-splitting-via-intermediary-rendezvous-nodes.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001594_Link-level-payment-splitting-via-intermediary-rendezvous-nodes.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001606_Link-level-payment-splitting-via-intermediary-rendezvous-nodes.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001550_Link-level-payment-splitting-via-intermediary-rendezvous-nodes.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001575_Link-level-payment-splitting-via-intermediary-rendezvous-nodes.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001599_Link-level-payment-splitting-via-intermediary-rendezvous-nodes.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001547_Link-level-payment-splitting-via-intermediary-rendezvous-nodes.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Link-level payment splitting via intermediary rendezvous nodes</title>
    <updated>2023-06-02T04:19:47.531700+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-November/001551.html" rel="alternate"/>
    <summary>The Lightning Network email conversation revolves around payment routing using rendezvous routing and link-level payment splitting. It is crucial for C to ensure that the detour route taken by a payment stays within the fee limit, even if it charges a slightly lower fee than what C would charge. However, there is a risk of pushing off a hop packet at the end by inserting a switch-ephemeral-keys hop packet, which C cannot know beforehand. ZmnSCPxj suggests using rendezvous routing and link-level payment splitting in Lightning Network, but Christian raises concerns about the padding mechanism described in the proposal. To address the concerns, Christian proposes zero-filling the padding and performing an additional ECDH at the rendezvous point to ensure the recipient can determine the same padding as the rendezvous node. It is pointed out that even with a single channel to the next node, it is possible to still perform link-level payment splitting/re-routing by using rendezvous routing. There are potential problems with the mechanism proposed during the spec meeting, such as violating the wrap-resistance property of the ideal onion routing scheme. One solution involves Rendez-vous RV receiving an onion, performing ECDH like normal to get the shared secret, decrypting its payload, simultaneously encrypting the padding, extracting the per-hop payload and shifting the entire packet over, then noticing that it should perform an ephemeral key switch, zero-filling the padding that it just added and performing ECDH with the switched-in ephemeral key to get a new shared secret. This allows for re-routing or payment splitting over multiple hops. A proposal for multiple rendezvous nodes is discussed, but concerns are raised about possible security degradation due to this added flexibility. Implementing HORNET, which supports rendezvous routing and is formally proven in this model, is suggested as a better path forward. It is confirmed that link-level payment splitting is accepted and the provisional acceptance of rendezvous routing is discussed. Even if a node has only one channel to the next node, re-routing or payment splitting over multiple hops is possible.Rendez-vous routing offers partial route-to-payee, allowing for successful payment transfers to the final destination. This feature is crucial in ensuring that payments are made accurately and efficiently. By utilizing rendez-vous routing, payees have the chance to receive their payments seamlessly, without any interruptions or delays. Furthermore, partial route-to-payee ensures that payments can be made even if there are issues with the initial routing. This means that if there are any complications during the payment transfer process, the system will automatically adjust the route to ensure that the payment reaches its final destination. This is achieved through the use of advanced technology and algorithms that are designed to optimize payment transfers and reduce errors. Overall, partial route-to-payee under rendezvous routing is an essential feature that enables seamless and efficient payment transfers. It ensures that payments reach their intended recipients without any interruptions or delays, even in cases where there are issues with the initial routing. As such, this feature is a critical component of modern payment systems and is widely used by financial institutions and businesses around the world.</summary>
    <published>2018-11-09T11:32:27+00:00</published>
  </entry>
</feed>
