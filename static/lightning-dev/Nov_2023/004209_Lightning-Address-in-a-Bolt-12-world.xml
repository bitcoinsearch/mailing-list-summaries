<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Lightning Address in a Bolt 12 world</title>
  <updated>2023-11-18T02:16:38.695088+00:00</updated>
  <author>
    <name>Andy Schroder 2023-11-17 18:07:15+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Lightning Address in a Bolt 12 world</title>
    <updated>2023-11-18T02:16:38.695120+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-November/004209.html" rel="alternate"/>
    <summary>The ongoing debate between using DNS-only versus incorporating a webserver for LNURL applications brings up several valid points regarding efficiency, latency, and security. The argument against adding a webserver centers on the inherent benefits of DNS, which already includes caching and redundancy mechanisms. By contrast, webservers typically require additional configurations to achieve similar levels of reliability.

Moreover, there's a distinction in the security protocols needed for HTTP-based systems as opposed to DNS-only setups. While the former necessitates both DNSSEC and SSL to ensure data authenticity, a DNS-only approach would only require DNSSEC, streamlining the process. This reflects a broader perspective that DNS is not only more lightweight but also potentially more scalable.

There's an implicit suggestion that if existing DNS servers are incapable of handling extensive records efficiently, an alternative solution might be to develop new DNS servers tailored to these specific demands. This is juxtaposed with the convenience offered by cloud providers, which often promote HTTP solutions and may inadvertently discourage the use of traditional DNS methods.

Lastly, the discussion touches upon the direction of network infrastructure developmentâ€”whether it should lean towards cloud-based or self-hosted models. It seems there's a recommendation for building upon the DNS system when necessary, such as implementing layers that route DNS over HTTP, rather than defaulting to an HTTP-centric approach. This implies a preference for keeping the core system as simple and efficient as possible, particularly for those who manage their own hosting.</summary>
    <published>2023-11-17T18:07:15+00:00</published>
  </entry>
</feed>
