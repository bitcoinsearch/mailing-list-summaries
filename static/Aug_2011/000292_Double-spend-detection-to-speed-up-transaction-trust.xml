<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Double spend detection to speed up transaction trust</title>
  <updated>2023-05-12T04:52:24.641474+00:00</updated>
  <author>
    <name>Matt Corallo</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Double spend detection to speed up transaction trust</title>
    <updated>2023-05-12T04:52:24.641474+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-August/000292.html" rel="alternate"/>
    <summary>The email conversation is about the suggestion to add MSG_DOUBLESPEND to the inventory list. The initial objection was that it adds extra network complexity and requires people to know about another message, but the counterargument is that it's not complex and backward compatible. The discussion then moves on to the scenario where double spend transactions enter the network at two reasonably evenly connected points and each transaction is only seen by half the network since the first one locks out the second from propagation. However, it is pointed out that what matters is what miners believe, not what the network thinks is the right transaction. The conversation then delves into the possibility of preventing double spends nearly perfectly by peering with the largest miners and merchants and modifying the client to keep both transactions in memory pool and consider them both invalid until one of them confirms. It is emphasized that this will work with any number of scammers and doesn't require additional network messages. The conversation concludes with a mention of possible future Bitcoin payment processors and the uncertainty surrounding Bitcoin's future.</summary>
    <published>2011-08-04T18:39:56+00:00</published>
  </entry>
</feed>
