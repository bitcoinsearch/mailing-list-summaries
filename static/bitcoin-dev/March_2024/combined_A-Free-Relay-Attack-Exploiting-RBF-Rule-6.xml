<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - A Free-Relay Attack Exploiting RBF Rule #6</title>
  <updated>2024-03-20T02:22:19.520272+00:00</updated>
  <author>
    <name>Peter Todd 2024-03-19 13:46:00+00:00</name>
  </author>
  <author>
    <name>Nagaev Boris 2024-03-19 12:37:00+00:00</name>
  </author>
  <author>
    <name>Peter Todd 2024-03-18 13:21:00+00:00</name>
  </author>
  <link href="bitcoin-dev/March_2024/md358ddf1b5ae0a6b9b650c1e7d1d67c44b880b43_A-Free-Relay-Attack-Exploiting-RBF-Rule-6.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2024/m559e9ff9e838c41918d869fa527ed1bc9d474113_A-Free-Relay-Attack-Exploiting-RBF-Rule-6.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2024/md907cb31d0a0069d9cf44c39281e8b986fcbd91f_A-Free-Relay-Attack-Exploiting-RBF-Rule-6.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - A Free-Relay Attack Exploiting RBF Rule #6</title>
    <updated>2024-03-20T02:22:19.520317+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/ZfmXNiscjatFOOCX@petertodd.org/T/#md358ddf1b5ae0a6b9b650c1e7d1d67c44b880b43" rel="alternate"/>
    <summary>The Replace-by-Fee (RBF) Rule 6 significantly influences Bitcoin's transaction prioritization, favoring transactions with higher fee rates. Initially part of the Full-RBF opt-in pull request, its exclusion from BIP-125 was unintentional. This rule introduces a path dependency in transaction acceptance, leading to potential vulnerabilities such as free-relay attacks. These attacks involve broadcasting two transactions with varying sizes and fee rates to different nodes, exploiting RBF rules to consume bandwidth without achieving transaction finality. Attackers can create numerous transactions with marginally higher fees to overload the network, relying on the chance that these transactions will not be processed until they offer competitive fee rates.

To counteract such vulnerabilities, the implementation of Replace-by-Fee-Rate (RBFR) has been proposed. RBFR limits the allowable range for fee-rate increases, requiring a substantial rise in the fee rate for one transaction to replace another. Preliminary data suggests that RBFR replacements are effectively mined despite inconsistencies within the mempool. However, implementing a strict increase ratio could disrupt existing wallet applications that adjust fees based on minimal increments. The introduction of RBFR aims to reduce bandwidth wastage and encourage economically rational mining practices by necessitating higher fee rates for transaction replacements.

The discussion around adopting RBFR mechanisms emphasizes the system's current vulnerabilities and the benefits of such adjustments. Despite potential challenges, the economic rationale supports RBFR's implementation. It's crucial to recognize that effective execution of free-relay attacks depends on attackers having adequate funds to cover potential fees, which serves as a financial deterrent. For additional information and related discussions on these topics, readers can refer to the [Original Full-RBF opt-in pull request](https://github.com/bitcoin/bitcoin/pull/6871), [One-shot replace-by-fee-rate - the status quo](https://petertodd.org/2024/one-shot-replace-by-fee-ratethe-status-quo), and [Replace-by-fee-rate success rate](https://petertodd.org/2024/replace-by-fee-rate-success-rate).

In a separate correspondence, there's an exploration into designing a mempool eviction rule that is fully path-independent. Such a rule would ensure that between any pair of conflicting transactions, it would always be clear which should be preferred, thus preventing attacks on the mempool and achieving eventual consistency across all nodes' mempools. A proposed solution must align with miners' incentives and guard against DoS attacks. A naive approach suggests prioritizing transactions with higher fee rates, but this doesn't address transactions with identical fee rates nor does it prevent DoS attacks. One idea involves deprioritizing transactions involved in double-spending within two priority queues at each node: one for processing incoming transactions and another for broadcasting them. This method aims to limit the broadcast of double-spent transactions, thereby reducing the DoS effect while maintaining system consistency.</summary>
    <published>2024-03-19T13:46:00+00:00</published>
  </entry>
</feed>
