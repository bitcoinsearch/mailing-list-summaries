<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Fwd: [BIP 15] Aliases</title>
  <updated>2023-05-18T22:50:50.396850+00:00</updated>
  <author>
    <name>Gregory Maxwell 2011-12-16 17:48:33</name>
  </author>
  <author>
    <name>Pieter Wuille 2011-12-16 08:46:33</name>
  </author>
  <link href="bitcoin-dev/Dec_2011/000887_Fwd-BIP-15-Aliases.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2011/000876_Fwd-BIP-15-Aliases.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Fwd: [BIP 15] Aliases</title>
    <updated>2023-05-18T22:50:50.396850+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-December/000887.html" rel="alternate"/>
    <summary>Namecoin is a peer-to-peer system that maps names to values in a fully decentralized way. It is not limited to .bit usage and can be used to map names to other things, such as a public bitcoin address or URL. When using other systems like DNS and HTTP(S) as the first entry point, one won't have all the advantages of Namecoin. However, constructing a zero-trust or nearly zero-trust Namecoin resolver without having a copy of the complete Namecoin block chain is challenging. The Bitcoin lite node mechanism is not suitable because a peer could return stale records or no-result, and there would be no evidence of their deception.Interaction is necessary to generate a temporary address, but not necessarily directly with the entity hosting the wallet. EC crypto tricks, often mentioned under "deterministic wallets," can be used. The wallet-hosting entity has a private key x with public key X. The address-generating entity knows X and generates a fresh private key y for each transaction. For each, it calculates Z=y*X and asks the client to pay to hash160(Z). Afterward, it can send a bunch of y's to the wallet hosting service, which can reconstruct z=y*x for each. Alternatively, the y's can be generated according to a predefined scheme.</summary>
    <published>2011-12-16T17:48:33+00:00</published>
  </entry>
</feed>
