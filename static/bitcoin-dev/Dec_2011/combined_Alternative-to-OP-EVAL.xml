<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Alternative to OP_EVAL</title>
  <updated>2023-05-18T22:53:17.730907+00:00</updated>
  <author>
    <name>Pieter Wuille 2011-12-29 21:00:26</name>
  </author>
  <author>
    <name>Pieter Wuille 2011-12-29 19:08:39</name>
  </author>
  <link href="bitcoin-dev/Dec_2011/001006_Alternative-to-OP-EVAL.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2011/001004_Alternative-to-OP-EVAL.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Alternative to OP_EVAL</title>
    <updated>2023-05-18T22:53:17.730907+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-December/001006.html" rel="alternate"/>
    <summary>Pieter Wuille proposed an alternative to OP_EVAL called OP_CHECKEDEVAL. It is similar to OP_EVAL and it is specified as follows: it looks at the last (code-position wise) literal pushed on the stack and uses that as a script to be executed. The subscript is executed in an independent environment, which inherits only the main stack. Pieter believes this combines all advantages including easy spend-to-script-hash (shorter than OP_EVAL), backward compatible and statically analyzable. The implementation is very similar to what was already done for OP_EVAL, and modifications include EvalScriptInner needing less by-ref arguments, as it cannot modify the parent's state, and a literal-only stack needing to be maintained.</summary>
    <published>2011-12-29T21:00:26+00:00</published>
  </entry>
</feed>
