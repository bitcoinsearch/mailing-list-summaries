<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Alternative to OP_EVAL</title>
  <updated>2023-05-19T01:04:25.995738+00:00</updated>
  <author>
    <name>Pieter Wuille 2011-12-29 21:00:26</name>
  </author>
  <author>
    <name>Pieter Wuille 2011-12-29 19:08:39</name>
  </author>
  <link href="bitcoin-dev/Dec_2011/001006_Alternative-to-OP-EVAL.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2011/001004_Alternative-to-OP-EVAL.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Alternative to OP_EVAL</title>
    <updated>2023-05-19T01:04:25.995738+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-December/001006.html" rel="alternate"/>
    <summary>Pieter Wuille proposed an alternative to OP_EVAL, called OP_CHECKEDEVAL. It is specified as follows: it looks at the two elements most recently pushed by a literal, S (the serialized script), and H (its hash). This implies it defines its own literal-only stack where all literals push to, and only OP_CHECKEDEVAL pops from. For the outer script, it does not have any effect on the main stack, alt stack or any other part of the execution state except for 2 elements popped from the literal-only stack and potentially causing failure. Failure is caused when no two elements remain on the literal-only stack, Hash(S) != H, or the inner script execution caused failure. The inner script executes in a completely new and independent execution environment and inherits the main stack and alt stack (without the serialized script and the hash themselves) from the outer execution. This requires OP_CHECKEDEVAL to immediately follow the push of script and hash so the code in the pair OP_CHECKEDEVAL &gt; can be parsed and interpreted as code, allowing static analysis. A basic pay-to-script-hash scriptPubKey is very short: OP_CHECKEDEVAL, and it is redeemed using [script input] &gt;. The implementation is very similar to what was already done for OP_EVAL with modifications like EvalScriptInner needing less by-ref arguments, as it cannot modify the parent's state and a literal-only stack needs to be maintained. The advantages of OP_CHECKEDEVAL are easy spend-to-script-hash (shorter than OP_EVAL), backward compatible (guaranteed by construction, instead of separately enforced like with OP_EVAL), statically analyzable (though it requires deserializing the script data), and the possibility to introduce a new language inside. The disadvantages include being slightly less flexible than OP_EVAL as it disallows dynamic interaction with serialized scripts and static code analyzers need to deserialize script data. The proposal guarantees that interpreting OP_CHECKEDEVAL as OP_NOPx can never cause the script to become invalid if it wasn't already.</summary>
    <published>2011-12-29T21:00:26+00:00</published>
  </entry>
</feed>
