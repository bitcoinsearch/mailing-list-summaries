<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Denial of Service using Package Relay</title>
  <updated>2023-08-02T09:37:16.702106+00:00</updated>
  <author>
    <name>Andrew Chow 2023-07-06 17:24:47+00:00</name>
  </author>
  <author>
    <name>alicexbt 2023-07-06 16:22:44+00:00</name>
  </author>
  <link href="bitcoin-dev/July_2023/021785_Denial-of-Service-using-Package-Relay.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021784_Denial-of-Service-using-Package-Relay.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Denial of Service using Package Relay</title>
    <updated>2023-08-02T09:37:16.702106+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-July/021785.html" rel="alternate"/>
    <summary>In an email dated 07/06/2023, a user named alicexbt expressed concerns about the acceptance of unconfirmed inputs in coinjoin transactions and its potential risks. They highlighted that allowing unconfirmed inputs could be unsafe as the sender can replace the transaction, potentially invalidating the coinjoin. The user also pointed out that coordinator B should not accept the unconfirmed UTXO from step 2 since it is unaware of the transaction and has zero fee, making it unlikely to be relayed.The user acknowledged that a similar attack could already be carried out by registering the same UTXO with multiple coordinators without the need for package relay. However, they recognized that package relay could still be beneficial for coinjoins. They explained that with package relay, any participant in the coinjoin can rebroadcast it with a further Child Pays for Parent (CPFP) if the coinjoin falls below the minimum relay fee. The user also mentioned upcoming proposals for Replace-By-Fee (RBF) in package transactions that could allow other child transactions in the package to RBF the entire transaction, eliminating the need for all participants to re-sign the coinjoin for RBF.Overall, the user raised concerns about the acceptance of unconfirmed inputs in coinjoins and discussed the potential benefits of package relay and upcoming RBF proposals for enhancing the security and efficiency of coinjoin transactions.The user also brought attention to a potential vulnerability in coinjoin that could be exploited for a Denial of Service (DoS) attack. This vulnerability is related to the use of the package relay feature, which introduces new P2P messages, transaction relay, and other functionalities. The user emphasized that this proposal is significant, comparable to any soft fork.To illustrate the vulnerability, the user described a scenario involving two coinjoin implementations, A and B. The attack involves registering an input in implementation A, double-spending the same input with zero fees to the attacker's address, and registering the unconfirmed UTXO from step 2 in implementation B. Implementation B then relays a package containing a coinjoin transaction (child) that pays for the double-spent input (parent).The user highlighted that both users and implementation B have incentives to engage in this type of attack. They also mentioned an alternative approach where the attacker registers the same input in both implementations A and B but acknowledged the tradeoffs involved. Implementing RBF with multiple users is not straightforward and can be costly, and implementations with fewer users participating in a round would have an advantage in this scenario.The user emphasized the importance of addressing this vulnerability promptly to ensure the security and integrity of coinjoin transactions. They requested a review of the details provided in the package relay proposal and welcomed any feedback or overlooked aspects.The email was signed by /dev/fd0floppy disk guy and sent using Proton Mail secure email.</summary>
    <published>2023-07-06T17:24:47+00:00</published>
  </entry>
</feed>
