<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Denial of Service using Package Relay</title>
  <updated>2023-07-29T19:09:17.048910+00:00</updated>
  <author>
    <name>alicexbt 2023-07-06 16:22:44+00:00</name>
  </author>
  <author>
    <name>Andrew Chow 2023-07-06 17:24:47+00:00</name>
  </author>
  <link href="bitcoin-dev/July_2023/021784_Denial-of-Service-using-Package-Relay.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021785_Denial-of-Service-using-Package-Relay.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Denial of Service using Package Relay</title>
    <updated>2023-07-29T19:09:17.048910+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-July/021784.html" rel="alternate"/>
    <summary>In an email on 07/06/2023, a user named alicexbt raised concerns about a potential vulnerability in coinjoin that could be exploited for a Denial of Service (DoS) attack. The vulnerability is related to the use of the package relay feature. The user explained that the attack involves registering an input in one implementation (A), then double-spending the same input with zero fees to their own address, and finally registering the unconfirmed UTXO in another implementation (B). This triggers a package relay containing a coinjoin transaction that pays for the double-spent input.The user pointed out that both users and implementation B have incentives to engage in this type of attack. They also mentioned an alternative approach where the attacker registers the same input in both implementations A and B, but noted some tradeoffs associated with this method. If the input gets included in a coinjoin transaction broadcasted by A, there is little that B can do about it. Implementing Replace-By-Fee (RBF) with multiple users is not straightforward and can be costly. Additionally, implementations with fewer users participating in a round would have an advantage.The user emphasized the importance of addressing this vulnerability promptly to ensure the security and integrity of coinjoin transactions. They requested a review of the details provided in the package relay proposal and asked for any overlooked aspects to be brought to their attention.Regarding the acceptance of unconfirmed inputs in coinjoins, the user expressed concern about the potential risks involved. They highlighted that allowing unconfirmed inputs could enable the sender of the unconfirmed transaction to replace it, potentially invalidating the coinjoin. They also stated that the coordinator B should not accept the unconfirmed UTXO from step 2 because it is not even aware of that transaction and has zero fees, making it unlikely to be relayed.However, the user acknowledged that package relay could still be beneficial for coinjoins. They explained that with package relay, any participant in the coinjoin can rebroadcast it with a further Child Pays for Parent (CPFP) if the coinjoin falls below the minimum relay fee. They also mentioned upcoming proposals for Replace-By-Fee (RBF) in package transactions that could allow other child transactions in the package to RBF the entire transaction, eliminating the need for all participants to re-sign the coinjoin for RBF.Overall, the user raised concerns about the acceptance of unconfirmed inputs in coinjoins and discussed the potential benefits of package relay and upcoming RBF proposals for improving the security and efficiency of coinjoin transactions.</summary>
    <published>2023-07-06T16:22:44+00:00</published>
  </entry>
</feed>
