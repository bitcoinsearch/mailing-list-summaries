<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Concrete MATT opcodes</title>
  <updated>2023-08-22T01:54:39.796431+00:00</updated>
  <author>
    <name>symphonicbtc 2023-08-19 23:11:22+00:00</name>
  </author>
  <author>
    <name>Antoine Riard 2023-08-18 20:12:09+00:00</name>
  </author>
  <author>
    <name>Salvatore Ingala 2023-08-18 15:08:39+00:00</name>
  </author>
  <author>
    <name>symphonicbtc 2023-08-14 14:07:19+00:00</name>
  </author>
  <author>
    <name>Antoine Riard 2023-08-14 03:00:57+00:00</name>
  </author>
  <author>
    <name>Salvatore Ingala 2023-08-09 08:38:48+00:00</name>
  </author>
  <author>
    <name>Johan Tor√•s Halseth 2023-08-07 11:37:07+00:00</name>
  </author>
  <author>
    <name>Salvatore Ingala 2023-08-07 08:31:40+00:00</name>
  </author>
  <author>
    <name>David A. Harding 2023-08-06 20:13:25+00:00</name>
  </author>
  <author>
    <name>Salvatore Ingala 2023-07-30 21:37:49+00:00</name>
  </author>
  <link href="bitcoin-dev/Aug_2023/021901_Concrete-MATT-opcodes.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2023/021893_Concrete-MATT-opcodes.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2023/021892_Concrete-MATT-opcodes.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2023/021889_Concrete-MATT-opcodes.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2023/021887_Concrete-MATT-opcodes.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2023/021865_Concrete-MATT-opcodes.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2023/021862_Concrete-MATT-opcodes.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2023/021861_Concrete-MATT-opcodes.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2023/021856_Concrete-MATT-opcodes.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021827_Concrete-MATT-opcodes.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Concrete MATT opcodes</title>
    <updated>2023-08-22T01:54:39.796645+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-August/021901.html" rel="alternate"/>
    <summary>Antoine raises concerns about the potential risks of cross-input inspection in off-chain contracts and suggests implementing smart bitcoin contracting primitives to mitigate these risks. He also mentions the common risk faced by second-layer vaults, lightning channels, and payment pools. Antoine proposes the introduction of a matrix or set of "tags" to encode subsets of introspected inputs/outputs, which would enable more advanced bitcoin contracts. Additionally, he questions the efficiency of witness space consumed and emphasizes the necessity of ANYPREVOUT and more malleability for amount transfer validation. Antoine acknowledges the DoS risk for full-nodes participating in transaction-relay and suggests implementing policy rules to limit CPU usage.Salvatore thanks Johan for his comments and independent implementation. He explains that the reordering was done to place it at the bottom as it is typically passed via the witness stack. Salvatore adds that the deferred output amount check is not enough for coinpools, but it has no cost if there is already a parameter. The intent is to preserve amounts for many-to-one contracts and one-to-one cases. He notes that efforts to define and add explicit introspection for exciting use cases can proceed independently without nullifying the advantages of this optional feature of CCV.In another email, the sender expresses gratitude to Salvatore for the update on taptree verification and mentions implementing the updated opcodes in btcd. The sender also discusses the parameter ordering in the opcode and suggests an alternative order for better aesthetics. They mention that the deferred amount check seems insufficient for certain use cases like coinpools and propose either removing the amount preservation check or proposing a more powerful amount introspection machinery.The email explains that the proposal for the core opcodes of MATT is now complete, with revised and improved implementation. The code is implemented in the bitcoin-inquisition repo fork and includes OP_CHECKTEMPLATEVERIFY. The changes compared to the previous draft include replacing OP_CHECK{IN, OUT}CONTRACTVERIFY with a single opcode, OP_CHECKCONTRACTVERIFY (CCV), and introducing an additional `flags` parameter to specify if the opcode operates on an input or an output. The email provides details on the implementation, including special values for parameters and defined flags. It also mentions that the new opcode allows achieving the full generality of MATT with just two opcodes: OP_CHECKCONTRACTVERIFY and OP_CAT. However, the author notes that additional opcodes and introspection may benefit certain applications.Overall, the emails cover various topics related to the risks of cross-input inspection, suggestions for smart contracting primitives, concerns about witness space consumption, the importance of malleability for amount transfer validation, and the proposal for the core opcodes of MATT.</summary>
    <published>2023-08-19T23:11:22+00:00</published>
  </entry>
</feed>
