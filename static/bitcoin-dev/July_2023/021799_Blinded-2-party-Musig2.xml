<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Blinded 2-party Musig2</title>
  <updated>2023-07-25T02:22:44.587345+00:00</updated>
  <author>
    <name>Tom Trevethan 2023-07-24 15:57:41+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Blinded 2-party Musig2</title>
    <updated>2023-07-25T02:22:44.587381+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-July/021799.html" rel="alternate"/>
    <summary>In this email exchange, ZmnSCPxj raises a question about the implementation of the 2-of-2 Schnorr Musig2 for statechains. ZmnSCPxj points out that MuSig2 requires multiple 'R' points to prevent certain attacks. However, the scheme being discussed in this context only has one 'R' per party, which could potentially make it vulnerable to such attacks. The scheme being implemented is for blinded statechains, where the server (party 1) is fully blinded and does not learn the aggregate public key, aggregate signature, or the message being signed. The security of this scheme relies on the server's trustworthiness in reporting the number of partial signatures generated for a particular key. The full set of signatures is verified client-side.The 2-of-2 musig2 protocol operates as follows: Party 1 generates a private key and corresponding public key, while Party 2 does the same. The set of public keys is aggregated, and the shared (aggregate) public key is computed. To sign a message, each party generates a nonce and aggregates them. Each party then computes a challenge and a partial signature. The final signature is a combination of these partial signatures.In the case of blinding for Party 1, the process is modified to prevent Party 1 from learning the full public key or final signature. Key aggregation is performed only by Party 2, and nonce aggregation is also done by Party 2. Party 1 receives the computed challenge from Party 2 to compute its partial signature. This way, Party 1 does not learn the final value of the signature or the message being signed.The original email provides further details on the implementation and asks for comments or potential issues with the scheme.</summary>
    <published>2023-07-24T15:57:41+00:00</published>
  </entry>
</feed>
