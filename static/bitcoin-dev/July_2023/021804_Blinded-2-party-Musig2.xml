<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Blinded 2-party Musig2</title>
  <updated>2023-07-26T02:12:45.856447+00:00</updated>
  <author>
    <name>Tom Trevethan 2023-07-25 16:05:48+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Blinded 2-party Musig2</title>
    <updated>2023-07-26T02:12:45.856503+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-July/021804.html" rel="alternate"/>
    <summary>The context discusses the v=2 nonces signing protocol of musig2, which aims to prevent the Wagner attack. The challenge value c must be blinded from the server to protect the signature's confidentiality. To update the server's keyshare during a statecoin transfer, the key aggregation coefficient must be set to 1 for each key. This coefficient prevents "rogue key attacks" by ensuring that a party cannot unilaterally produce a valid signature over the aggregate key. The party producing a proof of knowledge of the private key corresponding to their supplied public key can prevent this attack. The modified protocol suggests the following steps for key generation: - The server generates a private key x1 and a public key X1 = x1.G. The server sends X1 to the user (party 2).- The user generates a private key x2 and a public key X2 = x2.G, along with a random blinding nonce z. The user then computes the aggregate public key X = z.(X1 + X2), which is kept secret from the server.For signing, the following steps are performed:- The server generates nonces r11 and r12 and computes R11 = r11.G and R12 = r12.G. These values are sent to the user.- The user generates nonces r21 and r22 and computes R21 = r21.G and R22 = r22.G.- The user computes R1 = R11 + R21, R2 = R12 + R22, b = H(X,(R1,R2),m), R = R1 + b.R2, and c = (X,R,m).- The user sends the values y = cz and b to the server.- The server computes s1 = yx1 + r11 + br12 and sends it to the user.- The user computes s2 = yx2 + r21 + br22 and s = s1 + s2, resulting in the signature (s,R).During a statecoin transfer, the client verifies the correctness of the coin address shared between the previous owner and the server. The client performs the following verifications:- Retrieve the current public key X1 from the server for the coin.- Retrieve the public key X2 and the blinding nonce z from the sender.- Verify that z.X1 + X2 equals the address of the statecoin.- Verify that the sender has the private key used to generate X2 by verifying the statechain signature over the receiver public key X3 from X2.To update the key shares during a transfer, the server generates a random blinding nonce e and sends it to the user. The user adds their private key to the nonce (t1 = e + x2) and sends t1 and z encrypted with the receiver public key X3 to the receiver. The receiver decrypts t1 and subtracts their private key x3 (t2 = e + x2 - x3). The receiver then sends t2 to the server. The server updates the private key share x1_2 = x1 + t2 - e, and the aggregation of the new server key share with the new client key share is equal to the aggregation of the old server key share with the old client key share. The server then deletes x1.</summary>
    <published>2023-07-25T16:05:48+00:00</published>
  </entry>
</feed>
