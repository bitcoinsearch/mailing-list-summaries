<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Blinded 2-party Musig2</title>
  <updated>2023-07-29T09:24:11.010981+00:00</updated>
  <author>
    <name>Tom Trevethan  + 2023-07-24 07:46:11+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj  + 2023-07-24 10:50:13+00:00</name>
  </author>
  <author>
    <name>Jonas Nick  + 2023-07-24 14:12:47+00:00</name>
  </author>
  <author>
    <name>Erik Aronesty  + 2023-07-24 14:25:00+00:00</name>
  </author>
  <author>
    <name>Erik Aronesty  + 2023-07-24 14:40:10+00:00</name>
  </author>
  <author>
    <name>Jonas Nick  + 2023-07-24 15:39:09+00:00</name>
  </author>
  <author>
    <name>Jonas Nick  + 2023-07-24 15:40:16+00:00</name>
  </author>
  <author>
    <name>Tom Trevethan  + 2023-07-24 15:57:41+00:00</name>
  </author>
  <author>
    <name>Tom Trevethan  + 2023-07-24 16:08:28+00:00</name>
  </author>
  <author>
    <name>Tom Trevethan  + 2023-07-24 16:22:15+00:00</name>
  </author>
  <author>
    <name>AdamISZ  + 2023-07-24 16:51:44+00:00</name>
  </author>
  <author>
    <name>Erik Aronesty  + 2023-07-25 14:12:31+00:00</name>
  </author>
  <author>
    <name>Tom Trevethan  + 2023-07-25 16:05:48+00:00</name>
  </author>
  <author>
    <name>moonsettler  + 2023-07-26 09:44:50+00:00</name>
  </author>
  <author>
    <name>Erik Aronesty  + 2023-07-26 04:09:41+00:00</name>
  </author>
  <author>
    <name>Jonas Nick  + 2023-07-26 14:59:42+00:00</name>
  </author>
  <author>
    <name>Andrew Poelstra  + 2023-07-26 17:40:26+00:00</name>
  </author>
  <author>
    <name>Tom Trevethan  + 2023-07-26 16:32:06+00:00</name>
  </author>
  <author>
    <name>AdamISZ  + 2023-07-26 19:19:44+00:00</name>
  </author>
  <author>
    <name>moonsettler  + 2023-07-26 19:28:50+00:00</name>
  </author>
  <author>
    <name>Jonas Nick  + 2023-07-26 19:59:26+00:00</name>
  </author>
  <author>
    <name>Tom Trevethan  + 2023-07-26 20:35:00+00:00</name>
  </author>
  <author>
    <name>Erik Aronesty  + 2023-07-26 22:06:44+00:00</name>
  </author>
  <author>
    <name>Lloyd Fournier  + 2023-07-27 02:54:17+00:00</name>
  </author>
  <author>
    <name>AdamISZ  + 2023-07-27 05:51:14+00:00</name>
  </author>
  <author>
    <name>Jonas Nick  + 2023-07-27 08:07:58+00:00</name>
  </author>
  <link href="bitcoin-dev/July_2023/021792_Blinded-2-party-Musig2.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021793_Blinded-2-party-Musig2.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021794_Blinded-2-party-Musig2.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021795_Blinded-2-party-Musig2.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021796_Blinded-2-party-Musig2.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021797_Blinded-2-party-Musig2.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021798_Blinded-2-party-Musig2.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021799_Blinded-2-party-Musig2.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021800_Blinded-2-party-Musig2.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021801_Blinded-2-party-Musig2.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021802_Blinded-2-party-Musig2.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021803_Blinded-2-party-Musig2.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021804_Blinded-2-party-Musig2.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021806_Blinded-2-party-Musig2.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021807_Blinded-2-party-Musig2.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021810_Blinded-2-party-Musig2.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021811_Blinded-2-party-Musig2.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021812_Blinded-2-party-Musig2.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021813_Blinded-2-party-Musig2.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021814_Blinded-2-party-Musig2.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021815_Blinded-2-party-Musig2.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021816_Blinded-2-party-Musig2.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021817_Blinded-2-party-Musig2.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021818_Blinded-2-party-Musig2.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021820_Blinded-2-party-Musig2.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021821_Blinded-2-party-Musig2.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Blinded 2-party Musig2</title>
    <updated>2023-07-29T09:24:11.012007+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-July/021792.html" rel="alternate"/>
    <summary>In the given context, the implementation of a version of 2-of-2 Schnorr MuSig2 for statechains is being discussed. The goal is to have a fully blinded server (party 1) that does not learn the aggregate public key, aggregate signature, or the message being signed. This implementation relies on trusting the statechain server to report the number of partial signatures generated and verifying the full set of signatures client-side.The MuSig2 protocol operates by each party generating private and public keys. Party 1 generates x1 and X1 = x1G, while party 2 generates x2 and X2 = x2G. The public keys are aggregated into L = {X1, X2}, with the coefficients calculated using a cryptographic hash function. The shared (aggregate) public key X is obtained by multiplying the individual public keys with their respective coefficients.To sign a message, both parties generate nonce values and compute an aggregated nonce. The challenge value is computed using the shared public key, aggregated nonce, and message. Party 1 computes its signature component without independently computing and verifying the challenge value.In the case of blinding for party 1, key aggregation is performed only by party 2, and nonce aggregation is also performed only by party 2. Party 1 sends its public key and aggregated nonce to party 2. Party 2 computes the challenge value and sends it back to party 1, who can then compute its signature component.Tom seeks comments on this implementation and any potential issues that might arise.In a separate discussion, concerns are raised about the proposed blind musig scheme. It is argued that blind musig is still an ongoing research problem and doubts are raised regarding the effectiveness of the proposed scheme in preventing additional Schnorr signatures. A specific attack scenario is described where a malicious client manipulates R-values obtained from the server to compromise the security of the protocol.An alternative scheme is proposed where the client sends a commitment to the server, and the server replies with a nonce. The client then proves in zero knowledge that the commitment is derived correctly, and the server replies with a signature.It is acknowledged that this alternative scheme is based on quick intuition and further exploration is needed.The discussion also touches on the significance of "posk" in relation to the attack, but its connection remains unclear.Overall, the discussions revolve around the implementation of 2-of-2 Schnorr MuSig2 for statechains, including considerations for blinding party 1 and potential vulnerabilities in the proposed scheme.In a recent discussion on the bitcoin-dev mailing list, the issue of blinding in a signing protocol was raised. It was pointed out that without a blinding step, a server could learn the value of the hash used in signature verification. A proposed solution to this problem was presented, which involved adding a blinding factor to the equations used in the signing process. The proposed solution aimed to improve the security and privacy aspects of the bitcoin protocol.The discussion also touched upon the need for a proof of secret key when transmitting public keys to prevent vulnerabilities. Different approaches and protocols were discussed, including the use of blind musig protocols and specific procedures for key generation, signing, and statecoin transfer. The importance of verifying the correctness of the coin address shared between the previous owner and the server during a statecoin transfer was emphasized.Various members of the mailing list provided their insights and feedback on the proposed solution, highlighting potential vulnerabilities and suggesting alternative schemes. Concerns were raised about the effectiveness and feasibility of implementing certain measures, such as proof of secret keys, in practical contexts. The challenges associated with supporting nested multisignatures and the logistical difficulties of producing and publishing proofs of secret keys were also discussed.Additional references and papers were shared in the discussion, offering further exploration and potential solutions to the security concerns raised. The overall focus of the discussion was on improving the privacy, security, and authentication aspects of the signing process in the bitcoin protocol.In the discussion thread, the participants discuss various attacks on blind signing protocols. One participant highlights the vulnerabilities in the protocol proposed by moonsettler, particularly the lack of checks on K values, which could lead to the extraction of the server's key. Another participant raises concerns about a missing blinding step, which could allow the server to obtain information about the client's message.The participants also discuss attacks on nonces and the challenge c in cryptographic protocols. They note that these attacks cannot be mitigated by proving knowledge of the signing key (PoP), which is traditionally used to prevent unauthorized access or manipulation of data. The vulnerability of nonces and the challenge c underscores the importance of implementing additional measures to ensure system security.Furthermore, the discussion focuses on the possibility of preventing the Wagner attack by proving knowledge of the ephemeral keys (r values) used in generating each signature. However, it is clarified that proving knowledge of the signing key does not prevent the attacks mentioned earlier.The participants also explore the</summary>
    <published>2023-07-24T07:46:11+00:00</published>
  </entry>
</feed>
