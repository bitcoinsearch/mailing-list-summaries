<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Blinded 2-party Musig2</title>
  <updated>2023-07-25T02:21:24.733296+00:00</updated>
  <author>
    <name>Jonas Nick 2023-07-24 14:12:47+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Blinded 2-party Musig2</title>
    <updated>2023-07-25T02:21:24.733327+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-July/021794.html" rel="alternate"/>
    <summary>In a recent discussion about blind music, the effectiveness of a proposed scheme was questioned. The sender expresses doubts about its success, stating that blind music is still an ongoing research problem. The scheme aims to prevent the server from signing multiple times while the client ends up with an additional Schnorr signature for the combined keys of both parties. However, it is argued that there may be potential vulnerabilities in the proposed scheme. One possible attack involves a malicious client obtaining K R-values (R1[0], ..., R1[K-1]) from the server and manipulating them. By adding another set of R-values (R2[0], ..., R2[K-1]) to the obtained values, the client could potentially compromise the security of the MuSig1 protocol. This attack could be executed if the nonce commitment round is skipped or if the message is not determined before sending the nonce.</summary>
    <published>2023-07-24T14:12:47+00:00</published>
  </entry>
</feed>
