<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Blinded 2-party Musig2</title>
  <updated>2023-07-27T01:56:23.313407+00:00</updated>
  <author>
    <name>Tom Trevethan 2023-07-26 16:32:06+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Blinded 2-party Musig2</title>
    <updated>2023-07-27T01:56:23.313444+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-July/021812.html" rel="alternate"/>
    <summary>According to @moonsettler, the scheme for blinding the challenge in the notation (e) seems to be effective. It is considered better than the previous suggestion because it does not require modifying the aggregated public key. Additionally, each signature can have a different blinding nonce.@AdamISZ and @Jonas point out that it is not necessarily the server's responsibility to verify the well-formedness of the challenge. Instead, it is the receiver of a statecoin who needs to ensure this. The idea behind employing a blinded statechain server is that every signature generated for a shared public key must be verified by the recipient of the corresponding coin.To accomplish this, the receiver would retrieve the number of co-signings performed by the server (referred to as K) and proceed to verify each of the K signatures. They can also verify the K transactions received from the sender. Moreover, the receiver has the ability to verify that each of the K R values has been correctly formed with a proof of secret value for creating R2, along with the R1 provided by the server.For further details and the complete discussion, refer to the following link: [URL]</summary>
    <published>2023-07-26T16:32:06+00:00</published>
  </entry>
</feed>
