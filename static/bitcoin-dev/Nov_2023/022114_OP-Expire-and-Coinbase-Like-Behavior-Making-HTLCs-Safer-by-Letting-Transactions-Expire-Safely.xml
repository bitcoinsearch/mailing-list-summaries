<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>OP_Expire and Coinbase-Like Behavior: Making HTLCs Safer by Letting Transactions Expire Safely</title>
  <updated>2023-11-05T02:06:39.466678+00:00</updated>
  <author>
    <name>Antoine Riard 2023-11-03 05:25:24+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>OP_Expire and Coinbase-Like Behavior: Making HTLCs Safer by Letting Transactions Expire Safely</title>
    <updated>2023-11-05T02:06:39.466714+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-November/022114.html" rel="alternate"/>
    <summary>The email discusses the concept of anchor channels and their relevance in the context of spendable HTLC outputs. The sender mentions that the distinction between pre-anchor and anchor channels is not significant for the discussion at hand. They explain that if they have one spendable HTLC output and gain knowledge of their counterparty commitment transaction from the network's mempools, the spend can be considered malleable and used as a Child Pays for Parent (CPFP). 

In the case of anchor channels, where both parties have balance outputs or pending HTLCs, the counterparty commitment transaction needs to be attached with a fee under the minimum mempool fee for the replacement cycling to occur. This scenario assumes network congestion to be present. However, the sender highlights that the more interesting case is a future world with package relay deployed at the peer-to-peer level and an anchor output on the lightning-side.

In this scenario, the most advanced replacement, as illustrated in the provided test (where the commitment has an anchor output - see L125), can take place. The email concludes with a farewell from Antoine.</summary>
    <published>2023-11-03T05:25:24+00:00</published>
  </entry>
</feed>
