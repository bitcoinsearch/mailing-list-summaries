<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Compressed Bitcoin Transactions</title>
  <updated>2024-01-06T01:58:54.539451+00:00</updated>
  <author>
    <name>Tom Briar 2024-01-05 15:06:01+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Compressed Bitcoin Transactions</title>
    <updated>2024-01-06T01:58:54.539477+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2024-January/022269.html" rel="alternate"/>
    <summary>The recent Bitcoin Core updates have introduced a new Compressed Transaction Schema designed to minimize transaction sizes through various methods. This schema primarily works by omitting recoverable data and using alternative representations, such as block height and index instead of the prevout for each input.

This compression technique is particularly beneficial in environments with low bandwidth but high CPU availability for decompression, like steganography or satellite/radio broadcasts. It also allows users to tailor transactions for better compression rates. Notably, the compression of Txid/Vout pairs (Method 4) is irreversible if a reorganization occurs at or before the transaction's block of inclusion, although this step is not mandatory for achieving compression.

The compression methods include packing metadata, employing variable-length integers and compact formats, using compressed signatures with public key recovery, and substituting txid/vout pairs with more size-efficient data. For example, Method 4 compresses the Txid only if the transaction input has surpassed a hundred-block threshold to avoid complications from block reorganizations.

The schema's core encompasses encoding instructions for primitives, the general schema, and metadata for transactions, inputs, and outputs. These involve CompactSize and VarInt encodings, VLP-Bytestreams for byte stream lengths, and specific script type encodings. An optimal transaction model is defined, illustrating the compression savings possible across multiple components.

The documentation on GitHub provides test vectors, detailing the compression effects on Taproot and Legacy transactions and demonstrating significant space savings. The provided hexadecimal strings suggest blockchain-related content, revealing differences between uncompressed and compressed formats, which likely contain transaction identifiers or other blockchain information.

For further details and technical insights, the full documentation is available at the provided GitHub link: [Compressed Transaction Schema](https://github.com/TomBriar/bitcoin/blob/2023-05--tx-compression/doc/compressed_transactions.md).</summary>
    <published>2024-01-05T15:06:01+00:00</published>
  </entry>
</feed>
