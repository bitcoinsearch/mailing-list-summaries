<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - BIP16/17 replacement</title>
  <updated>2023-05-18T23:04:35.178950+00:00</updated>
  <author>
    <name>Pieter Wuille 2012-02-01 10:02:08</name>
  </author>
  <author>
    <name>Gregory Maxwell 2012-01-31 17:45:14</name>
  </author>
  <link href="bitcoin-dev/Feb_2012/001156_BIP16-17-replacement.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2012/001147_BIP16-17-replacement.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - BIP16/17 replacement</title>
    <updated>2023-05-18T23:04:35.178950+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2012-February/001156.html" rel="alternate"/>
    <summary>In a mailing list discussion, the compatibility of BIP16 and BIP17 was brought up and whether or not their new transaction types will be rejected by old clients. It was clarified that IsStandard() is only for accepting transactions into the memory pool and non-standard transactions are verified just fine when they are in the blockchain. BIP16/17 transactions are valid when interpreted as old scripts, so the only change to the protocol is that previously-valid transactions become invalid. As long as a supermajority of miners enforce the new rules, everyone can continue using their old bitcoin client. If there were ever to be a breaking change to the protocol, such as adding a new transaction type, all users must upgrade or see a fork of the chain from before the first new-style transaction. The differences between BIP16/BIP17 are technically obscure and there is broad consensus among the involved technically minded parties over just about all of it. There is always a different solution that could be proposed but expecting absolute consensus on the best way forward is an unreasonable standard. Depending on how you count, there have been roughly two dozen options considered in this space. Bitcoin is predominantly a zero-trust system and nodes don't trust that things were done right, they validate them for themselves. A breaking change of the kind that was suggested would not be considered lightly. It was suggested that if the change was going to require a client upgrade, why not increase the version number in transactions to make a new transaction structure, dump the "scriptPubKey" field completely, replace it with "hashOfClaimingScript," and add an "unsignedParameters" array. However, this kind of change is unlikely to happen anytime soon due to the difficulty of getting the kind of development resources required to pull off a true breaking change in a way that people would actually trust upgrading to.</summary>
    <published>2012-02-01T10:02:08+00:00</published>
  </entry>
</feed>
