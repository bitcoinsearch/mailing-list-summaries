<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>BIP352: Silent Payments</title>
  <updated>2023-08-04T02:15:26.964691+00:00</updated>
  <author>
    <name>josibake 2023-08-03 13:22:35+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>BIP352: Silent Payments</title>
    <updated>2023-08-04T02:15:26.964728+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-August/021844.html" rel="alternate"/>
    <summary>Since June, the BIP for Silent Payments has undergone several rounds of review and revision. The BIP now includes a python reference implementation and wallet test vectors. Some of the major changes include using 33-byte compressed keys instead of 32-byte x-only keys, negating the private key if necessary when spending taproot outputs, adding a step to check the negated output if the receiving wallet uses labels, and introducing a versioning scheme for silent payment addresses.The implementation for Bitcoin Core reflecting these changes can be found at this link: [https://github.com/bitcoin/bitcoin/pull/27827](https://github.com/bitcoin/bitcoin/pull/27827). The full specification, including an overview, test vectors, and an appendix on light client support, can be found here: [https://github.com/bitcoin/bips/pull/1458](https://github.com/bitcoin/bips/pull/1458).The specification provides functions and conventions for various operations. It introduces a versioning scheme for silent payments, where future upgrades will require new versions. Compatibility with older versions should be maintained as much as possible. Scanning transactions in Silent Payments v0 involves certain criteria such as containing BIP341 taproot outputs and inputs from the Inputs For Shared Secret Derivation list.Address encoding in silent payment addresses follows a specific construction method. The final address is a Bech32m encoding that includes the human-readable part, data-part values, and the concatenation of the receiver's public keys. The sender and receiver must calculate an outpoints hash for the transaction by collecting and sorting the outpoints used as inputs.The shared secret derivation process includes specific input types such as P2TR, P2WPKH, P2SH-P2WPKH, and P2PKH. Sender selection of inputs and creation of outputs involve considerations like using the private key corresponding to the taproot output key, negating the private key if needed, and generating the outpoints hash. Change outputs can be created if the sending wallet implements receiving silent payments.Receiver key derivation involves using BIP32 derivation for the scan and spend keys. The receiving wallet must scan transactions that meet certain criteria and perform actions like generating the outpoints hash and calculating the public key sum of the inputs.In summary, the BIP for Silent Payments has undergone review and revision, with updates including changes to key types, versioning scheme, and address encoding. The specification provides detailed guidelines for scanning transactions, shared secret derivation, sender actions, and receiver actions. The implementation for Bitcoin Core reflecting these changes is available for review along with the full specification.Silent payments is a protocol that introduces a new address format and protocol for sending Bitcoin transactions. It is not compatible with older wallet software or wallets that have not implemented the silent payments protocol. The protocol allows for multiple outputs, which enables privacy-enhancing techniques such as CoinJoin. Inputs without public keys are ignored in the protocol.The process of checking for outputs involves computing various values and comparing them to the transaction outputs. If a match is found, the output is added to the wallet. If no matches are found, the process stops. The protocol recommends using SIGHASH_[DEFAULT|ALL] to ensure that the inputs do not change after the sender has signed the transaction.Backup and recovery in silent payments is important due to the independent derivation of silent payment output addresses. Regular backups are recommended, and when recovering from a backup, the wallet needs to scan since the last backup to detect new payments. If using a seed/seed phrase only style backup, the wallet can recover unspent outputs from the UTXO set and can recover the full wallet history by scanning the blockchain starting from the wallet birthday. It is also recommended to include information about labels or change addresses used in the backup.The rationale behind using certain design choices in the protocol is explained through several references. For example, out-of-band notifications are not used as they introduce privacy and cost concerns. Allowing for more than one output improves privacy and enables techniques like CoinJoin. Using all inputs helps light clients by reducing the amount of data they need to download. Various other design choices are explained with their respective justifications.In terms of compatibility, the silent payments protocol supports any taproot output able to do a key path spend. Key aggregation techniques like FROST and MuSig2 can be used, but the specification for secure usage is outside the scope of the protocol. The protocol skips transactions that spend unknown output scripts to simplify upgrades. Taproot private keys need to be checked to maintain parity between sender and receiver. Silent payment addresses require a minimum length of 117 characters.Overall, silent payments is a protocol that introduces a new address format and protocol for sending Bitcoin transactions, with a focus on privacy and usability. It provides recommendations for backup and recovery, explains design choices, and discusses compatibility with different wallet software and techniques.</summary>
    <published>2023-08-03T13:22:35+00:00</published>
  </entry>
</feed>
