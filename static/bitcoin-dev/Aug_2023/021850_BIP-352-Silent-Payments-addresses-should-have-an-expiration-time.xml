<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP-352 Silent Payments addresses should have an expiration time</title>
  <updated>2023-08-07T22:30:26.586154+00:00</updated>
  <author>
    <name>Brandon Black 2023-08-04 22:27:17+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP-352 Silent Payments addresses should have an expiration time</title>
    <updated>2023-08-07T22:30:26.586154+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-August/021850.html" rel="alternate"/>
    <summary>Non-expiring addresses pose a significant risk to bitcoin users, and a more secure alternative is needed. Rather than using a fixed width nDays, a custom compact encoding can be implemented. This encoding would involve indicating the number of extension bytes and the encoded granularity based on the position of the first 0-bit. The proposed encoding scheme consists of various byte lengths, each with a different level of granularity and maximum expiration period. These byte lengths range from 1 to 8, with the number of usable bits increasing as the byte length increases. For example, a 1-byte address prefix with a 0-bit would provide 7 usable bits, allowing for an expiration period of up to 128 years. Similarly, a 2-byte address prefix with a 10-bit pattern would yield 14 usable bits and a maximum expiration period of 315 years. The encoding scheme also includes options for day-based and block-based expiration periods, with longer byte lengths offering even more granularity. This flexibility ensures that both common expiration periods like years and weeks can be accommodated, while still allowing for more precise encoding if necessary.One of the advantages of this method is its ability to degrade cleanly over time. Even if the same address format is still in use after 100 or 300 years, the encoding scheme will continue to function properly. This longevity is crucial for the long-term security of bitcoin addresses.Additionally, the inclusion of block-based expiration is particularly beneficial for users who need to match CheckLockTimeVerify (CLTV) values embedded in their scripts. This feature enables compatibility with operations like OP_CLTV OP_VAULT_RECOVER or OP_CLTV OP_CHECKSIG.In conclusion, the proposed custom compact encoding scheme provides a secure and flexible solution for addressing the issue of non-expiring addresses in bitcoin. It offers various levels of granularity and maximum expiration periods, ensuring the long-term viability and security of bitcoin addresses.</summary>
    <published>2023-08-04T22:27:17+00:00</published>
  </entry>
</feed>
