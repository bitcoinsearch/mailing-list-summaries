<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP-352 Silent Payments addresses should have an expiration time</title>
  <updated>2023-08-06T01:58:06.495642+00:00</updated>
  <author>
    <name>Brandon Black 2023-08-04 22:27:17+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP-352 Silent Payments addresses should have an expiration time</title>
    <updated>2023-08-06T01:58:06.495695+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-August/021850.html" rel="alternate"/>
    <summary>Peter Todd, a contributor to the Bitcoin development community, has identified non-expiring addresses as a significant risk to Bitcoin users. In response, he proposes a solution to address this issue by adding a 3-byte field to silent payment addresses that would encode an expiration date in terms of days after a specific epoch. This encoding would allow for a maximum expiration period of up to 45,000 years using 2^24 days or 180 years using 2^16 days.To provide more flexibility, Todd suggests using a custom compact encoding format that includes a prefix and specifies the number of extension bytes and the granularity of the expiration date. He presents a table detailing the number of bytes, usable bits, granularity options (such as year, week, day, and block), and the maximum expiration period for each configuration.While Todd believes that year or week expiration would typically be sufficient, longer addresses with more granularity can be used for rare occasions. This approach also ensures compatibility even if the same address format is still in use in the distant future, such as 100 or 300 years from now.Additionally, Todd introduces block-based expiration to enable silent payment users to match CheckLockTimeVerify (CLTV) values embedded in their scripts. This functionality would be useful for scenarios involving operations like OP_CLTV OP_VAULT_RECOVER or OP_CLTV OP_CHECKSIG.The proposal concludes with Brandon's endorsement of Todd's suggestion.</summary>
    <published>2023-08-04T22:27:17+00:00</published>
  </entry>
</feed>
