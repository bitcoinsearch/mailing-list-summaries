<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Ark: An Alternative Privacy-preserving Second Layer Solution</title>
  <updated>2023-08-07T02:06:01.429997+00:00</updated>
  <author>
    <name>Antoine Riard 2023-08-06 22:43:55+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Ark: An Alternative Privacy-preserving Second Layer Solution</title>
    <updated>2023-08-07T02:06:01.430044+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-August/021858.html" rel="alternate"/>
    <summary>The Ark proposal involves a protocol played between the sender, receiver, and ASP (Application Service Provider), with three types of transactions: pool_tx, ATLC-connection_tx, and ATLC-refund_tx. The pool_tx spends an on-chain funding input and has three outputs: the commitment output, the connector output, and the change output. The receiver vTXO scriptpubkey on pool_tx N includes a pseudo-script that allows for multisig(receiver, ASP) or ((pk(receiver)+24h) or (pk(ASP)+4weeks)).An ATLC-connection_tx is associated with a pool_tx N and spends vTXOs outputs from the receiver at pool_tx N-1 and one or more connector outputs from pool_tx N. There is a potential weakness during the vTXLO transfer phase, where an ATLC-refund transaction using the unilateral exit path could result in a loss of funds. This means that Alice (the sender) and Bob (the receiver) can collude to "double-spend" the ASP without the service provider earning compensation for the pool_tx state N+1 funding input.To address this weakness, there may be a need for another round of interactivity between the sender and the ASP, such as disclosing a revocation secret for the ATLC-refund transaction. However, this should be done without opening the door for the ASP to stall the next pool_tx N+1 broadcast and steal user funds by waiting for the 4-week time lock expiration.In another conversation, Burak explains the three purposes of Ark: mixing coins, paying Lightning invoices, and making internal transfers. The initial onboarding phase of Ark is non-interactive and does not involve PSBT (Partially Signed Bitcoin Transactions). Onboarding simply requires funding a Bitcoin address.Burak provides a refactored explanation of how Bob can deposit 1 BTC with Alice using the Ark protocol. Bob asks his friend Charlie to send 1 BTC to an on-chain Bitcoin address with a specific script. From here, Bob has several options: unilaterally withdraw, collaboratively withdraw, or collaboratively trade commitments.If Bob chooses to collaboratively trade commitments, Alice crafts a transaction called "pool" with three outputs: the commitment output, the connector output, and the change output. The commitment output constrains its descendant transaction to a set of transaction outputs. Alice also creates a connector output that she can spend herself. She keeps this transaction secret and does not broadcast it.To withdraw the funds, Alice signs her one-in, three-out transaction and broadcasts it. Bob can then claim the funds by revealing the appropriate transactions and waiting for a specified time period. Further steps can be taken to send funds to another party, with Alice crafting a new transaction with different outputs.Overall, Ark provides a scalable, off-chain mixing solution and interoperability with Lightning for paying invoices. It allows for internal money transfers without inbound liquidity assumptions.</summary>
    <published>2023-08-06T22:43:55+00:00</published>
  </entry>
</feed>
