<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Concrete MATT opcodes</title>
  <updated>2023-08-20T01:53:04.945828+00:00</updated>
  <author>
    <name>Antoine Riard 2023-08-18 20:12:09+00:00</name>
  </author>
  <author>
    <name>Salvatore Ingala 2023-08-18 15:08:39+00:00</name>
  </author>
  <author>
    <name>symphonicbtc 2023-08-14 14:07:19+00:00</name>
  </author>
  <author>
    <name>Antoine Riard 2023-08-14 03:00:57+00:00</name>
  </author>
  <author>
    <name>Salvatore Ingala 2023-08-09 08:38:48+00:00</name>
  </author>
  <author>
    <name>Johan Tor√•s Halseth 2023-08-07 11:37:07+00:00</name>
  </author>
  <author>
    <name>Salvatore Ingala 2023-08-07 08:31:40+00:00</name>
  </author>
  <author>
    <name>David A. Harding 2023-08-06 20:13:25+00:00</name>
  </author>
  <author>
    <name>Salvatore Ingala 2023-07-30 21:37:49+00:00</name>
  </author>
  <link href="bitcoin-dev/Aug_2023/021893_Concrete-MATT-opcodes.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2023/021892_Concrete-MATT-opcodes.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2023/021889_Concrete-MATT-opcodes.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2023/021887_Concrete-MATT-opcodes.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2023/021865_Concrete-MATT-opcodes.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2023/021862_Concrete-MATT-opcodes.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2023/021861_Concrete-MATT-opcodes.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2023/021856_Concrete-MATT-opcodes.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021827_Concrete-MATT-opcodes.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Concrete MATT opcodes</title>
    <updated>2023-08-20T01:53:04.945962+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-August/021893.html" rel="alternate"/>
    <summary>In an email exchange, Antoine expresses concerns about the risks of cross-input inspection in off-chain contracts, particularly regarding miners bribing contracts to censor time-sensitive lightning channel transactions. He suggests that implementing smart bitcoin contracting primitives could mitigate these risks. Antoine also highlights the common risk faced by second-layer vaults, lightning channels, and payment pools. He proposes the introduction of a matrix or set of "tags" to encode subsets of introspected inputs/outputs, enabling more advanced bitcoin contracts. Additionally, Antoine mentions the need for malleability in the payment pool and raises questions about the efficiency of witness space consumed. He emphasizes the necessity of ANYPREVOUT and more malleability for amount transfer validation. Antoine acknowledges the DoS risk for full-nodes participating in transaction-relay and suggests implementing policy rules to limit CPU usage.Salvatore thanks Johan for his comments and implementation. The main concern for the reordering was to put it at the bottom as it is typically passed via the witness stack. The right next was added to allow specifying via the witness the input index or output for certain UTXOs with CCV encumbrance. This helps in designing more flexible contracts that can batch transactions. Other parameters are usually hardcoded or propagated from the current input with special values. Johan's ordering is considered more aesthetically pleasing. The deferred output amount check is not enough for coinpools, but it has no cost if there is already a parameter. The intent is to preserve amounts for many-to-one contracts and one-to-one cases. Efforts to define and add explicit introspection for exciting use cases can proceed independently without nullifying the advantages of this optional feature of CCV.Salvatore provides an update on taptree verification, mentioning that it can now be done on both input and outputs, making it easier to learn. He informs that he has implemented the updated opcodes in btcd and also updated the example scripts for simulating CTV and Coinpools. Regarding the opcode parameter ordering, Salvatore mentions that he feels it would be more natural to have the tweaks (data, taptree) together before the internal key. However, he asks Johan if he has a different rationale for the current ordering. Salvatore states that the deferred amount check seems out of place and insufficient for certain use cases like coinpools and CTV with multiple outputs. He suggests either removing the amount preservation check or proposing a more powerful amount introspection machinery.Salvatore thanks Antoine for his comments and insights and explains that his current goal is to facilitate maximum experimentation. He believes that it is safe to open Pandora's box in a sandbox environment to determine if it is empty. He acknowledges that concerns will need to be addressed when a soft-fork proposal is made and mentions the possibility of adding restrictions if necessary. Salvatore discusses the potential use cases of cross-input introspection and provides a link to some notes he drafted on how it could be used to implement eltoo-style replacement for lightning or arbitrary state channels when combined with ANYONECANPAY. He also mentions that cross-input introspection may not be needed if CCV+CHECKSIGFROMSTACK is available, as it would make the implementation easier. Furthermore, Salvatore addresses concerns raised about the recursivity of covenant opcodes and suggests that it could be artificially limited in CCV if desired, although it would restrict some use cases. He expresses his intention to write about why the fear of covenants might generally be unjustified in the future. Salvatore discusses the possibility of introducing more than a binary flag to encode subsets and suggests generalizing the index parameter so that it can refer to a group of inputs/outputs instead. He invites Antoine to expand further on this topic. He also asks for clarification on how these "tags" would interact with CHECKCONTRACTVERIFY, as he does not fully understand the use case. Salvatore finds the generic framework interesting for joinpool/coinpool and suggests that more generic introspection could be added with separate opcodes, although it may not fit well within the semantics of CCV. He mentions that he personally prefers OP_CHECKSIGFROMSTACK when thinking about constructions with CCV but acknowledges that either opcode would likely work. Finally, Salvatore briefly mentions the "DeferredCheck" framework commit and emphasizes the importance of taking care when designing new deferred checks to avoid any sort of quadratic validation cost. He notes that the DeferredChecks specifically added for CCV have negligible cost.The email also discusses two papers that have been criticized for making incorrect assumptions about the security model of Bitcoin. The assumption that constructs like oracles or altchains can enable "trustless" out-of-band payments is deemed unrealistic and compromises security. This assumption also fails to acknowledge that Bitcoin's security relies on maintaining a nash equilibrium between miners. Miners are disincentivized from engaging in censorship, as they can be replaced by node-runners at any time. Additionally, miners have no interest in reorganizing the</summary>
    <published>2023-08-18T20:12:09+00:00</published>
  </entry>
</feed>
