<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Concrete MATT opcodes</title>
  <updated>2023-08-11T15:42:47.203192+00:00</updated>
  <author>
    <name>Salvatore Ingala 2023-08-09 08:38:48+00:00</name>
  </author>
  <author>
    <name>Johan Tor√•s Halseth 2023-08-07 11:37:07+00:00</name>
  </author>
  <author>
    <name>Salvatore Ingala 2023-08-07 08:31:40+00:00</name>
  </author>
  <author>
    <name>David A. Harding 2023-08-06 20:13:25+00:00</name>
  </author>
  <author>
    <name>Salvatore Ingala 2023-07-30 21:37:49+00:00</name>
  </author>
  <link href="bitcoin-dev/Aug_2023/021865_Concrete-MATT-opcodes.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2023/021862_Concrete-MATT-opcodes.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2023/021861_Concrete-MATT-opcodes.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2023/021856_Concrete-MATT-opcodes.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2023/021827_Concrete-MATT-opcodes.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Concrete MATT opcodes</title>
    <updated>2023-08-11T15:42:47.204697+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-August/021865.html" rel="alternate"/>
    <summary>Salvatore has thanked Johan for his comments and independent implementation. The reordering was done to place it at the bottom as it is typically passed via the witness stack. The "right next" was added to allow specifying via the witness the input index or output for certain UTXOs with CCV encumbrance. This helps in designing more flexible contracts that can batch transactions. Other parameters are usually hardcoded or propagated from the current input with special values. Johan's ordering is considered more aesthetically pleasing. The deferred output amount check is not enough for coinpools, but it has no cost if there is already a parameter. The intent is to preserve amounts for many-to-one contracts and one-to-one cases. Efforts to define and add explicit introspection for exciting use cases can proceed independently without nullifying the advantages of this optional feature of CCV.Johan appreciates the update on taptree verification. It's great that it can now be done on both input and outputs, making it easier to learn. He has implemented the updated opcodes in btcd and also updated the example scripts for simulating CTV and Coinpools. Regarding the opcode parameter ordering, Johan feels that it would be more natural to have the tweaks (data, taptree) together before the internal key. However, he is open to understanding the rationale behind the current ordering. The deferred amount check seems out of place and insufficient for certain use cases like coinpools and CTV with multiple outputs. It might be better to either remove the amount preservation check or propose a more powerful amount introspection machinery. Johan seeks Salvatore's thoughts on this matter.In response to Dave's query about the proposal, Salvatore informs that the complete proposal for the core opcodes of MATT is available in the bitcoin-inquisition repo fork. The code includes OP_CHECKTEMPLATEVERIFY and is implemented with revised and improved changes. The diff provides implementation details and functional tests. The changes compared to the previous draft involve replacing OP_CHECK{IN, OUT}CONTRACTVERIFY with a single opcode, OP_CHECKCONTRACTVERIFY (CCV), and introducing an additional `flags` parameter to specify if the opcode operates on an input or an output. The default behavior for outputs includes a deferred checks mechanism for amounts. The order of parameters is also modified for better script writing. The new opcode takes five parameters from the stack and checks if the -th input/output's scriptPubKey is a P2TR with a public key obtained optionally tweaked wit and optionally tap-tweaked with . Special values of the parameters are defined. There are also defined flags. After evaluating all inputs, it is verified that each output's amount is greater than or equal to the total amount in the bucket of that output, validating the deferred checks. The author notes that while some special values may not be useful in applications, they were included for flexibility. With the new opcode, the full generality of MATT can be achieved with just two opcodes: OP_CHECKCONTRACTVERIFY and OP_CAT. However, additional opcodes and introspection may benefit certain applications. Salvatore looks forward to comments and starting a BIP proposal.</summary>
    <published>2023-08-09T08:38:48+00:00</published>
  </entry>
</feed>
