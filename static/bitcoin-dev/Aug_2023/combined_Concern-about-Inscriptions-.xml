<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Concern about "Inscriptions"</title>
  <updated>2023-08-22T01:55:25.773394+00:00</updated>
  <author>
    <name>symphonicbtc 2023-08-21 22:34:03+00:00</name>
  </author>
  <author>
    <name>John Tromp 2023-08-21 16:28:50+00:00</name>
  </author>
  <author>
    <name>rot13maxi 2023-08-21 14:58:39+00:00</name>
  </author>
  <author>
    <name>Russell O'Connor 2023-08-21 14:47:18+00:00</name>
  </author>
  <author>
    <name>martl.chris at proton.me 2023-08-18 20:43:13+00:00</name>
  </author>
  <author>
    <name>Luke Dashjr 2023-08-02 15:46:21+00:00</name>
  </author>
  <author>
    <name>GamedevAlice 2023-08-02 11:07:27+00:00</name>
  </author>
  <link href="bitcoin-dev/Aug_2023/021906_Concern-about-Inscriptions-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2023/021904_Concern-about-Inscriptions-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2023/021903_Concern-about-Inscriptions-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2023/021902_Concern-about-Inscriptions-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2023/021895_Concern-about-Inscriptions-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2023/021842_Concern-about-Inscriptions-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2023/021837_Concern-about-Inscriptions-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Concern about "Inscriptions"</title>
    <updated>2023-08-22T01:55:25.773477+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-August/021906.html" rel="alternate"/>
    <summary>The email discusses the issue of proof of secret key schemes and their data inefficiency. It mentions that re-using k values in ECDSA allows for encoding data in both k and the entire secret key. It also highlights how compromised hardware key exfiltration attacks can brute force a k value to encode data in a signature. Additionally, it states that keys can be brute forced to encode data in the public key. The email emphasizes the difficulty and expense of limiting the storage of arbitrary data in a system where security relies on secret keys being arbitrary data.The sender mentions that range proofs in the Mimblewimble protocol already prove knowledge of blinding factor in Pedersen commitments, eliminating the need for additional padding to prevent the encoding of spam into cryptographic material. This makes pure Mimblewimble blockchains the most resistant to inscription/spam.The email introduces a project called STAMPS, which breaks up image data into chunks and embeds them in bare multisig outputs. It notes that this consumes more space and bloats the UTXO set compared to stuffing data in a witness. The email also mentions schemes like Pay-to-Contact that could be used to tweak a pubkey with a small blob of data, allowing someone to produce a signature proving knowledge of the private key.The email raises the concern that if "arbitrary data" is banned, actors will simply encode their data within sets of public keys. It draws a parallel to how users respond to censorship of certain internet protocols by tunneling their protocol through innocent-looking HTTPS. Similarly, if "arbitrary data" is banned, users may tunnel their data over public key data instead. The email references Counterparty as an example of a project that has encoded data within public key data.In summary, the email discusses various methods of encoding data in cryptographic systems, including re-using k values, brute forcing signatures, and using public key data. It highlights the challenges of limiting the storage of arbitrary data and raises concerns about banning "arbitrary data" due to the indistinguishability of public key data. The email also mentions the benefits of range proofs in the Mimblewimble protocol and introduces the STAMPS project and Pay-to-Contact schemes as potential ways to encode data.</summary>
    <published>2023-08-21T22:34:03+00:00</published>
  </entry>
</feed>
