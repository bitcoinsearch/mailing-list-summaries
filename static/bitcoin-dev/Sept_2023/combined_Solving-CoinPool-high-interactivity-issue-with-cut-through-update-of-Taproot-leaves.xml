<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Solving CoinPool high-interactivity issue with cut-through update of Taproot leaves</title>
  <updated>2023-09-27T01:55:37.787142+00:00</updated>
  <author>
    <name>ZmnSCPxj 2023-09-26 06:50:50+00:00</name>
  </author>
  <author>
    <name>Antoine Riard 2023-09-25 18:18:36+00:00</name>
  </author>
  <link href="bitcoin-dev/Sept_2023/021970_Solving-CoinPool-high-interactivity-issue-with-cut-through-update-of-Taproot-leaves.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2023/021969_Solving-CoinPool-high-interactivity-issue-with-cut-through-update-of-Taproot-leaves.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Solving CoinPool high-interactivity issue with cut-through update of Taproot leaves</title>
    <updated>2023-09-27T01:55:37.787316+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-September/021970.html" rel="alternate"/>
    <summary>Payment pools and channel factories face interactivity constraints that worsen as the number of users with off-chain balances increases. The ability to unilaterally withdraw from the off-chain construction is crucial for the security of user funds. Any update to the off-chain balances requires a signature contribution from all construction users to ensure this ability is preserved during updates.Various solutions have been proposed to address this issue, such as introducing a coordinator or partitioning/layering balances among subsets of off-chain users. However, these solutions introduce a new problem of equivocation of off-chain balances, as pointed out by ZmnSCPxj. One potential mitigation is to punish cheating by the pre-nominated coordinator through an external fidelity bond. This could be implemented using decentralized fraud proofs to remove the need for a coordinator.In terms of compensation for defrauded counterparties, it is suggested that the fidelity bond should be equal to (C - 1) * B, where C is the number of construction counterparties and B is the initial off-chain balance of the cheating counterparty. Since it is impossible to predict which counterparties will be "honest" or "dishonest" in a partition or transition, every counterparty in the pool or factory would need to maintain this fidelity bond.However, implementing these mitigations and corrective measures may not be economically practical for large-scale pools involving anonymous users. Therefore, the best solution to address the interactivity issue is one that prevents off-chain group equivocation in a prophylactic manner. One idea is to edit the funding UTXO of the pool or factory in an efficient way to register new off-chain subgroups based on the demands of counterparties.The concept of Taproot leaves is introduced, where each leaf represents an off-chain user account for privacy-preserving payments and contracts. A potential idea is to introduce "cut-through" spends of multiple leaves, where the owners of the spent leaves interactively compose a single witness. This spend aggregates the amounts and user pubkeys, sending them back to a new single leaf in the Taproot tree. The leaves not participating in the "cut-through" maintain their integrity in the new version of the Taproot tree.An example is given with a CoinPool funded by Alice, Bob, Caroll, Dave, and Eve. If Bob and Eve are deemed offline by the ACD group (Alice, Caroll, and Dave), the ACD group can compose a cut-through spend of their leaves. This generates a new leaf representing the ACD group's collective amount and pubkey. Bob's and Eve's leaves remain unmodified. The ACD group can then confirm a transaction spending the pool funding UTXO to a new output committing to the scriptpubkey of the key-path spend including the original unanimity of pool counterparties.This solution eliminates the possibility of equivocation between members of the ACD group and Bob or Eve in a non-observable manner. When Bob and Eve come online and negotiate an on-chain pool refresh transaction, the conserved key-path spend can be used to re-equilibrate the Taproot tree, prune out old subgroups, and provision future subgroups. Signature aggregation can be used for a compact spend.Several proposals have been made for new Taproot tree update script primitives that offer flexibility for generating cut-through spends or batches of cut-through spends with multiple subgroups and outputs. Such a hypothetical primitive could also reduce the chain space consumed during mass pool withdrawals.In conclusion, this solution addresses the high-interactivity issue of payment pools and factories by shifting the burden onto individual users to pre-commit fast Taproot tree traversals and compose new pool subgroups based on changes in liveliness among pool users. Recursive taproot tree spends and more efficient accumulators are potential ideas to reduce on-chain witness space consumption for pools.</summary>
    <published>2023-09-26T06:50:50+00:00</published>
  </entry>
</feed>
