<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Concrete MATT opcodes</title>
  <updated>2023-09-16T01:50:34.485309+00:00</updated>
  <author>
    <name>Antoine Riard 2023-09-15 00:23:31+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Concrete MATT opcodes</title>
    <updated>2023-09-16T01:50:34.485344+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-September/021957.html" rel="alternate"/>
    <summary>Antoine is thanking Salvatore for additional insights and mentions the importance of opening Pandora's box in a sandbox to determine if it is empty. He suggests that restrictions can be added if necessary. Antoine then presents a conjecture regarding UTXO-inspecting based miners bribing contracts and proposes the idea of a "counter-bribing" contract that can be offered by an honest Lightning channel counterparty. He explains that UTXO-inspection can be leveraged to offer "fee bounties" in case a Lightning funding UTXO remains unspent after a certain period of time and there is suspicion of ongoing anomalies such as miner censorship.Antoine shares a link to a gist where he has drafted some notes on how UTXO-inspection could be used to implement an eltoo-style replacement for lightning. However, he admits that the sequence of transactions in the gist is still unclear to him. From his understanding, Alice and Bob both create virtual UTXOs, and the asymmetric update transactions are valid under the condition of spending a lower-state number virtual UTXO. Any new update transaction commits to an on-chain virtual UTXO of a higher state number. He acknowledges that this construction sounds reasonable, but believes it may be slightly less economically efficient than the original eltoo design.Antoine discusses the possibility of preventing recursive covenants that could be hijacked by censorship adversaries. He suggests that recursivity-enablement could be safeguarded using a timelock that allows escape out of the recursion after a certain number of blocks. He also mentions the idea of generalizing the index parameter so that it can refer to a group of inputs/outputs.Antoine refers to a link about "sighash_group-like" which talks about the use-case of non-interactive aggregation of pre-signed LN commitment transactions with a single pair of input/output. This would provide witness space efficiency benefits for LSP and Lightning nodes with hundreds of channels to be closed. He then mentions another link related to the use-case of OP_PUSH_ANNEX_TAG and wonders if a more powerful CHECKSIGFROMSTACK can be built in combination with CHECKCONTRACTVERIFY. He believes that more witness space efficiency could be achieved by casting the CCV hash as a merkle tree and traversing it.Antoine agrees that leveraging OP_CHECKSIGFROMSTACK would be more natural for enabling amount transfer validation, but acknowledges that it is less efficient in terms of witness space. He notes that the cost of this approach is O(n_outputs + n_ccv_out), where n_ccv_out is the number of executed amounts. However, he points out that its impact on spending script max opcode limits and max transaction size still needs to be evaluated.In conclusion, Antoine thanks Salvatore again and signs off as "Best, Antoine."</summary>
    <published>2023-09-15T00:23:31+00:00</published>
  </entry>
</feed>
