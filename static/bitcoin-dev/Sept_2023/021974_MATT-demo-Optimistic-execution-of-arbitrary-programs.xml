<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>MATT: [demo] Optimistic execution of arbitrary programs</title>
  <updated>2023-09-30T01:51:06.704520+00:00</updated>
  <author>
    <name>Johan Tor√•s Halseth 2023-09-29 13:14:25+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>MATT: [demo] Optimistic execution of arbitrary programs</title>
    <updated>2023-09-30T01:51:06.704579+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-September/021974.html" rel="alternate"/>
    <summary>I have received an email discussing the implementation of the original MATT challenge protocol. The email includes a link to a write-up that provides a detailed description of how to transform a "high-level arbitrary program" into something that can be verified on-chain in Bitcoin Script. The write-up also contains instructions on running the code and inspecting the transactions using a local block explorer.The implementation utilizes the proposed opcode OP_CHECKCONTRACTVERIFY and OP_CAT. These opcodes are used to trace the execution of a program called `multiply`. The goal is to challenge the computation of this program in O(n logn) on-chain transactions.Unfortunately, the email does not provide any further details about the implementation or the specific challenges faced during the process. It mainly serves as an introduction to the topic and directs readers to the write-up for more information.[0] - Link to the original MATT challenge protocol: [insert link][1] - Link to the code for the `multiply` program: [insert link]</summary>
    <published>2023-09-29T13:14:25+00:00</published>
  </entry>
</feed>
