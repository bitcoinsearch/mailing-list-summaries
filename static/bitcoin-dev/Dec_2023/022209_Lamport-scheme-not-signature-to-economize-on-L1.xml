<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Lamport scheme (not signature) to economize on L1</title>
  <updated>2023-12-20T01:37:47.440636+00:00</updated>
  <author>
    <name>Nagaev Boris 2023-12-19 17:08:40+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Lamport scheme (not signature) to economize on L1</title>
    <updated>2023-12-20T01:37:47.440667+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-December/022209.html" rel="alternate"/>
    <summary>In an analysis of cryptographic signature schemes and their relative on-chain footprints, a comparison was made between the proposed Lamport scheme without the publication of an ECC signature and the Schnorr keys as utilized in Taproot. The findings indicate that the Lamport scheme results in an output of 20 bytes, derived from hashing both the ECC public key and the Lamport public key to create an address. Additionally, two inputs are required: the Lamport signature at 14 bytes, and the combination of the ECC public key with the Lamport private key totaling 46 bytes. This brings the total on-chain footprint for the Lamport scheme to 80 bytes.

On the other hand, the Taproot scheme using Schnorr keys has a different structure. The output consists of a 32-byte Schnorr public key while the input is a 64-byte Schnorr signature. This leads to a total of 96 bytes for the Taproot scheme.

However, it's noted that additional space may be necessary for the Lamport scheme to differentiate between T0 and T1 and to establish T1 initially. An estimated transaction overhead is about 10 bytes with an additional 6 bytes for references. Taking these into consideration, it appears that the on-chain footprints of the two schemes could ultimately be comparable in size.</summary>
    <published>2023-12-19T17:08:40+00:00</published>
  </entry>
</feed>
