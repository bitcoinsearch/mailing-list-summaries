<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Double spend detection to speed up transaction trust</title>
  <updated>2023-05-18T22:42:27.921269+00:00</updated>
  <author>
    <name>Matt Corallo 2011-08-05 21:30:50</name>
  </author>
  <author>
    <name>Gregory Maxwell 2011-08-05 21:23:09</name>
  </author>
  <author>
    <name>Matt Corallo 2011-08-05 12:06:09</name>
  </author>
  <author>
    <name>Matt Corallo 2011-08-04 22:21:53</name>
  </author>
  <author>
    <name>Gregory Maxwell 2011-08-04 22:18:40</name>
  </author>
  <author>
    <name>Matt Corallo 2011-08-04 20:38:25</name>
  </author>
  <author>
    <name>Matt Corallo 2011-08-04 20:33:29</name>
  </author>
  <author>
    <name>Gregory Maxwell 2011-08-04 20:08:07</name>
  </author>
  <author>
    <name>Matt Corallo 2011-08-04 18:39:56</name>
  </author>
  <author>
    <name>Matt Corallo 2011-08-05 12:00:02</name>
  </author>
  <author>
    <name>Matt Corallo 2011-08-04 22:16:13</name>
  </author>
  <author>
    <name>Matt Corallo 2011-08-04 17:45:17</name>
  </author>
  <link href="bitcoin-dev/Aug_2011/000325_Double-spend-detection-to-speed-up-transaction-trust.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2011/000324_Double-spend-detection-to-speed-up-transaction-trust.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2011/000318_Double-spend-detection-to-speed-up-transaction-trust.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2011/000305_Double-spend-detection-to-speed-up-transaction-trust.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2011/000304_Double-spend-detection-to-speed-up-transaction-trust.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2011/000299_Double-spend-detection-to-speed-up-transaction-trust.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2011/000296_Double-spend-detection-to-speed-up-transaction-trust.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2011/000294_Double-spend-detection-to-speed-up-transaction-trust.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2011/000292_Double-spend-detection-to-speed-up-transaction-trust.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2011/000316_Double-spend-detection-to-speed-up-transaction-trust.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2011/000303_Double-spend-detection-to-speed-up-transaction-trust.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2011/000290_Double-spend-detection-to-speed-up-transaction-trust.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Double spend detection to speed up transaction trust</title>
    <updated>2023-05-18T22:42:27.922304+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-August/000325.html" rel="alternate"/>
    <summary>The conversation revolves around determining the best metric for Bitcoin connection slots, with some individuals suggesting bandwidth as a better metric than connection count. However, others argue that neither metric is ideal. The possibility of a network support system like MSG_DOUBLESPEND is raised, but concerns about adding more traffic to the network and potential DOS attacks are discussed. Another proposal is a mining pool feed of accepted transactions in real-time, but it is argued to be unnecessary as each mining pool already provides an IP address or proxy node for their node. The harm caused by those who aggressively connect to nodes and double spend transactions is also discussed. Ultimately, it is agreed that connection count is an important consideration, but not the only one to be taken into account when determining the optimal number of incoming slots.Another topic of discussion is the detection of double-spends in Bitcoin transactions. Matt Corallo argues against this due to the potential for flooding and network traffic. Andy Parkins suggests a solution to this problem by propagating conflicts on each of the conflicted inputs. The conservative nature of Bitcoin development and the difficulty of making changes are also discussed. Detection rather than prevention of double-spends is emphasized.In addition, the discussion includes the idea of adding an extra message, MSG_DOUBLESPEND, to detect double spends, which would be backward compatible with current clients. However, concerns about adding complexity and increasing network traffic are raised. The possibility of creating a "Bitcoin backbone" or large miners and merchants to help prevent double spends is suggested. Modifying the client to keep both conflicting transactions in memory pool until one of them confirms is also proposed. The deployment of IGD protocol in routers and whether it is a security vulnerability or not is debated. Satoshi's 2010 discussion about detecting double spends in vending machines is referenced and debated.The proposal is made to detect double-spends by having a well-connected node easily monitor miners/network for double-spends and alert whoever may need to know that the transaction should not be accepted. Another proposal involves connecting to lots of clients and checking if they all send the same transaction, or if some don't send the transaction (or send a conflicting one). The scenario is presented where two scammers attempt to buy two Ferraris using only one set of BTC, and waiting for six confirmations before releasing goods is too long for most people. The proposal is made that when a node drops a transaction because of a double spend attempt, it should not be silent but broadcasted with a new 'inv' type called 'MSG_DOUBLESPEND.' The vendor can then operate whatever policy they want: wait for six, ten, twenty confirmations, call the police, or whatever. Miners can also lower the priority of flagged transactions. If there isn't a double-spend attempt message within the network propagation time, then the vendor can accept the payment on zero confirmations. It is noted that this proposal doesn't make it possible to DOS a transaction since the transaction has to be internally valid to result in a MSG_DOUBLESPEND, meaning it can only be DOSed by someone with the appropriate private keys.</summary>
    <published>2011-08-05T21:30:50+00:00</published>
  </entry>
</feed>
