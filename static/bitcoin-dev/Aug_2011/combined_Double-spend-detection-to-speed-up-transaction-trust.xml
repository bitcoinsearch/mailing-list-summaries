<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Double spend detection to speed up transaction trust</title>
  <updated>2023-05-18T23:20:24.815649+00:00</updated>
  <author>
    <name>Matt Corallo 2011-08-05 21:30:50</name>
  </author>
  <author>
    <name>Gregory Maxwell 2011-08-05 21:23:09</name>
  </author>
  <author>
    <name>Matt Corallo 2011-08-05 12:06:09</name>
  </author>
  <author>
    <name>Matt Corallo 2011-08-04 22:21:53</name>
  </author>
  <author>
    <name>Gregory Maxwell 2011-08-04 22:18:40</name>
  </author>
  <author>
    <name>Matt Corallo 2011-08-04 20:38:25</name>
  </author>
  <author>
    <name>Matt Corallo 2011-08-04 20:33:29</name>
  </author>
  <author>
    <name>Gregory Maxwell 2011-08-04 20:08:07</name>
  </author>
  <author>
    <name>Matt Corallo 2011-08-04 18:39:56</name>
  </author>
  <author>
    <name>Matt Corallo 2011-08-05 12:00:02</name>
  </author>
  <author>
    <name>Matt Corallo 2011-08-04 22:16:13</name>
  </author>
  <author>
    <name>Matt Corallo 2011-08-04 17:45:17</name>
  </author>
  <link href="bitcoin-dev/Aug_2011/000325_Double-spend-detection-to-speed-up-transaction-trust.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2011/000324_Double-spend-detection-to-speed-up-transaction-trust.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2011/000318_Double-spend-detection-to-speed-up-transaction-trust.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2011/000305_Double-spend-detection-to-speed-up-transaction-trust.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2011/000304_Double-spend-detection-to-speed-up-transaction-trust.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2011/000299_Double-spend-detection-to-speed-up-transaction-trust.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2011/000296_Double-spend-detection-to-speed-up-transaction-trust.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2011/000294_Double-spend-detection-to-speed-up-transaction-trust.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2011/000292_Double-spend-detection-to-speed-up-transaction-trust.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2011/000316_Double-spend-detection-to-speed-up-transaction-trust.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2011/000303_Double-spend-detection-to-speed-up-transaction-trust.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2011/000290_Double-spend-detection-to-speed-up-transaction-trust.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Double spend detection to speed up transaction trust</title>
    <updated>2023-05-18T23:20:24.815649+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-August/000325.html" rel="alternate"/>
    <summary>The discussion on the Bitcoin mailing list centers around preventing double-spending and choosing the metric for determining the number of incoming connection slots. Andy Parkins proposes using bandwidth as a metric, but Matt Corallo and Mike argue that neither bandwidth nor connection count are good metrics. Gregory Maxwell raises concerns about nodes in .ru/.ua that aggressively connect and never pass transactions, while Andrew Schaaf suggests using a real-time feed of accepted TXs to fight against double-spending.The conversation between Andy Parkins and Matt Corallo focuses on preventing double-spending in Bitcoin. Andy suggests marking a transaction with MSG_DOUBLESPEND, while Matt believes creating more network traffic with another message is unnecessary. Matt argues that users can detect double-spends by making good connections with well-connected nodes. The discussion ends with the acknowledgment that Bitcoin is still an experiment, and while changes are welcome if they offer clear incentive, the current protocol already waits for a fair number of confirms before considering something confirmed.There is a debate about adding an extra message type, MSG_DOUBLESPEND, to the inventory list to prevent double-spending. There are concerns about increased network traffic and additional complexity. One suggestion is to peer with the largest miners and modify the client to keep both double-spends in memory pool and consider them both invalid until one confirms. There is also mention of UPnP support and IGD protocol and how widely it is actually deployed. Finally, there is a reference to Satoshi's discussion from July 2010, where he addressed the vending machine/detecting double spends issue.One suggestion for detecting double-spends without adding extra complexity to the network protocol is for a well-connected node to monitor miners/network and alert whoever needs to know that the transaction should not be accepted. Another pragmatic way is to connect to lots of clients and determine if all send the same transaction. If some don't send you the transaction or send conflicting ones, then a double spend is in progress. A simplified scenario where one scammer can pull off the scam involves sending one copy of the transaction to the target node and another to large mining operations to confirm a transaction that pays the scammer. In the future, Bitcoin payment processors could handle such double-spend checks and tell a merchant a transaction is confirmed in ten seconds for small transactions, an hour for large ones or anywhere in between.Overall, there is no need to add more stuff to the network protocol, and a pragmatic approach can be taken to detect double-spends. The consensus is that it is essential to prevent double-spending and find practical solutions for small businesses.</summary>
    <published>2011-08-05T21:30:50+00:00</published>
  </entry>
</feed>
