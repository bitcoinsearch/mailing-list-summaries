<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - New transaction policies (nVersion=3) for contracting protocols</title>
  <updated>2023-07-09T02:44:23.452142+00:00</updated>
  <author>
    <name>Greg Sanders 2023-06-21 20:57:45+00:00</name>
  </author>
  <author>
    <name>Gloria Zhao 2022-09-26 16:47:49+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2022-09-29 09:15:02+00:00</name>
  </author>
  <author>
    <name>Gloria Zhao 2022-09-23 15:18:21+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2022-09-30 12:08:41+00:00</name>
  </author>
  <author>
    <name>Greg Sanders 2022-09-30 12:17:38+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2022-09-26 15:27:40+00:00</name>
  </author>
  <author>
    <name>Greg Sanders 2022-09-23 18:48:39+00:00</name>
  </author>
  <author>
    <name>Greg Sanders 2022-09-26 16:01:54+00:00</name>
  </author>
  <author>
    <name>Ruben Somsen 2022-09-30 00:13:53+00:00</name>
  </author>
  <author>
    <name>Greg Sanders 2022-09-29 14:41:28+00:00</name>
  </author>
  <author>
    <name>Antoine Riard 2022-09-25 23:59:22+00:00</name>
  </author>
  <author>
    <name>Ruben Somsen 2022-10-01 09:59:55+00:00</name>
  </author>
  <link href="bitcoin-dev/June_2023/021780_New-transaction-policies-nVersion-3-for-contracting-protocols.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2022/020943_New-transaction-policies-nVersion-3-for-contracting-protocols.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2022/020950_New-transaction-policies-nVersion-3-for-contracting-protocols.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2022/020937_New-transaction-policies-nVersion-3-for-contracting-protocols.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2022/020959_New-transaction-policies-nVersion-3-for-contracting-protocols.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2022/020960_New-transaction-policies-nVersion-3-for-contracting-protocols.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2022/020941_New-transaction-policies-nVersion-3-for-contracting-protocols.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2022/020938_New-transaction-policies-nVersion-3-for-contracting-protocols.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2022/020942_New-transaction-policies-nVersion-3-for-contracting-protocols.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2022/020957_New-transaction-policies-nVersion-3-for-contracting-protocols.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2022/020951_New-transaction-policies-nVersion-3-for-contracting-protocols.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2022/020939_New-transaction-policies-nVersion-3-for-contracting-protocols.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2022/020962_New-transaction-policies-nVersion-3-for-contracting-protocols.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - New transaction policies (nVersion=3) for contracting protocols</title>
    <updated>2023-07-09T02:44:23.452328+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-June/021780.html" rel="alternate"/>
    <summary>The Bitcoin development team has proposed a set of mempool and transaction relay policies, known as BIP-325, to support Layer 2/contract protocols. The proposal includes the introduction of version 3 transactions (V3) and modifications to package RBF rules.Under the proposed rules, V3 transactions have a limit on their descendant size, not exceeding 1000 virtual bytes. This limitation aims to reduce costs for fee-bumping transactions by minimizing the vbytes that need to be replaced. The proposal also suggests making OP_TRUE standard and allowing outputs below dust, which can be added later since they won't be standard until implementation begins.There are discussions about potential utxo set bloat with 0-value outputs in the utxo set, but it is argued that this would be a better approach than the current one. Another suggestion is to allow a single dust-value output that is immediately spent by the package, simplifying the design of anchors.In terms of package RBF modifications, a new rule is proposed, requiring all package transactions with mempool conflicts to be V3. This change ensures that replacement transactions are not less incentive-compatible to mine. Additionally, the original rule around unconfirmed inputs is modified to consider the minimum between the package feerate and ancestor feerate of the child, compared to the individual feerates of directly conflicting transactions and the ancestor feerates of original transactions.For Lightning Network usage, commitment transactions should be V3 and have one anchor output. These transactions can be signed with 0 fees (or 1sat/vbyte) once package relay is deployed on a significant portion of the network. In case the commitment transaction needs to be broadcasted, the desired feerate at the broadcast time should be determined, and the anchor output should be spent in a high feerate transaction.Regarding expected questions, the development team confirms that the proposed policy fixes Rule 3 Pinning. The V3 descendant limit restricts both the user and their counterparty, reducing the need for replacing transactions. Additionally, there is no privacy issue concerning fingerprinting LN transactions based on nVersion, as V3 transactions are expected to be used primarily within L2.The team clarifies that a V3 transaction without signaling BIP125 replaceability is still replaceable, and this is not a backward compatibility issue. It's worth noting that V2 transactions can replace V3 transactions and vice versa, preventing potential censorship of V2 transactions spending shared inputs using V3 transactions.Overall, the proposed mempool and transaction relay policies aim to improve the replace-by-fee feature and address pinning attacks in Layer 2/contract protocols. Feedback and review of the proposal are welcomed by the Bitcoin development team.---Bitcoin developer Gloria Zhao has proposed a new version of transaction format, V3, aimed at improving replace-by-fee (RBF) and child-pays-for-parent (CPFP) protocols. The proposal includes four rules that specify limits on the size and number of "descendant" transactions, or those that rely on an unconfirmed parent transaction for funding. One of the key changes is that a V3 transaction cannot change based on what transactions are mined, which simplifies subsequent rules about descendant limits much easier to check. Unconfirmed V3 transactions cannot have more than one descendant. A V3 transaction that has an unconfirmed V3 ancestor cannot be larger than 1000 virtual bytes. Commitment transactions should also be V3 and have one anchor output.The proposal aims to prevent pinning attacks where a malicious counterparty prevents a transaction from being replaced by adding many descendant transactions that aren't fee-bumping. The smaller the descendant size limit, the fewer UTXOs a child may use to fund this fee-bump. However, as the fee-bumping child only needs to fund fees, just a few UTXOs should suffice. With a limit of 1000 virtual bytes, depending on the output types, the child can have 6-15 UTXOs, which should be enough to fund a fee-bump without requiring a carefully-managed UTXO pool.Package RBF modifications have also been suggested. One of the main changes is that all package transactions with mempool conflicts are required to be V3. This also means the "sponsoring" child transaction must be V3. The proposals are intended for usage in Layer 2 Bitcoin transactions, such as commitment transactions on the Lightning Network. A proposal for a minimally-invasive step to enable fee-bumping presigned transactions specifically using Child-Pays-For-Parent (CPFP) and anchor outputs has been put forward. The proposal intends to fix the Lightning Network Penalty and does not close all pinning attacks possible. While it is tailored for LN Penalty, it works for Lightning today. One scenario it does not fix is where HTLC/commitment-like transactions are being resolved in a batch, but due to relative time constraints, you may want to accelerate some and</summary>
    <published>2023-06-21T20:57:45+00:00</published>
  </entry>
</feed>
