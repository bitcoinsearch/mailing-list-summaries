<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Standardisation of an unstructured taproot annex</title>
  <updated>2023-07-08T02:35:07.952502+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-19 01:14:10+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Standardisation of an unstructured taproot annex</title>
    <updated>2023-07-08T02:35:07.952533+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-June/021776.html" rel="alternate"/>
    <summary>Antoine Riard raises a question regarding the opt-in mechanism for protocols in Bitcoin. He wonders if the opt-in is applicable to non-deployed protocols or deployed ones. He gives examples of scenarios where witness inflation can occur, such as coinjoin/lightning spending P2TR outputs. He suggests that script spend paths can be opted-in to the new annex policy through collaborative added inputs. Greg Sanders requests a citation for Antoine's statement and expresses his disagreement with building protocols on undeveloped upgrade hooks. Antoine acknowledges that ideally, they should not be encumbered by premature choices but mentions that there may be cases where the coordination cost of deploying a new policy might be prohibitive or time-consuming. He cites mempoolfullrbf as an example and emphasizes the need for sound and "firewalled" signaling and upgrading mechanisms. In another email, Greg Sanders questions Antoine's statement about modifying current Taproot support on the Lightning-side. He requests a citation and advises against building protocols on undeveloped upgrade hooks. Antoine responds by explaining how requiring every input to commit to an annex, even if it is empty, would impact Lightning nodes using P2TR spends. He suggests that this would be a mandatory upgrade for Lightning nodes, as failure to do so would break propagations of their `option_taproot` channel transactions. Antoine also discusses the proposal to limit the maximum size/weight of the witness/transaction as a TLV record itself. He shares a link to a branch that implements this approach. He signs off by mentioning the possibility of relaxing the policy in the future using max tx size policy "hints" in an annex field. Joost Jager joins the conversation and presents a restrictive policy that enables annex-vaults while aligning with existing work. The policy includes an opt-in annex, a TLV format, only allowing unstructured data, and limiting the maximum value size to 256 bytes. Joost highlights the limitation of the 126-byte limit proposed in a previous pull request and explains the need for more bytes for presigned transactions and vault parameters. The discussion revolves around the opt-in mechanism for protocols, the impact on existing multi-party protocols, the modification of Taproot support on the Lightning-side, the limitations of the current proposal, and the future extensibility of policies. The participants emphasize the importance of coordination, sound signaling, and upgrading mechanisms to deploy new policy rules smoothly for new use-cases.</summary>
    <published>2023-06-19T01:14:10+00:00</published>
  </entry>
</feed>
