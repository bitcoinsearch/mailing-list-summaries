<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Standardisation of an unstructured taproot annex</title>
  <updated>2023-07-11T02:29:00.019288+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-19 01:14:10+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Standardisation of an unstructured taproot annex</title>
    <updated>2023-07-11T02:29:00.019323+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-June/021776.html" rel="alternate"/>
    <summary>Antoine is seeking clarification on the opt-in mechanism for protocols, specifically regarding non-deployed yet and deployed protocols. He mentions scenarios such as pre-signed vaults and coinjoin/lightning spending P2TR outputs, where a counterparty script spend path can inflate the witness. Antoine suggests that opting-in to a new annex policy through a script spend path in the context of collaborative added inputs could avoid future interferences. However, Greg insists that protocols should not be built on undeveloped upgrade hooks and requests a citation for Antoine's statements.Antoine acknowledges that ideally, they should not be encumbered by premature choices. However, he points out that if these use cases gain economic weight, deploying a new policy may have prohibitive coordination costs or require long periods, similar to what is observed with mempoolfullrbf. Antoine believes that legitimate use cases should not always be subject to base-layer policy and suggests implementing sound and "firewalled" signaling and upgrading mechanisms to deploy new policy rules more smoothly.Greg questions Antoine's statement about modifying current Taproot support on the Lightning-side. He asks for a citation and suggests that people should not build protocols meant for production on top of undeveloped upgrade hooks. Greg emphasizes the need to avoid being encumbered by premature choices.Antoine responds to Greg's confusion by explaining that modifying current Taproot support on the Lightning-side would require all P2TR spends to add an annex and commit to it in the BIP341 signature digest. This mandatory upgrade for Lightning nodes would ensure the propagation of their `option_taproot` channel transactions. Antoine also mentions another approach to limit the maximum size/weight of the witness/transaction by introducing it as a TLV record. He provides a link to a branch that implements this approach, along with the "only allow tlv record 0" with the TLV format from bips #1381.Joost joins the conversation and proposes a restrictive policy that would enable annex-vaults while remaining in line with previous work. The proposed policy includes an opt-in annex for every input, a TLV format for future extensibility, only allowing tlv record 0 for unstructured data, and limiting the maximum size of the value to 256 bytes to protect opt-in users. However, Joost points out that the existing limit of 126 bytes is insufficient for certain vault scenarios involving multiple presigned transactions and additional parameters.Joost asks if there are any practical objections to making the annex standard under the conditions listed. The discussion continues with Antoine and Greg seeking further clarification on the matter.</summary>
    <published>2023-06-19T01:14:10+00:00</published>
  </entry>
</feed>
