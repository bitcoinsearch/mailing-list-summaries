<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Standardisation of an unstructured taproot annex</title>
  <updated>2023-07-01T02:55:57.417161+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-19 01:14:10+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Standardisation of an unstructured taproot annex</title>
    <updated>2023-07-01T02:55:57.417196+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-June/021776.html" rel="alternate"/>
    <summary>Antoine Riard expressed confusion regarding the opt-in mechanism and its implications for non-deployed and deployed protocols. He questioned whether opting in to a new annex policy would be necessary for script spend paths of currently deployed protocols. Greg Sanders responded, requesting a citation for Antoine's statements and expressing his belief that protocols should not be built on undeveloped upgrade hooks. Antoine acknowledged the importance of avoiding premature choices but noted that coordination costs and the legitimacy of certain use-cases could complicate the deployment of new policies. He emphasized the need for signaling and upgrading mechanisms that facilitate the smooth deployment of new policy rules. In a separate email, Greg questioned Antoine's mention of modifying current Taproot support on the Lightning-side to require all P2TR spends to add an annex and commit to it in the BIP341 signature digest. He requested a citation for this claim and reiterated his stance against building protocols on undeveloped upgrade hooks. Antoine responded, explaining that requiring every input to commit to an annex even if it is empty would necessitate a mandatory upgrade for Lightning nodes. He mentioned the potential impact on propagations of `option_taproot` channel transactions if this upgrade is not implemented. Antoine also commented on the proposal to limit the maximum size of the value to 256 bytes as a means of protecting opt-in users. He referenced an alternative approach where the maximum size/weight of the witness/transaction is introduced as a TLV record itself, providing a link to a GitHub branch that implements this idea. Antoine suggested that future upgrades could relax this restriction by using max tx size policy "hints" in an annex field. Joost Jager joined the conversation, proposing a set of policies that would enable annex-vaults while aligning with existing work. His proposed policies included an opt-in annex requirement for all inputs, the use of a Tlv format for future extensibility, allowing only unstructured data in the form of tlv record 0, and limiting the maximum size of the value to 256 bytes to protect opt-in users. Joost noted that the previous limit of 126 bytes would not be sufficient for certain vault configurations. He sought input on potential objections to making the annex standard under these conditions.</summary>
    <published>2023-06-19T01:14:10+00:00</published>
  </entry>
</feed>
