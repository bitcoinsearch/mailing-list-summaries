<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Standardisation of an unstructured taproot annex</title>
  <updated>2023-07-09T02:49:17.806519+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-19 01:14:10+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Standardisation of an unstructured taproot annex</title>
    <updated>2023-07-09T02:49:17.806560+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-June/021776.html" rel="alternate"/>
    <summary>Antoine Riard is seeking clarification on the opt-in mechanism mentioned by Joost. Antoine is unsure whether the opt-in applies to non-deployed protocols or deployed protocols like coinjoin/lightning spending P2TR outputs. He suggests that if the opt-in is for non-deployed protocols, the currently deployed protocols can always be opted-in to the new annex policy through script spend path in the context of collaborative added inputs. Greg Sanders responds, stating that people should not be building protocols meant for production on undeveloped upgrade hooks. He requests a citation for clarification. Antoine acknowledges that premature choices should be avoided but raises the possibility that if these use-cases gain economic weight, deploying a new policy might be prohibitively costly or time-consuming. He believes that sound and "firewalled" signaling and upgrading mechanisms would allow for smoother deployment of new policy rules for new use-cases. In a separate email, Greg asks for clarification from Antoine regarding Taproot support on the Lightning-side. He requests a citation for Antoine's statement about all P2TR spends requiring an annex and commit to it in the BIP341 signature digest. Greg expresses his concern about building protocols on undeveloped upgrade hooks. Antoine responds, explaining that requiring every input to commit to an annex even if it is empty would involve modifying current Taproot support on the Lightning-side. This upgrade would be mandatory for Lightning nodes to ensure propagations of their `option_taproot` channel transactions are not broken.Antoine also mentions another approach where the maximum size/weight of the witness/transaction is introduced as a TLV record itself. He provides a link to a branch implementing this approach and notes that it implements the "only allow tlv record 0" with the TLV format from BIPs #1381.Joost Jager joins the discussion and proposes a restrictive policy that enables annex-vaults and is in line with existing work. The proposed policy includes opt-in annex, TLV format, only allowing tlv record 0, and limiting the maximum size of the value to 256 bytes to protect opt-in users. Joost highlights the need for a larger limit than the current 126 bytes to accommodate presigned transactions in vaults.Joost asks Greg if there are any remaining practical objections to making the annex standard under the conditions listed.</summary>
    <published>2023-06-19T01:14:10+00:00</published>
  </entry>
</feed>
