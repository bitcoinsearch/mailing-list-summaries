<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Standardisation of an unstructured taproot annex</title>
  <updated>2023-07-03T02:42:02.253413+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-18 20:32:12+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Standardisation of an unstructured taproot annex</title>
    <updated>2023-07-03T02:42:02.253447+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-June/021775.html" rel="alternate"/>
    <summary>The discussion revolves around the implementation of an opt-in annex and the limitation of the maximum size of a value to protect opt-in users in Bitcoin. The opt-in annex requires every input to commit to an annex, even if it is empty, ensuring that existing multi-party protocols remain unaffected. This would require modifying the current Taproot support on the Lightning-side, where all P2TR spends must add an annex and commit to it in the BIP341 signature digest. Failure to do so would break propagations of `option_taproot` channel transactions.Another approach discussed is introducing the maximum size/weight of the witness/transaction as a TLV (Type-Length-Value) record itself. A branch implementing this approach, along with the "only allow tlv record 0" with the TLV format from BIP #1381, is mentioned for consideration.Joost Jager suggests a restrictive policy that enables annex-vaults and aligns with existing work. The proposed policy includes an opt-in annex requirement, the use of the TLV format, allowing only unstructured data (tlv record 0), and limiting the maximum size of the value to 256 bytes. However, Joost notes that the current limit of 126 bytes in a related pull request is insufficient for these types of vaults. He points out that if there are two presigned transactions (unvault and emergency), those signatures alone would take up 128 bytes. Additionally, 32 bytes are needed for the ephemeral key itself, leaving limited space for additional parameters.The discussion concludes with Greg Sanders endorsing the idea of protecting opt-in users by considering a maximum size restriction for the annex. He suggests that it can also be used for other anti-pinning efforts and mentions the possibility of using max transaction size policy "hints" in an annex field to relax the restriction in the future.Overall, the discussion focuses on implementing an opt-in annex and considering the maximum size restriction for values to protect users, along with the potential future extensibility of the TLV format.</summary>
    <published>2023-06-18T20:32:12+00:00</published>
  </entry>
</feed>
