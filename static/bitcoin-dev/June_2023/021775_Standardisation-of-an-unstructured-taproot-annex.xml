<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Standardisation of an unstructured taproot annex</title>
  <updated>2023-07-05T02:37:13.738634+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-18 20:32:12+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Standardisation of an unstructured taproot annex</title>
    <updated>2023-07-05T02:37:13.738680+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-June/021775.html" rel="alternate"/>
    <summary>The discussion revolves around two main topics: the opt-in annex and the limitation of the maximum size of the value. Regarding the opt-in annex, there is a suggestion to require every input to commit to an annex, even if it is empty. This would involve modifying the current Taproot support on the Lightning-side, where all P2TR spends must add an annex and commit to it in the BIP341 signature digest. Failure to do so would break the propagations of `option_taproot` channel transactions. It is seen as a mandatory upgrade for Lightning nodes.In terms of limiting the maximum size of the value, there is a proposal to introduce the maximum size/weight of the witness/transaction as a TLV record itself. This approach is implemented in a branch that also incorporates the "only allow tlv record 0" with the TLV format from bips #1381. The aim of this limitation is to protect opt-in users.A participant in the discussion suggests that the TLV format seems like a reasonable starting point, as it would not unduly impact current users and is simple from an accounting perspective. It could also be further relaxed in the future by using maximum transaction size policy "hints" in an annex field.Another participant adds that the limit of 126 bytes proposed in a previous pull request is not sufficient for certain types of vaults. For example, if there are two presigned transactions (unvault and emergency), those signatures alone would take up 128 bytes. Additionally, 32 bytes would be needed for the ephemeral key. Therefore, a limit of 256 bytes is suggested to accommodate these requirements.The original poster asks if there are any remaining practical objections to making the annex standard under the conditions listed above.Overall, the discussion focuses on the implementation of the opt-in annex and the limitation of the maximum size of the value to protect opt-in users.</summary>
    <published>2023-06-18T20:32:12+00:00</published>
  </entry>
</feed>
