<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Standardisation of an unstructured taproot annex</title>
  <updated>2023-07-01T02:55:13.187892+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-18 20:32:12+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Standardisation of an unstructured taproot annex</title>
    <updated>2023-07-01T02:55:13.187929+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-June/021775.html" rel="alternate"/>
    <summary>The discussion revolves around the implementation of an opt-in annex and limiting the maximum size of the value in Bitcoin transactions. The first point raised is the requirement for every input to commit to an annex, even if it is empty. This would involve modifying the current Taproot support on the Lightning-side, where all P2TR spends must add an annex and commit to it in the BIP341 signature digest. Failure to do so would break propagations of `option_taproot` channel transactions.Another approach suggested is to introduce the maximum size/weight of the witness/transaction as a TLV (Type Length Value) record itself. A GitHub branch (https://github.com/bitcoin-inquisition/bitcoin/pull/28) is mentioned that implements this approach and also includes the implementation of "only allow tlv record 0" with the TLV format from BIP #1381.In response to this suggestion, Greg Sanders agrees that using the TLV format seems reasonable and should not unduly impact current users. He suggests that max tx size policy "hints" in an annex field can be used to further relax the restrictions in the future.Joost Jager brings up the need to restrict the annex to a maximum size to protect opt-in users. He proposes a set of policies that include the opt-in annex, the TLV format, allowing only unstructured data in tlv record 0, and limiting the maximum size of the value to 256 bytes. However, he points out that the current limit of 126 bytes in a GitHub pull request (https://github.com/bitcoin-inquisition/bitcoin/pull/22) is insufficient for certain use cases involving annex-vaults. He explains that if there are two presigned transactions (unvault and emergency), their signatures alone would take up 128 bytes, and additional space is needed for the ephemeral key and other vault parameters.Joost seeks input on any remaining practical objections to making the annex standard under the conditions listed above.Overall, the discussion focuses on the technical considerations and potential implications of implementing an opt-in annex and limiting the maximum size of the value in Bitcoin transactions. The participants explore different approaches and discuss their potential impact on existing protocols and users.</summary>
    <published>2023-06-18T20:32:12+00:00</published>
  </entry>
</feed>
