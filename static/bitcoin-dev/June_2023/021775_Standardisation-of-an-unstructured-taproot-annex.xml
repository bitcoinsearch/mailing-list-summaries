<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Standardisation of an unstructured taproot annex</title>
  <updated>2023-06-29T02:32:46.529997+00:00</updated>
  <author>
    <name>Antoine Riard 2023-06-18 20:32:12+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Standardisation of an unstructured taproot annex</title>
    <updated>2023-06-29T02:32:46.530028+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-June/021775.html" rel="alternate"/>
    <summary>The discussion revolves around two proposals to enhance Bitcoin's functionality. The first proposal suggests requiring every input to commit to an annex, even if it is empty, in order to ensure existing multi-party protocols remain unaffected. This would necessitate modifying the current Taproot support on the Lightning-side, as all P2TR spends must add an annex and commit to it in the BIP341 signature digest. Failure to upgrade Lightning nodes accordingly would disrupt propagations of their `option_taproot` channel transactions.The second approach involves introducing a maximum size/weight limit for the witness/transaction as a TLV record itself. This proposal can be found in the following link: https://github.com/bitcoin-inquisition/bitcoin/pull/28. Additionally, this branch also implements the restriction of allowing only TLV record 0 with the TLV format from BIP #1381.Joost Jager suggests a set of policies that enable annex-vaults while aligning with previous work. These policies include an opt-in annex requirement for every input, the adoption of the TLV format defined in BIP #1381 for future extensibility, allowing only unstructured data in TLV record 0 for further extensibility, and limiting the maximum size of the value to 256 bytes to protect opt-in users. However, there is concern that the current limit of 126 bytes in another proposal (https://github.com/bitcoin-inquisition/bitcoin/pull/22) is insufficient for these types of vaults. Joost points out that if there are two presigned transactions (unvault and emergency), the signatures alone would take up 128 bytes, leaving little room for additional parameters. Overall, the discussion explores the need for enhanced protocols to ensure compatibility with multi-party systems and protect opt-in users.</summary>
    <published>2023-06-18T20:32:12+00:00</published>
  </entry>
</feed>
