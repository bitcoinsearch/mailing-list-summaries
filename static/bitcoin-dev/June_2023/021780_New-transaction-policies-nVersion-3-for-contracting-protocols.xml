<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>New transaction policies (nVersion=3) for contracting protocols</title>
  <updated>2023-07-10T02:38:10.914693+00:00</updated>
  <author>
    <name>Greg Sanders 2023-06-21 20:57:45+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>New transaction policies (nVersion=3) for contracting protocols</title>
    <updated>2023-07-10T02:38:10.914738+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-June/021780.html" rel="alternate"/>
    <summary>The proposal being discussed in the provided context is about a set of mempool/transaction relay policies that aim to aid L2/contract protocols. The proposal suggests a simple solution to address some remaining problems with the previously proposed Package Mempool Accept package RBF. The implementation for Bitcoin Core has already been provided.The new policies include additional rules for V3 transactions and modifications to the package RBF rules. The V3 transactions are subject to existing standardness rules, such as minimum and maximum transaction weight, standard output types, and cleanstack. In addition to these rules, the following apply to V3 transactions:1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. However, it must still meet other RBF rules regarding fees, etc., for replacement to occur.2. Any descendant of an unconfirmed V3 transaction must also be a V3 transaction. This provides "inherited" replaceability signaling when creating descendants of unconfirmed transactions.3. An unconfirmed V3 transaction cannot have more than one descendant. This rule prevents pinning attacks where a malicious counterparty prevents the transaction from being replaced by adding many non-fee-bumping descendant transactions.4. A V3 transaction with an unconfirmed V3 ancestor cannot exceed 1000 virtual bytes in size. This limit ensures that the size of fee-bumping descendants remains manageable.These rules are designed to address pinning attacks and allow for efficient fee-bumping of presigned transactions in L2/contract protocols. The proposal also suggests modifications to the package RBF rules to accommodate these new policies.The author of the proposal, Greg Sanders, elaborates on some caveats and incomplete thoughts related to the pinning issue. He mentions two types of pinning: rule#3 pinning and package limit pinning. He suggests that replacing rule#3 with a feerate-based policy could be appropriate but raises concerns about potential denial-of-service risks. He also proposes that package RBF should detect conflicts related to "sibling output spends" and remove them from the mempool.Sanders further discusses the limitations of the proposed solution. He points out that the proposed policies do not address pinning in ANYONECANPAY situations, where additional inputs can inflate the parent transaction and lower the effective feerate of the package. He suggests that a more complex policy scheme may be required to mitigate this issue. He also mentions scenarios where HTLC/commitment-like transactions are being resolved in a batch, but some transactions may need to be accelerated due to relative time constraints. He suggests that axing rule#3 in favor of a Replace-by-ancestor-feerate system could address this problem.Additionally, Sanders makes a couple of suggestions. First, he proposes allowing OP_TRUE to become a standard script type as part of the policy update, which could save bytes by removing unnecessary witness data. Second, he suggests allowing for a single dust-value output that is immediately spent by the package, making anchor outputs easier to design.Overall, the proposal aims to improve fee-bumping and replaceability of transactions in L2/contract protocols through the introduction of new policies for V3 transactions and modifications to the package RBF rules. The author acknowledges some limitations and suggests potential solutions and optimizations.The Bitcoin developers have proposed a set of new rules for package relay in order to improve the incentive compatibility of replacement transactions. The first rule states that the minimum feerate between the package and its child's ancestor must not be lower than the individual feerates of all directly conflicting transactions and the ancestor feerates of all original transactions. This modification aims to ensure that replacement transactions are not less incentivized to mine.In addition, a second rule has been added requiring all package transactions with mempool conflicts to be V3. This means that the "sponsoring" child transaction must also be V3. The rationale behind this rule is that the fee-related rules are economically rational for ancestor packages, but not necessarily for other types of packages. By enforcing V3 transactions for package validation, it becomes easier to account for all possibilities and ensure correct application of descendant limits.The intended usage for Lightning Network (LN) commitment transactions is also mentioned. It is recommended that commitment transactions be V3 and have 1 anchor output. These transactions can be signed with 0 fees or 1sat/vbyte once package relay is deployed on a significant portion of the network. If the commitment transaction needs to be broadcasted, the desired feerate should be determined at broadcast time and the anchor output should be spent in a high feerate transaction. The broadcasted commitment transaction is referred to as "the parent" and the attached fee-bumping transaction as "the child".There are several restrictions for the child transaction: it must be V3, it must be at most 1000vB (limiting the number of inputs), and one child may fund fees for multiple commitment transactions through batched fee-bumping</summary>
    <published>2023-06-21T20:57:45+00:00</published>
  </entry>
</feed>
