<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>New transaction policies (nVersion=3) for contracting protocols</title>
  <updated>2023-06-29T02:27:00.551374+00:00</updated>
  <author>
    <name>Greg Sanders 2023-06-21 20:57:45+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>New transaction policies (nVersion=3) for contracting protocols</title>
    <updated>2023-06-29T02:27:00.551412+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-June/021780.html" rel="alternate"/>
    <summary>The proposal suggests a set of mempool/transaction relay policies that aim to support layer 2 and contract protocols. The proposed policies address some issues with the previously proposed Package Mempool Accept RBF (replace-by-fee) rules. The implementation for Bitcoin Core can be found on GitHub. The proposal aims to solve Rule 3 pinning and potentially eliminate CPFP (child pays for parent) carve-out. The new policies include additional rules for V3 transactions and modifications to package RBF rules. V3 transactions are currently non-standard in Bitcoin Core, so existing standardness rules still apply to them. However, the following additional rules apply to V3 transactions:1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. This allows for easier replaceability signaling when descendants of unconfirmed transactions are created.2. Any descendant of an unconfirmed V3 transaction must also be V3. This ensures that the replaceability signaling is inherited for all descendants of unconfirmed transactions.3. An unconfirmed V3 transaction cannot have more than 1 descendant. This limits the number of descendants to prevent a pinning attack where a malicious counterparty adds many descendant transactions to prevent fee-bumping.4. A V3 transaction with an unconfirmed V3 ancestor cannot exceed 1000 virtual bytes in size. This limit prevents excessive vbytes that would require large fees for replacement. It also ensures that the child transaction can be funded by a reasonable number of UTXOs.These rules aim to provide a balance between allowing fee-bumping and preventing abuse. By limiting the size and number of descendants, the cost to replace a V3 transaction is more predictable and manageable.The proposal also suggests modifications to the package RBF rules. The rule around unconfirmed inputs states that a package may include new unconfirmed inputs, but the ancestor feerate of the child must be at least as high as the ancestor feerate of the inputs. This rule allows for fee-bumping within a package.The proposal acknowledges that there are scenarios where the new policies may not fully solve pinning attacks, such as in ANYONECANPAY situations or when resolving HTLC/commitment-like transactions in a batch with relative time constraints. However, it suggests that replacing Rule 3 with a replace-by-ancestor-feerate system could address these scenarios.Finally, the proposal includes a couple of additional suggestions. It suggests considering allowing OP_TRUE to become a standard script type to save bytes in anchoring transactions. It also suggests allowing for a single dust-value output that is immediately spent by the package, making anchor outputs easier to design.Overall, the proposal aims to improve fee-bumping and replaceability signaling for layer 2 and contract protocols while maintaining compatibility with existing transaction standards.The Bitcoin development team has proposed a new set of rules for transaction replacement, known as version 3 (V3) transactions. The first rule states that any replacement transactions must have a minimum feerate equal to the individual feerates of all directly conflicting transactions and the ancestor feerates of all original transactions. This ensures that replacement transactions are not less incentive-compatible to mine.The second rule requires that all package transactions with mempool conflicts be V3, including the "sponsoring" child transaction. This means that the package must be a child-with-parents package, and only V3 transactions can pay to replace their ancestors' conflicts, while only V3 transactions' replacements may be paid for by a descendant. This rule is economically rational for ancestor packages, but more difficult to account for other types of packages.For Lightning Network (LN) usage, commitment transactions should be V3 and have 1 anchor output. They can be signed with 0 fees or 1 sat/vbyte once package relay is deployed on a significant portion of the network. If the commitment transaction needs to be broadcasted, the desired feerate at broadcast time should be determined, and the anchor output can be spent in a high feerate transaction. The child transaction attached to the broadcasted commitment transaction must also be V3 and have a maximum size of 1000vB. Multiple commitment transactions can be funded by one child transaction through batched fee-bumping. To add more fees, the child transaction should be replaced with a higher-feerate transaction, rather than trying to attach a grandchild.There are some expected questions regarding these rules. One question asks if this fix Rule 3 Pinning, to which the answer is yes, as the V3 descendant limit restricts both the user and their counterparty. Another question asks about bumping the counterparty's commitment transaction in the mempool, to which the response is that it can be done by attaching a high-feerate child to the user's commitment transaction, without the need for Child-Pays-For-Parent (CPFP). There is also a concern about privacy and fingerprinting LN transactions based on nVersion. It is</summary>
    <published>2023-06-21T20:57:45+00:00</published>
  </entry>
</feed>
