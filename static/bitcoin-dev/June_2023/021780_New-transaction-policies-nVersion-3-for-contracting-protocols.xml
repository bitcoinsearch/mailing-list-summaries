<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>New transaction policies (nVersion=3) for contracting protocols</title>
  <updated>2023-07-03T02:29:54.170118+00:00</updated>
  <author>
    <name>Greg Sanders 2023-06-21 20:57:45+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>New transaction policies (nVersion=3) for contracting protocols</title>
    <updated>2023-07-03T02:29:54.170160+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-June/021780.html" rel="alternate"/>
    <summary>In a Bitcoin-dev mailing list thread, the discussion revolves around using V3 transactions to address pinning attacks in coinjoin-like transactions. Greg Sanders suggests staging all utxos separately into a timelocked utxo that is immediately spendable by all joining parties or the coinjoin coordinator. This can be done with a timelock long enough to prevent pinning. If using a coordinator model, this process can be done in a chained fashion, allowing for multiple mixes with only one utxo setup step. However, there are downsides to this approach, including additional transactions per participant and less composability with other protocols.Greg also points out that the proposed policy update may not fix pinning attacks in ANYONECANPAY situations, where the parent transaction can be "inflated" by adding additional inputs. This problem may require a more complex policy scheme and is relevant to eltoo-related designs using BIP118. Furthermore, the update may not address scenarios where HTLC/commitment-like transactions need to be resolved in batches with different time constraints for acceleration. Overall, Greg suggests replacing Rule #3 with a Replace-by-ancestor-feerate system to mitigate these issues.In another part of the thread, Gloria Zhao presents a proposal for a set of mempool/transaction relay policies to aid L2/contract protocols. The proposal aims to solve Rule 3 pinning and potentially eliminate CPFP carve-out. It includes additional rules for V3 transactions and modifications to package RBF rules. V3 transactions can be replaced even without signaling BIP125 replaceability, and any descendant of an unconfirmed V3 transaction must also be V3. An unconfirmed V3 transaction cannot have more than one descendant, and a V3 transaction with an unconfirmed V3 ancestor cannot exceed 1000 virtual bytes in size.Gloria provides rationales for these rules, such as preventing pinning attacks and ensuring sufficient UTXOs for fee-bumping. She also mentions that V3 transactions are currently non-standard in Bitcoin Core, so existing transactions will not be affected by the proposed rules unless explicitly opted into. Gloria invites feedback on the proposal and encourages interested parties to review the implementation she has provided.In conclusion, the discussion revolves around using V3 transactions to address pinning attacks and proposes a set of mempool/transaction relay policies to aid L2/contract protocols. The proposed rules aim to solve Rule 3 pinning and provide additional security measures for transaction replacements and fee-bumping.The Bitcoin development team has proposed a set of new rules for transaction replacement to ensure better incentive compatibility for miners. The first rule states that the minimum fee between the package feerate and the ancestor feerate of the child must not be lower than the individual feerates of all directly conflicting transactions and the ancestor feerates of all original transactions. This modification aims to prevent replacement transactions from being less attractive to mine. The rationale behind this rule is that a package/transaction's ancestor feerate may overestimate its incentive compatibility, so using the minimum between the package feerate and the ancestor feerate of the child provides a more conservative value.The second rule requires all package transactions with mempool conflicts to be V3, including the "sponsoring" child transaction. This means that the package must be a child-with-parents package. Additionally, the package validation is only attempted if the transactions do not pay sufficient fees to be accepted on their own. Therefore, only V3 transactions can pay to replace their ancestors' conflicts, and only V3 transactions' replacements may be paid for by a descendant. The rationale behind this rule is that the fee-related rules are economically rational for ancestor packages, but not necessarily for other types of packages. Allowing any ancestor package would make it more difficult to account for all possibilities and ensure correct application of descendant limits.For LN (Lightning Network) usage, commitment transactions should be V3 and have 1 anchor output. These transactions can be signed with 0 fees or 1sat/vbyte once package relay is deployed on a significant portion of the network. If the commitment transaction needs to be broadcasted, the desired feerate at broadcast time should be determined, and the anchor output should be spent in a high feerate transaction. This high feerate transaction is referred to as "the parent," and an attached fee-bumping transaction is referred to as "the child." The child must also be V3 and at most 1000vB in size, restricting the number of inputs that can be used to fund the fee bump. Batched fee-bumping is allowed, where one child may fund fees for multiple commitment transactions. To add more fees, a second fee-bump should be done by replacing the child with a higher-feerate transaction, rather than trying to attach a grandchild.Unconfirmed V3 transactions should never be spent from, as the descendant limits for V3 transactions are very restrictive. However, the V3 descendant limit</summary>
    <published>2023-06-21T20:57:45+00:00</published>
  </entry>
</feed>
