<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - postr: p2n payjoin using nostr</title>
  <updated>2023-07-29T09:22:04.868512+00:00</updated>
  <author>
    <name>alicexbt 2023-06-10 22:17:24+00:00</name>
  </author>
  <author>
    <name>alicexbt 2023-06-12 19:28:47+00:00</name>
  </author>
  <link href="bitcoin-dev/June_2023/021760_postr-p2n-payjoin-using-nostr.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2023/021766_postr-p2n-payjoin-using-nostr.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - postr: p2n payjoin using nostr</title>
    <updated>2023-07-29T09:22:04.868512+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-June/021760.html" rel="alternate"/>
    <summary>A Bitcoin developer has shared a proof of concept for payjoin (p2ep) that eliminates the need for personal servers, addressing concerns about its adoption. Unlike the existing method called stowaway, which relies on servers, this proposal only requires common nostr relays between the sender and recipient. The proof of concept can be found on GitLab, and there is a demo video available on YouTube.The email thread revolves around discussing a proof of concept for using nostr npub and relays for payjoin. In this context, SIGHASH_NONE is used when there is no change in the transaction, allowing the sender to spend the entire UTXO for the payment. However, this approach gives the receiver full control over the funds and allows anyone who sees the final broadcasted transaction to extract the sender's input for their own use.The discussion also mentions that developers can ignore the use of specific SIGHASH flags and opt for other flags or default settings. Additionally, there are no incentives for both the sender and recipient to engage in replace-by-fee (RBF) or double spending during a payjoin transaction.To secure all outputs, the recipient can use SIGHASH_ALL, as suggested by Raghav Sood in a blog post. However, it is worth noting that this method still has vulnerabilities, as mentioned in a tweet thread by Symphonicbtc.The email advises disabling the ability to use mainnet coins directly in the code, emphasizing that posting such code in its current state would be highly irresponsible. Furthermore, the email clarifies that this proof of concept is not a proper implementation of a payjoin, even in a theoretical scenario, as it is relatively easy to determine which inputs belong to the sender and receiver in the final transaction.</summary>
    <published>2023-06-10T22:17:24+00:00</published>
  </entry>
</feed>
