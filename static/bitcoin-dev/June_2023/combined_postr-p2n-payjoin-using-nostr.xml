<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - postr: p2n payjoin using nostr</title>
  <updated>2023-07-29T19:09:01.807528+00:00</updated>
  <author>
    <name>alicexbt 2023-06-10 22:17:24+00:00</name>
  </author>
  <author>
    <name>alicexbt 2023-06-12 19:28:47+00:00</name>
  </author>
  <link href="bitcoin-dev/June_2023/021760_postr-p2n-payjoin-using-nostr.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2023/021766_postr-p2n-payjoin-using-nostr.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - postr: p2n payjoin using nostr</title>
    <updated>2023-07-29T19:09:01.807528+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-June/021760.html" rel="alternate"/>
    <summary>A Bitcoin developer has introduced a proof of concept for payjoin (p2ep) that eliminates the need for personal servers, addressing concerns regarding its adoption. Unlike samourai's stowaway, which relies on servers, this proposal utilizes common nostr relays between the sender and recipient. The repository for this proof of concept can be found on GitLab, accompanied by a demo video on YouTube.The email thread delves into the details of this proof of concept, specifically focusing on the utilization of nostr npub and relays for payjoin. In transactions where there is no change and the sender intends to spend the entire UTXO for payment, SIGHASH_NONE is employed. However, this approach allows the receiver to have full control over the funds, while also enabling anyone who views the broadcasted transaction to utilize the sender's input for their own purposes. Although developers have the option to disregard specific SIGHASH flags and use alternative ones or defaults, it is crucial to consider potential vulnerabilities.Regarding the payjoin transaction, there are no incentives for either the sender or recipient to engage in RBF (Replace-by-Fee) or double spending. To ensure secure outputs, the recipient should utilize SIGHASH_ALL, as explained in a blog post by Raghav Sood. Nonetheless, as mentioned in a tweet thread by Symphonicbtc, this approach may still be vulnerable. The email suggests disabling the direct use of mainnet coins in the code, deeming it highly irresponsible to post such a state publicly.It is important to note that this proof of concept is not a proper implementation of a payjoin, even in a theoretical scenario. In the final transaction, it is relatively easy to discern which inputs belong to the sender and which belong to the receiver.</summary>
    <published>2023-06-10T22:17:24+00:00</published>
  </entry>
</feed>
