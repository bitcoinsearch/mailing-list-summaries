<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Standardisation of an unstructured taproot annex</title>
  <updated>2023-06-24T01:24:33.496532+00:00</updated>
  <author>
    <name>Joost Jager 2023-06-20 12:30:19+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Standardisation of an unstructured taproot annex</title>
    <updated>2023-06-24T01:24:33.496566+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-June/021777.html" rel="alternate"/>
    <summary>Joost Jager has written an email explaining the primary advantage of using the taproot annex for applications that would ideally use covenants. He mentions that due to the described circular reference problem, the vault creation and signature backup can't be executed in one atomic operation without the annex. Joost has created a demo application to support this use case of the taproot annex. The demo shows how a coin can be spent to a special address from which it can - at a later stage - only move to a pre-defined final destination. It makes use of the annex to store the ephemeral signature for the presigned transaction so that the coin cannot get lost. He believes that if you believe that time-locked vaults are important for Bitcoin and also acknowledge that soft forks aren't easy to implement, then the intermediate solution described above is very relevant.</summary>
    <published>2023-06-20T12:30:19+00:00</published>
  </entry>
</feed>
