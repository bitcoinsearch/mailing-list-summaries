<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)</title>
  <updated>2023-08-02T00:11:07.720143+00:00</updated>
  <author>
    <name>Johan Torås Halseth 2019-10-30 07:22:53+00:00</name>
  </author>
  <author>
    <name>David A. Harding 2019-10-28 17:14:38+00:00</name>
  </author>
  <author>
    <name>Johan Torås Halseth 2019-10-28 09:45:39+00:00</name>
  </author>
  <author>
    <name>David A. Harding 2019-10-27 22:54:02+00:00</name>
  </author>
  <author>
    <name>Jeremy 2019-10-27 19:13:09+00:00</name>
  </author>
  <author>
    <name>Matt Corallo 2019-10-25 17:30:41+00:00</name>
  </author>
  <author>
    <name>Johan Torås Halseth 2019-10-25 07:05:15+00:00</name>
  </author>
  <author>
    <name>Matt Corallo 2019-10-24 21:25:14+00:00</name>
  </author>
  <author>
    <name>Johan Torås Halseth 2019-10-24 13:49:09+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2019-02-13 04:22:39+00:00</name>
  </author>
  <author>
    <name>Matt Corallo 2019-01-08 14:46:45+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2019-01-08 05:50:20+00:00</name>
  </author>
  <author>
    <name>Matt Corallo 2019-01-07 15:18:52+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2018-12-04 03:33:53+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-12-03 04:16:10+00:00</name>
  </author>
  <author>
    <name>Bob McElrath 2018-12-02 15:08:39+00:00</name>
  </author>
  <author>
    <name>Matt Corallo 2018-11-30 19:33:56+00:00</name>
  </author>
  <author>
    <name>Russell O'Connor 2018-11-30 17:38:04+00:00</name>
  </author>
  <author>
    <name>Matt Corallo 2018-11-29 19:37:54+00:00</name>
  </author>
  <link href="bitcoin-dev/Oct_2019/017440_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2019/017439_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2019/017437_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2019/017435_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2019/017434_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2019/017433_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2019/017436_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2019/017432_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2019/017429_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2019/016679_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2019/016610_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2019/016609_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2019/016608_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2018/016530_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2018/016526_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2018/016524_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2018/016520_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2018/016519_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2018/016518_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)</title>
    <updated>2023-08-02T00:11:07.720143+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-October/017440.html" rel="alternate"/>
    <summary>In an email exchange, Johan Torås Halseth suggests relaxing the current mempool limits to allow for more data being relayed. However, David A. Harding points out that this could lead to a free relay attack. The discussion also touches on the limitations and issues of the current mempool acceptance code in bitcoind. Johan proposes a new rule for mempool transactions, but Dave raises concerns about potential risks. A document is added to the Bitcoin Core developer wiki to describe these risks and mitigation strategies.The conversation continues with discussions on mempool limits for OP_SECURETHEBAG and the two main categories of mempool issues: relay cost and mempool walking. To address the relay cost issue, proper assessment of Replace By Fee update fees is suggested. The walking issue can be solved by caching with a set to avoid re-expanding a node. OP_SECURETHEBAG is proposed as a solution to the Lightning Network issue, where all HTLCs are put into a tree structure. The discussion also explores the possibility of relaxing the carve-out rule in bitcoind 0.19 to support more robust CPFP of on-chain contracts.Further discussions revolve around the addition of the carve-out rule in bitcoind 0.19 and its impact on on-chain contracts like Lightning commitment transactions. Johan suggests relaxing some of the current limits, but Matt Corallo explains that at least one non-CSV output per party is still required. Rusty Russell proposes a simplified RBF approach to address the issue of exceeding the MAX_PACKAGE_VIRTUAL_SIZE limit. The discussion also raises questions about the current mempool acceptance code in bitcoind and its ability to handle certain scenarios.The conversation also includes discussions on the recently released RC for bitcoind 0.19, the use of a carve-out rule for CPFP of on-chain contracts, and the proposal to relax the current mempool limits. The limitations and potential risks of the proposed changes are examined, along with suggestions for mitigation strategies. Rusty Russell proposes a simplified RBF approach that allows for replacement under certain conditions. The discussion highlights the need to carefully consider the impact of these changes on the system and ensure they do not allow for attacks or excessive bandwidth usage.Overall, the email thread explores various aspects of mempool acceptance code, mempool limits, CPFP of on-chain contracts, and the potential impact of proposed changes on the Bitcoin network. The developers discuss different solutions and their implications, aiming to find a balance between efficiency, security, and usability.The email exchanges discussed various issues related to the Lightning Network and its requirements. One of the main concerns raised by Matt Corallo was defining a criteria for "near the top of the mempool" in order to confirm transactions by a specific deadline. Rusty suggested defining it as "in the first 4 MSipa," but acknowledged that this approach may have some drawbacks. Another topic discussed was the RBF-pinning problem, where transactors mark their transactions as "likely-to-be-RBF'ed" to prevent attacks. The proposal suggested rejecting children of such transactions unless they are "near the top of the mempool." However, this proposal faced challenges in defining the criteria for "near the top of the mempool" and meeting Lightning's requirements for transaction confirmation.Matt Corallo proposed an alternative solution to the RBF-pinning problem, involving marking transactions as "likely-to-be-RBF'ed" and adding inputs after-the-fact using SIGHASH_SINGLE. This option, however, led to channel failures in practice. It was also suggested that cross-signing would be necessary for Lightning to discourage parties from picking apart transactions and broadcasting only one SIGHASH_SINGLE.CPFP (Child-Pays-For-Parent) was discussed as a way to increase the fee rate of a transaction by attaching children transactions with higher fees. However, there were concerns about the complexity of implementing CPFP due to anti-DoS rules. A proposal to tweak Lightning's commitment transaction by having two small-value outputs was suggested to address CPFP security model considerations. This would allow each channel participant to immediately spend their output and chain children off without allowing unrelated third parties to do the same.In conclusion, the email exchanges explored different proposals and challenges related to transaction confirmation, RBF-pinning, CPFP, and tweaking Lightning's commitment transaction to address security considerations. The discussions aimed to find simpler and more efficient solutions for the Lightning Network and similar systems.The "PACKAGE_VIRTUAL_SIZE" refers to a Vsize of 1001. This Vsize indicates the size of a package or transaction in a blockchain network. It is important to note that each counterparty involved in the transaction will have the ability to independently CPFP (Child Pays for Parent) the transaction. CPFP is a mechanism in which one party can accelerate the confirmation of a transaction by creating a child transaction that includes a higher fee. This allows the original transaction and its dependent child transaction to be processed more quickly</summary>
    <published>2019-10-30T07:22:53+00:00</published>
  </entry>
</feed>
