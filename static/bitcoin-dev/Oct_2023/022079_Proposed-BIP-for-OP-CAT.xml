<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposed BIP for OP_CAT</title>
  <updated>2023-10-24T14:56:09.767563+00:00</updated>
  <author>
    <name>Rusty Russell 2023-10-24 00:48:24+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposed BIP for OP_CAT</title>
    <updated>2023-10-24T14:56:09.767590+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/022079.html" rel="alternate"/>
    <summary>In the email, Andrew Poelstra discusses his experience with rolling sha2 and the use of `OP_MULTISHA256` in his templating investigations with `OP_TXHASH`. He mentions that he prefers `OP_MULTISHA256` over `OP_CAT`, but acknowledges that `OP_CAT` allows for a Schnorr signature trick. He suggests considering the use of rolling sha2, but also mentions that he just learned about the 1000 element limit and couldn't find it in BIP-141 upon scanning.

To address the 1000 element limit, Andrew proposes a solution where instead of counting simple stack depth, each stack entry is counted as (1 + /520) entries. He explains that even though only 520 bytes can be pushed, these entries can still be made with `OP_CAT`. He notes that the `stack` and `altstack` variables in `interpreter.cpp` would need to be objects instead of vectors to count entries differently. However, he believes that implementing this logic would be simple enough and could be enabled unconditionally since it cannot be violated prior to using `OP_CAT`.

Overall, Andrew's email touches on his preference for `OP_MULTISHA256` in his templating investigations, his acknowledgement of the 1000 element limit, and his proposal to address this limit by counting each stack entry differently.</summary>
    <published>2023-10-24T00:48:24+00:00</published>
  </entry>
</feed>
