<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Actuarial System To Reduce Interactivity In N-of-N (N &gt; 2) Multiparticipant Offchain Mechanisms</title>
  <updated>2023-10-06T01:53:49.885923+00:00</updated>
  <author>
    <name>Antoine Riard 2023-10-05 02:12:33+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-09-12 09:41:18+00:00</name>
  </author>
  <author>
    <name>Antoine Riard 2023-09-11 06:02:13+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-09-09 01:27:38+00:00</name>
  </author>
  <link href="bitcoin-dev/Oct_2023/021980_Actuarial-System-To-Reduce-Interactivity-In-N-of-N-N-2-Multiparticipant-Offchain-Mechanisms.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2023/021955_Actuarial-System-To-Reduce-Interactivity-In-N-of-N-N-2-Multiparticipant-Offchain-Mechanisms.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2023/021952_Actuarial-System-To-Reduce-Interactivity-In-N-of-N-N-2-Multiparticipant-Offchain-Mechanisms.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2023/021942_Actuarial-System-To-Reduce-Interactivity-In-N-of-N-N-2-Multiparticipant-Offchain-Mechanisms.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Actuarial System To Reduce Interactivity In N-of-N (N &gt; 2) Multiparticipant Offchain Mechanisms</title>
    <updated>2023-10-06T01:53:49.885996+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/021980.html" rel="alternate"/>
    <summary>The email discusses the topic of loose interactivity and the need for `SIGHASH_ANYPREVOUT` in a specific context. It is mentioned that the actuary is always online and can gather signatures for the next state while signing new transactions on top of it. The purpose of `SIGHASH_ANYPREVOUT` is to allow transactions on top of the next state to spend either the actual next state or the current state plus additional transactions. This flexibility is important in case the next state fails to get fully signed and the participants decide to give up on it. There is a suggestion mentioned in the email that participants other than the actuary could generate a single public key known by all participants. However, this approach raises concerns as only one sockpuppet of the actuary would be needed to add to the participant set. The main challenge highlighted in the email is that the actuary needs to bond a significant amount of funds to each participant, which is not part of the funding of the construction.The email discusses the issue of participant non-interactivity in Zeeman 40, which has halted the actuary's R reveals. The concern is that a new off-chain state, N1', with a new negotiated group of 39 participants (excluding the 40th) may reuse the R reveals on N1, which poses a security risk to the actuary bond. To address this, the suggestion is that the R reveal should only occur once all the group participants have revealed their own signatures.Furthermore, it is mentioned that there seems to be an assumption of loose interactivity, where all non-actuary participants must be online simultaneously. The lack of contribution is attributed to a "flat" off-chain construction without layering of promised off-chain outputs in subgroups to reduce novation interactivity.On a more fundamental level, the email points out that the actuarial system does not solve the problem of "multi-party off-chain state correction" as there is no guarantee that the actuary will not slash the bond itself. Additionally, if the bond is guarded by users' public keys, there is no assurance that the user will cooperate after the actuary commits equivocation and signs a "fair" slashing transaction.The email introduces the concept of offchain mechanisms in blockchain technology, specifically focusing on the Bitcoin blockchain. It explains that users can go offline and then come online to synchronize and broadcast transactions to the mempool, which are confirmed by miners. However, this becomes difficult in offchain mechanisms like Lightning channels, where users need to be always online. The sender proposes a solution called the actuary role, similar to miners in the blockchain, who only decide transaction ordering without having custody of funds.To enable the actuary role, two softforks, `SIGHASH_ANYPREVOUT` and `OP_CHECKSEPARATEDSIG`, are suggested. The advantages of using an N-of-N signatory set in offchain mechanisms are discussed, providing consensus and preventing a majority from forcing movement of funds against a participant's will. However, all participants need to be online to sign a new state, which stalls the protocol if one participant is offline.The concept of an offchain "mempool" is introduced, where the state of the mechanism is considered as pairs of Bitcoin SCRIPT and satoshis, instantiated as actual transaction outputs. Participants can create transactions within the current state and send money to each other, but these transactions remain unconfirmed until they are signed off by all participants.To address the confirmation issue without custodianship, the sender suggests adding the actuary to the contract controlling the funds with a specific `R` value, preventing `R` reuse and enforcing single-spend. This ensures non-custodiality while maintaining an N-of-N requirement for spending.The desired properties for the actuary role are highlighted, including the ability to select one transaction, inability to spend funds unilaterally or hostage them, and assurance that participants can drop the mechanism onchain and recover their funds if the actuary stops responding. A suggested method to ensure these properties is infecting the SCRIPT of all outputs with `(sign-only-once(M) || CSV) &amp;&amp; C`.The email also discusses `SIGHASH_ANYPREVOUT` in Bitcoin transactions and its relationship to the actuary role. With `SIGHASH_ANYPREVOUT`, participants can confirm transactions "confirmed" by the actuary even if the actual transaction ID changes.An example is provided with three participants (A, B, C) and an actuary (M). Each participant has a base contract, and the actuary signs transactions using a fixed `R` nonce. When A wants to send money to B, they create a transaction with two new outputs. A solicits a single-spend signature from the actuary to ensure B's assurance against double-spending. If dropped onchain, the confirmed transaction can be immediately confirmed onchain as well.To update the</summary>
    <published>2023-10-05T02:12:33+00:00</published>
  </entry>
</feed>
