<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BitVM: Compute Anything on Bitcoin</title>
  <updated>2023-10-11T01:52:54.981624+00:00</updated>
  <author>
    <name>Anthony Towns 2023-10-10 01:27:08+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BitVM: Compute Anything on Bitcoin</title>
    <updated>2023-10-11T01:52:54.981670+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/021985.html" rel="alternate"/>
    <summary>The email discusses a concept related to N-bit claims and the use of NAND circuits to determine the validity of these claims. The example provided in the email involves a 4-bit claim, where valid values take the form xxx0 and 1x01. The model described is a prover/challenger system, where the prover asserts a solution and the verifier issues challenges that the prover must consistently respond to if the solution is correct. If the prover fails to meet the challenge, they lose the funds.The circuit consists of C individual assertions, each with two inputs (selected from either the N input bits or the output of a previous assertion) and a single output. Each of these assertions is encoded as tapleafs, allowing spending a transaction via that tapleaf to validate the individual assertion. Additionally, there is an additional tapleaf per input/assertion that allows the verifier to claim the funds immediately if the prover ever provides inconsistent values for an input or the result of an assertion.If the prover attempts to cheat by claiming an invalid input, the verifier can run the circuit offline to establish the error. The email provides an example of how the verifier can trace back from the tip to identify the inconsistency. To reliably invalidate an attempt to cheat, enough challenges should be provided to cover the longest circuit path.The email also suggests that the approach of "response enabled by challenge revealing a unique preimage" allows for all the interesting work to be done in the witness. This means that pre-generated 2-of-2 signatures can be used to ensure protocol compliance without the need for CTV/APO. However, there would still be a need to exchange O(C*log(C)) hashes for the challenge hashes and commitment hashes.The email briefly mentions APO/CTV as a way to avoid the need for challenge hashes, but questions whether it would work effectively. It suggests using CSFS-ish behavior to make commitments by signature, eliminating the need to transfer hashes in advance.Overall, the email delves into the concept of using NAND circuits and tapleafs to validate N-bit claims, discusses the prover/challenger model, and explores potential optimizations and challenges in implementing this approach.</summary>
    <published>2023-10-10T01:27:08+00:00</published>
  </entry>
</feed>
