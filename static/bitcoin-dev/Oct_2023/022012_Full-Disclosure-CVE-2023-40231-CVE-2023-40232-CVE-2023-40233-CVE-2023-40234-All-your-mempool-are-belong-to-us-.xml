<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Full Disclosure: CVE-2023-40231 / CVE-2023-40232 / CVE-2023-40233 / CVE-2023-40234 "All your mempool are belong to us"</title>
  <updated>2023-10-25T17:03:57.963439+00:00</updated>
  <author>
    <name>Antoine Riard 2023-10-17 18:34:52+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Full Disclosure: CVE-2023-40231 / CVE-2023-40232 / CVE-2023-40233 / CVE-2023-40234 "All your mempool are belong to us"</title>
    <updated>2023-10-25T17:03:57.963439+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/022012.html" rel="alternate"/>
    <summary>The email discusses a scenario involving channels and transactions in the context of Bitcoin programming. It begins by mentioning that without the claim from `C`, `B` forces the `B====C` channel onchain. The email highlights that HTLC-timeout transactions do not confirm, but instead are replaced cyclically by C's HTLC-preimage which remains valid even after the HTLC timelock between `B` and `C` has expired. The test provided in the email can be found here: [link](https://github.com/ariard/bitcoin/commit/19d61fa8cf22a5050b51c4005603f43d72f1efcf).

The email further explains that `A` drops the `A====B` channel onchain in an attempt to recover the HTLC funds. It clarifies that the fee rates and mempool congestion are not relevant to this exploit, as the issue lies within the replacement mechanism itself. The email mentions the use of low feerates for CPFP (Child Pays For Parent) on the commitment transaction, and the fact that `C` is able to utilize the preimage knowledge, as its own incoming HTLC has already been confirmed as claimed by `A`.

The email also touches upon `C` broadcasting an HTLC-success transaction at block height 144, but emphasizes that `C` broadcasts this high feerate transaction at every block between blocks 100 and 144 to replace `B`'s HTLC-timeout transaction. It notes that `B` cannot feebump the HTLC-timeout due to the presence of sighash_single | anyonecanpay on `C`'s signature, which allows for feebumping only in anchor output channels.

Overall, the email provides detailed information about various aspects of the scenario, including the channels involved, the replacement mechanism, fee rates, and the significance of preimage knowledge and signature attributes.</summary>
    <published>2023-10-17T18:34:52+00:00</published>
  </entry>
</feed>
