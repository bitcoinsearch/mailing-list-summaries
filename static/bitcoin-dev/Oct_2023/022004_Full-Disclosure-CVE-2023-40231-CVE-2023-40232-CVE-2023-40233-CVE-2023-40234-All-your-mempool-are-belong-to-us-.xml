<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Full Disclosure: CVE-2023-40231 / CVE-2023-40232 / CVE-2023-40233 / CVE-2023-40234 "All your	mempool are belong to us"</title>
  <updated>2023-10-25T17:07:15.389451+00:00</updated>
  <author>
    <name>ZmnSCPxj 2023-10-17 10:34:04+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Full Disclosure: CVE-2023-40231 / CVE-2023-40232 / CVE-2023-40233 / CVE-2023-40234 "All your	mempool are belong to us"</title>
    <updated>2023-10-25T17:07:15.389451+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/022004.html" rel="alternate"/>
    <summary>The email discusses a specific attack scenario in the Lightning Network (LN) and explains it in detail. The attack involves nodes on the LN, represented by letters A, B, and C, connected through channels. The email describes how node A routes transactions from A to B to C. The timelocks are set such that the HTLCs (Hashed Timelock Contracts) have specific expiration times.

The email highlights that this attack is possible if node B has a `cltv_expiry_delta` (the time difference between the current block height and the timelock) of 44 or lower. The attack starts when node C suddenly goes offline, causing all signed transactions, including commitment and HTLC-timeout transactions, to become "stuck" at the feerate (transaction fee rate) at the time they were signed.

At block height 100, node B notices that the HTLC timelock between B and C has expired without C claiming it. As a result, node B forces the B-C channel onto the blockchain. However, due to increased onchain feerates, the commitment and HTLC-timeout transactions do not confirm.

Meanwhile, node A is still online with node B and updates the onchain fees of the A-B channel's pre-signed transactions (commitment and HTLC-timeout) to the latest feerates. At block height 144, node B still cannot claim the A-B HTLC, so node A drops the A-B channel onto the blockchain. Since the fees are up-to-date, this confirmation happens immediately, allowing node A to recover the HTLC funds.

However, the pre-signed transactions for the B-C channel remain at the old, uncompetitive feerates. At this point, node C broadcasts an HTLC-success transaction with high feerates that Child Pays for Parent (CPFP) the commitment transaction. This action replaces the HTLC-timeout transaction, which has a lower feerate.

As a result, node C successfully claims the value of the HTLC, but node B can no longer use the knowledge of the preimage (the secret used in the HTLC) because its own incoming HTLC was already confirmed as claimed by node A.

The email also explains why the HTLC-timeout transaction is pre-signed and why node B cannot feebump it. In the Poon-Dryja mechanism, the HTLCs are "infected" by the Poon-Dryja penalty case, making them different from plain HTLCs. The commitment transaction held by node B includes additional branches for revocation and includes node C in the branch claimable by node B.

To prevent cheating, an HTLC-timeout transaction is introduced, which spends the B-C-OP_CLTV branch and outputs to (B-OP_CSV) or (C-revocation). This means that the HTLC-timeout transaction is pre-signed and has a specific feerate. To change the feerate, both node B and node C must agree to re-sign the HTLC-timeout transaction at a higher feerate.

However, the HTLC-success transaction spends the plain (C-OP_HASH160) branch, which only involves node C. This allows node C to feebump the HTLC-success transaction arbitrarily, even without cooperation from node B.

In conclusion, this attack takes advantage of the specific characteristics of the Lightning Network and the design of HTLCs to exploit nodes in certain scenarios.</summary>
    <published>2023-10-17T10:34:04+00:00</published>
  </entry>
</feed>
