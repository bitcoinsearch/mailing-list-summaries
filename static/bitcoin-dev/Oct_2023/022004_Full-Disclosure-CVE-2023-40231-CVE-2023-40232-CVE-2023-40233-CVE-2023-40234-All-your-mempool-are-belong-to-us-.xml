<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Full Disclosure: CVE-2023-40231 / CVE-2023-40232 / CVE-2023-40233 / CVE-2023-40234 "All your	mempool are belong to us"</title>
  <updated>2023-10-18T01:56:08.654399+00:00</updated>
  <author>
    <name>ZmnSCPxj 2023-10-17 10:34:04+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Full Disclosure: CVE-2023-40231 / CVE-2023-40232 / CVE-2023-40233 / CVE-2023-40234 "All your	mempool are belong to us"</title>
    <updated>2023-10-18T01:56:08.654432+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/022004.html" rel="alternate"/>
    <summary>The email discusses a potential attack on the Lightning Network (LN) and explains the mechanics behind it. The attack involves nodes A, B, and C, connected through channels. The timelocks for the transactions are mentioned, with A-&gt;B having a timelock of 144 and B-&gt;C having a timelock of 100.The attack scenario starts with C going offline after B forwards the HTLC B-&gt;C. All signed transactions, including the commitment transaction and HTLC-timeout transactions, are now "stuck" at the feerate at the time. At block height 100, B notices that the B-&gt;C HTLC timelock has expired without C claiming it, so B forces the B====C channel onchain. However, due to increased onchain feerates, the commitment transaction and HTLC-timeout transaction do not confirm.Meanwhile, node A is still online with B and updates the onchain fees of the A====B channel pre-signed transactions (commitment tx and HTLC-timeout tx) to the latest fees. At block height 144, B is still unable to claim the A-&gt;B HTLC, so A drops the A====B channel onchain. This confirmation happens immediately because the fees are up-to-date, allowing A to recover the HTLC funds.However, the feerates of the B====C pre-signed transactions remain at the old, uncompetitive rates. At this point, C broadcasts an HTLC-success transaction with high feerates that Child-Pays-for-Parent (CPFPs) the commitment tx. By doing this, C replaces the HTLC-timeout transaction, which has a lower feerate. As a result, C successfully claims the value of the HTLC, while B can no longer use the knowledge of the preimage because its own incoming HTLC was already confirmed as claimed by A.The email also explains the reason behind presigning the HTLC-timeout transaction and why B cannot feebump it. In the Poon-Dryja mechanism, the HTLCs are "infected" by the Poon-Dryja penalty case, which adds a revocation branch (C &amp;&amp; revocation) and includes C in the branch claimable by B in the "plain" HTLC (B &amp;&amp; OP_CLTV). These additions prevent B from cheating with an old, revoked transaction.To change the feerate of the HTLC-timeout transaction, both B and C need to agree to re-sign it at a higher feerate. However, the HTLC-success transaction spends the plain (C &amp;&amp; OP_HASH160) branch, involving only C. This allows C to feebump the HTLC-success transaction arbitrarily, even without B's cooperation. The advantage lies with C as they can RBF the HTLC-timeout out of the way with fewer transactions compared to B.In conclusion, the email provides a detailed explanation of the attack scenario on the Lightning Network and the mechanics behind it, including timelocks, channel confirmations, fee updates, and the differences between HTLC-timeout and HTLC-success transactions.</summary>
    <published>2023-10-17T10:34:04+00:00</published>
  </entry>
</feed>
