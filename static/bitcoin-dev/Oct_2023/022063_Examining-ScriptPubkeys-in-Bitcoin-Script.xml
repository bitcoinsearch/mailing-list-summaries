<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Examining ScriptPubkeys in Bitcoin Script</title>
  <updated>2023-10-24T14:54:59.373213+00:00</updated>
  <author>
    <name>Rusty Russell 2023-10-22 04:16:33+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Examining ScriptPubkeys in Bitcoin Script</title>
    <updated>2023-10-24T14:54:59.373245+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/022063.html" rel="alternate"/>
    <summary>The email from Brandon Black discusses the use of scripts in programming and the need for proper evaluation. Brandon mentions that he feels uncomfortable because he has not tested the scripts he has written so far. He also points out that writing scripts without iteration makes it difficult to evaluate N-input, but it would be useful to attempt this in order to gain insights into OP_TXHASH input selection. For example, there could be a mode where all inputs except one are considered.

Brandon also mentions that dealing with satoshi amounts is possible but messy, which will be discussed in his next post. Based on some examples provided, he believes that OP_MULTISHA256 is almost as powerful as OP_CAT, but without the stack limit problems. Additionally, Brandon states that OP_2SHA256 is not sufficient for CScriptNum generation in general, which suggests that using it to save two opcodes would be a premature optimization.

Overall, the email highlights the challenges and considerations related to script evaluation and provides insights into the limitations and potential alternatives to certain operations.</summary>
    <published>2023-10-22T04:16:33+00:00</published>
  </entry>
</feed>
