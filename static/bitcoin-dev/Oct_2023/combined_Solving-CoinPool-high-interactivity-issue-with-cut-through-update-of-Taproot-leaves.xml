<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Solving CoinPool high-interactivity issue with cut-through update of Taproot leaves</title>
  <updated>2023-10-04T01:55:23.703376+00:00</updated>
  <author>
    <name>Johan Tor√•s Halseth 2023-10-03 11:24:20+00:00</name>
  </author>
  <author>
    <name>Antoine Riard 2023-09-26 15:36:26+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-09-26 06:50:50+00:00</name>
  </author>
  <author>
    <name>Antoine Riard 2023-09-25 18:18:36+00:00</name>
  </author>
  <link href="bitcoin-dev/Oct_2023/021978_Solving-CoinPool-high-interactivity-issue-with-cut-through-update-of-Taproot-leaves.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2023/021971_Solving-CoinPool-high-interactivity-issue-with-cut-through-update-of-Taproot-leaves.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2023/021970_Solving-CoinPool-high-interactivity-issue-with-cut-through-update-of-Taproot-leaves.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2023/021969_Solving-CoinPool-high-interactivity-issue-with-cut-through-update-of-Taproot-leaves.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Solving CoinPool high-interactivity issue with cut-through update of Taproot leaves</title>
    <updated>2023-10-04T01:55:23.703463+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/021978.html" rel="alternate"/>
    <summary>The email exchange between Antoine and Johan explores the concept of OP_EVICT in the context of an off-chain payment pool. Antoine mentions that OP_EVICT requires participant cooperation after a state update to allow a single participant to withdraw their funds. However, Antoine raises concerns about the safety of this approach if they want to retain the security requirement that a participant should have the unilateral means to enforce the latest agreed-upon state at any time during the construction lifetime.Antoine expresses his desire for CoinPool to have a level of covenant flexibility and suggests TLUV or MERKLESUB as possible solutions. He also highlights that OP_EVICT introduces the idea of subgroup novation (K-of-N) of a PT2R scriptpubkey. However, he points out that there is currently no sound covenant proposal that combines TLUV and EVICT-like semantics in a consistent set of Script primitives to enable "cut-through" updates while still retaining the key property of unilateral withdrawal of promised balances in any order.Antoine further expresses his interest in understanding if on-chain "cut-through" is the best direction to solve the fundamental high interactivity issue of channel factory and payment pool over punishment-based ideas. He mentions that he might work on crafting a proposal in the future but, for now, seeks a better understanding of the topic.In summary, Antoine's email discusses the concept of OP_EVICT in the context of an off-chain payment pool, raises concerns about its safety, and proposes alternative solutions such as TLUV or MERKLESUB. He also questions the best direction to address the high interactivity issue of channel factory and payment pool.In another email, ZmnSCPxj reaches out to Antoine to inquire about the suitability of using "OP_EVICT" for an unknown purpose. The email lacks contextual information but includes a link to a mailing list archive for further reference.The email then delves into the issue of interactivity constraints in payment pools and channel factories, focusing on off-chain balances. The security of user funds is crucial, and any updates to off-chain balances require unanimous agreement from all users. If a user becomes offline or unresponsive, the updates must be halted, limiting payments to subsets of two users sharing a channel.Various proposed solutions to this problem are discussed, including introducing a coordinator, partitioning or layering balances among off-chain user subsets. However, these solutions introduce the issue of equivocation of off-chain balances.To mitigate equivocation, one suggestion is to punish a cheating pre-nominated coordinator through an external fidelity bond. This approach could potentially remove the need for a coordinator by implementing trust-minimized and decentralized fraud proofs. However, the punishment for equivocation should compensate the defrauded counterparty for the loss of its off-chain balance. The fidelity bond should be equal to (C - 1) * B satoshi amount, where C is the number of construction counterparties and B is the initial off-chain balance of the cheating counterparty.Determining ahead of time which counterparties will be "honest" or "dishonest" during a partition or transition is challenging. Therefore, every counterparty in the pool or factory must maintain a fidelity bond of size (C - 1) * B. However, this mitigation, along with other corrective measures, may not be economically practical for large-scale pools involving anonymous users.The most realistic solution suggested to address the interactivity issue is to prevent off-chain group equivocation proactively. The proposal involves editing the funding utxo of the pool or factory efficiently to register new off-chain subgroups as needed. One existing idea, called CoinPool, includes a user pubkey and balance amount to each leaf composing the Taproot tree while preserving the key-path spend in case of unanimity in the user group.A new idea, potentially called "cut-through" spends, is introduced where multiple leaves are updated with a single witness composed interactively by the owners of the spent leaves. This spend aggregates the amounts and user pubkeys, sending them back to a new single leaf. The user leaves not participating in this "cut-through" maintain their integrity in the new version of the Taproot tree without requiring interactivity from their side.An example scenario involving a CoinPool funded by Alice, Bob, Caroll, Dave, and Eve is provided. If Bob and Eve are offline, the remaining subset (ACD group) can compose a cut-through spend that generates a new leaf aggregating the amounts and pubkeys of the ACD group. Bob's and Eve's leaves remain unmodified. The ACD group can then confirm a transaction spending the pool funding utxo to a new single output committing to the scriptpubkey subgroup. The Eltoo mechanism ensures no non-observable equivocation is possible within the ACD group.Once Bob and Eve come online, they can negotiate an on-chain pool "refresh" transaction using the conserved key-path spend to re-equilibrate the Taproot tree, prune out old subgroups</summary>
    <published>2023-10-03T11:24:20+00:00</published>
  </entry>
</feed>
