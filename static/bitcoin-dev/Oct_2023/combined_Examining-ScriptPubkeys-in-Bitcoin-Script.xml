<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Examining ScriptPubkeys in Bitcoin Script</title>
  <updated>2023-11-01T20:05:05.562799+00:00</updated>
  <author>
    <name>Anthony Towns 2023-10-31 13:05:01+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2023-10-31 02:24:27+00:00</name>
  </author>
  <author>
    <name>James O'Beirne 2023-10-30 16:20:32+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2023-10-28 04:49:30+00:00</name>
  </author>
  <author>
    <name>Anthony Towns 2023-10-27 07:00:36+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2023-10-22 04:16:33+00:00</name>
  </author>
  <author>
    <name>Brandon Black 2023-10-20 14:19:06+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2023-10-20 03:40:37+00:00</name>
  </author>
  <link href="bitcoin-dev/Oct_2023/022105_Examining-ScriptPubkeys-in-Bitcoin-Script.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/022107_Examining-ScriptPubkeys-in-Bitcoin-Script.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/022104_Examining-ScriptPubkeys-in-Bitcoin-Script.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/022103_Examining-ScriptPubkeys-in-Bitcoin-Script.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/022099_Examining-ScriptPubkeys-in-Bitcoin-Script.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/022063_Examining-ScriptPubkeys-in-Bitcoin-Script.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/022037_Examining-ScriptPubkeys-in-Bitcoin-Script.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/022031_Examining-ScriptPubkeys-in-Bitcoin-Script.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Examining ScriptPubkeys in Bitcoin Script</title>
    <updated>2023-11-01T20:05:05.562799+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/022105.html" rel="alternate"/>
    <summary>The email exchange discusses the exploration of different ways to implement vaults and improve the functionality of Bitcoin Script. The sender's goal is to create a usable vault that offers both security and flexibility. They mention considering the use of miniscript and descriptor layers to abstract certain vault patterns for better understanding and implementation.

James O'Beirne shares his thoughts on vaults from a user's perspective. He suggests having a "master" key for emergencies and a "normal" delayed spend key as an ideal setup for users. However, he acknowledges the challenges in implementing vaults, such as limited script delegation, iteration, and amount arithmetic, which are not easily expressible in Bitcoin Script.

The sender mentions their plan to thoroughly review the design decisions of BIP 345, which introduces mechanisms for vaults. They find it interesting to explore the possibility of introducing certain functionality as a new address type instead of using script opcodes. They also highlight the need to evaluate whether the elements of BIP 345 should be part of the OP_VAULT opcode or separate entities.

Rusty Russell expresses his interest in seeing a specific address type designed for vaults. He believes that Bitcoin Script could be more powerful in implementing vaults if a popular use pattern emerged and a new address type was defined for it. However, he acknowledges the limitations of Bitcoin Script and the introduction of separate mechanisms in BIP 345 that are not easily expressible in script.

In addition to vaults, the emails discuss the sender's research on validating Taproot outputs in Bitcoin Script. They invite collaboration and encourage others to join in producing a prototype and debugging script examples. The sender summarizes their findings, stating that by adding certain operations like OP_MULTISHA256, OP_KEYADDTWEAK, and OP_LESS, along with weakening the OP_SUCCESSx rule, it is possible to prove a two-leaf tapscript tree in about 110 bytes of Script. This enables useful spending constraints based on a template approach.

In conclusion, the emails address the confusion and lack of understanding surrounding vaults and propose different approaches to improve their implementation and usability in Bitcoin Script. The sender also shares their research findings on validating Taproot outputs and invites collaboration for further development and testing of their ideas.</summary>
    <published>2023-10-31T13:05:01+00:00</published>
  </entry>
</feed>
