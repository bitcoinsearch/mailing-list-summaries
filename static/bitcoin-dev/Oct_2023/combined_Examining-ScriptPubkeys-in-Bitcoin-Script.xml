<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Examining ScriptPubkeys in Bitcoin Script</title>
  <updated>2023-10-24T14:55:13.603549+00:00</updated>
  <author>
    <name>Rusty Russell 2023-10-22 04:16:33+00:00</name>
  </author>
  <author>
    <name>Brandon Black 2023-10-20 14:19:06+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2023-10-20 03:40:37+00:00</name>
  </author>
  <link href="bitcoin-dev/Oct_2023/022063_Examining-ScriptPubkeys-in-Bitcoin-Script.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/022037_Examining-ScriptPubkeys-in-Bitcoin-Script.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/022031_Examining-ScriptPubkeys-in-Bitcoin-Script.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Examining ScriptPubkeys in Bitcoin Script</title>
    <updated>2023-10-24T14:55:13.603603+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/022063.html" rel="alternate"/>
    <summary>The email discusses the sender's exploration of validating Taproot outputs in Bitcoin Script. They emphasize the need for such functionality in order to create usable vaults. The sender provides a link to a blog post where they have documented their findings on examining scriptPubkey in script.

Additionally, the sender mentions that they are open to collaboration and invite others to join in producing a prototype and debugging their script examples. They suggest adding operations like OP_MULTISHA256, OP_KEYADDTWEAK, and OP_LESS, along with weakening the OP_SUCCESSx rule, to prove a two-leaf tapscript tree in approximately 110 bytes of Script. This approach enables useful spending constraints based on a template approach.

The sender also proposes an alternative direction to the OP_UNVAULT method, which replaces a specific leaf in the taptree in a specific way. They highlight the benefits of OP_UNVAULT, such as the ability to unvault multiple inputs sharing the same scriptPubkey to the same output. However, the sender agrees that a more generic construction is needed and suggests considering the benefits of OP_CAT or OP_2SHA256 for BitVM.

In conclusion, the email focuses on the sender's research on validating Taproot outputs in Bitcoin Script and their interest in collaborating with others to further develop and test their ideas.</summary>
    <published>2023-10-22T04:16:33+00:00</published>
  </entry>
</feed>
