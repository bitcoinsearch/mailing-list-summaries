<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Examining ScriptPubkeys in Bitcoin Script</title>
  <updated>2023-10-21T01:54:33.147831+00:00</updated>
  <author>
    <name>Brandon Black 2023-10-20 14:19:06+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2023-10-20 03:40:37+00:00</name>
  </author>
  <link href="bitcoin-dev/Oct_2023/022037_Examining-ScriptPubkeys-in-Bitcoin-Script.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/022031_Examining-ScriptPubkeys-in-Bitcoin-Script.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Examining ScriptPubkeys in Bitcoin Script</title>
    <updated>2023-10-21T01:54:33.147876+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/022037.html" rel="alternate"/>
    <summary>In an email exchange, the sender proposes an alternative direction to OP_UNVAULT, which is a more constrained method that replaces a specific leaf in the taptree. The sender acknowledges the benefits of OP_UNVAULT, such as the ability to unvault multiple inputs sharing the same scriptPubkey to the same output. However, they start pondering this alternative direction in response to discussions about the benefits of OP_CAT or OP_2SHA256 for BitVM.The sender suggests using OP_TAGGEDCATHASH, which would pop a tag and a number of elements to hash, then tagged-hashes the following 'n' elements from the stack. They believe this approach is needed for usable vaults and refers to a blog post they have written on the topic. They also invite collaboration to produce a prototype and debug their script examples.In the TL;DR section of the email, the sender outlines the requirements for validating Taproot outputs in Bitcoin Script. They mention the use of OP_TXHASH/OP_TX to push a scriptPubkey on the stack, along with additional operations like OP_MULTISHA256 (or OP_CAT), OP_KEYADDTWEAK, and OP_LESS (or OP_CONDSWAP). They propose soft-fork weakening of the OP_SUCCESSx rule (or pop-script-from-stack) to prove a two-leaf tapscript tree in about 110 bytes of Script. This approach allows for useful spending constraints based on a template approach.The email concludes with a thank you from Rusty and includes a link to their blog post for further reference.</summary>
    <published>2023-10-20T14:19:06+00:00</published>
  </entry>
</feed>
