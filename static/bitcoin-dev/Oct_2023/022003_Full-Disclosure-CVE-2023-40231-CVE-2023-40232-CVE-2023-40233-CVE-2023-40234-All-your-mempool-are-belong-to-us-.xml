<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Full Disclosure: CVE-2023-40231 / CVE-2023-40232 / CVE-2023-40233 / CVE-2023-40234 "All your mempool are belong to us"</title>
  <updated>2023-10-18T01:55:27.418749+00:00</updated>
  <author>
    <name>Antoine Riard 2023-10-17 01:11:20+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Full Disclosure: CVE-2023-40231 / CVE-2023-40232 / CVE-2023-40233 / CVE-2023-40234 "All your mempool are belong to us"</title>
    <updated>2023-10-18T01:55:27.418783+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/022003.html" rel="alternate"/>
    <summary>This email discusses the scenario where two parties can spend the same HTLC (Hashed Time-Lock Contract) transaction output, even if the first party does not have the right to spend it based on their knowledge of the HTLC preimage. The question being asked is why there is a situation where the spending of an HTLC output can be in competition between the two channel counterparties.In Lightning Network (LN) commitment transactions, HTLC outputs are used, where one counterparty, Alice, pledges the HTLC amount to the other counterparty, Caroll, in exchange for a preimage and Caroll's signature. If the HTLC is not claimed on-chain by Caroll before the expiration of the HTLC timelock, Alice can claim it back with her signature and the pre-exchanged Caroll signature.The exploit works by Caroll using her HTLC preimage transaction as a replace-by-fee of Alice's HTLC timeout after the timelock has expired. This means that Caroll can replace Alice's HTLC timeout transaction in the mempool, and there are no mempool policy rules preventing this. The HTLC preimage transaction remains consensus valid, and there are no spend candidates remaining for the HTLC output in this block.If Caroll successfully repeats this replacement process until an inbound HTLC on another channel belonging to Alice expires, the "forward" HTLC can be double-spent.Overall, this email highlights the issue of double-spending in the context of HTLC outputs and how it can occur due to the ability to replace transactions in the mempool.</summary>
    <published>2023-10-17T01:11:20+00:00</published>
  </entry>
</feed>
