<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposed BIP for OP_CAT</title>
  <updated>2023-10-22T01:59:33.805905+00:00</updated>
  <author>
    <name>Ethan Heilman 2023-10-21 20:24:29+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposed BIP for OP_CAT</title>
    <updated>2023-10-22T01:59:33.805929+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/022057.html" rel="alternate"/>
    <summary>The email conversation is about the tapscript opcode and its limitations. The sender, Ethan, clarifies that the limit mentioned in the previous email is not unique to tapscript but rather a feature of the OP_CAT opcode. Tapscript enforces a 520 byte element size, which ensures that there are no concerns about OP_CAT creating very large stack elements.Ethan acknowledges Greg's input on this matter and expresses his gratitude for pointing out that the limit was added in the same commit that removed OP_CAT. He admits that he had thought the limit was a more recent addition. Upon reading through the commit, Ethan discovers that it also reduced the size limit on inputs to arithmetic operations (nMaxNumSize) from 2064-bits to 32-bits. He mentions that he had always assumed it was 32-bits from the beginning.Ethan concludes the email by expressing his amusement at the idea of having math opcodes that support 2064-bit inputs and outputs. He thanks Greg for bringing these details to his attention.(Note: The farewell part of the email has been ignored as per the instructions.)</summary>
    <published>2023-10-21T20:24:29+00:00</published>
  </entry>
</feed>
