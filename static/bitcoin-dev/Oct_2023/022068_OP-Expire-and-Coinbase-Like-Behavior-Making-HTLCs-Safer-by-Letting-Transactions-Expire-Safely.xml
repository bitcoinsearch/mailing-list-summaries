<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>OP_Expire and Coinbase-Like Behavior: Making HTLCs Safer by Letting Transactions Expire Safely</title>
  <updated>2023-10-24T14:55:37.324751+00:00</updated>
  <author>
    <name>ZmnSCPxj 2023-10-23 11:10:56+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>OP_Expire and Coinbase-Like Behavior: Making HTLCs Safer by Letting Transactions Expire Safely</title>
    <updated>2023-10-24T14:55:37.324781+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/022068.html" rel="alternate"/>
    <summary>The email discusses an alternate design proposal for taproot annex. The proposed design includes adding an `nExpiryTime` field in the taproot annex, which indicates that the transaction must not exist in a block at or above the specified height. The mempool should categorize transactions into buckets based on their `nExpiryTime`, and when a block is reached, all buckets with an `nExpiryTime` less than that block height should be dropped. Additionally, the proposal suggests adding an `OP_CHECKEXPIRYTIMEVERIFY` opcode, which checks if the `nExpiryTime` exists and has a value equal to or less than the top of the stack.

The primary difference between this proposal and the one suggested by Peter Todd is that while Peter's proposal introduces an implicit field for the value that `OP_EXPIRE` will put in `CTransaction`, this proposal suggests an explicit field for it in the taproot annex. The rationale behind this choice is that "explicit is better than implicit", and it is believed that non-Bitcoin-core implementations would be able to implement the design more effectively with the use of transaction buckets being explicitly treated in the `nExpiryTime` field.

Overall, the email presents an alternative design approach for taproot annex, highlighting the inclusion of an `nExpiryTime` field and an `OP_CHECKEXPIRYTIMEVERIFY` opcode, aiming for a more explicit and potentially better-implemented solution.</summary>
    <published>2023-10-23T11:10:56+00:00</published>
  </entry>
</feed>
