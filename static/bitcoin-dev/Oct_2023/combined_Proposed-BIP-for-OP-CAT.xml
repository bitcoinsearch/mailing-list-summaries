<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Proposed BIP for OP_CAT</title>
  <updated>2023-10-22T02:00:01.635052+00:00</updated>
  <author>
    <name>Ethan Heilman 2023-10-21 20:24:29+00:00</name>
  </author>
  <author>
    <name>Greg Sanders 2023-10-21 16:10:00+00:00</name>
  </author>
  <author>
    <name>Andrew Poelstra 2023-10-21 15:03:07+00:00</name>
  </author>
  <author>
    <name>alicexbt 2023-10-21 05:49:59+00:00</name>
  </author>
  <author>
    <name>Ethan Heilman 2023-10-21 05:08:03+00:00</name>
  </author>
  <link href="bitcoin-dev/Oct_2023/022057_Proposed-BIP-for-OP-CAT.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/022056_Proposed-BIP-for-OP-CAT.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/022055_Proposed-BIP-for-OP-CAT.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/022053_Proposed-BIP-for-OP-CAT.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/022049_Proposed-BIP-for-OP-CAT.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Proposed BIP for OP_CAT</title>
    <updated>2023-10-22T02:00:01.635108+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/022057.html" rel="alternate"/>
    <summary>In a recent email conversation, Greg pointed out to Ethan that there is no need to worry about creating very large stack elements with the OP_CAT opcode in tapscript because tapscript enforces a maximum stack element size of 520 bytes. Ethan thanked Greg for bringing this to his attention and mentioned that he thought this limit was added in the same commit that removed the OP_CAT opcode. Ethan also discovered that the size limit on inputs to arithmetic operations (nMaxNumSize) was reduced from 2064 bits to 32 bits in the same commit.Ethan shared a link to a draft BIP proposing the enabling of OP_CAT as a tapscript opcode. The BIP defines OP_CAT as an opcode that concatenates two values on the stack. OP_CAT would be activated via a soft fork by redefining the opcode OP_SUCCESS80. When evaluated, OP_CAT pops the top two values off the stack, concatenates them together, and pushes the concatenated value onto the top of the stack. OP_CAT fails if there are less than two values on the stack or if the concatenated value would have a combined size greater than the maximum script element size of 520 bytes.The motivation behind introducing OP_CAT is to provide a general-purpose way of combining objects on the stack in tapscript. This would increase the functionality of tapscript and enable the construction and evaluation of merkle trees and other hashed data structures. Ethan listed several use cases for OP_CAT, including tree signatures, post-quantum Lamport signatures, non-equivocation contracts, vaults, and replicating CheckSigFromStack. He emphasized that OP_CAT is a simple but powerful opcode that would greatly enhance tapscript.Ethan acknowledged that there may be a temptation to bundle other opcodes with OP_CAT, but he suggested sticking with "just CAT" due to the potential for endless discussion and controversy surrounding additional opcodes. He referred to Matt's "consensus cleanup" BIP from a few years ago, which faced pushback despite containing only four small changes.Overall, the introduction of OP_CAT as a tapscript opcode would provide significant value and expand the capabilities of tapscript developers. It would enable various advanced features and protocols in Bitcoin, such as tree signatures, Lamport signatures, non-equivocation contracts, vaults, and simplified covenants. The removal of the size limit issue makes OP_CAT a viable option for enhancing tapscript functionality.Note: The farewell part of the email has been ignored as per the given rules.</summary>
    <published>2023-10-21T20:24:29+00:00</published>
  </entry>
</feed>
