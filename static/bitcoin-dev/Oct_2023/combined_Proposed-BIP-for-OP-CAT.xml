<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Proposed BIP for OP_CAT</title>
  <updated>2023-10-23T01:56:58.927779+00:00</updated>
  <author>
    <name>vjudeu at gazeta.pl 2023-10-22 08:58:07+00:00</name>
  </author>
  <author>
    <name>Ethan Heilman 2023-10-21 20:24:29+00:00</name>
  </author>
  <author>
    <name>Greg Sanders 2023-10-21 16:10:00+00:00</name>
  </author>
  <author>
    <name>Andrew Poelstra 2023-10-21 15:03:07+00:00</name>
  </author>
  <author>
    <name>alicexbt 2023-10-21 05:49:59+00:00</name>
  </author>
  <author>
    <name>Ethan Heilman 2023-10-21 05:08:03+00:00</name>
  </author>
  <link href="bitcoin-dev/Oct_2023/022062_Proposed-BIP-for-OP-CAT.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/022057_Proposed-BIP-for-OP-CAT.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/022056_Proposed-BIP-for-OP-CAT.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/022055_Proposed-BIP-for-OP-CAT.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/022053_Proposed-BIP-for-OP-CAT.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/022049_Proposed-BIP-for-OP-CAT.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Proposed BIP for OP_CAT</title>
    <updated>2023-10-23T01:56:58.927863+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/022062.html" rel="alternate"/>
    <summary>In a recent email conversation, the topic of discussion is the tapscript opcode and its limitations. The sender clarifies that the limit mentioned in the previous email is not unique to tapscript but rather a feature of the OP_CAT opcode. Tapscript enforces a maximum stack element size of 520 Bytes, which ensures that there are no concerns about OP_CAT creating very large stack elements.The sender acknowledges Greg's input on this matter and expresses gratitude for pointing out that the limit was added in the same commit that removed OP_CAT. They admit that they had thought the limit was a more recent addition. Upon reading through the commit, the sender discovers that it also reduced the size limit on inputs to arithmetic operations (nMaxNumSize) from 2064-bits to 32-bits. They mention that they had always assumed it was 32-bits from the beginning.The sender concludes the email by expressing amusement at the idea of having math opcodes that support 2064-bit inputs and outputs. They thank Greg for bringing these details to their attention.Moving on to another email, the conversation revolves around a draft BIP (Bitcoin Improvement Proposal) that has been posted to propose enabling OP_CAT as a Tapscript opcode. The opcode allows the concatenation of two values on the stack. When evaluated, it pops the top two values off the stack, concatenates them together, and pushes the concatenated value back onto the stack. However, it fails if there are less than two values on the stack or if the concatenated value would exceed the maximum script element size of 520 Bytes.The motivation behind introducing OP_CAT is to overcome the limitation of Bitcoin tapscript lacking a general purpose way of combining objects on the stack. This restriction limits the expressiveness and power of tapscript, including the ability to construct and evaluate merkle trees and other hashed data structures. OP_CAT aims to expand the functionality of tapscript by providing a simple, modular, and useful opcode.The email provides a non-exhaustive list of use cases that OP_CAT would enable, including tree signatures, post-quantum Lamport signatures in Bitcoin transactions, non-equivocation contracts in tapscript, vaults, and replicating CheckSigFromStack. Each use case is briefly explained to demonstrate the usefulness and potential of OP_CAT.It is mentioned that OP_CAT was available in early versions of Bitcoin but was removed due to the potential for creating stack elements exponential in size. However, this limitation is no longer an issue as Tapscript now enforces a maximum stack element size of 520 Bytes.The specification for implementing OP_CAT is provided, which includes checking the stack size, concatenating the values, and pushing the result onto the stack. The value of MAX_SCRIPT_ELEMENT_SIZE is stated to be 520 Bytes.Several references are mentioned in the email, including a link to the draft BIP, a book on program design in the UNIX environment, articles related to multisig on steroids using tree signatures and OP_CAT making Bitcoin quantum secure, a research paper on penalizing equivocation by loss of Bitcoins, a paper on Bitcoin covenants, and a resource on covenants with CAT and ECDSA.In conclusion, the email conversation covers the topic of enabling OP_CAT as a Tapscript opcode, its motivation, use cases, and implementation specifications. It provides a comprehensive overview of the proposal and includes various references for further exploration of the subject matter.</summary>
    <published>2023-10-22T08:58:07+00:00</published>
  </entry>
</feed>
