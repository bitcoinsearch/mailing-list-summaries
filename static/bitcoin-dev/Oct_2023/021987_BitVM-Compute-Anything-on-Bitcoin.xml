<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BitVM: Compute Anything on Bitcoin</title>
  <updated>2023-10-11T01:53:04.017485+00:00</updated>
  <author>
    <name>symphonicbtc 2023-10-10 01:12:28+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BitVM: Compute Anything on Bitcoin</title>
    <updated>2023-10-11T01:53:04.017527+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/021987.html" rel="alternate"/>
    <summary>Symphonic, I appreciate your interest in the development of arbitrary smart contracts on bitcoin. You have raised some important questions that I will address one by one.Firstly, regarding the implementation of a high-level language for these smart contracts, I am considering the possibility of either creating a new language or adapting an existing virtual machine (VM) to compile down to these scripts. This would provide developers with a more workable environment to test and experiment with these contracts. I believe many individuals would find this approach valuable.Secondly, you inquire about the computational costs associated with establishing the tapleaves for these scripts. Specifically, you are interested in whether complex operations like ECDSA signature checking can be performed feasibly. While it is a valid concern that hardware requirements may pose a barrier to widespread adoption, I aim to ensure that the technology remains accessible. However, the exact costs and feasibility depend on various factors and require further investigation.Next, you raise the question of implementing existing zero-knowledge proof (ZKP) constructs on BitVM. You suggest that using a ZKP VM to verify programs written in BitVM could simplify the verification process. This is an interesting idea and warrants exploration. Integrating ZKP constructs into BitVM could potentially enhance the security and efficiency of program verification.Lastly, you inquire about the expected costs of resolving fraud in a program. While the exact costs depend on the specific circumstances of each program, I understand your request for examples to aid comprehension. I will work on providing some simple program scenarios that illustrate how fraud resolution might unfold. This will help clarify the potential costs involved in such cases.Thank you for reaching out and raising these thought-provoking questions. Your input is valuable as it helps shape the development of this project. If you have any further inquiries or suggestions, please feel free to share them.</summary>
    <published>2023-10-10T01:12:28+00:00</published>
  </entry>
</feed>
