<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Scaling Lightning With Simple Covenants</title>
  <updated>2023-10-30T19:18:03.124090+00:00</updated>
  <author>
    <name>jlspc 2023-10-06 16:26:33+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Scaling Lightning With Simple Covenants</title>
    <updated>2023-10-30T19:18:03.131398+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/004121.html" rel="alternate"/>
    <summary>In this email, John discusses various aspects related to Lightning network and channel resizing. He mentions that hierarchical channels allow the usage of Hashed Time-Lock Contracts (HTLCs) to send Lightning channel capacity over the Lightning network. This enables channel resizing off-chain between channels that are not in the same pool.

John also highlights an important issue regarding the fragmentation costs imposed by a casual user going on-chain in the case of a timeout-tree. He suggests addressing this problem by making the casual user pay the funder for the fragmentation costs. To do this, he proposes requiring casual users to reveal secrets (hash preimages) that only they know in order to put timeout-tree transactions on-chain. Additionally, a fee-penalty output is added to each leaf transaction to compensate the funding user for the transactions placed on-chain by the casual user.

Another point mentioned by John is the advantage of passive rollovers. He believes that performing passive rollovers instead of active ones can eliminate the risk of HTLC-withholding attacks. Passive rollovers do not require the use of the Lightning network, thus reducing the risk.

Regarding the issue of cutting through to reduce the on-chain footprint in mass exit cases, John refers to it as an open problem without specific solutions mentioned in the references provided. However, he introduces the concept of "short-cut" transactions, which are proposed as a way to address the logarithmic blow-up of putting a control transaction defined by a covenant tree on-chain. These transactions are explained in Section 5.4 and pictured in Figure 14 of the revised version of the paper.

John also clarifies that there is no scenario where multiple commitment transactions can spend an output from the same state transaction. Each user's State transaction can only be spent by their own Commitment transaction, and each Commitment transaction requires signatures from all users in the hierarchical channel.

In conclusion, John provides insights into various aspects of Lightning network, channel resizing, fragmentation costs, passive rollovers, and addressing mass exit cases. He also acknowledges the importance of the protocols discussed and expresses gratitude for the deep-dive analysis.</summary>
    <published>2023-10-06T16:26:33+00:00</published>
  </entry>
</feed>
