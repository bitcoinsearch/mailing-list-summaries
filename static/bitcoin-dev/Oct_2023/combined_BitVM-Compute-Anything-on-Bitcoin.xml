<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - BitVM: Compute Anything on Bitcoin</title>
  <updated>2023-10-16T01:56:06.288232+00:00</updated>
  <author>
    <name>ZmnSCPxj 2023-10-15 15:15:49+00:00</name>
  </author>
  <author>
    <name>Anthony Towns 2023-10-10 01:27:08+00:00</name>
  </author>
  <author>
    <name>symphonicbtc 2023-10-10 01:12:28+00:00</name>
  </author>
  <author>
    <name>Lloyd Fournier 2023-10-10 01:06:10+00:00</name>
  </author>
  <author>
    <name>Robin Linus 2023-10-09 13:46:24+00:00</name>
  </author>
  <link href="bitcoin-dev/Oct_2023/021997_BitVM-Compute-Anything-on-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/021985_BitVM-Compute-Anything-on-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/021987_BitVM-Compute-Anything-on-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/021986_BitVM-Compute-Anything-on-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/021984_BitVM-Compute-Anything-on-Bitcoin.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - BitVM: Compute Anything on Bitcoin</title>
    <updated>2023-10-16T01:56:06.288439+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/021997.html" rel="alternate"/>
    <summary>In the email, LL discusses an interesting concept related to Scriptless Script BitVM. They propose the idea of replacing hashes and preimages with points and scalars in order to achieve N-bit claims using NAND circuits. The example provided involves the use of prover and verifier entities, where the prover asserts a solution and the verifier issues challenges that the prover must consistently respond to if the solution is correct.The email outlines the structure of the circuit, which consists of individual assertions with two inputs and a single output. Each assertion is encoded as tapleafs, allowing spending a transaction via that tapleaf to validate the individual assertion. Additionally, there is an additional tapleaf per input/assertion that allows the verifier to claim the funds immediately if the prover ever provides inconsistent values for an input or the result of an assertion.The email also discusses the potential optimization of collapsing the circuit down to `MuSig(P, V)` and having the verifier provide individual adaptor signatures. This would eliminate the need for Schnorr signatures and Tapleaves, making BitVM completely invisible on the blockchain.Overall, the email delves into the concept of using NAND circuits and tapleafs to validate N-bit claims, explores the prover/challenger model, and suggests potential optimizations and challenges in implementing this approach.</summary>
    <published>2023-10-15T15:15:49+00:00</published>
  </entry>
</feed>
