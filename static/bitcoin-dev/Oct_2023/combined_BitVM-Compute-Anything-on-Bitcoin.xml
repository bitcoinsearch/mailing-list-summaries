<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - BitVM: Compute Anything on Bitcoin</title>
  <updated>2023-10-11T01:53:19.080925+00:00</updated>
  <author>
    <name>Anthony Towns 2023-10-10 01:27:08+00:00</name>
  </author>
  <author>
    <name>symphonicbtc 2023-10-10 01:12:28+00:00</name>
  </author>
  <author>
    <name>Lloyd Fournier 2023-10-10 01:06:10+00:00</name>
  </author>
  <author>
    <name>Robin Linus 2023-10-09 13:46:24+00:00</name>
  </author>
  <link href="bitcoin-dev/Oct_2023/021985_BitVM-Compute-Anything-on-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/021987_BitVM-Compute-Anything-on-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/021986_BitVM-Compute-Anything-on-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/021984_BitVM-Compute-Anything-on-Bitcoin.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - BitVM: Compute Anything on Bitcoin</title>
    <updated>2023-10-11T01:53:19.080990+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/021985.html" rel="alternate"/>
    <summary>BitVM is a computing paradigm that allows for the expression of Turing-complete Bitcoin contracts without making any changes to the network's consensus rules. It enables the verification of any computable function on Bitcoin by allowing a prover to make a claim about a specific function's inputs and outputs. If the claim is false, the verifier can provide a succinct fraud proof and punish the prover.One interesting aspect of BitVM is that it doesn't execute computations on Bitcoin itself, but rather verifies them, similar to optimistic rollups. This means that complex, stateful off-chain computation can be performed between both parties involved without leaving a trace on the blockchain. On-chain execution only comes into play in case of a dispute.Committing to a large program in a Taproot address using BitVM requires significant off-chain computation and communication. However, the resulting on-chain footprint is minimal. This allows for collaboration and the ability to perform complex computation without bloating the blockchain.In terms of implementation, there are a few questions raised in the email exchange. Firstly, there is a question about implementing a high-level language or adapting an existing virtual machine (VM) to compile scripts for BitVM. This would make it more accessible for testing and experimentation. Additionally, there are concerns about the computational costs of establishing tapleaves for these scripts and whether complex operations like ECDSA signature checking are feasible.Another question raised is whether existing zero-knowledge proof constructs can be implemented on BitVM, which could potentially simplify verification. Instead of directly verifying programs with BitVM, the idea is to have programs written in a ZKP VM, and then have the proof verification executed on BitVM.Lastly, there is a query about the expected costs of resolving fraud for a program. While this would depend on the specific circumstances of the program, some examples would be helpful in understanding how this process might unfold for simpler programs.Overall, BitVM offers an intriguing approach to enabling arbitrary smart contracts on the Bitcoin network, and further exploration and experimentation will shed more light on its capabilities and potential use cases.</summary>
    <published>2023-10-10T01:27:08+00:00</published>
  </entry>
</feed>
