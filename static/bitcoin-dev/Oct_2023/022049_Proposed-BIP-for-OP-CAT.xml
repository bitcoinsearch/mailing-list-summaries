<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposed BIP for OP_CAT</title>
  <updated>2023-10-22T01:59:53.995295+00:00</updated>
  <author>
    <name>Ethan Heilman 2023-10-21 05:08:03+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposed BIP for OP_CAT</title>
    <updated>2023-10-22T01:59:53.995320+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/022049.html" rel="alternate"/>
    <summary>A draft BIP has been posted proposing the enabling of OP_CAT as a Tapscript opcode. The opcode was available in early versions of Bitcoin but was disabled due to the potential for creating stack elements exponential in size. However, this is no longer an issue as Tapscript now enforces a maximum stack element size of 520 Bytes.The proposed OP_CAT opcode allows the concatenation of two values on the stack. When evaluated, it pops the top two values off the stack, concatenates them together, and pushes the concatenated value back onto the stack. It fails if there are less than two values on the stack or if the concatenated value would exceed the maximum script element size.The motivation behind introducing OP_CAT is to overcome the limitation of Bitcoin tapscript lacking a general purpose way of combining objects on the stack. This restriction limits the expressiveness and power of tapscript, including the ability to construct and evaluate merkle trees and other hashed data structures. OP_CAT aims to expand the functionality of tapscript by providing a simple, modular, and useful opcode.Some use cases enabled by OP_CAT include tree signatures, which allow for multisignature scripts with a logarithmic size in the number of public keys, and the ability to encode generalized logical spend conditions. Additionally, it enables the use of non-equivocation contracts in tapscript, which provide a mechanism to punish equivocation/double spending in Bitcoin payment channels. OP_CAT is also sufficient to build vaults, specialized covenants that block malicious parties from stealing funds in compromised outputs.The opcode was previously available but removed due to the potential for memory usage exponential in size. However, this is no longer a concern as Tapscript enforces a maximum stack element size of 520 Bytes. The specification for implementing OP_CAT includes checking the stack size, concatenating the values, and pushing the result onto the stack.For further details and references related to OP_CAT and its proposed implementation, please refer to the following links:- [Draft BIP](https://github.com/EthanHeilman/op_cat_draft/blob/main/cat.mediawiki)- [Unix Environment paper](https://harmful.cat-v.org/cat-v/unix_prog_design.pdf)- [CheckSigFromStack for Arithmetic Values](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-July/019233.html)- [Penalizing Equivocation by Loss of Bitcoins](https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.727.6262&amp;rep=rep1&amp;type=pdf)- [Merkle Trees and Generalized Consensus](http://fc16.ifca.ai/bitcoin/papers/MES16.pdf)- [CAT and Schnorr Tricks II](https://www.wpsoftware.net/andrew/blog/cat-and-schnorr-tricks-ii.html)- [CAT and Schnorr Tricks I](https://medium.com/blockstream/cat-and-schnorr-tricks-i-faf1b59bd298)- [Covenants with ECDSA](https://gist.github.com/RobinLinus/9a69f5552be94d13170ec79bf34d5e85file-covenants_cat_ecdsa-md)</summary>
    <published>2023-10-21T05:08:03+00:00</published>
  </entry>
</feed>
