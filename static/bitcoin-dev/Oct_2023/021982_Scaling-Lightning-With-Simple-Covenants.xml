<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Scaling Lightning With Simple Covenants</title>
  <updated>2023-10-07T01:51:55.457553+00:00</updated>
  <author>
    <name>jlspc 2023-10-06 16:26:33+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Scaling Lightning With Simple Covenants</title>
    <updated>2023-10-07T01:51:55.457596+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/021982.html" rel="alternate"/>
    <summary>In the email, John discusses various aspects related to Lightning network and channel resizing. He mentions that hierarchical channels can utilize HTLCs (Hashed Time-Locked Contracts) to send Lightning channel capacity over the Lightning network. This enables channel resizing off-chain between channels that are not in the same pool.John highlights an important issue regarding fragmentation costs imposed by a casual user going on-chain. He proposes a solution where the casual user pays the funder for the fragmentation costs by revealing secrets (hash preimages) known only to them. In this new version of the paper, John includes a description of how this can be done.Another point mentioned by John is the use of passive rollovers instead of active ones to eliminate the risk of HTLC-withholding attacks. Passive rollovers do not require the use of the Lightning network and are added as an advantage in the latest version of the paper.John also addresses the problem of reducing the on-chain footprint in mass exit cases. While it is listed as an open problem, he does not find any specific solutions in the referenced material. However, he introduces the concept of "short-cut" transactions, which are proposed to address the logarithmic blow-up of putting a control transaction defined by a covenant tree on-chain.Additionally, John clarifies that there is no case where multiple commitment transactions can spend an output from the same state transaction. Each user's state transaction can only be spent by their respective commitment transaction, and each commitment transaction requires signatures from all users involved in the hierarchical channel.In conclusion, John appreciates the recipient's effort in exploring these protocols and signs off with regards.Note: All the links provided in the original email have been retained and included as-is in the summary.</summary>
    <published>2023-10-06T16:26:33+00:00</published>
  </entry>
</feed>
