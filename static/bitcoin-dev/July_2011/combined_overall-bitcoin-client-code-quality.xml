<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - overall bitcoin client code quality</title>
  <updated>2023-05-18T21:40:50.003003+00:00</updated>
  <author>
    <name>Gregory Maxwell 2011-07-12 23:40:46</name>
  </author>
  <author>
    <name>Matt Corallo 2011-07-10 23:36:53</name>
  </author>
  <author>
    <name>Matt Corallo 2011-07-13 00:17:59</name>
  </author>
  <link href="bitcoin-dev/July_2011/000179_overall-bitcoin-client-code-quality.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2011/000170_overall-bitcoin-client-code-quality.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2011/000180_overall-bitcoin-client-code-quality.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - overall bitcoin client code quality</title>
    <updated>2023-05-18T21:40:50.003003+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-July/000179.html" rel="alternate"/>
    <summary>The developers of Bitcoin have been discussing code quality and the need for improvement through email conversations. One developer suggests that every class should be able to stand on its own, allowing for easier reuse in other projects or situations in the same project. However, another developer points out that talk is cheap, and opinions have no weight unless they are backed up with actual code. The critical logic for Bitcoin is the blockchain validation logic, which must make identical decisions on all nodes and has many corner cases that are challenging to test and might expose behavioral differences.Michael Offel raises concerns about the lack of code documentation, the need for clearer splitting of the code, isolation issues for modules with no defined interface, and poor use of threads, which eliminates nearly every performance advantage and introduces difficulty in writing bug-free code. The response to these concerns is that they are part of the next development goals for Bitcoin. The locks will become specific to the object, and modularization of the code will occur to improve code cleanliness and quality.Bitcoin's code quality needs improvement to fix issues like long build times, hardcoded values, lack of module isolation, and poor coding style. One suggestion is to remove all threads and critical sections to build a sequential model for better performance and clarity. Boost is considered a non-standard dependency that could be replaced with pthread or platform-dependent startthread and mutex. Hardcoded values for chain-related settings can be moved to a chain description file to allow custom chains and clean up the code, though its implementation has been questioned. A complete rewrite of Bitcoin is not necessary as most of the code is fine despite its global usage and poorly-implemented RPC/net/etc. However, the official Bitcoin client should be extra clean and well-documented as it serves as a reference project for other clients. It is not feasible for one person who is new to the code to undertake such a task alone.The Bitcoin code base is not as messy as it seems, but its lack of clear lines between classes makes it appear so. If rewritten for a more optimized handling of p2p connections, it would be appreciated and merged. Db4 is an excellent choice if you need indexed database functionality without SQL interface, but compared to an stl map lookup and fopen, fwrite and fclose, it is much harder to understand and brings a lot of performance overhead. There is no good in running multiple chains for production use. To share the difficulty is indeed a good start to solve the problem. The transaction fee handling needs a rethinking and recoding, but offering each user the option to just relay every transaction off the wire is not an option. Trying to fix bugs on an old codebase while rewriting a new one is worthless and just creating way more effort than is necessary.</summary>
    <published>2011-07-12T23:40:46+00:00</published>
  </entry>
</feed>
