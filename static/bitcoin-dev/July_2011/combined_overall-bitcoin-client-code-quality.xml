<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - overall bitcoin client code quality</title>
  <updated>2023-05-18T22:38:12.631359+00:00</updated>
  <author>
    <name>Gregory Maxwell 2011-07-12 23:40:46</name>
  </author>
  <author>
    <name>Matt Corallo 2011-07-10 23:36:53</name>
  </author>
  <author>
    <name>Matt Corallo 2011-07-13 00:17:59</name>
  </author>
  <link href="bitcoin-dev/July_2011/000179_overall-bitcoin-client-code-quality.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2011/000170_overall-bitcoin-client-code-quality.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2011/000180_overall-bitcoin-client-code-quality.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - overall bitcoin client code quality</title>
    <updated>2023-05-18T22:38:12.631359+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-July/000179.html" rel="alternate"/>
    <summary>A discussion about the code quality and cleanup plan of the Bitcoin code was initiated by Michael Offel. It was pointed out that there is a lack of code documentation, class hierarchy, method descriptions, and thoughts in the code. The use of global variables, public member variables in classes, and global external functions make understanding the code much harder. To address these issues, it was suggested that well-defined interfaces should be used to communicate between modules. The poor use of threads was also highlighted as it eliminates nearly every performance advantage and introduces a high difficulty in writing bug-free code. The critical logic of blockchain validation needs new, clean, secondary implementations and good automatic testing shims which can find inconsistencies between implementations. A proposal about reimplementing parts as libraries and switching to them after validating them was given. The locks will become specific to the object with general code cleanup and modularization.Although the current Bitcoin code quality is prone to bugs, a complete rewrite would not be efficient. Rather, the code can be slowly changed over time in a clean and independent fashion. It is important for the official Bitcoin client to be a reference project for other clients and must therefore be extra clean and well-documented. There is a central hub infrastructure being worked on to allow net/main/wallet/etc to subscribe to new blocks/txes/etc and push new information. The Bitcoin code base is not messy, but lacks clear lines between classes. It does some things inefficiently, but its general algorithms are quite good as they stand. The backend could probably benefit from a ground-up rewrite for optimized handling of p2p connections. BDB offers a good mix compared to a SQL-driven library, as it has a lighter-weight footprint and provides good database transactioning, which Bitcoin depends on under certain circumstances. There is no real reason to encourage improperly-implemented alternate chains, and the parameters for adjustable settings are available, though they do not show up in --help output. Transaction fee handling needs a recoding, but offering each user the option to just relay every transaction off the wire is not an option. Fixing bugs on an old codebase while rewriting a new one is worthless and creates unnecessary effort.</summary>
    <published>2011-07-12T23:40:46+00:00</published>
  </entry>
</feed>
